
DisplayPractice.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000068d0  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008a00  80008a00  00008e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00025ed4  80008c00  80008c00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8002ead4  8002ead4  0002eed4  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000530  00000008  8002ead8  0002f008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000140  00000538  00000538  00000000  2**2
                  ALLOC
  9 .heap         0000e988  00000678  00000678  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0002f538  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000aa8  00000000  00000000  0002f568  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000014f4  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00012090  00000000  00000000  00031504  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003665  00000000  00000000  00043594  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000098dc  00000000  00000000  00046bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000019c4  00000000  00000000  000504d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003694  00000000  00000000  00051e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000067ec  00000000  00000000  00055530  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0077079e  00000000  00000000  0005bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001258  00000000  00000000  007cc4c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	fe cf ce 64 	sub	pc,pc,-12700

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf ee 68 	sub	pc,pc,-4504

Disassembly of section .text:

80002008 <et024006_Color>:
80002008:	f9 dc c0 68 	bfextu	r12,r12,0x3,0x8
8000200c:	f7 db c0 48 	bfextu	r11,r11,0x2,0x8
80002010:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002014:	f5 eb 10 5b 	or	r11,r10,r11<<0x5
80002018:	f7 ec 10 bc 	or	r12,r11,r12<<0xb
8000201c:	5c 8c       	casts.h	r12
8000201e:	5e fc       	retal	r12

80002020 <et024006_SetLimits>:
80002020:	eb cd 40 80 	pushm	r7,lr
80002024:	fc 1e c0 00 	movh	lr,0xc000
80002028:	30 28       	mov	r8,2
8000202a:	bc 08       	st.h	lr[0x0],r8
8000202c:	ef dc c1 08 	bfextu	r7,r12,0x8,0x8
80002030:	fc 18 c0 20 	movh	r8,0xc020
80002034:	b0 07       	st.h	r8[0x0],r7
80002036:	30 37       	mov	r7,3
80002038:	bc 07       	st.h	lr[0x0],r7
8000203a:	b0 0c       	st.h	r8[0x0],r12
8000203c:	30 4c       	mov	r12,4
8000203e:	bc 0c       	st.h	lr[0x0],r12
80002040:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
80002044:	b0 0c       	st.h	r8[0x0],r12
80002046:	30 5c       	mov	r12,5
80002048:	bc 0c       	st.h	lr[0x0],r12
8000204a:	b0 0a       	st.h	r8[0x0],r10
8000204c:	30 6a       	mov	r10,6
8000204e:	bc 0a       	st.h	lr[0x0],r10
80002050:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
80002054:	b0 0a       	st.h	r8[0x0],r10
80002056:	30 7a       	mov	r10,7
80002058:	bc 0a       	st.h	lr[0x0],r10
8000205a:	b0 0b       	st.h	r8[0x0],r11
8000205c:	30 8a       	mov	r10,8
8000205e:	bc 0a       	st.h	lr[0x0],r10
80002060:	f5 d9 c1 08 	bfextu	r10,r9,0x8,0x8
80002064:	b0 0a       	st.h	r8[0x0],r10
80002066:	30 9a       	mov	r10,9
80002068:	bc 0a       	st.h	lr[0x0],r10
8000206a:	b0 09       	st.h	r8[0x0],r9
8000206c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002070 <et024006_DrawPixel>:
80002070:	eb cd 40 80 	pushm	r7,lr
80002074:	14 97       	mov	r7,r10
80002076:	5c 7b       	castu.h	r11
80002078:	5c 7c       	castu.h	r12
8000207a:	16 99       	mov	r9,r11
8000207c:	18 9a       	mov	r10,r12
8000207e:	f0 1f 00 06 	mcall	80002094 <et024006_DrawPixel+0x24>
80002082:	32 29       	mov	r9,34
80002084:	fc 18 c0 00 	movh	r8,0xc000
80002088:	b0 09       	st.h	r8[0x0],r9
8000208a:	fc 18 c0 20 	movh	r8,0xc020
8000208e:	b0 07       	st.h	r8[0x0],r7
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	20 20       	sub	r0,2

80002098 <et024006_SetQuickLimits>:
80002098:	fc 19 c0 00 	movh	r9,0xc000
8000209c:	30 28       	mov	r8,2
8000209e:	b2 08       	st.h	r9[0x0],r8
800020a0:	f5 dc c1 08 	bfextu	r10,r12,0x8,0x8
800020a4:	fc 18 c0 20 	movh	r8,0xc020
800020a8:	b0 0a       	st.h	r8[0x0],r10
800020aa:	30 3a       	mov	r10,3
800020ac:	b2 0a       	st.h	r9[0x0],r10
800020ae:	b0 0c       	st.h	r8[0x0],r12
800020b0:	30 6a       	mov	r10,6
800020b2:	b2 0a       	st.h	r9[0x0],r10
800020b4:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
800020b8:	b0 0a       	st.h	r8[0x0],r10
800020ba:	30 7a       	mov	r10,7
800020bc:	b2 0a       	st.h	r9[0x0],r10
800020be:	b0 0b       	st.h	r8[0x0],r11
800020c0:	5e fc       	retal	r12
800020c2:	d7 03       	nop

800020c4 <et024006_DrawQuickPixel>:
800020c4:	eb cd 40 80 	pushm	r7,lr
800020c8:	14 97       	mov	r7,r10
800020ca:	5c 7b       	castu.h	r11
800020cc:	5c 7c       	castu.h	r12
800020ce:	f0 1f 00 06 	mcall	800020e4 <et024006_DrawQuickPixel+0x20>
800020d2:	32 29       	mov	r9,34
800020d4:	fc 18 c0 00 	movh	r8,0xc000
800020d8:	b0 09       	st.h	r8[0x0],r9
800020da:	fc 18 c0 20 	movh	r8,0xc020
800020de:	b0 07       	st.h	r8[0x0],r7
800020e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e4:	80 00       	ld.sh	r0,r0[0x0]
800020e6:	20 98       	sub	r8,9

800020e8 <et024006_PrintString>:
800020e8:	d4 31       	pushm	r0-r7,lr
800020ea:	20 dd       	sub	sp,52
800020ec:	18 97       	mov	r7,r12
800020ee:	50 6b       	stdsp	sp[0x18],r11
800020f0:	50 8a       	stdsp	sp[0x20],r10
800020f2:	50 29       	stdsp	sp[0x8],r9
800020f4:	10 94       	mov	r4,r8
800020f6:	41 63       	lddsp	r3,sp[0x58]
800020f8:	19 89       	ld.ub	r9,r12[0x0]
800020fa:	30 08       	mov	r8,0
800020fc:	f0 09 18 00 	cp.b	r9,r8
80002100:	e0 80 01 0c 	breq	80002318 <et024006_PrintString+0x230>
80002104:	16 98       	mov	r8,r11
80002106:	11 3a       	ld.ub	r10,r8++
80002108:	50 4a       	stdsp	sp[0x10],r10
8000210a:	11 89       	ld.ub	r9,r8[0x0]
8000210c:	50 39       	stdsp	sp[0xc],r9
8000210e:	11 98       	ld.ub	r8,r8[0x1]
80002110:	50 58       	stdsp	sp[0x14],r8
80002112:	5b f3       	cp.w	r3,-1
80002114:	e0 81 00 8d 	brne	8000222e <et024006_PrintString+0x146>
80002118:	e0 69 00 ef 	mov	r9,239
8000211c:	e0 6a 01 3f 	mov	r10,319
80002120:	30 0b       	mov	r11,0
80002122:	16 9c       	mov	r12,r11
80002124:	f0 1f 00 7e 	mcall	8000231c <et024006_PrintString+0x234>
80002128:	40 58       	lddsp	r8,sp[0x14]
8000212a:	50 c8       	stdsp	sp[0x30],r8
8000212c:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002130:	a5 78       	lsl	r8,0x5
80002132:	40 69       	lddsp	r9,sp[0x18]
80002134:	10 09       	add	r9,r8
80002136:	50 b9       	stdsp	sp[0x2c],r9
80002138:	ee c8 ff ff 	sub	r8,r7,-1
8000213c:	50 98       	stdsp	sp[0x24],r8
8000213e:	40 8a       	lddsp	r10,sp[0x20]
80002140:	5c 8a       	casts.h	r10
80002142:	50 aa       	stdsp	sp[0x28],r10
80002144:	30 03       	mov	r3,0
80002146:	08 90       	mov	r0,r4
80002148:	5c 70       	castu.h	r0
8000214a:	40 99       	lddsp	r9,sp[0x24]
8000214c:	f3 38 ff ff 	ld.ub	r8,r9[-1]
80002150:	30 aa       	mov	r10,10
80002152:	f4 08 18 00 	cp.b	r8,r10
80002156:	c0 b1       	brne	8000216c <et024006_PrintString+0x84>
80002158:	40 28       	lddsp	r8,sp[0x8]
8000215a:	40 39       	lddsp	r9,sp[0xc]
8000215c:	12 08       	add	r8,r9
8000215e:	5c 88       	casts.h	r8
80002160:	50 28       	stdsp	sp[0x8],r8
80002162:	40 98       	lddsp	r8,sp[0x24]
80002164:	40 8a       	lddsp	r10,sp[0x20]
80002166:	5c 8a       	casts.h	r10
80002168:	50 aa       	stdsp	sp[0x28],r10
8000216a:	c5 a8       	rjmp	8000221e <et024006_PrintString+0x136>
8000216c:	30 99       	mov	r9,9
8000216e:	f2 08 18 00 	cp.b	r8,r9
80002172:	c0 81       	brne	80002182 <et024006_PrintString+0x9a>
80002174:	40 a8       	lddsp	r8,sp[0x28]
80002176:	40 49       	lddsp	r9,sp[0x10]
80002178:	12 08       	add	r8,r9
8000217a:	5c 88       	casts.h	r8
8000217c:	50 a8       	stdsp	sp[0x28],r8
8000217e:	40 98       	lddsp	r8,sp[0x24]
80002180:	c4 f8       	rjmp	8000221e <et024006_PrintString+0x136>
80002182:	f0 ca 00 20 	sub	r10,r8,32
80002186:	35 f9       	mov	r9,95
80002188:	f2 0a 18 00 	cp.b	r10,r9
8000218c:	e0 88 00 04 	brls	80002194 <et024006_PrintString+0xac>
80002190:	40 b5       	lddsp	r5,sp[0x2c]
80002192:	c0 a8       	rjmp	800021a6 <et024006_PrintString+0xbe>
80002194:	22 08       	sub	r8,32
80002196:	40 ca       	lddsp	r10,sp[0x30]
80002198:	f0 0a 02 45 	mul	r5,r8,r10
8000219c:	40 59       	lddsp	r9,sp[0x14]
8000219e:	12 05       	add	r5,r9
800021a0:	40 68       	lddsp	r8,sp[0x18]
800021a2:	f0 05 00 05 	add	r5,r8,r5
800021a6:	40 22       	lddsp	r2,sp[0x8]
800021a8:	5c 72       	castu.h	r2
800021aa:	40 3a       	lddsp	r10,sp[0xc]
800021ac:	e4 0a 00 0a 	add	r10,r2,r10
800021b0:	50 1a       	stdsp	sp[0x4],r10
800021b2:	04 3a       	cp.w	r10,r2
800021b4:	e0 8a 00 2f 	brle	80002212 <et024006_PrintString+0x12a>
800021b8:	40 21       	lddsp	r1,sp[0x8]
800021ba:	5c 81       	casts.h	r1
800021bc:	40 a9       	lddsp	r9,sp[0x28]
800021be:	5c 79       	castu.h	r9
800021c0:	50 09       	stdsp	sp[0x0],r9
800021c2:	12 94       	mov	r4,r9
800021c4:	40 48       	lddsp	r8,sp[0x10]
800021c6:	10 04       	add	r4,r8
800021c8:	40 aa       	lddsp	r10,sp[0x28]
800021ca:	5c 8a       	casts.h	r10
800021cc:	50 7a       	stdsp	sp[0x1c],r10
800021ce:	c1 b8       	rjmp	80002204 <et024006_PrintString+0x11c>
800021d0:	a1 96       	lsr	r6,0x1
800021d2:	0b 88       	ld.ub	r8,r5[0x0]
800021d4:	ed e8 00 08 	and	r8,r6,r8
800021d8:	e6 08 18 00 	cp.b	r8,r3
800021dc:	c0 50       	breq	800021e6 <et024006_PrintString+0xfe>
800021de:	00 9a       	mov	r10,r0
800021e0:	04 9b       	mov	r11,r2
800021e2:	f0 1f 00 50 	mcall	80002320 <et024006_PrintString+0x238>
800021e6:	2f f7       	sub	r7,-1
800021e8:	5c 87       	casts.h	r7
800021ea:	0e 9c       	mov	r12,r7
800021ec:	5c 7c       	castu.h	r12
800021ee:	08 3c       	cp.w	r12,r4
800021f0:	cf 05       	brlt	800021d0 <et024006_PrintString+0xe8>
800021f2:	2f f1       	sub	r1,-1
800021f4:	5c 81       	casts.h	r1
800021f6:	e5 d1 c0 10 	bfextu	r2,r1,0x0,0x10
800021fa:	40 19       	lddsp	r9,sp[0x4]
800021fc:	04 39       	cp.w	r9,r2
800021fe:	e0 8a 00 0a 	brle	80002212 <et024006_PrintString+0x12a>
80002202:	2f f5       	sub	r5,-1
80002204:	40 0c       	lddsp	r12,sp[0x0]
80002206:	08 3c       	cp.w	r12,r4
80002208:	cf 54       	brge	800021f2 <et024006_PrintString+0x10a>
8000220a:	40 77       	lddsp	r7,sp[0x1c]
8000220c:	e0 66 00 80 	mov	r6,128
80002210:	ce 1b       	rjmp	800021d2 <et024006_PrintString+0xea>
80002212:	40 a8       	lddsp	r8,sp[0x28]
80002214:	40 4a       	lddsp	r10,sp[0x10]
80002216:	14 08       	add	r8,r10
80002218:	5c 88       	casts.h	r8
8000221a:	50 a8       	stdsp	sp[0x28],r8
8000221c:	40 98       	lddsp	r8,sp[0x24]
8000221e:	40 99       	lddsp	r9,sp[0x24]
80002220:	2f f9       	sub	r9,-1
80002222:	50 99       	stdsp	sp[0x24],r9
80002224:	11 88       	ld.ub	r8,r8[0x0]
80002226:	e6 08 18 00 	cp.b	r8,r3
8000222a:	c9 01       	brne	8000214a <et024006_PrintString+0x62>
8000222c:	c7 68       	rjmp	80002318 <et024006_PrintString+0x230>
8000222e:	f8 c8 ff ff 	sub	r8,r12,-1
80002232:	50 08       	stdsp	sp[0x0],r8
80002234:	40 8c       	lddsp	r12,sp[0x20]
80002236:	5c 8c       	casts.h	r12
80002238:	30 06       	mov	r6,0
8000223a:	5c 83       	casts.h	r3
8000223c:	fc 15 c0 20 	movh	r5,0xc020
80002240:	40 0a       	lddsp	r10,sp[0x0]
80002242:	f5 31 ff ff 	ld.ub	r1,r10[-1]
80002246:	30 a8       	mov	r8,10
80002248:	f0 01 18 00 	cp.b	r1,r8
8000224c:	c0 b1       	brne	80002262 <et024006_PrintString+0x17a>
8000224e:	40 28       	lddsp	r8,sp[0x8]
80002250:	40 39       	lddsp	r9,sp[0xc]
80002252:	12 08       	add	r8,r9
80002254:	5c 88       	casts.h	r8
80002256:	50 28       	stdsp	sp[0x8],r8
80002258:	14 98       	mov	r8,r10
8000225a:	40 8a       	lddsp	r10,sp[0x20]
8000225c:	5c 8a       	casts.h	r10
8000225e:	50 1a       	stdsp	sp[0x4],r10
80002260:	c5 28       	rjmp	80002304 <et024006_PrintString+0x21c>
80002262:	30 98       	mov	r8,9
80002264:	f0 01 18 00 	cp.b	r1,r8
80002268:	c0 71       	brne	80002276 <et024006_PrintString+0x18e>
8000226a:	40 49       	lddsp	r9,sp[0x10]
8000226c:	12 0c       	add	r12,r9
8000226e:	5c 8c       	casts.h	r12
80002270:	50 1c       	stdsp	sp[0x4],r12
80002272:	40 08       	lddsp	r8,sp[0x0]
80002274:	c4 88       	rjmp	80002304 <et024006_PrintString+0x21c>
80002276:	40 32       	lddsp	r2,sp[0xc]
80002278:	40 47       	lddsp	r7,sp[0x10]
8000227a:	f8 07 00 08 	add	r8,r12,r7
8000227e:	5c 88       	casts.h	r8
80002280:	50 18       	stdsp	sp[0x4],r8
80002282:	04 99       	mov	r9,r2
80002284:	20 19       	sub	r9,1
80002286:	40 28       	lddsp	r8,sp[0x8]
80002288:	10 09       	add	r9,r8
8000228a:	40 1a       	lddsp	r10,sp[0x4]
8000228c:	20 1a       	sub	r10,1
8000228e:	5c 79       	castu.h	r9
80002290:	5c 7a       	castu.h	r10
80002292:	10 9b       	mov	r11,r8
80002294:	5c 7b       	castu.h	r11
80002296:	5c 7c       	castu.h	r12
80002298:	f0 1f 00 21 	mcall	8000231c <et024006_PrintString+0x234>
8000229c:	32 29       	mov	r9,34
8000229e:	fc 18 c0 00 	movh	r8,0xc000
800022a2:	b0 09       	st.h	r8[0x0],r9
800022a4:	40 3a       	lddsp	r10,sp[0xc]
800022a6:	58 0a       	cp.w	r10,0
800022a8:	c2 d0       	breq	80002302 <et024006_PrintString+0x21a>
800022aa:	e2 ce 00 20 	sub	lr,r1,32
800022ae:	40 59       	lddsp	r9,sp[0x14]
800022b0:	f2 0e 02 4e 	mul	lr,r9,lr
800022b4:	12 0e       	add	lr,r9
800022b6:	40 68       	lddsp	r8,sp[0x18]
800022b8:	f0 0e 00 0e 	add	lr,r8,lr
800022bc:	30 0c       	mov	r12,0
800022be:	e0 60 00 80 	mov	r0,128
800022c2:	18 91       	mov	r1,r12
800022c4:	c1 98       	rjmp	800022f6 <et024006_PrintString+0x20e>
800022c6:	a1 99       	lsr	r9,0x1
800022c8:	f3 eb 00 0a 	and	r10,r9,r11
800022cc:	ec 0a 18 00 	cp.b	r10,r6
800022d0:	e8 0a 17 10 	movne	r10,r4
800022d4:	eb fa 1c 00 	st.hne	r5[0x0],r10
800022d8:	eb f3 0c 00 	st.heq	r5[0x0],r3
800022dc:	2f f8       	sub	r8,-1
800022de:	5c 88       	casts.h	r8
800022e0:	f0 07 19 00 	cp.h	r7,r8
800022e4:	fe 9b ff f1 	brhi	800022c6 <et024006_PrintString+0x1de>
800022e8:	2f fc       	sub	r12,-1
800022ea:	5c 8c       	casts.h	r12
800022ec:	f8 02 19 00 	cp.h	r2,r12
800022f0:	e0 88 00 09 	brls	80002302 <et024006_PrintString+0x21a>
800022f4:	2f fe       	sub	lr,-1
800022f6:	58 07       	cp.w	r7,0
800022f8:	cf 80       	breq	800022e8 <et024006_PrintString+0x200>
800022fa:	1d 8b       	ld.ub	r11,lr[0x0]
800022fc:	00 99       	mov	r9,r0
800022fe:	02 98       	mov	r8,r1
80002300:	ce 4b       	rjmp	800022c8 <et024006_PrintString+0x1e0>
80002302:	40 08       	lddsp	r8,sp[0x0]
80002304:	40 09       	lddsp	r9,sp[0x0]
80002306:	2f f9       	sub	r9,-1
80002308:	50 09       	stdsp	sp[0x0],r9
8000230a:	11 88       	ld.ub	r8,r8[0x0]
8000230c:	ec 08 18 00 	cp.b	r8,r6
80002310:	c0 40       	breq	80002318 <et024006_PrintString+0x230>
80002312:	40 1c       	lddsp	r12,sp[0x4]
80002314:	5c 8c       	casts.h	r12
80002316:	c9 5b       	rjmp	80002240 <et024006_PrintString+0x158>
80002318:	2f 3d       	sub	sp,-52
8000231a:	d8 32       	popm	r0-r7,pc
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	20 20       	sub	r0,2
80002320:	80 00       	ld.sh	r0,r0[0x0]
80002322:	20 c4       	sub	r4,12

80002324 <et024006_DrawLine>:
80002324:	d4 31       	pushm	r0-r7,lr
80002326:	20 3d       	sub	sp,12
80002328:	18 95       	mov	r5,r12
8000232a:	16 94       	mov	r4,r11
8000232c:	14 93       	mov	r3,r10
8000232e:	12 92       	mov	r2,r9
80002330:	10 91       	mov	r1,r8
80002332:	e0 69 00 ef 	mov	r9,239
80002336:	e0 6a 01 3f 	mov	r10,319
8000233a:	30 0b       	mov	r11,0
8000233c:	16 9c       	mov	r12,r11
8000233e:	f0 1f 00 3e 	mcall	80002434 <et024006_DrawLine+0x110>
80002342:	0a 13       	sub	r3,r5
80002344:	5c 83       	casts.h	r3
80002346:	30 08       	mov	r8,0
80002348:	f0 03 19 00 	cp.h	r3,r8
8000234c:	c0 35       	brlt	80002352 <et024006_DrawLine+0x2e>
8000234e:	30 10       	mov	r0,1
80002350:	c0 48       	rjmp	80002358 <et024006_DrawLine+0x34>
80002352:	5c 33       	neg	r3
80002354:	5c 83       	casts.h	r3
80002356:	3f f0       	mov	r0,-1
80002358:	08 12       	sub	r2,r4
8000235a:	5c 82       	casts.h	r2
8000235c:	30 08       	mov	r8,0
8000235e:	f0 02 19 00 	cp.h	r2,r8
80002362:	c0 45       	brlt	8000236a <et024006_DrawLine+0x46>
80002364:	30 18       	mov	r8,1
80002366:	50 18       	stdsp	sp[0x4],r8
80002368:	c0 58       	rjmp	80002372 <et024006_DrawLine+0x4e>
8000236a:	5c 32       	neg	r2
8000236c:	5c 82       	casts.h	r2
8000236e:	3f f9       	mov	r9,-1
80002370:	50 19       	stdsp	sp[0x4],r9
80002372:	e4 03 19 00 	cp.h	r3,r2
80002376:	e0 8a 00 2e 	brle	800023d2 <et024006_DrawLine+0xae>
8000237a:	50 03       	stdsp	sp[0x0],r3
8000237c:	58 03       	cp.w	r3,0
8000237e:	c5 85       	brlt	8000242e <et024006_DrawLine+0x10a>
80002380:	e6 07 14 01 	asr	r7,r3,0x1
80002384:	5c 84       	casts.h	r4
80002386:	5c 85       	casts.h	r5
80002388:	30 06       	mov	r6,0
8000238a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000238e:	30 01       	mov	r1,0
80002390:	50 23       	stdsp	sp[0x8],r3
80002392:	1c 93       	mov	r3,lr
80002394:	06 9a       	mov	r10,r3
80002396:	08 9b       	mov	r11,r4
80002398:	5c 7b       	castu.h	r11
8000239a:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
8000239e:	f0 1f 00 27 	mcall	80002438 <et024006_DrawLine+0x114>
800023a2:	e2 07 19 00 	cp.h	r7,r1
800023a6:	e0 89 00 08 	brgt	800023b6 <et024006_DrawLine+0x92>
800023aa:	40 29       	lddsp	r9,sp[0x8]
800023ac:	12 07       	add	r7,r9
800023ae:	5c 87       	casts.h	r7
800023b0:	40 18       	lddsp	r8,sp[0x4]
800023b2:	10 04       	add	r4,r8
800023b4:	5c 84       	casts.h	r4
800023b6:	2f f6       	sub	r6,-1
800023b8:	5c 86       	casts.h	r6
800023ba:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
800023be:	40 09       	lddsp	r9,sp[0x0]
800023c0:	12 38       	cp.w	r8,r9
800023c2:	e0 89 00 36 	brgt	8000242e <et024006_DrawLine+0x10a>
800023c6:	04 17       	sub	r7,r2
800023c8:	5c 87       	casts.h	r7
800023ca:	e0 05 00 05 	add	r5,r0,r5
800023ce:	5c 85       	casts.h	r5
800023d0:	ce 2b       	rjmp	80002394 <et024006_DrawLine+0x70>
800023d2:	50 02       	stdsp	sp[0x0],r2
800023d4:	58 02       	cp.w	r2,0
800023d6:	c2 c5       	brlt	8000242e <et024006_DrawLine+0x10a>
800023d8:	e4 07 14 01 	asr	r7,r2,0x1
800023dc:	5c 84       	casts.h	r4
800023de:	5c 85       	casts.h	r5
800023e0:	30 06       	mov	r6,0
800023e2:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800023e6:	30 01       	mov	r1,0
800023e8:	50 22       	stdsp	sp[0x8],r2
800023ea:	40 12       	lddsp	r2,sp[0x4]
800023ec:	50 10       	stdsp	sp[0x4],r0
800023ee:	1c 90       	mov	r0,lr
800023f0:	00 9a       	mov	r10,r0
800023f2:	08 9b       	mov	r11,r4
800023f4:	5c 7b       	castu.h	r11
800023f6:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
800023fa:	f0 1f 00 10 	mcall	80002438 <et024006_DrawLine+0x114>
800023fe:	e2 07 19 00 	cp.h	r7,r1
80002402:	e0 89 00 08 	brgt	80002412 <et024006_DrawLine+0xee>
80002406:	40 29       	lddsp	r9,sp[0x8]
80002408:	12 07       	add	r7,r9
8000240a:	5c 87       	casts.h	r7
8000240c:	40 18       	lddsp	r8,sp[0x4]
8000240e:	10 05       	add	r5,r8
80002410:	5c 85       	casts.h	r5
80002412:	2f f6       	sub	r6,-1
80002414:	5c 86       	casts.h	r6
80002416:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
8000241a:	40 09       	lddsp	r9,sp[0x0]
8000241c:	12 38       	cp.w	r8,r9
8000241e:	e0 89 00 08 	brgt	8000242e <et024006_DrawLine+0x10a>
80002422:	06 17       	sub	r7,r3
80002424:	5c 87       	casts.h	r7
80002426:	e4 04 00 04 	add	r4,r2,r4
8000242a:	5c 84       	casts.h	r4
8000242c:	ce 2b       	rjmp	800023f0 <et024006_DrawLine+0xcc>
8000242e:	2f dd       	sub	sp,-12
80002430:	d8 32       	popm	r0-r7,pc
80002432:	00 00       	add	r0,r0
80002434:	80 00       	ld.sh	r0,r0[0x0]
80002436:	20 20       	sub	r0,2
80002438:	80 00       	ld.sh	r0,r0[0x0]
8000243a:	20 c4       	sub	r4,12

8000243c <et024006_DuplicatePixel>:
8000243c:	32 29       	mov	r9,34
8000243e:	fc 18 c0 00 	movh	r8,0xc000
80002442:	b0 09       	st.h	r8[0x0],r9
80002444:	58 7b       	cp.w	r11,7
80002446:	e0 88 00 13 	brls	8000246c <et024006_DuplicatePixel+0x30>
8000244a:	16 99       	mov	r9,r11
8000244c:	fc 18 c0 20 	movh	r8,0xc020
80002450:	b0 0c       	st.h	r8[0x0],r12
80002452:	b0 0c       	st.h	r8[0x0],r12
80002454:	b0 0c       	st.h	r8[0x0],r12
80002456:	b0 0c       	st.h	r8[0x0],r12
80002458:	b0 0c       	st.h	r8[0x0],r12
8000245a:	b0 0c       	st.h	r8[0x0],r12
8000245c:	b0 0c       	st.h	r8[0x0],r12
8000245e:	b0 0c       	st.h	r8[0x0],r12
80002460:	20 89       	sub	r9,8
80002462:	58 79       	cp.w	r9,7
80002464:	fe 9b ff f6 	brhi	80002450 <et024006_DuplicatePixel+0x14>
80002468:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
8000246c:	58 0b       	cp.w	r11,0
8000246e:	5e 0c       	reteq	r12
80002470:	fc 18 c0 20 	movh	r8,0xc020
80002474:	b0 0c       	st.h	r8[0x0],r12
80002476:	20 1b       	sub	r11,1
80002478:	cf e1       	brne	80002474 <et024006_DuplicatePixel+0x38>
8000247a:	5e fc       	retal	r12

8000247c <et024006_DrawFilledRect>:
8000247c:	eb cd 40 e0 	pushm	r5-r7,lr
80002480:	14 97       	mov	r7,r10
80002482:	12 96       	mov	r6,r9
80002484:	10 95       	mov	r5,r8
80002486:	f6 c9 00 01 	sub	r9,r11,1
8000248a:	0c 09       	add	r9,r6
8000248c:	f8 ca 00 01 	sub	r10,r12,1
80002490:	0e 0a       	add	r10,r7
80002492:	5c 79       	castu.h	r9
80002494:	5c 7a       	castu.h	r10
80002496:	5c 7b       	castu.h	r11
80002498:	5c 7c       	castu.h	r12
8000249a:	f0 1f 00 07 	mcall	800024b4 <et024006_DrawFilledRect+0x38>
8000249e:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
800024a2:	5c 77       	castu.h	r7
800024a4:	af 3b       	mul	r11,r7
800024a6:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
800024aa:	f0 1f 00 04 	mcall	800024b8 <et024006_DrawFilledRect+0x3c>
800024ae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800024b2:	00 00       	add	r0,r0
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	20 20       	sub	r0,2
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	24 3c       	sub	r12,67

800024bc <et024006_DrawVertLine>:
800024bc:	d4 01       	pushm	lr
800024be:	f1 d9 c0 10 	bfextu	r8,r9,0x0,0x10
800024c2:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
800024c6:	30 1a       	mov	r10,1
800024c8:	5c 7b       	castu.h	r11
800024ca:	5c 7c       	castu.h	r12
800024cc:	f0 1f 00 02 	mcall	800024d4 <et024006_DrawVertLine+0x18>
800024d0:	d8 02       	popm	pc
800024d2:	00 00       	add	r0,r0
800024d4:	80 00       	ld.sh	r0,r0[0x0]
800024d6:	24 7c       	sub	r12,71

800024d8 <et024006_DrawFilledCircle>:
800024d8:	d4 31       	pushm	r0-r7,lr
800024da:	20 5d       	sub	sp,20
800024dc:	18 92       	mov	r2,r12
800024de:	16 90       	mov	r0,r11
800024e0:	58 0a       	cp.w	r10,0
800024e2:	c0 81       	brne	800024f2 <et024006_DrawFilledCircle+0x1a>
800024e4:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
800024e8:	5c 7b       	castu.h	r11
800024ea:	5c 7c       	castu.h	r12
800024ec:	f0 1f 00 4f 	mcall	80002628 <et024006_DrawFilledCircle+0x150>
800024f0:	c9 98       	rjmp	80002622 <et024006_DrawFilledCircle+0x14a>
800024f2:	f4 04 10 fe 	mul	r4,r10,-2
800024f6:	2f d4       	sub	r4,-3
800024f8:	5c 84       	casts.h	r4
800024fa:	e7 dc b0 10 	bfexts	r3,r12,0x0,0x10
800024fe:	ef da b0 10 	bfexts	r7,r10,0x0,0x10
80002502:	30 15       	mov	r5,1
80002504:	30 06       	mov	r6,0
80002506:	10 9a       	mov	r10,r8
80002508:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000250c:	50 18       	stdsp	sp[0x4],r8
8000250e:	e3 d9 c0 10 	bfextu	r1,r9,0x0,0x10
80002512:	14 99       	mov	r9,r10
80002514:	e2 19 00 0c 	andl	r9,0xc,COH
80002518:	50 29       	stdsp	sp[0x8],r9
8000251a:	14 98       	mov	r8,r10
8000251c:	e2 18 00 30 	andl	r8,0x30,COH
80002520:	50 38       	stdsp	sp[0xc],r8
80002522:	f3 db c0 10 	bfextu	r9,r11,0x0,0x10
80002526:	50 09       	stdsp	sp[0x0],r9
80002528:	e2 1a 00 c0 	andl	r10,0xc0,COH
8000252c:	50 4a       	stdsp	sp[0x10],r10
8000252e:	40 18       	lddsp	r8,sp[0x4]
80002530:	58 08       	cp.w	r8,0
80002532:	c1 70       	breq	80002560 <et024006_DrawFilledCircle+0x88>
80002534:	e0 06 01 0b 	sub	r11,r0,r6
80002538:	0e 9c       	mov	r12,r7
8000253a:	04 0c       	add	r12,r2
8000253c:	02 99       	mov	r9,r1
8000253e:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
80002542:	5c 7b       	castu.h	r11
80002544:	5c 7c       	castu.h	r12
80002546:	f0 1f 00 3a 	mcall	8000262c <et024006_DrawFilledCircle+0x154>
8000254a:	0e 9a       	mov	r10,r7
8000254c:	2f fa       	sub	r10,-1
8000254e:	e0 07 01 0b 	sub	r11,r0,r7
80002552:	02 99       	mov	r9,r1
80002554:	5c 7a       	castu.h	r10
80002556:	5c 7b       	castu.h	r11
80002558:	f9 d3 c0 10 	bfextu	r12,r3,0x0,0x10
8000255c:	f0 1f 00 34 	mcall	8000262c <et024006_DrawFilledCircle+0x154>
80002560:	40 28       	lddsp	r8,sp[0x8]
80002562:	58 08       	cp.w	r8,0
80002564:	c1 80       	breq	80002594 <et024006_DrawFilledCircle+0xbc>
80002566:	e0 06 01 0b 	sub	r11,r0,r6
8000256a:	e4 07 01 0c 	sub	r12,r2,r7
8000256e:	02 99       	mov	r9,r1
80002570:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
80002574:	5c 7b       	castu.h	r11
80002576:	5c 7c       	castu.h	r12
80002578:	f0 1f 00 2d 	mcall	8000262c <et024006_DrawFilledCircle+0x154>
8000257c:	0e 9a       	mov	r10,r7
8000257e:	2f fa       	sub	r10,-1
80002580:	e0 07 01 0b 	sub	r11,r0,r7
80002584:	e4 06 01 0c 	sub	r12,r2,r6
80002588:	02 99       	mov	r9,r1
8000258a:	5c 7a       	castu.h	r10
8000258c:	5c 7b       	castu.h	r11
8000258e:	5c 7c       	castu.h	r12
80002590:	f0 1f 00 27 	mcall	8000262c <et024006_DrawFilledCircle+0x154>
80002594:	40 39       	lddsp	r9,sp[0xc]
80002596:	58 09       	cp.w	r9,0
80002598:	c1 40       	breq	800025c0 <et024006_DrawFilledCircle+0xe8>
8000259a:	e4 07 01 0c 	sub	r12,r2,r7
8000259e:	02 99       	mov	r9,r1
800025a0:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
800025a4:	40 0b       	lddsp	r11,sp[0x0]
800025a6:	5c 7c       	castu.h	r12
800025a8:	f0 1f 00 21 	mcall	8000262c <et024006_DrawFilledCircle+0x154>
800025ac:	0e 9a       	mov	r10,r7
800025ae:	2f fa       	sub	r10,-1
800025b0:	e4 06 01 0c 	sub	r12,r2,r6
800025b4:	02 99       	mov	r9,r1
800025b6:	5c 7a       	castu.h	r10
800025b8:	40 0b       	lddsp	r11,sp[0x0]
800025ba:	5c 7c       	castu.h	r12
800025bc:	f0 1f 00 1c 	mcall	8000262c <et024006_DrawFilledCircle+0x154>
800025c0:	40 49       	lddsp	r9,sp[0x10]
800025c2:	58 09       	cp.w	r9,0
800025c4:	c1 30       	breq	800025ea <et024006_DrawFilledCircle+0x112>
800025c6:	0e 9c       	mov	r12,r7
800025c8:	04 0c       	add	r12,r2
800025ca:	02 99       	mov	r9,r1
800025cc:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
800025d0:	40 0b       	lddsp	r11,sp[0x0]
800025d2:	5c 7c       	castu.h	r12
800025d4:	f0 1f 00 16 	mcall	8000262c <et024006_DrawFilledCircle+0x154>
800025d8:	0e 9a       	mov	r10,r7
800025da:	2f fa       	sub	r10,-1
800025dc:	02 99       	mov	r9,r1
800025de:	5c 7a       	castu.h	r10
800025e0:	40 0b       	lddsp	r11,sp[0x0]
800025e2:	f9 d3 c0 10 	bfextu	r12,r3,0x0,0x10
800025e6:	f0 1f 00 12 	mcall	8000262c <et024006_DrawFilledCircle+0x154>
800025ea:	30 09       	mov	r9,0
800025ec:	f2 04 19 00 	cp.h	r4,r9
800025f0:	c0 84       	brge	80002600 <et024006_DrawFilledCircle+0x128>
800025f2:	ec 08 15 02 	lsl	r8,r6,0x2
800025f6:	f0 04 00 04 	add	r4,r8,r4
800025fa:	2f a4       	sub	r4,-6
800025fc:	5c 84       	casts.h	r4
800025fe:	c0 98       	rjmp	80002610 <et024006_DrawFilledCircle+0x138>
80002600:	2f 64       	sub	r4,-10
80002602:	ec 07 01 08 	sub	r8,r6,r7
80002606:	a3 68       	lsl	r8,0x2
80002608:	10 04       	add	r4,r8
8000260a:	5c 84       	casts.h	r4
8000260c:	20 17       	sub	r7,1
8000260e:	5c 87       	casts.h	r7
80002610:	2f f6       	sub	r6,-1
80002612:	5c 86       	casts.h	r6
80002614:	2f f5       	sub	r5,-1
80002616:	5c 85       	casts.h	r5
80002618:	2f f3       	sub	r3,-1
8000261a:	5c 83       	casts.h	r3
8000261c:	ec 07 19 00 	cp.h	r7,r6
80002620:	c8 72       	brcc	8000252e <et024006_DrawFilledCircle+0x56>
80002622:	2f bd       	sub	sp,-20
80002624:	d8 32       	popm	r0-r7,pc
80002626:	00 00       	add	r0,r0
80002628:	80 00       	ld.sh	r0,r0[0x0]
8000262a:	20 70       	sub	r0,7
8000262c:	80 00       	ld.sh	r0,r0[0x0]
8000262e:	24 bc       	sub	r12,75

80002630 <et024006_DrawHorizLine>:
80002630:	d4 01       	pushm	lr
80002632:	f1 d9 c0 10 	bfextu	r8,r9,0x0,0x10
80002636:	30 19       	mov	r9,1
80002638:	5c 7a       	castu.h	r10
8000263a:	5c 7b       	castu.h	r11
8000263c:	5c 7c       	castu.h	r12
8000263e:	f0 1f 00 02 	mcall	80002644 <et024006_DrawHorizLine+0x14>
80002642:	d8 02       	popm	pc
80002644:	80 00       	ld.sh	r0,r0[0x0]
80002646:	24 7c       	sub	r12,71

80002648 <et024006_CopyPixelsToScreen>:
80002648:	eb cd 40 80 	pushm	r7,lr
8000264c:	32 29       	mov	r9,34
8000264e:	fc 18 c0 00 	movh	r8,0xc000
80002652:	b0 09       	st.h	r8[0x0],r9
80002654:	58 7b       	cp.w	r11,7
80002656:	e0 88 00 23 	brls	8000269c <et024006_CopyPixelsToScreen+0x54>
8000265a:	16 9a       	mov	r10,r11
8000265c:	18 98       	mov	r8,r12
8000265e:	fc 19 c0 20 	movh	r9,0xc020
80002662:	90 0e       	ld.sh	lr,r8[0x0]
80002664:	b2 0e       	st.h	r9[0x0],lr
80002666:	90 1e       	ld.sh	lr,r8[0x2]
80002668:	b2 0e       	st.h	r9[0x0],lr
8000266a:	90 2e       	ld.sh	lr,r8[0x4]
8000266c:	b2 0e       	st.h	r9[0x0],lr
8000266e:	90 3e       	ld.sh	lr,r8[0x6]
80002670:	b2 0e       	st.h	r9[0x0],lr
80002672:	90 4e       	ld.sh	lr,r8[0x8]
80002674:	b2 0e       	st.h	r9[0x0],lr
80002676:	90 5e       	ld.sh	lr,r8[0xa]
80002678:	b2 0e       	st.h	r9[0x0],lr
8000267a:	90 6e       	ld.sh	lr,r8[0xc]
8000267c:	b2 0e       	st.h	r9[0x0],lr
8000267e:	90 7e       	ld.sh	lr,r8[0xe]
80002680:	b2 0e       	st.h	r9[0x0],lr
80002682:	2f 08       	sub	r8,-16
80002684:	20 8a       	sub	r10,8
80002686:	58 7a       	cp.w	r10,7
80002688:	fe 9b ff ed 	brhi	80002662 <et024006_CopyPixelsToScreen+0x1a>
8000268c:	20 8b       	sub	r11,8
8000268e:	f6 08 16 03 	lsr	r8,r11,0x3
80002692:	2f f8       	sub	r8,-1
80002694:	a5 68       	lsl	r8,0x4
80002696:	10 0c       	add	r12,r8
80002698:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
8000269c:	58 0b       	cp.w	r11,0
8000269e:	c0 70       	breq	800026ac <et024006_CopyPixelsToScreen+0x64>
800026a0:	fc 18 c0 20 	movh	r8,0xc020
800026a4:	19 19       	ld.sh	r9,r12++
800026a6:	b0 09       	st.h	r8[0x0],r9
800026a8:	20 1b       	sub	r11,1
800026aa:	cf d1       	brne	800026a4 <et024006_CopyPixelsToScreen+0x5c>
800026ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800026b0 <et024006_PutPixmap>:
800026b0:	eb cd 40 fe 	pushm	r1-r7,lr
800026b4:	fa c4 ff e0 	sub	r4,sp,-32
800026b8:	18 97       	mov	r7,r12
800026ba:	16 95       	mov	r5,r11
800026bc:	14 92       	mov	r2,r10
800026be:	12 91       	mov	r1,r9
800026c0:	68 0b       	ld.w	r11,r4[0x0]
800026c2:	68 13       	ld.w	r3,r4[0x4]
800026c4:	68 26       	ld.w	r6,r4[0x8]
800026c6:	f6 c9 00 01 	sub	r9,r11,1
800026ca:	0c 09       	add	r9,r6
800026cc:	f0 ca 00 01 	sub	r10,r8,1
800026d0:	06 0a       	add	r10,r3
800026d2:	5c 79       	castu.h	r9
800026d4:	5c 7a       	castu.h	r10
800026d6:	5c 7b       	castu.h	r11
800026d8:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
800026dc:	f0 1f 00 1d 	mcall	80002750 <et024006_PutPixmap+0xa0>
800026e0:	f1 d2 c0 10 	bfextu	r8,r2,0x0,0x10
800026e4:	ee 08 00 17 	add	r7,r7,r8<<0x1
800026e8:	58 01       	cp.w	r1,0
800026ea:	c0 70       	breq	800026f8 <et024006_PutPixmap+0x48>
800026ec:	f1 d5 c0 10 	bfextu	r8,r5,0x0,0x10
800026f0:	a1 78       	lsl	r8,0x1
800026f2:	5c 71       	castu.h	r1
800026f4:	f0 01 03 47 	mac	r7,r8,r1
800026f8:	32 29       	mov	r9,34
800026fa:	fc 18 c0 00 	movh	r8,0xc000
800026fe:	b0 09       	st.h	r8[0x0],r9
80002700:	e6 05 19 00 	cp.h	r5,r3
80002704:	5f 0a       	sreq	r10
80002706:	30 08       	mov	r8,0
80002708:	f0 02 19 00 	cp.h	r2,r8
8000270c:	5f 09       	sreq	r9
8000270e:	f5 e9 00 09 	and	r9,r10,r9
80002712:	f0 09 18 00 	cp.b	r9,r8
80002716:	c0 51       	brne	80002720 <et024006_PutPixmap+0x70>
80002718:	58 06       	cp.w	r6,0
8000271a:	c0 c1       	brne	80002732 <et024006_PutPixmap+0x82>
8000271c:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80002720:	5c 76       	castu.h	r6
80002722:	5c 73       	castu.h	r3
80002724:	ec 03 02 4b 	mul	r11,r6,r3
80002728:	0e 9c       	mov	r12,r7
8000272a:	f0 1f 00 0b 	mcall	80002754 <et024006_PutPixmap+0xa4>
8000272e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80002732:	5c 75       	castu.h	r5
80002734:	a1 75       	lsl	r5,0x1
80002736:	e9 d3 c0 10 	bfextu	r4,r3,0x0,0x10
8000273a:	08 9b       	mov	r11,r4
8000273c:	0e 9c       	mov	r12,r7
8000273e:	f0 1f 00 06 	mcall	80002754 <et024006_PutPixmap+0xa4>
80002742:	0a 07       	add	r7,r5
80002744:	20 16       	sub	r6,1
80002746:	5c 86       	casts.h	r6
80002748:	cf 91       	brne	8000273a <et024006_PutPixmap+0x8a>
8000274a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000274e:	00 00       	add	r0,r0
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	20 20       	sub	r0,2
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	26 48       	sub	r8,100

80002758 <et024006_AdjustGamma>:
80002758:	fc 19 c0 00 	movh	r9,0xc000
8000275c:	34 6a       	mov	r10,70
8000275e:	b2 0a       	st.h	r9[0x0],r10
80002760:	fc 18 c0 20 	movh	r8,0xc020
80002764:	e0 6b 00 94 	mov	r11,148
80002768:	b0 0b       	st.h	r8[0x0],r11
8000276a:	34 7b       	mov	r11,71
8000276c:	b2 0b       	st.h	r9[0x0],r11
8000276e:	34 1b       	mov	r11,65
80002770:	b0 0b       	st.h	r8[0x0],r11
80002772:	34 8b       	mov	r11,72
80002774:	b2 0b       	st.h	r9[0x0],r11
80002776:	30 0b       	mov	r11,0
80002778:	b0 0b       	st.h	r8[0x0],r11
8000277a:	34 9b       	mov	r11,73
8000277c:	b2 0b       	st.h	r9[0x0],r11
8000277e:	33 3b       	mov	r11,51
80002780:	b0 0b       	st.h	r8[0x0],r11
80002782:	34 ab       	mov	r11,74
80002784:	b2 0b       	st.h	r9[0x0],r11
80002786:	32 5b       	mov	r11,37
80002788:	b0 0b       	st.h	r8[0x0],r11
8000278a:	34 bb       	mov	r11,75
8000278c:	b2 0b       	st.h	r9[0x0],r11
8000278e:	34 5b       	mov	r11,69
80002790:	b0 0b       	st.h	r8[0x0],r11
80002792:	34 cb       	mov	r11,76
80002794:	b2 0b       	st.h	r9[0x0],r11
80002796:	34 4b       	mov	r11,68
80002798:	b0 0b       	st.h	r8[0x0],r11
8000279a:	34 db       	mov	r11,77
8000279c:	b2 0b       	st.h	r9[0x0],r11
8000279e:	37 7b       	mov	r11,119
800027a0:	b0 0b       	st.h	r8[0x0],r11
800027a2:	34 eb       	mov	r11,78
800027a4:	b2 0b       	st.h	r9[0x0],r11
800027a6:	31 2b       	mov	r11,18
800027a8:	b0 0b       	st.h	r8[0x0],r11
800027aa:	34 fb       	mov	r11,79
800027ac:	b2 0b       	st.h	r9[0x0],r11
800027ae:	e0 6b 00 cc 	mov	r11,204
800027b2:	b0 0b       	st.h	r8[0x0],r11
800027b4:	35 0b       	mov	r11,80
800027b6:	b2 0b       	st.h	r9[0x0],r11
800027b8:	b0 0a       	st.h	r8[0x0],r10
800027ba:	35 1a       	mov	r10,81
800027bc:	b2 0a       	st.h	r9[0x0],r10
800027be:	e0 69 00 82 	mov	r9,130
800027c2:	b0 09       	st.h	r8[0x0],r9
800027c4:	5e fc       	retal	r12
800027c6:	d7 03       	nop

800027c8 <et024006_Init>:
800027c8:	eb cd 40 c0 	pushm	r6-r7,lr
800027cc:	fe f7 04 80 	ld.w	r7,pc[1152]
800027d0:	8f 0c       	st.w	r7[0x0],r12
800027d2:	8f 1b       	st.w	r7[0x4],r11
800027d4:	16 9c       	mov	r12,r11
800027d6:	f0 1f 01 1f 	mcall	80002c50 <et024006_Init+0x488>
800027da:	35 5c       	mov	r12,85
800027dc:	f0 1f 01 1e 	mcall	80002c54 <et024006_Init+0x48c>
800027e0:	30 2b       	mov	r11,2
800027e2:	33 2c       	mov	r12,50
800027e4:	f0 1f 01 1d 	mcall	80002c58 <et024006_Init+0x490>
800027e8:	35 2c       	mov	r12,82
800027ea:	f0 1f 01 1d 	mcall	80002c5c <et024006_Init+0x494>
800027ee:	35 2c       	mov	r12,82
800027f0:	f0 1f 01 1c 	mcall	80002c60 <et024006_Init+0x498>
800027f4:	6e 07       	ld.w	r7,r7[0x0]
800027f6:	33 28       	mov	r8,50
800027f8:	ee 08 06 46 	mulu.d	r6,r7,r8
800027fc:	ee 78 42 40 	mov	r8,1000000
80002800:	30 09       	mov	r9,0
80002802:	ee 7a 42 3f 	mov	r10,999999
80002806:	30 0b       	mov	r11,0
80002808:	ec 0a 00 0a 	add	r10,r6,r10
8000280c:	ee 0b 00 4b 	adc	r11,r7,r11
80002810:	f0 1f 01 15 	mcall	80002c64 <et024006_Init+0x49c>
80002814:	e1 b8 00 42 	mfsr	r8,0x108
80002818:	f0 0a 00 0a 	add	r10,r8,r10
8000281c:	e1 b9 00 42 	mfsr	r9,0x108
80002820:	14 38       	cp.w	r8,r10
80002822:	e0 88 00 09 	brls	80002834 <et024006_Init+0x6c>
80002826:	12 38       	cp.w	r8,r9
80002828:	fe 98 ff fa 	brls	8000281c <et024006_Init+0x54>
8000282c:	12 3a       	cp.w	r10,r9
8000282e:	e0 83 00 a2 	brlo	80002972 <et024006_Init+0x1aa>
80002832:	cf 5b       	rjmp	8000281c <et024006_Init+0x54>
80002834:	12 38       	cp.w	r8,r9
80002836:	e0 8b 00 9e 	brhi	80002972 <et024006_Init+0x1aa>
8000283a:	12 3a       	cp.w	r10,r9
8000283c:	e0 83 00 9b 	brlo	80002972 <et024006_Init+0x1aa>
80002840:	ce eb       	rjmp	8000281c <et024006_Init+0x54>
80002842:	e1 b9 00 42 	mfsr	r9,0x108
80002846:	14 38       	cp.w	r8,r10
80002848:	e0 88 00 09 	brls	8000285a <et024006_Init+0x92>
8000284c:	12 38       	cp.w	r8,r9
8000284e:	fe 98 ff fa 	brls	80002842 <et024006_Init+0x7a>
80002852:	12 3a       	cp.w	r10,r9
80002854:	e0 83 00 a9 	brlo	800029a6 <et024006_Init+0x1de>
80002858:	cf 5b       	rjmp	80002842 <et024006_Init+0x7a>
8000285a:	12 38       	cp.w	r8,r9
8000285c:	e0 8b 00 a5 	brhi	800029a6 <et024006_Init+0x1de>
80002860:	12 3a       	cp.w	r10,r9
80002862:	e0 83 00 a2 	brlo	800029a6 <et024006_Init+0x1de>
80002866:	ce eb       	rjmp	80002842 <et024006_Init+0x7a>
80002868:	e1 b9 00 42 	mfsr	r9,0x108
8000286c:	14 38       	cp.w	r8,r10
8000286e:	e0 88 00 09 	brls	80002880 <et024006_Init+0xb8>
80002872:	12 38       	cp.w	r8,r9
80002874:	fe 98 ff fa 	brls	80002868 <et024006_Init+0xa0>
80002878:	12 3a       	cp.w	r10,r9
8000287a:	e0 83 01 1e 	brlo	80002ab6 <et024006_Init+0x2ee>
8000287e:	cf 5b       	rjmp	80002868 <et024006_Init+0xa0>
80002880:	12 38       	cp.w	r8,r9
80002882:	e0 8b 01 1a 	brhi	80002ab6 <et024006_Init+0x2ee>
80002886:	12 3a       	cp.w	r10,r9
80002888:	e0 83 01 17 	brlo	80002ab6 <et024006_Init+0x2ee>
8000288c:	ce eb       	rjmp	80002868 <et024006_Init+0xa0>
8000288e:	e1 b9 00 42 	mfsr	r9,0x108
80002892:	14 38       	cp.w	r8,r10
80002894:	e0 88 00 09 	brls	800028a6 <et024006_Init+0xde>
80002898:	12 38       	cp.w	r8,r9
8000289a:	fe 98 ff fa 	brls	8000288e <et024006_Init+0xc6>
8000289e:	12 3a       	cp.w	r10,r9
800028a0:	e0 83 01 29 	brlo	80002af2 <et024006_Init+0x32a>
800028a4:	cf 5b       	rjmp	8000288e <et024006_Init+0xc6>
800028a6:	12 38       	cp.w	r8,r9
800028a8:	e0 8b 01 25 	brhi	80002af2 <et024006_Init+0x32a>
800028ac:	12 3a       	cp.w	r10,r9
800028ae:	e0 83 01 22 	brlo	80002af2 <et024006_Init+0x32a>
800028b2:	ce eb       	rjmp	8000288e <et024006_Init+0xc6>
800028b4:	e1 b9 00 42 	mfsr	r9,0x108
800028b8:	14 38       	cp.w	r8,r10
800028ba:	e0 88 00 09 	brls	800028cc <et024006_Init+0x104>
800028be:	12 38       	cp.w	r8,r9
800028c0:	fe 98 ff fa 	brls	800028b4 <et024006_Init+0xec>
800028c4:	12 3a       	cp.w	r10,r9
800028c6:	e0 83 01 35 	brlo	80002b30 <et024006_Init+0x368>
800028ca:	cf 5b       	rjmp	800028b4 <et024006_Init+0xec>
800028cc:	12 38       	cp.w	r8,r9
800028ce:	e0 8b 01 31 	brhi	80002b30 <et024006_Init+0x368>
800028d2:	12 3a       	cp.w	r10,r9
800028d4:	e0 83 01 2e 	brlo	80002b30 <et024006_Init+0x368>
800028d8:	ce eb       	rjmp	800028b4 <et024006_Init+0xec>
800028da:	e1 b9 00 42 	mfsr	r9,0x108
800028de:	14 38       	cp.w	r8,r10
800028e0:	e0 88 00 09 	brls	800028f2 <et024006_Init+0x12a>
800028e4:	12 38       	cp.w	r8,r9
800028e6:	fe 98 ff fa 	brls	800028da <et024006_Init+0x112>
800028ea:	12 3a       	cp.w	r10,r9
800028ec:	e0 83 01 40 	brlo	80002b6c <et024006_Init+0x3a4>
800028f0:	cf 5b       	rjmp	800028da <et024006_Init+0x112>
800028f2:	12 38       	cp.w	r8,r9
800028f4:	e0 8b 01 3c 	brhi	80002b6c <et024006_Init+0x3a4>
800028f8:	12 3a       	cp.w	r10,r9
800028fa:	e0 83 01 39 	brlo	80002b6c <et024006_Init+0x3a4>
800028fe:	ce eb       	rjmp	800028da <et024006_Init+0x112>
80002900:	e1 b9 00 42 	mfsr	r9,0x108
80002904:	14 38       	cp.w	r8,r10
80002906:	e0 88 00 09 	brls	80002918 <et024006_Init+0x150>
8000290a:	12 38       	cp.w	r8,r9
8000290c:	fe 98 ff fa 	brls	80002900 <et024006_Init+0x138>
80002910:	12 3a       	cp.w	r10,r9
80002912:	e0 83 01 4b 	brlo	80002ba8 <et024006_Init+0x3e0>
80002916:	cf 5b       	rjmp	80002900 <et024006_Init+0x138>
80002918:	12 38       	cp.w	r8,r9
8000291a:	e0 8b 01 47 	brhi	80002ba8 <et024006_Init+0x3e0>
8000291e:	12 3a       	cp.w	r10,r9
80002920:	e0 83 01 44 	brlo	80002ba8 <et024006_Init+0x3e0>
80002924:	ce eb       	rjmp	80002900 <et024006_Init+0x138>
80002926:	e1 b9 00 42 	mfsr	r9,0x108
8000292a:	14 38       	cp.w	r8,r10
8000292c:	e0 88 00 09 	brls	8000293e <et024006_Init+0x176>
80002930:	12 38       	cp.w	r8,r9
80002932:	fe 98 ff fa 	brls	80002926 <et024006_Init+0x15e>
80002936:	12 3a       	cp.w	r10,r9
80002938:	e0 83 01 56 	brlo	80002be4 <et024006_Init+0x41c>
8000293c:	cf 5b       	rjmp	80002926 <et024006_Init+0x15e>
8000293e:	12 38       	cp.w	r8,r9
80002940:	e0 8b 01 52 	brhi	80002be4 <et024006_Init+0x41c>
80002944:	12 3a       	cp.w	r10,r9
80002946:	e0 83 01 4f 	brlo	80002be4 <et024006_Init+0x41c>
8000294a:	ce eb       	rjmp	80002926 <et024006_Init+0x15e>
8000294c:	e1 b9 00 42 	mfsr	r9,0x108
80002950:	14 38       	cp.w	r8,r10
80002952:	e0 88 00 09 	brls	80002964 <et024006_Init+0x19c>
80002956:	12 38       	cp.w	r8,r9
80002958:	fe 98 ff fa 	brls	8000294c <et024006_Init+0x184>
8000295c:	12 3a       	cp.w	r10,r9
8000295e:	e0 83 01 64 	brlo	80002c26 <et024006_Init+0x45e>
80002962:	cf 5b       	rjmp	8000294c <et024006_Init+0x184>
80002964:	12 38       	cp.w	r8,r9
80002966:	e0 8b 01 60 	brhi	80002c26 <et024006_Init+0x45e>
8000296a:	12 3a       	cp.w	r10,r9
8000296c:	e0 83 01 5d 	brlo	80002c26 <et024006_Init+0x45e>
80002970:	ce eb       	rjmp	8000294c <et024006_Init+0x184>
80002972:	35 2c       	mov	r12,82
80002974:	f0 1f 00 ba 	mcall	80002c5c <et024006_Init+0x494>
80002978:	fe f8 02 d4 	ld.w	r8,pc[724]
8000297c:	70 07       	ld.w	r7,r8[0x0]
8000297e:	30 58       	mov	r8,5
80002980:	ee 08 06 46 	mulu.d	r6,r7,r8
80002984:	e0 68 03 e8 	mov	r8,1000
80002988:	30 09       	mov	r9,0
8000298a:	e0 6a 03 e7 	mov	r10,999
8000298e:	30 0b       	mov	r11,0
80002990:	ec 0a 00 0a 	add	r10,r6,r10
80002994:	ee 0b 00 4b 	adc	r11,r7,r11
80002998:	f0 1f 00 b3 	mcall	80002c64 <et024006_Init+0x49c>
8000299c:	e1 b8 00 42 	mfsr	r8,0x108
800029a0:	f0 0a 00 0a 	add	r10,r8,r10
800029a4:	c4 fb       	rjmp	80002842 <et024006_Init+0x7a>
800029a6:	f0 1f 00 b1 	mcall	80002c68 <et024006_Init+0x4a0>
800029aa:	fc 19 c0 00 	movh	r9,0xc000
800029ae:	30 1a       	mov	r10,1
800029b0:	b2 0a       	st.h	r9[0x0],r10
800029b2:	fc 18 c0 20 	movh	r8,0xc020
800029b6:	30 6b       	mov	r11,6
800029b8:	b0 0b       	st.h	r8[0x0],r11
800029ba:	33 ab       	mov	r11,58
800029bc:	b2 0b       	st.h	r9[0x0],r11
800029be:	b0 0a       	st.h	r8[0x0],r10
800029c0:	33 bb       	mov	r11,59
800029c2:	b2 0b       	st.h	r9[0x0],r11
800029c4:	b0 0a       	st.h	r8[0x0],r10
800029c6:	33 ca       	mov	r10,60
800029c8:	b2 0a       	st.h	r9[0x0],r10
800029ca:	e0 6a 00 f0 	mov	r10,240
800029ce:	b0 0a       	st.h	r8[0x0],r10
800029d0:	33 db       	mov	r11,61
800029d2:	b2 0b       	st.h	r9[0x0],r11
800029d4:	30 07       	mov	r7,0
800029d6:	b0 07       	st.h	r8[0x0],r7
800029d8:	33 eb       	mov	r11,62
800029da:	b2 0b       	st.h	r9[0x0],r11
800029dc:	33 8b       	mov	r11,56
800029de:	b0 0b       	st.h	r8[0x0],r11
800029e0:	34 0c       	mov	r12,64
800029e2:	b2 0c       	st.h	r9[0x0],r12
800029e4:	30 fe       	mov	lr,15
800029e6:	b0 0e       	st.h	r8[0x0],lr
800029e8:	34 1e       	mov	lr,65
800029ea:	b2 0e       	st.h	r9[0x0],lr
800029ec:	b0 0a       	st.h	r8[0x0],r10
800029ee:	32 7a       	mov	r10,39
800029f0:	b2 0a       	st.h	r9[0x0],r10
800029f2:	30 2a       	mov	r10,2
800029f4:	b0 0a       	st.h	r8[0x0],r10
800029f6:	32 8e       	mov	lr,40
800029f8:	b2 0e       	st.h	r9[0x0],lr
800029fa:	b0 0a       	st.h	r8[0x0],r10
800029fc:	32 9e       	mov	lr,41
800029fe:	b2 0e       	st.h	r9[0x0],lr
80002a00:	b0 0a       	st.h	r8[0x0],r10
80002a02:	32 ae       	mov	lr,42
80002a04:	b2 0e       	st.h	r9[0x0],lr
80002a06:	b0 0a       	st.h	r8[0x0],r10
80002a08:	32 ce       	mov	lr,44
80002a0a:	b2 0e       	st.h	r9[0x0],lr
80002a0c:	b0 0a       	st.h	r8[0x0],r10
80002a0e:	32 de       	mov	lr,45
80002a10:	b2 0e       	st.h	r9[0x0],lr
80002a12:	b0 0a       	st.h	r8[0x0],r10
80002a14:	31 9a       	mov	r10,25
80002a16:	b2 0a       	st.h	r9[0x0],r10
80002a18:	34 9a       	mov	r10,73
80002a1a:	b0 0a       	st.h	r8[0x0],r10
80002a1c:	e0 6a 00 93 	mov	r10,147
80002a20:	b2 0a       	st.h	r9[0x0],r10
80002a22:	30 8a       	mov	r10,8
80002a24:	b0 0a       	st.h	r8[0x0],r10
80002a26:	31 6a       	mov	r10,22
80002a28:	b2 0a       	st.h	r9[0x0],r10
80002a2a:	36 8a       	mov	r10,104
80002a2c:	b0 0a       	st.h	r8[0x0],r10
80002a2e:	32 3a       	mov	r10,35
80002a30:	b2 0a       	st.h	r9[0x0],r10
80002a32:	e0 6a 00 95 	mov	r10,149
80002a36:	b0 0a       	st.h	r8[0x0],r10
80002a38:	32 4e       	mov	lr,36
80002a3a:	b2 0e       	st.h	r9[0x0],lr
80002a3c:	b0 0a       	st.h	r8[0x0],r10
80002a3e:	32 5a       	mov	r10,37
80002a40:	b2 0a       	st.h	r9[0x0],r10
80002a42:	e0 6a 00 ff 	mov	r10,255
80002a46:	b0 0a       	st.h	r8[0x0],r10
80002a48:	e0 6a 00 90 	mov	r10,144
80002a4c:	b2 0a       	st.h	r9[0x0],r10
80002a4e:	37 fa       	mov	r10,127
80002a50:	b0 0a       	st.h	r8[0x0],r10
80002a52:	33 5a       	mov	r10,53
80002a54:	b2 0a       	st.h	r9[0x0],r10
80002a56:	b0 0b       	st.h	r8[0x0],r11
80002a58:	33 6a       	mov	r10,54
80002a5a:	b2 0a       	st.h	r9[0x0],r10
80002a5c:	37 8a       	mov	r10,120
80002a5e:	b0 0a       	st.h	r8[0x0],r10
80002a60:	31 da       	mov	r10,29
80002a62:	b2 0a       	st.h	r9[0x0],r10
80002a64:	30 7a       	mov	r10,7
80002a66:	b0 0a       	st.h	r8[0x0],r10
80002a68:	31 ea       	mov	r10,30
80002a6a:	b2 0a       	st.h	r9[0x0],r10
80002a6c:	b0 07       	st.h	r8[0x0],r7
80002a6e:	31 fa       	mov	r10,31
80002a70:	b2 0a       	st.h	r9[0x0],r10
80002a72:	30 4a       	mov	r10,4
80002a74:	b0 0a       	st.h	r8[0x0],r10
80002a76:	32 0a       	mov	r10,32
80002a78:	b2 0a       	st.h	r9[0x0],r10
80002a7a:	b0 0c       	st.h	r8[0x0],r12
80002a7c:	34 4a       	mov	r10,68
80002a7e:	b2 0a       	st.h	r9[0x0],r10
80002a80:	b0 0b       	st.h	r8[0x0],r11
80002a82:	34 5a       	mov	r10,69
80002a84:	b2 0a       	st.h	r9[0x0],r10
80002a86:	31 29       	mov	r9,18
80002a88:	b0 09       	st.h	r8[0x0],r9
80002a8a:	4f 18       	lddpc	r8,80002c4c <et024006_Init+0x484>
80002a8c:	70 07       	ld.w	r7,r8[0x0]
80002a8e:	30 a8       	mov	r8,10
80002a90:	ee 08 06 46 	mulu.d	r6,r7,r8
80002a94:	e0 68 03 e8 	mov	r8,1000
80002a98:	30 09       	mov	r9,0
80002a9a:	e0 6a 03 e7 	mov	r10,999
80002a9e:	30 0b       	mov	r11,0
80002aa0:	ec 0a 00 0a 	add	r10,r6,r10
80002aa4:	ee 0b 00 4b 	adc	r11,r7,r11
80002aa8:	f0 1f 00 6f 	mcall	80002c64 <et024006_Init+0x49c>
80002aac:	e1 b8 00 42 	mfsr	r8,0x108
80002ab0:	f0 0a 00 0a 	add	r10,r8,r10
80002ab4:	cd aa       	rjmp	80002868 <et024006_Init+0xa0>
80002ab6:	31 c9       	mov	r9,28
80002ab8:	fc 18 c0 00 	movh	r8,0xc000
80002abc:	b0 09       	st.h	r8[0x0],r9
80002abe:	30 49       	mov	r9,4
80002ac0:	fc 18 c0 20 	movh	r8,0xc020
80002ac4:	b0 09       	st.h	r8[0x0],r9
80002ac6:	4e 28       	lddpc	r8,80002c4c <et024006_Init+0x484>
80002ac8:	70 07       	ld.w	r7,r8[0x0]
80002aca:	31 48       	mov	r8,20
80002acc:	ee 08 06 46 	mulu.d	r6,r7,r8
80002ad0:	e0 68 03 e8 	mov	r8,1000
80002ad4:	30 09       	mov	r9,0
80002ad6:	e0 6a 03 e7 	mov	r10,999
80002ada:	30 0b       	mov	r11,0
80002adc:	ec 0a 00 0a 	add	r10,r6,r10
80002ae0:	ee 0b 00 4b 	adc	r11,r7,r11
80002ae4:	f0 1f 00 60 	mcall	80002c64 <et024006_Init+0x49c>
80002ae8:	e1 b8 00 42 	mfsr	r8,0x108
80002aec:	f0 0a 00 0a 	add	r10,r8,r10
80002af0:	cc fa       	rjmp	8000288e <et024006_Init+0xc6>
80002af2:	34 39       	mov	r9,67
80002af4:	fc 18 c0 00 	movh	r8,0xc000
80002af8:	b0 09       	st.h	r8[0x0],r9
80002afa:	e0 69 00 80 	mov	r9,128
80002afe:	fc 18 c0 20 	movh	r8,0xc020
80002b02:	b0 09       	st.h	r8[0x0],r9
80002b04:	4d 28       	lddpc	r8,80002c4c <et024006_Init+0x484>
80002b06:	70 07       	ld.w	r7,r8[0x0]
80002b08:	30 58       	mov	r8,5
80002b0a:	ee 08 06 46 	mulu.d	r6,r7,r8
80002b0e:	e0 68 03 e8 	mov	r8,1000
80002b12:	30 09       	mov	r9,0
80002b14:	e0 6a 03 e7 	mov	r10,999
80002b18:	30 0b       	mov	r11,0
80002b1a:	ec 0a 00 0a 	add	r10,r6,r10
80002b1e:	ee 0b 00 4b 	adc	r11,r7,r11
80002b22:	f0 1f 00 51 	mcall	80002c64 <et024006_Init+0x49c>
80002b26:	e1 b8 00 42 	mfsr	r8,0x108
80002b2a:	f0 0a 00 0a 	add	r10,r8,r10
80002b2e:	cc 3a       	rjmp	800028b4 <et024006_Init+0xec>
80002b30:	31 b9       	mov	r9,27
80002b32:	fc 18 c0 00 	movh	r8,0xc000
80002b36:	b0 09       	st.h	r8[0x0],r9
80002b38:	30 89       	mov	r9,8
80002b3a:	fc 18 c0 20 	movh	r8,0xc020
80002b3e:	b0 09       	st.h	r8[0x0],r9
80002b40:	4c 38       	lddpc	r8,80002c4c <et024006_Init+0x484>
80002b42:	70 07       	ld.w	r7,r8[0x0]
80002b44:	32 88       	mov	r8,40
80002b46:	ee 08 06 46 	mulu.d	r6,r7,r8
80002b4a:	e0 68 03 e8 	mov	r8,1000
80002b4e:	30 09       	mov	r9,0
80002b50:	e0 6a 03 e7 	mov	r10,999
80002b54:	30 0b       	mov	r11,0
80002b56:	ec 0a 00 0a 	add	r10,r6,r10
80002b5a:	ee 0b 00 4b 	adc	r11,r7,r11
80002b5e:	f0 1f 00 42 	mcall	80002c64 <et024006_Init+0x49c>
80002b62:	e1 b8 00 42 	mfsr	r8,0x108
80002b66:	f0 0a 00 0a 	add	r10,r8,r10
80002b6a:	cb 8a       	rjmp	800028da <et024006_Init+0x112>
80002b6c:	31 b9       	mov	r9,27
80002b6e:	fc 18 c0 00 	movh	r8,0xc000
80002b72:	b0 09       	st.h	r8[0x0],r9
80002b74:	31 09       	mov	r9,16
80002b76:	fc 18 c0 20 	movh	r8,0xc020
80002b7a:	b0 09       	st.h	r8[0x0],r9
80002b7c:	4b 48       	lddpc	r8,80002c4c <et024006_Init+0x484>
80002b7e:	70 07       	ld.w	r7,r8[0x0]
80002b80:	32 88       	mov	r8,40
80002b82:	ee 08 06 46 	mulu.d	r6,r7,r8
80002b86:	e0 68 03 e8 	mov	r8,1000
80002b8a:	30 09       	mov	r9,0
80002b8c:	e0 6a 03 e7 	mov	r10,999
80002b90:	30 0b       	mov	r11,0
80002b92:	ec 0a 00 0a 	add	r10,r6,r10
80002b96:	ee 0b 00 4b 	adc	r11,r7,r11
80002b9a:	f0 1f 00 33 	mcall	80002c64 <et024006_Init+0x49c>
80002b9e:	e1 b8 00 42 	mfsr	r8,0x108
80002ba2:	f0 0a 00 0a 	add	r10,r8,r10
80002ba6:	ca da       	rjmp	80002900 <et024006_Init+0x138>
80002ba8:	32 69       	mov	r9,38
80002baa:	fc 18 c0 00 	movh	r8,0xc000
80002bae:	b0 09       	st.h	r8[0x0],r9
80002bb0:	30 49       	mov	r9,4
80002bb2:	fc 18 c0 20 	movh	r8,0xc020
80002bb6:	b0 09       	st.h	r8[0x0],r9
80002bb8:	4a 58       	lddpc	r8,80002c4c <et024006_Init+0x484>
80002bba:	70 07       	ld.w	r7,r8[0x0]
80002bbc:	32 88       	mov	r8,40
80002bbe:	ee 08 06 46 	mulu.d	r6,r7,r8
80002bc2:	e0 68 03 e8 	mov	r8,1000
80002bc6:	30 09       	mov	r9,0
80002bc8:	e0 6a 03 e7 	mov	r10,999
80002bcc:	30 0b       	mov	r11,0
80002bce:	ec 0a 00 0a 	add	r10,r6,r10
80002bd2:	ee 0b 00 4b 	adc	r11,r7,r11
80002bd6:	f0 1f 00 24 	mcall	80002c64 <et024006_Init+0x49c>
80002bda:	e1 b8 00 42 	mfsr	r8,0x108
80002bde:	f0 0a 00 0a 	add	r10,r8,r10
80002be2:	ca 2a       	rjmp	80002926 <et024006_Init+0x15e>
80002be4:	fc 19 c0 00 	movh	r9,0xc000
80002be8:	32 6a       	mov	r10,38
80002bea:	b2 0a       	st.h	r9[0x0],r10
80002bec:	fc 18 c0 20 	movh	r8,0xc020
80002bf0:	32 4b       	mov	r11,36
80002bf2:	b0 0b       	st.h	r8[0x0],r11
80002bf4:	b2 0a       	st.h	r9[0x0],r10
80002bf6:	32 c9       	mov	r9,44
80002bf8:	b0 09       	st.h	r8[0x0],r9
80002bfa:	49 58       	lddpc	r8,80002c4c <et024006_Init+0x484>
80002bfc:	70 07       	ld.w	r7,r8[0x0]
80002bfe:	32 88       	mov	r8,40
80002c00:	ee 08 06 46 	mulu.d	r6,r7,r8
80002c04:	e0 68 03 e8 	mov	r8,1000
80002c08:	30 09       	mov	r9,0
80002c0a:	e0 6a 03 e7 	mov	r10,999
80002c0e:	30 0b       	mov	r11,0
80002c10:	ec 0a 00 0a 	add	r10,r6,r10
80002c14:	ee 0b 00 4b 	adc	r11,r7,r11
80002c18:	f0 1f 00 13 	mcall	80002c64 <et024006_Init+0x49c>
80002c1c:	e1 b8 00 42 	mfsr	r8,0x108
80002c20:	f0 0a 00 0a 	add	r10,r8,r10
80002c24:	c9 4a       	rjmp	8000294c <et024006_Init+0x184>
80002c26:	fc 19 c0 00 	movh	r9,0xc000
80002c2a:	32 68       	mov	r8,38
80002c2c:	b2 08       	st.h	r9[0x0],r8
80002c2e:	fc 18 c0 20 	movh	r8,0xc020
80002c32:	33 ca       	mov	r10,60
80002c34:	b0 0a       	st.h	r8[0x0],r10
80002c36:	37 0a       	mov	r10,112
80002c38:	b2 0a       	st.h	r9[0x0],r10
80002c3a:	90 0b       	ld.sh	r11,r8[0x0]
80002c3c:	5c 5b       	castu.b	r11
80002c3e:	b2 0a       	st.h	r9[0x0],r10
80002c40:	16 99       	mov	r9,r11
80002c42:	a3 b9       	sbr	r9,0x3
80002c44:	b0 09       	st.h	r8[0x0],r9
80002c46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c4a:	00 00       	add	r0,r0
80002c4c:	00 00       	add	r0,r0
80002c4e:	05 38       	ld.ub	r8,r2++
80002c50:	80 00       	ld.sh	r0,r0[0x0]
80002c52:	2c 6c       	sub	r12,-58
80002c54:	80 00       	ld.sh	r0,r0[0x0]
80002c56:	2e 0c       	sub	r12,-32
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	2d 88       	sub	r8,-40
80002c5c:	80 00       	ld.sh	r0,r0[0x0]
80002c5e:	2e 3a       	sub	r10,-29
80002c60:	80 00       	ld.sh	r0,r0[0x0]
80002c62:	2e 56       	sub	r6,-27
80002c64:	80 00       	ld.sh	r0,r0[0x0]
80002c66:	7d ea       	ld.w	r10,lr[0x78]
80002c68:	80 00       	ld.sh	r0,r0[0x0]
80002c6a:	27 58       	sub	r8,117

80002c6c <smc_init>:
80002c6c:	eb cd 40 fc 	pushm	r2-r7,lr
80002c70:	ee 78 42 3f 	mov	r8,999999
80002c74:	f8 08 00 09 	add	r9,r12,r8
80002c78:	e0 68 de 83 	mov	r8,56963
80002c7c:	ea 18 43 1b 	orh	r8,0x431b
80002c80:	f2 08 06 48 	mulu.d	r8,r9,r8
80002c84:	f2 08 16 12 	lsr	r8,r9,0x12
80002c88:	f0 08 00 25 	add	r5,r8,r8<<0x2
80002c8c:	a3 65       	lsl	r5,0x2
80002c8e:	ea c5 fc 19 	sub	r5,r5,-999
80002c92:	e0 69 4d d3 	mov	r9,19923
80002c96:	ea 19 10 62 	orh	r9,0x1062
80002c9a:	ea 09 06 44 	mulu.d	r4,r5,r9
80002c9e:	a7 85       	lsr	r5,0x6
80002ca0:	f0 0a 15 04 	lsl	r10,r8,0x4
80002ca4:	f4 08 01 07 	sub	r7,r10,r8
80002ca8:	a1 77       	lsl	r7,0x1
80002caa:	ee c7 fc 19 	sub	r7,r7,-999
80002cae:	ee 09 06 46 	mulu.d	r6,r7,r9
80002cb2:	0e 94       	mov	r4,r7
80002cb4:	a7 84       	lsr	r4,0x6
80002cb6:	f4 08 01 07 	sub	r7,r10,r8
80002cba:	a3 67       	lsl	r7,0x2
80002cbc:	ee c7 fc 19 	sub	r7,r7,-999
80002cc0:	ee 09 06 46 	mulu.d	r6,r7,r9
80002cc4:	a7 87       	lsr	r7,0x6
80002cc6:	f0 03 10 5a 	mul	r3,r8,90
80002cca:	e6 c3 fc 19 	sub	r3,r3,-999
80002cce:	e6 09 06 42 	mulu.d	r2,r3,r9
80002cd2:	e6 0c 16 06 	lsr	r12,r3,0x6
80002cd6:	e0 63 00 d2 	mov	r3,210
80002cda:	f0 03 02 43 	mul	r3,r8,r3
80002cde:	e6 c3 fc 19 	sub	r3,r3,-999
80002ce2:	e6 09 06 42 	mulu.d	r2,r3,r9
80002ce6:	e6 06 16 06 	lsr	r6,r3,0x6
80002cea:	f4 08 01 0b 	sub	r11,r10,r8
80002cee:	a5 6b       	lsl	r11,0x4
80002cf0:	f6 cb fc 19 	sub	r11,r11,-999
80002cf4:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002cf8:	f6 0e 16 06 	lsr	lr,r11,0x6
80002cfc:	f0 03 10 64 	mul	r3,r8,100
80002d00:	e6 c3 fc 19 	sub	r3,r3,-999
80002d04:	e6 09 06 42 	mulu.d	r2,r3,r9
80002d08:	a7 83       	lsr	r3,0x6
80002d0a:	e0 6a 01 0e 	mov	r10,270
80002d0e:	b5 38       	mul	r8,r10
80002d10:	f0 c8 fc 19 	sub	r8,r8,-999
80002d14:	f0 09 06 48 	mulu.d	r8,r8,r9
80002d18:	a7 89       	lsr	r9,0x6
80002d1a:	ec 04 00 0a 	add	r10,r6,r4
80002d1e:	1c 3a       	cp.w	r10,lr
80002d20:	f4 0e 17 20 	movhs	lr,r10
80002d24:	ee 05 00 0b 	add	r11,r7,r5
80002d28:	18 3b       	cp.w	r11,r12
80002d2a:	f6 0c 17 20 	movhs	r12,r11
80002d2e:	06 3b       	cp.w	r11,r3
80002d30:	e6 0b 17 30 	movlo	r11,r3
80002d34:	12 3a       	cp.w	r10,r9
80002d36:	f4 09 17 20 	movhs	r9,r10
80002d3a:	eb e4 11 05 	or	r5,r5,r4<<0x10
80002d3e:	fe 6a 1c 00 	mov	r10,-123904
80002d42:	95 05       	st.w	r10[0x0],r5
80002d44:	ef e6 11 07 	or	r7,r7,r6<<0x10
80002d48:	ef ec 10 87 	or	r7,r7,r12<<0x8
80002d4c:	ef ee 11 87 	or	r7,r7,lr<<0x18
80002d50:	95 17       	st.w	r10[0x4],r7
80002d52:	1c 39       	cp.w	r9,lr
80002d54:	f2 0e 17 20 	movhs	lr,r9
80002d58:	18 3b       	cp.w	r11,r12
80002d5a:	f8 0b 17 30 	movlo	r11,r12
80002d5e:	f7 ee 11 0b 	or	r11,r11,lr<<0x10
80002d62:	95 2b       	st.w	r10[0x8],r11
80002d64:	e0 68 10 03 	mov	r8,4099
80002d68:	95 38       	st.w	r10[0xc],r8
80002d6a:	30 19       	mov	r9,1
80002d6c:	48 48       	lddpc	r8,80002d7c <smc_init+0x110>
80002d6e:	b0 89       	st.b	r8[0x0],r9
80002d70:	31 4b       	mov	r11,20
80002d72:	48 4c       	lddpc	r12,80002d80 <smc_init+0x114>
80002d74:	f0 1f 00 04 	mcall	80002d84 <smc_init+0x118>
80002d78:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002d7c:	00 00       	add	r0,r0
80002d7e:	05 40       	ld.w	r0,--r2
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	8f 08       	st.w	r7[0x0],r8
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	2d dc       	sub	r12,-35

80002d88 <gpio_enable_module_pin>:
80002d88:	f8 08 16 05 	lsr	r8,r12,0x5
80002d8c:	a9 68       	lsl	r8,0x8
80002d8e:	e0 28 f0 00 	sub	r8,61440
80002d92:	58 1b       	cp.w	r11,1
80002d94:	c0 d0       	breq	80002dae <gpio_enable_module_pin+0x26>
80002d96:	c0 63       	brcs	80002da2 <gpio_enable_module_pin+0x1a>
80002d98:	58 2b       	cp.w	r11,2
80002d9a:	c1 00       	breq	80002dba <gpio_enable_module_pin+0x32>
80002d9c:	58 3b       	cp.w	r11,3
80002d9e:	c1 40       	breq	80002dc6 <gpio_enable_module_pin+0x3e>
80002da0:	5e ff       	retal	1
80002da2:	30 19       	mov	r9,1
80002da4:	f2 0c 09 49 	lsl	r9,r9,r12
80002da8:	91 69       	st.w	r8[0x18],r9
80002daa:	91 a9       	st.w	r8[0x28],r9
80002dac:	c1 28       	rjmp	80002dd0 <gpio_enable_module_pin+0x48>
80002dae:	30 19       	mov	r9,1
80002db0:	f2 0c 09 49 	lsl	r9,r9,r12
80002db4:	91 59       	st.w	r8[0x14],r9
80002db6:	91 a9       	st.w	r8[0x28],r9
80002db8:	c0 c8       	rjmp	80002dd0 <gpio_enable_module_pin+0x48>
80002dba:	30 19       	mov	r9,1
80002dbc:	f2 0c 09 49 	lsl	r9,r9,r12
80002dc0:	91 69       	st.w	r8[0x18],r9
80002dc2:	91 99       	st.w	r8[0x24],r9
80002dc4:	c0 68       	rjmp	80002dd0 <gpio_enable_module_pin+0x48>
80002dc6:	30 19       	mov	r9,1
80002dc8:	f2 0c 09 49 	lsl	r9,r9,r12
80002dcc:	91 59       	st.w	r8[0x14],r9
80002dce:	91 99       	st.w	r8[0x24],r9
80002dd0:	30 19       	mov	r9,1
80002dd2:	f2 0c 09 4c 	lsl	r12,r9,r12
80002dd6:	91 2c       	st.w	r8[0x8],r12
80002dd8:	5e fd       	retal	0
80002dda:	d7 03       	nop

80002ddc <gpio_enable_module>:
80002ddc:	d4 21       	pushm	r4-r7,lr
80002dde:	18 97       	mov	r7,r12
80002de0:	16 94       	mov	r4,r11
80002de2:	58 0b       	cp.w	r11,0
80002de4:	c0 31       	brne	80002dea <gpio_enable_module+0xe>
80002de6:	30 05       	mov	r5,0
80002de8:	c0 d8       	rjmp	80002e02 <gpio_enable_module+0x26>
80002dea:	30 06       	mov	r6,0
80002dec:	0c 95       	mov	r5,r6
80002dee:	6e 1b       	ld.w	r11,r7[0x4]
80002df0:	6e 0c       	ld.w	r12,r7[0x0]
80002df2:	f0 1f 00 06 	mcall	80002e08 <gpio_enable_module+0x2c>
80002df6:	18 45       	or	r5,r12
80002df8:	2f 87       	sub	r7,-8
80002dfa:	2f f6       	sub	r6,-1
80002dfc:	0c 34       	cp.w	r4,r6
80002dfe:	fe 9b ff f8 	brhi	80002dee <gpio_enable_module+0x12>
80002e02:	0a 9c       	mov	r12,r5
80002e04:	d8 22       	popm	r4-r7,pc
80002e06:	00 00       	add	r0,r0
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	2d 88       	sub	r8,-40

80002e0c <gpio_enable_gpio_pin>:
80002e0c:	f8 08 16 05 	lsr	r8,r12,0x5
80002e10:	a9 68       	lsl	r8,0x8
80002e12:	e0 28 f0 00 	sub	r8,61440
80002e16:	30 19       	mov	r9,1
80002e18:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e1c:	f1 4c 00 48 	st.w	r8[72],r12
80002e20:	91 1c       	st.w	r8[0x4],r12
80002e22:	5e fc       	retal	r12

80002e24 <gpio_enable_pin_pull_up>:
80002e24:	f8 08 16 05 	lsr	r8,r12,0x5
80002e28:	a9 68       	lsl	r8,0x8
80002e2a:	e0 28 f0 00 	sub	r8,61440
80002e2e:	30 19       	mov	r9,1
80002e30:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e34:	f1 4c 00 74 	st.w	r8[116],r12
80002e38:	5e fc       	retal	r12

80002e3a <gpio_set_gpio_pin>:
80002e3a:	f8 08 16 05 	lsr	r8,r12,0x5
80002e3e:	a9 68       	lsl	r8,0x8
80002e40:	e0 28 f0 00 	sub	r8,61440
80002e44:	30 19       	mov	r9,1
80002e46:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e4a:	f1 4c 00 54 	st.w	r8[84],r12
80002e4e:	f1 4c 00 44 	st.w	r8[68],r12
80002e52:	91 1c       	st.w	r8[0x4],r12
80002e54:	5e fc       	retal	r12

80002e56 <gpio_clr_gpio_pin>:
80002e56:	f8 08 16 05 	lsr	r8,r12,0x5
80002e5a:	a9 68       	lsl	r8,0x8
80002e5c:	e0 28 f0 00 	sub	r8,61440
80002e60:	30 19       	mov	r9,1
80002e62:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e66:	f1 4c 00 58 	st.w	r8[88],r12
80002e6a:	f1 4c 00 44 	st.w	r8[68],r12
80002e6e:	91 1c       	st.w	r8[0x4],r12
80002e70:	5e fc       	retal	r12

80002e72 <gpio_tgl_gpio_pin>:
80002e72:	f8 08 16 05 	lsr	r8,r12,0x5
80002e76:	a9 68       	lsl	r8,0x8
80002e78:	e0 28 f0 00 	sub	r8,61440
80002e7c:	30 19       	mov	r9,1
80002e7e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e82:	f1 4c 00 5c 	st.w	r8[92],r12
80002e86:	f1 4c 00 44 	st.w	r8[68],r12
80002e8a:	91 1c       	st.w	r8[0x4],r12
80002e8c:	5e fc       	retal	r12

80002e8e <gpio_enable_pin_interrupt>:
80002e8e:	f8 08 16 05 	lsr	r8,r12,0x5
80002e92:	a9 68       	lsl	r8,0x8
80002e94:	e0 28 f0 00 	sub	r8,61440
80002e98:	30 19       	mov	r9,1
80002e9a:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e9e:	f1 4c 00 c4 	st.w	r8[196],r12
80002ea2:	12 3b       	cp.w	r11,r9
80002ea4:	c0 a0       	breq	80002eb8 <gpio_enable_pin_interrupt+0x2a>
80002ea6:	c0 43       	brcs	80002eae <gpio_enable_pin_interrupt+0x20>
80002ea8:	58 2b       	cp.w	r11,2
80002eaa:	c1 11       	brne	80002ecc <gpio_enable_pin_interrupt+0x3e>
80002eac:	c0 b8       	rjmp	80002ec2 <gpio_enable_pin_interrupt+0x34>
80002eae:	f1 4c 00 a8 	st.w	r8[168],r12
80002eb2:	f1 4c 00 b8 	st.w	r8[184],r12
80002eb6:	c0 c8       	rjmp	80002ece <gpio_enable_pin_interrupt+0x40>
80002eb8:	f1 4c 00 a4 	st.w	r8[164],r12
80002ebc:	f1 4c 00 b8 	st.w	r8[184],r12
80002ec0:	c0 78       	rjmp	80002ece <gpio_enable_pin_interrupt+0x40>
80002ec2:	f1 4c 00 a8 	st.w	r8[168],r12
80002ec6:	f1 4c 00 b4 	st.w	r8[180],r12
80002eca:	c0 28       	rjmp	80002ece <gpio_enable_pin_interrupt+0x40>
80002ecc:	5e ff       	retal	1
80002ece:	f1 4c 00 94 	st.w	r8[148],r12
80002ed2:	5e fd       	retal	0

80002ed4 <gpio_get_pin_interrupt_flag>:
80002ed4:	f8 08 16 05 	lsr	r8,r12,0x5
80002ed8:	a9 68       	lsl	r8,0x8
80002eda:	e0 28 f0 00 	sub	r8,61440
80002ede:	f0 f8 00 d0 	ld.w	r8,r8[208]
80002ee2:	f0 0c 0a 4c 	lsr	r12,r8,r12
80002ee6:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002eea:	5e fc       	retal	r12

80002eec <gpio_clear_pin_interrupt_flag>:
80002eec:	f8 08 16 05 	lsr	r8,r12,0x5
80002ef0:	a9 68       	lsl	r8,0x8
80002ef2:	e0 28 f0 00 	sub	r8,61440
80002ef6:	30 19       	mov	r9,1
80002ef8:	f2 0c 09 4c 	lsl	r12,r9,r12
80002efc:	f1 4c 00 d8 	st.w	r8[216],r12
80002f00:	5e fc       	retal	r12

80002f02 <_unhandled_interrupt>:
80002f02:	c0 08       	rjmp	80002f02 <_unhandled_interrupt>

80002f04 <INTC_register_interrupt>:
80002f04:	f6 08 16 05 	lsr	r8,r11,0x5
80002f08:	49 99       	lddpc	r9,80002f6c <INTC_register_interrupt+0x68>
80002f0a:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002f0e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002f12:	72 19       	ld.w	r9,r9[0x4]
80002f14:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
80002f18:	58 0a       	cp.w	r10,0
80002f1a:	c0 91       	brne	80002f2c <INTC_register_interrupt+0x28>
80002f1c:	49 59       	lddpc	r9,80002f70 <INTC_register_interrupt+0x6c>
80002f1e:	49 6a       	lddpc	r10,80002f74 <INTC_register_interrupt+0x70>
80002f20:	12 1a       	sub	r10,r9
80002f22:	fe 79 08 00 	mov	r9,-63488
80002f26:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002f2a:	5e fc       	retal	r12
80002f2c:	58 1a       	cp.w	r10,1
80002f2e:	c0 a1       	brne	80002f42 <INTC_register_interrupt+0x3e>
80002f30:	49 09       	lddpc	r9,80002f70 <INTC_register_interrupt+0x6c>
80002f32:	49 2a       	lddpc	r10,80002f78 <INTC_register_interrupt+0x74>
80002f34:	12 1a       	sub	r10,r9
80002f36:	bf aa       	sbr	r10,0x1e
80002f38:	fe 79 08 00 	mov	r9,-63488
80002f3c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002f40:	5e fc       	retal	r12
80002f42:	58 2a       	cp.w	r10,2
80002f44:	c0 a1       	brne	80002f58 <INTC_register_interrupt+0x54>
80002f46:	48 b9       	lddpc	r9,80002f70 <INTC_register_interrupt+0x6c>
80002f48:	48 da       	lddpc	r10,80002f7c <INTC_register_interrupt+0x78>
80002f4a:	12 1a       	sub	r10,r9
80002f4c:	bf ba       	sbr	r10,0x1f
80002f4e:	fe 79 08 00 	mov	r9,-63488
80002f52:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002f56:	5e fc       	retal	r12
80002f58:	48 69       	lddpc	r9,80002f70 <INTC_register_interrupt+0x6c>
80002f5a:	48 aa       	lddpc	r10,80002f80 <INTC_register_interrupt+0x7c>
80002f5c:	12 1a       	sub	r10,r9
80002f5e:	ea 1a c0 00 	orh	r10,0xc000
80002f62:	fe 79 08 00 	mov	r9,-63488
80002f66:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002f6a:	5e fc       	retal	r12
80002f6c:	80 00       	ld.sh	r0,r0[0x0]
80002f6e:	8f a8       	st.w	r7[0x28],r8
80002f70:	80 00       	ld.sh	r0,r0[0x0]
80002f72:	8a 00       	ld.sh	r0,r5[0x0]
80002f74:	80 00       	ld.sh	r0,r0[0x0]
80002f76:	8b 04       	st.w	r5[0x0],r4
80002f78:	80 00       	ld.sh	r0,r0[0x0]
80002f7a:	8b 12       	st.w	r5[0x4],r2
80002f7c:	80 00       	ld.sh	r0,r0[0x0]
80002f7e:	8b 20       	st.w	r5[0x8],r0
80002f80:	80 00       	ld.sh	r0,r0[0x0]
80002f82:	8b 2e       	st.w	r5[0x8],lr

80002f84 <INTC_init_interrupts>:
80002f84:	d4 21       	pushm	r4-r7,lr
80002f86:	49 18       	lddpc	r8,80002fc8 <INTC_init_interrupts+0x44>
80002f88:	e3 b8 00 01 	mtsr	0x4,r8
80002f8c:	49 0e       	lddpc	lr,80002fcc <INTC_init_interrupts+0x48>
80002f8e:	30 07       	mov	r7,0
80002f90:	0e 94       	mov	r4,r7
80002f92:	49 0c       	lddpc	r12,80002fd0 <INTC_init_interrupts+0x4c>
80002f94:	49 05       	lddpc	r5,80002fd4 <INTC_init_interrupts+0x50>
80002f96:	10 15       	sub	r5,r8
80002f98:	fe 76 08 00 	mov	r6,-63488
80002f9c:	c1 08       	rjmp	80002fbc <INTC_init_interrupts+0x38>
80002f9e:	08 98       	mov	r8,r4
80002fa0:	7c 1b       	ld.w	r11,lr[0x4]
80002fa2:	7c 0a       	ld.w	r10,lr[0x0]
80002fa4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
80002fa8:	2f f8       	sub	r8,-1
80002faa:	10 3a       	cp.w	r10,r8
80002fac:	fe 9b ff fc 	brhi	80002fa4 <INTC_init_interrupts+0x20>
80002fb0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
80002fb4:	2f f7       	sub	r7,-1
80002fb6:	2f 8e       	sub	lr,-8
80002fb8:	59 47       	cp.w	r7,20
80002fba:	c0 50       	breq	80002fc4 <INTC_init_interrupts+0x40>
80002fbc:	7c 08       	ld.w	r8,lr[0x0]
80002fbe:	58 08       	cp.w	r8,0
80002fc0:	ce f1       	brne	80002f9e <INTC_init_interrupts+0x1a>
80002fc2:	cf 7b       	rjmp	80002fb0 <INTC_init_interrupts+0x2c>
80002fc4:	d8 22       	popm	r4-r7,pc
80002fc6:	00 00       	add	r0,r0
80002fc8:	80 00       	ld.sh	r0,r0[0x0]
80002fca:	8a 00       	ld.sh	r0,r5[0x0]
80002fcc:	80 00       	ld.sh	r0,r0[0x0]
80002fce:	8f a8       	st.w	r7[0x28],r8
80002fd0:	80 00       	ld.sh	r0,r0[0x0]
80002fd2:	2f 02       	sub	r2,-16
80002fd4:	80 00       	ld.sh	r0,r0[0x0]
80002fd6:	8b 04       	st.w	r5[0x0],r4

80002fd8 <_get_interrupt_handler>:
80002fd8:	fe 78 08 00 	mov	r8,-63488
80002fdc:	e0 69 00 83 	mov	r9,131
80002fe0:	f2 0c 01 0c 	sub	r12,r9,r12
80002fe4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
80002fe8:	f2 ca ff c0 	sub	r10,r9,-64
80002fec:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002ff0:	58 08       	cp.w	r8,0
80002ff2:	c0 21       	brne	80002ff6 <_get_interrupt_handler+0x1e>
80002ff4:	5e fd       	retal	0
80002ff6:	f0 08 12 00 	clz	r8,r8
80002ffa:	48 5a       	lddpc	r10,8000300c <_get_interrupt_handler+0x34>
80002ffc:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003000:	f0 08 11 1f 	rsub	r8,r8,31
80003004:	72 19       	ld.w	r9,r9[0x4]
80003006:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
8000300a:	5e fc       	retal	r12
8000300c:	80 00       	ld.sh	r0,r0[0x0]
8000300e:	8f a8       	st.w	r7[0x28],r8

80003010 <pm_set_osc0_mode>:
80003010:	78 a8       	ld.w	r8,r12[0x28]
80003012:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
80003016:	99 a8       	st.w	r12[0x28],r8
80003018:	5e fc       	retal	r12
8000301a:	d7 03       	nop

8000301c <pm_enable_osc0_crystal>:
8000301c:	d4 01       	pushm	lr
8000301e:	ec 5b bb 9f 	cp.w	r11,899999
80003022:	e0 8b 00 04 	brhi	8000302a <pm_enable_osc0_crystal+0xe>
80003026:	30 4b       	mov	r11,4
80003028:	c1 38       	rjmp	8000304e <pm_enable_osc0_crystal+0x32>
8000302a:	e0 68 c6 bf 	mov	r8,50879
8000302e:	ea 18 00 2d 	orh	r8,0x2d
80003032:	10 3b       	cp.w	r11,r8
80003034:	e0 8b 00 04 	brhi	8000303c <pm_enable_osc0_crystal+0x20>
80003038:	30 5b       	mov	r11,5
8000303a:	c0 a8       	rjmp	8000304e <pm_enable_osc0_crystal+0x32>
8000303c:	e0 68 12 00 	mov	r8,4608
80003040:	ea 18 00 7a 	orh	r8,0x7a
80003044:	10 3b       	cp.w	r11,r8
80003046:	f9 bb 03 06 	movlo	r11,6
8000304a:	f9 bb 02 07 	movhs	r11,7
8000304e:	f0 1f 00 02 	mcall	80003054 <pm_enable_osc0_crystal+0x38>
80003052:	d8 02       	popm	pc
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	30 10       	mov	r0,1

80003058 <pm_enable_clk0_no_wait>:
80003058:	78 a8       	ld.w	r8,r12[0x28]
8000305a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
8000305e:	99 a8       	st.w	r12[0x28],r8
80003060:	78 08       	ld.w	r8,r12[0x0]
80003062:	a3 a8       	sbr	r8,0x2
80003064:	99 08       	st.w	r12[0x0],r8
80003066:	5e fc       	retal	r12

80003068 <pm_wait_for_clk0_ready>:
80003068:	79 58       	ld.w	r8,r12[0x54]
8000306a:	e2 18 00 80 	andl	r8,0x80,COH
8000306e:	cf d0       	breq	80003068 <pm_wait_for_clk0_ready>
80003070:	5e fc       	retal	r12
80003072:	d7 03       	nop

80003074 <pm_enable_clk0>:
80003074:	eb cd 40 80 	pushm	r7,lr
80003078:	18 97       	mov	r7,r12
8000307a:	f0 1f 00 04 	mcall	80003088 <pm_enable_clk0+0x14>
8000307e:	0e 9c       	mov	r12,r7
80003080:	f0 1f 00 03 	mcall	8000308c <pm_enable_clk0+0x18>
80003084:	e3 cd 80 80 	ldm	sp++,r7,pc
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	30 58       	mov	r8,5
8000308c:	80 00       	ld.sh	r0,r0[0x0]
8000308e:	30 68       	mov	r8,6

80003090 <pm_switch_to_clock>:
80003090:	78 08       	ld.w	r8,r12[0x0]
80003092:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
80003096:	99 08       	st.w	r12[0x0],r8
80003098:	5e fc       	retal	r12
8000309a:	d7 03       	nop

8000309c <pm_switch_to_osc0>:
8000309c:	eb cd 40 c0 	pushm	r6-r7,lr
800030a0:	18 97       	mov	r7,r12
800030a2:	14 96       	mov	r6,r10
800030a4:	f0 1f 00 06 	mcall	800030bc <pm_switch_to_osc0+0x20>
800030a8:	0c 9b       	mov	r11,r6
800030aa:	0e 9c       	mov	r12,r7
800030ac:	f0 1f 00 05 	mcall	800030c0 <pm_switch_to_osc0+0x24>
800030b0:	30 1b       	mov	r11,1
800030b2:	0e 9c       	mov	r12,r7
800030b4:	f0 1f 00 04 	mcall	800030c4 <pm_switch_to_osc0+0x28>
800030b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	30 1c       	mov	r12,1
800030c0:	80 00       	ld.sh	r0,r0[0x0]
800030c2:	30 74       	mov	r4,7
800030c4:	80 00       	ld.sh	r0,r0[0x0]
800030c6:	30 90       	mov	r0,9

800030c8 <pcl_switch_to_osc>:
800030c8:	d4 01       	pushm	lr
800030ca:	58 0c       	cp.w	r12,0
800030cc:	c0 40       	breq	800030d4 <pcl_switch_to_osc+0xc>
800030ce:	fe 7c d8 f0 	mov	r12,-10000
800030d2:	d8 02       	popm	pc
800030d4:	fe 7c 0c 00 	mov	r12,-62464
800030d8:	f0 1f 00 02 	mcall	800030e0 <pcl_switch_to_osc+0x18>
800030dc:	d8 0a       	popm	pc,r12=0
800030de:	00 00       	add	r0,r0
800030e0:	80 00       	ld.sh	r0,r0[0x0]
800030e2:	30 9c       	mov	r12,9

800030e4 <pwm_channel_init>:
800030e4:	58 0b       	cp.w	r11,0
800030e6:	c1 90       	breq	80003118 <pwm_channel_init+0x34>
800030e8:	58 6c       	cp.w	r12,6
800030ea:	e0 8b 00 17 	brhi	80003118 <pwm_channel_init+0x34>
800030ee:	76 0a       	ld.w	r10,r11[0x0]
800030f0:	fe 78 30 00 	mov	r8,-53248
800030f4:	f8 c9 ff f0 	sub	r9,r12,-16
800030f8:	a5 79       	lsl	r9,0x5
800030fa:	f0 09 00 09 	add	r9,r8,r9
800030fe:	93 0a       	st.w	r9[0x0],r10
80003100:	76 19       	ld.w	r9,r11[0x4]
80003102:	a5 7c       	lsl	r12,0x5
80003104:	f0 0c 00 0c 	add	r12,r8,r12
80003108:	f8 c8 fd fc 	sub	r8,r12,-516
8000310c:	91 09       	st.w	r8[0x0],r9
8000310e:	76 28       	ld.w	r8,r11[0x8]
80003110:	f8 cc fd f8 	sub	r12,r12,-520
80003114:	99 08       	st.w	r12[0x0],r8
80003116:	5e fd       	retal	0
80003118:	5e ff       	retal	1

8000311a <pwm_start_channels>:
8000311a:	18 98       	mov	r8,r12
8000311c:	e0 18 ff 80 	andl	r8,0xff80
80003120:	c0 20       	breq	80003124 <pwm_start_channels+0xa>
80003122:	5e ff       	retal	1
80003124:	fe 78 30 00 	mov	r8,-53248
80003128:	91 1c       	st.w	r8[0x4],r12
8000312a:	5e fd       	retal	0

8000312c <pwm_async_update_channel>:
8000312c:	58 6c       	cp.w	r12,6
8000312e:	e0 88 00 03 	brls	80003134 <pwm_async_update_channel+0x8>
80003132:	5e ff       	retal	1
80003134:	76 0a       	ld.w	r10,r11[0x0]
80003136:	fe 78 30 00 	mov	r8,-53248
8000313a:	f8 c9 ff f0 	sub	r9,r12,-16
8000313e:	a5 79       	lsl	r9,0x5
80003140:	f0 09 00 09 	add	r9,r8,r9
80003144:	93 0a       	st.w	r9[0x0],r10
80003146:	76 49       	ld.w	r9,r11[0x10]
80003148:	a5 7c       	lsl	r12,0x5
8000314a:	18 08       	add	r8,r12
8000314c:	f0 c8 fd f0 	sub	r8,r8,-528
80003150:	91 09       	st.w	r8[0x0],r9
80003152:	5e fd       	retal	0

80003154 <pwm_init>:
80003154:	e1 b8 00 00 	mfsr	r8,0x0
80003158:	58 0c       	cp.w	r12,0
8000315a:	c0 21       	brne	8000315e <pwm_init+0xa>
8000315c:	5e ff       	retal	1
8000315e:	e6 18 00 01 	andh	r8,0x1,COH
80003162:	c0 91       	brne	80003174 <pwm_init+0x20>
80003164:	d3 03       	ssrf	0x10
80003166:	fe 78 30 00 	mov	r8,-53248
8000316a:	37 f9       	mov	r9,127
8000316c:	91 59       	st.w	r8[0x14],r9
8000316e:	70 78       	ld.w	r8,r8[0x1c]
80003170:	d5 03       	csrf	0x10
80003172:	c0 68       	rjmp	8000317e <pwm_init+0x2a>
80003174:	fe 78 30 00 	mov	r8,-53248
80003178:	37 f9       	mov	r9,127
8000317a:	91 59       	st.w	r8[0x14],r9
8000317c:	70 78       	ld.w	r8,r8[0x1c]
8000317e:	78 08       	ld.w	r8,r12[0x0]
80003180:	78 39       	ld.w	r9,r12[0xc]
80003182:	a9 69       	lsl	r9,0x8
80003184:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003188:	78 18       	ld.w	r8,r12[0x4]
8000318a:	10 49       	or	r9,r8
8000318c:	78 28       	ld.w	r8,r12[0x8]
8000318e:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80003192:	fe 78 30 00 	mov	r8,-53248
80003196:	91 09       	st.w	r8[0x0],r9
80003198:	5e fd       	retal	0
8000319a:	d7 03       	nop

8000319c <_stext>:
8000319c:	e0 7d 00 00 	mov	sp,65536
800031a0:	fe c0 a7 a0 	sub	r0,pc,-22624
800031a4:	e3 b0 00 01 	mtsr	0x4,r0
800031a8:	d5 53       	csrf	0x15
800031aa:	30 80       	mov	r0,8
800031ac:	e0 61 05 38 	mov	r1,1336
800031b0:	02 30       	cp.w	r0,r1
800031b2:	c0 62       	brcc	800031be <idata_load_loop_end>
800031b4:	48 92       	lddpc	r2,800031d8 <udata_clear_loop_end+0x4>

800031b6 <idata_load_loop>:
800031b6:	a5 05       	ld.d	r4,r2++
800031b8:	a1 24       	st.d	r0++,r4
800031ba:	02 30       	cp.w	r0,r1
800031bc:	cf d3       	brcs	800031b6 <idata_load_loop>

800031be <idata_load_loop_end>:
800031be:	e0 60 05 38 	mov	r0,1336
800031c2:	e0 61 06 78 	mov	r1,1656
800031c6:	02 30       	cp.w	r0,r1
800031c8:	c0 62       	brcc	800031d4 <udata_clear_loop_end>
800031ca:	30 02       	mov	r2,0
800031cc:	30 03       	mov	r3,0

800031ce <udata_clear_loop>:
800031ce:	a1 22       	st.d	r0++,r2
800031d0:	02 30       	cp.w	r0,r1
800031d2:	cf e3       	brcs	800031ce <udata_clear_loop>

800031d4 <udata_clear_loop_end>:
800031d4:	fe cf d9 08 	sub	pc,pc,-9976
800031d8:	80 02       	ld.sh	r2,r0[0x0]
800031da:	ea d8 f5 ec 	satsub.w	r8,r5,-2580

800031dc <color16>:
float to_deg(float radians);
float to_rad(float degrees);
void clr_disp(void);

// Functions
uint16_t color16(uint8_t r, uint8_t g, uint8_t b){
800031dc:	f5 ec 10 bc 	or	r12,r10,r12<<0xb
800031e0:	f9 eb 10 5c 	or	r12,r12,r11<<0x5
  uint16_t color = (b)|((g)<<5)|((r)<<11);
  return(color);
}
800031e4:	5c 8c       	casts.h	r12
800031e6:	5e fc       	retal	r12

800031e8 <to_rad>:
  return ( sqrt(pow(p1->x - p2->x,2) + pow(p1->y - p2->y,2)) );
}
float to_deg(float radians) {
    return (radians * (180.0 / M_PI));
}
float to_rad(float degrees) {
800031e8:	d4 01       	pushm	lr
800031ea:	f0 1f 00 0c 	mcall	80003218 <to_rad+0x30>
800031ee:	e0 68 2d 18 	mov	r8,11544
800031f2:	ea 18 54 44 	orh	r8,0x5444
800031f6:	e0 69 21 fb 	mov	r9,8699
800031fa:	ea 19 40 09 	orh	r9,0x4009
800031fe:	f0 1f 00 08 	mcall	8000321c <to_rad+0x34>
80003202:	30 08       	mov	r8,0
80003204:	e0 69 80 00 	mov	r9,32768
80003208:	ea 19 40 66 	orh	r9,0x4066
8000320c:	f0 1f 00 05 	mcall	80003220 <to_rad+0x38>
80003210:	f0 1f 00 05 	mcall	80003224 <to_rad+0x3c>
    return ( (degrees * M_PI) / 180.0);
}
80003214:	d8 02       	popm	pc
80003216:	00 00       	add	r0,r0
80003218:	80 00       	ld.sh	r0,r0[0x0]
8000321a:	7d 00       	ld.w	r0,lr[0x40]
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	70 04       	ld.w	r4,r8[0x0]
80003220:	80 00       	ld.sh	r0,r0[0x0]
80003222:	76 f8       	ld.w	r8,r11[0x3c]
80003224:	80 00       	ld.sh	r0,r0[0x0]
80003226:	7d 60       	ld.w	r0,lr[0x58]

80003228 <addToArr>:
		if (i>=size){break;}
	}//For
}//verticalPrint

void addToArr(char * str, char add, size_t size){
	for (uint16_t i=size;i>0;i--){
80003228:	5c 8a       	casts.h	r10
8000322a:	c0 c0       	breq	80003242 <addToArr+0x1a>
		str[i]=str[i-1];
8000322c:	f1 da c0 10 	bfextu	r8,r10,0x0,0x10
80003230:	f8 08 00 09 	add	r9,r12,r8
80003234:	f3 39 ff ff 	ld.ub	r9,r9[-1]
80003238:	f8 08 0b 09 	st.b	r12[r8],r9
		if (i>=size){break;}
	}//For
}//verticalPrint

void addToArr(char * str, char add, size_t size){
	for (uint16_t i=size;i>0;i--){
8000323c:	20 1a       	sub	r10,1
8000323e:	5c 8a       	casts.h	r10
80003240:	cf 61       	brne	8000322c <addToArr+0x4>
		str[i]=str[i-1];
	}//For
	str[0]=add;
80003242:	b8 8b       	st.b	r12[0x0],r11
80003244:	5e fc       	retal	r12
80003246:	d7 03       	nop

80003248 <buttons_interrupt_routine>:
        state = (state + 1) % state_num;
    }
  };
} // main end

void buttons_interrupt_routine (void){
80003248:	d4 01       	pushm	lr
	if (gpio_get_pin_interrupt_flag(BTN_UP)) {
8000324a:	33 6c       	mov	r12,54
8000324c:	f0 1f 00 20 	mcall	800032cc <buttons_interrupt_routine+0x84>
80003250:	c0 70       	breq	8000325e <buttons_interrupt_routine+0x16>
		btn_pressed=UP;
80003252:	30 19       	mov	r9,1
80003254:	49 f8       	lddpc	r8,800032d0 <buttons_interrupt_routine+0x88>
80003256:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_UP);
80003258:	33 6c       	mov	r12,54
8000325a:	f0 1f 00 1f 	mcall	800032d4 <buttons_interrupt_routine+0x8c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_DOWN)){
8000325e:	33 7c       	mov	r12,55
80003260:	f0 1f 00 1b 	mcall	800032cc <buttons_interrupt_routine+0x84>
80003264:	c0 70       	breq	80003272 <buttons_interrupt_routine+0x2a>
		btn_pressed=DOWN;
80003266:	30 29       	mov	r9,2
80003268:	49 a8       	lddpc	r8,800032d0 <buttons_interrupt_routine+0x88>
8000326a:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_DOWN);
8000326c:	33 7c       	mov	r12,55
8000326e:	f0 1f 00 1a 	mcall	800032d4 <buttons_interrupt_routine+0x8c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_RIGHT)){
80003272:	33 8c       	mov	r12,56
80003274:	f0 1f 00 16 	mcall	800032cc <buttons_interrupt_routine+0x84>
80003278:	c0 70       	breq	80003286 <buttons_interrupt_routine+0x3e>
		btn_pressed=RIGHT;
8000327a:	30 49       	mov	r9,4
8000327c:	49 58       	lddpc	r8,800032d0 <buttons_interrupt_routine+0x88>
8000327e:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_RIGHT);
80003280:	33 8c       	mov	r12,56
80003282:	f0 1f 00 15 	mcall	800032d4 <buttons_interrupt_routine+0x8c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_LEFT)){
80003286:	33 9c       	mov	r12,57
80003288:	f0 1f 00 11 	mcall	800032cc <buttons_interrupt_routine+0x84>
8000328c:	c0 70       	breq	8000329a <buttons_interrupt_routine+0x52>
		btn_pressed=LEFT;
8000328e:	30 39       	mov	r9,3
80003290:	49 08       	lddpc	r8,800032d0 <buttons_interrupt_routine+0x88>
80003292:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_LEFT);
80003294:	33 9c       	mov	r12,57
80003296:	f0 1f 00 10 	mcall	800032d4 <buttons_interrupt_routine+0x8c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_CENTER)){
8000329a:	33 ac       	mov	r12,58
8000329c:	f0 1f 00 0c 	mcall	800032cc <buttons_interrupt_routine+0x84>
800032a0:	c1 20       	breq	800032c4 <buttons_interrupt_routine+0x7c>
		btn_pressed=CENTER;
800032a2:	30 59       	mov	r9,5
800032a4:	48 b8       	lddpc	r8,800032d0 <buttons_interrupt_routine+0x88>
800032a6:	91 09       	st.w	r8[0x0],r9
		state = (state + 1) % state_num;
800032a8:	48 c8       	lddpc	r8,800032d8 <buttons_interrupt_routine+0x90>
800032aa:	11 8b       	ld.ub	r11,r8[0x0]
800032ac:	2f fb       	sub	r11,-1
800032ae:	48 c9       	lddpc	r9,800032dc <buttons_interrupt_routine+0x94>
800032b0:	13 89       	ld.ub	r9,r9[0x0]
800032b2:	f6 09 0c 0a 	divs	r10,r11,r9
800032b6:	b0 8b       	st.b	r8[0x0],r11
		gpio_clear_pin_interrupt_flag(BTN_CENTER);
800032b8:	33 ac       	mov	r12,58
800032ba:	f0 1f 00 07 	mcall	800032d4 <buttons_interrupt_routine+0x8c>
		gpio_tgl_gpio_pin(LED0_GPIO);
800032be:	33 bc       	mov	r12,59
800032c0:	f0 1f 00 08 	mcall	800032e0 <buttons_interrupt_routine+0x98>
	}
	gpio_get_pin_interrupt_flag(BTN_CENTER);
800032c4:	33 ac       	mov	r12,58
800032c6:	f0 1f 00 02 	mcall	800032cc <buttons_interrupt_routine+0x84>
} //Fin Botones
800032ca:	d8 02       	popm	pc
800032cc:	80 00       	ld.sh	r0,r0[0x0]
800032ce:	2e d4       	sub	r4,-19
800032d0:	00 00       	add	r0,r0
800032d2:	06 34       	cp.w	r4,r3
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	2e ec       	sub	r12,-18
800032d8:	00 00       	add	r0,r0
800032da:	00 08       	add	r8,r0
800032dc:	00 00       	add	r0,r0
800032de:	00 2c       	rsub	r12,r0
800032e0:	80 00       	ld.sh	r0,r0[0x0]
800032e2:	2e 72       	sub	r2,-25

800032e4 <act2>:
#include "et024006dhu.h"
#include "stdlib.h"

void act2(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){
800032e4:	d4 31       	pushm	r0-r7,lr
800032e6:	20 5d       	sub	sp,20
800032e8:	50 3c       	stdsp	sp[0xc],r12
800032ea:	50 4b       	stdsp	sp[0x10],r11
800032ec:	50 2a       	stdsp	sp[0x8],r10
  uint16_t size=1,j=1,k=1,rnd=0;
  et024006_DrawFilledRect(0 , 0, 320, 240, BLACK );
800032ee:	30 08       	mov	r8,0
800032f0:	e0 69 00 f0 	mov	r9,240
800032f4:	e0 6a 01 40 	mov	r10,320
800032f8:	10 9b       	mov	r11,r8
800032fa:	10 9c       	mov	r12,r8
800032fc:	f0 1f 00 2c 	mcall	800033ac <act2+0xc8>
80003300:	30 14       	mov	r4,1
    }//If
    if(*btn_pressed==DOWN){
      size>>=1;
      size=(size<1)?(1):size;
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
      *btn_pressed = NONE;
80003302:	30 09       	mov	r9,0
80003304:	50 09       	stdsp	sp[0x0],r9
    }//If
    for( k=0; k<8; k++){
      for(j=0;j<8;j++){
        et024006_DrawFilledRect(k*size,j*size,size,size,(k+j)%2==0?BLACK:WHITE);
80003306:	e0 61 ff ff 	mov	r1,65535
8000330a:	50 19       	stdsp	sp[0x4],r9
#include "stdlib.h"

void act2(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){
  uint16_t size=1,j=1,k=1,rnd=0;
  et024006_DrawFilledRect(0 , 0, 320, 240, BLACK );
  while(*actual_state == valid_state){
8000330c:	c4 78       	rjmp	8000339a <act2+0xb6>
    if(*btn_pressed==UP){
8000330e:	40 29       	lddsp	r9,sp[0x8]
80003310:	72 08       	ld.w	r8,r9[0x0]
80003312:	58 18       	cp.w	r8,1
80003314:	c0 e1       	brne	80003330 <act2+0x4c>
      size<<=1;
80003316:	a1 74       	lsl	r4,0x1
80003318:	5c 84       	casts.h	r4
      size=(size>32)?(size>>1):size;
8000331a:	32 09       	mov	r9,32
8000331c:	f2 04 19 00 	cp.h	r4,r9
80003320:	e0 88 00 04 	brls	80003328 <act2+0x44>
80003324:	e9 d4 c0 2f 	bfextu	r4,r4,0x1,0xf
      *btn_pressed = NONE;
80003328:	30 09       	mov	r9,0
8000332a:	40 28       	lddsp	r8,sp[0x8]
8000332c:	91 09       	st.w	r8[0x0],r9
8000332e:	c1 38       	rjmp	80003354 <act2+0x70>
    }//If
    if(*btn_pressed==DOWN){
80003330:	58 28       	cp.w	r8,2
80003332:	c1 11       	brne	80003354 <act2+0x70>
      size>>=1;
80003334:	e9 d4 c0 2f 	bfextu	r4,r4,0x1,0xf
      size=(size<1)?(1):size;
80003338:	f9 b4 00 01 	moveq	r4,1
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
8000333c:	30 08       	mov	r8,0
8000333e:	e0 69 00 f0 	mov	r9,240
80003342:	e0 6a 01 40 	mov	r10,320
80003346:	10 9b       	mov	r11,r8
80003348:	10 9c       	mov	r12,r8
8000334a:	f0 1f 00 19 	mcall	800033ac <act2+0xc8>
      *btn_pressed = NONE;
8000334e:	30 09       	mov	r9,0
80003350:	40 28       	lddsp	r8,sp[0x8]
80003352:	91 09       	st.w	r8[0x0],r9
80003354:	30 00       	mov	r0,0
80003356:	40 03       	lddsp	r3,sp[0x0]
    }//If
    for( k=0; k<8; k++){
      for(j=0;j<8;j++){
        et024006_DrawFilledRect(k*size,j*size,size,size,(k+j)%2==0?BLACK:WHITE);
80003358:	08 95       	mov	r5,r4
8000335a:	5c 75       	castu.h	r5
8000335c:	c1 a8       	rjmp	80003390 <act2+0xac>
8000335e:	ee 03 00 08 	add	r8,r7,r3
80003362:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003366:	f9 b8 00 00 	moveq	r8,0
8000336a:	e2 08 17 10 	movne	r8,r1
8000336e:	0a 99       	mov	r9,r5
80003370:	0a 9a       	mov	r10,r5
80003372:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
80003376:	04 9c       	mov	r12,r2
80003378:	f0 1f 00 0d 	mcall	800033ac <act2+0xc8>
8000337c:	2f f7       	sub	r7,-1
8000337e:	08 06       	add	r6,r4
80003380:	5c 86       	casts.h	r6
      size=(size<1)?(1):size;
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
      *btn_pressed = NONE;
    }//If
    for( k=0; k<8; k++){
      for(j=0;j<8;j++){
80003382:	58 87       	cp.w	r7,8
80003384:	ce d1       	brne	8000335e <act2+0x7a>
80003386:	2f f3       	sub	r3,-1
80003388:	08 00       	add	r0,r4
8000338a:	5c 80       	casts.h	r0
      size>>=1;
      size=(size<1)?(1):size;
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
      *btn_pressed = NONE;
    }//If
    for( k=0; k<8; k++){
8000338c:	58 83       	cp.w	r3,8
8000338e:	c0 60       	breq	8000339a <act2+0xb6>
      for(j=0;j<8;j++){
        et024006_DrawFilledRect(k*size,j*size,size,size,(k+j)%2==0?BLACK:WHITE);
80003390:	e5 d0 c0 10 	bfextu	r2,r0,0x0,0x10
80003394:	40 06       	lddsp	r6,sp[0x0]
80003396:	40 17       	lddsp	r7,sp[0x4]
80003398:	ce 3b       	rjmp	8000335e <act2+0x7a>
#include "stdlib.h"

void act2(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){
  uint16_t size=1,j=1,k=1,rnd=0;
  et024006_DrawFilledRect(0 , 0, 320, 240, BLACK );
  while(*actual_state == valid_state){
8000339a:	40 49       	lddsp	r9,sp[0x10]
8000339c:	13 88       	ld.ub	r8,r9[0x0]
8000339e:	40 39       	lddsp	r9,sp[0xc]
800033a0:	f2 08 18 00 	cp.b	r8,r9
800033a4:	cb 50       	breq	8000330e <act2+0x2a>
      for(j=0;j<8;j++){
        et024006_DrawFilledRect(k*size,j*size,size,size,(k+j)%2==0?BLACK:WHITE);
      }//For
    }//For
  }//While
}
800033a6:	2f bd       	sub	sp,-20
800033a8:	d8 32       	popm	r0-r7,pc
800033aa:	00 00       	add	r0,r0
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	24 7c       	sub	r12,71

800033b0 <clr_disp>:
// Functions
uint16_t color16(uint8_t r, uint8_t g, uint8_t b){
  uint16_t color = (b)|((g)<<5)|((r)<<11);
  return(color);
}
void clr_disp(void){
800033b0:	d4 01       	pushm	lr
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
800033b2:	30 08       	mov	r8,0
800033b4:	e0 69 00 f0 	mov	r9,240
800033b8:	e0 6a 01 40 	mov	r10,320
800033bc:	10 9b       	mov	r11,r8
800033be:	10 9c       	mov	r12,r8
800033c0:	f0 1f 00 02 	mcall	800033c8 <clr_disp+0x18>
}
800033c4:	d8 02       	popm	pc
800033c6:	00 00       	add	r0,r0
800033c8:	80 00       	ld.sh	r0,r0[0x0]
800033ca:	24 7c       	sub	r12,71

800033cc <act1>:
#include "et024006dhu.h"
#include "stdlib.h"

void act1(uint8_t valid_state, uint8_t * actual_state){
800033cc:	d4 31       	pushm	r0-r7,lr
800033ce:	20 1d       	sub	sp,4
800033d0:	50 0c       	stdsp	sp[0x0],r12
800033d2:	16 90       	mov	r0,r11
	  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
800033d4:	30 08       	mov	r8,0
800033d6:	e0 69 00 f0 	mov	r9,240
800033da:	e0 6a 01 40 	mov	r10,320
800033de:	10 9b       	mov	r11,r8
800033e0:	10 9c       	mov	r12,r8
800033e2:	f0 1f 00 2d 	mcall	80003494 <act1+0xc8>
800033e6:	30 01       	mov	r1,0
800033e8:	02 92       	mov	r2,r1

    int c=WHITE;
  	for(int i=0; i<8; i++){
  		if(i%2)
800033ea:	e0 65 ff ff 	mov	r5,65535
  		c=BLACK;
  		else
  		c=WHITE;
  		for(int j=0;j<8;j++){
  			et024006_DrawFilledRect(j*30,i*30,30,30,c);
800033ee:	31 e3       	mov	r3,30
void act1(uint8_t valid_state, uint8_t * actual_state){
	  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );

    int c=WHITE;
  	for(int i=0; i<8; i++){
  		if(i%2)
800033f0:	ed d2 c0 01 	bfextu	r6,r2,0x0,0x1
800033f4:	f9 b6 01 00 	movne	r6,0
800033f8:	ea 06 17 00 	moveq	r6,r5
800033fc:	02 94       	mov	r4,r1
800033fe:	30 07       	mov	r7,0
  		c=BLACK;
  		else
  		c=WHITE;
  		for(int j=0;j<8;j++){
  			et024006_DrawFilledRect(j*30,i*30,30,30,c);
80003400:	0c 98       	mov	r8,r6
80003402:	06 99       	mov	r9,r3
80003404:	06 9a       	mov	r10,r3
80003406:	08 9b       	mov	r11,r4
80003408:	0e 9c       	mov	r12,r7
8000340a:	f0 1f 00 23 	mcall	80003494 <act1+0xc8>
  			if(c==BLACK)
8000340e:	58 06       	cp.w	r6,0
80003410:	ea 06 17 00 	moveq	r6,r5
80003414:	f9 b6 01 00 	movne	r6,0
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003418:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000341c:	e0 79 d4 c0 	mov	r9,120000
80003420:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003424:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003428:	14 38       	cp.w	r8,r10
8000342a:	e0 88 00 08 	brls	8000343a <act1+0x6e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000342e:	12 38       	cp.w	r8,r9
80003430:	fe 98 ff fa 	brls	80003424 <act1+0x58>
80003434:	12 3a       	cp.w	r10,r9
80003436:	c2 73       	brcs	80003484 <act1+0xb8>
80003438:	cf 6b       	rjmp	80003424 <act1+0x58>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000343a:	12 38       	cp.w	r8,r9
8000343c:	e0 8b 00 24 	brhi	80003484 <act1+0xb8>
80003440:	12 3a       	cp.w	r10,r9
80003442:	c2 13       	brcs	80003484 <act1+0xb8>
80003444:	cf 0b       	rjmp	80003424 <act1+0x58>

void act1(uint8_t valid_state, uint8_t * actual_state){
	  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );

    int c=WHITE;
  	for(int i=0; i<8; i++){
80003446:	2f f2       	sub	r2,-1
80003448:	2e 21       	sub	r1,-30
8000344a:	58 82       	cp.w	r2,8
8000344c:	cd 21       	brne	800033f0 <act1+0x24>
8000344e:	40 0b       	lddsp	r11,sp[0x0]
80003450:	c1 58       	rjmp	8000347a <act1+0xae>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003452:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003456:	f0 ca ff f4 	sub	r10,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000345a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000345e:	14 38       	cp.w	r8,r10
80003460:	e0 88 00 08 	brls	80003470 <act1+0xa4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003464:	12 38       	cp.w	r8,r9
80003466:	fe 98 ff fa 	brls	8000345a <act1+0x8e>
8000346a:	12 3a       	cp.w	r10,r9
8000346c:	c0 73       	brcs	8000347a <act1+0xae>
8000346e:	cf 6b       	rjmp	8000345a <act1+0x8e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003470:	12 38       	cp.w	r8,r9
80003472:	e0 8b 00 04 	brhi	8000347a <act1+0xae>
80003476:	12 3a       	cp.w	r10,r9
80003478:	cf 12       	brcc	8000345a <act1+0x8e>
  			else
  			c=BLACK;
  			delay_ms(10);
  		}//For
  	}//For
  while(*actual_state == valid_state){delay_us(1);}
8000347a:	01 88       	ld.ub	r8,r0[0x0]
8000347c:	f6 08 18 00 	cp.b	r8,r11
80003480:	ce 90       	breq	80003452 <act1+0x86>
80003482:	c0 68       	rjmp	8000348e <act1+0xc2>
}
80003484:	2e 27       	sub	r7,-30
  	for(int i=0; i<8; i++){
  		if(i%2)
  		c=BLACK;
  		else
  		c=WHITE;
  		for(int j=0;j<8;j++){
80003486:	e0 47 00 f0 	cp.w	r7,240
8000348a:	cb b1       	brne	80003400 <act1+0x34>
8000348c:	cd db       	rjmp	80003446 <act1+0x7a>
  			c=BLACK;
  			delay_ms(10);
  		}//For
  	}//For
  while(*actual_state == valid_state){delay_us(1);}
}
8000348e:	2f fd       	sub	sp,-4
80003490:	d8 32       	popm	r0-r7,pc
80003492:	00 00       	add	r0,r0
80003494:	80 00       	ld.sh	r0,r0[0x0]
80003496:	24 7c       	sub	r12,71

80003498 <act8>:
#include "et024006dhu.h"
#include "stdlib.h"
#include "delay.h"

void act8(uint8_t valid_state, uint8_t * actual_state){
80003498:	d4 31       	pushm	r0-r7,lr
8000349a:	20 6d       	sub	sp,24
8000349c:	50 1c       	stdsp	sp[0x4],r12
8000349e:	50 2b       	stdsp	sp[0x8],r11

  uint16_t colors[] = {
    0xD9E6, //red 0
    0x2A12, //blue 1
    0xF6C7, //yellow 2
    color16(63,127,63), //white 3
800034a0:	33 fa       	mov	r10,63
800034a2:	37 fb       	mov	r11,127
800034a4:	14 9c       	mov	r12,r10
800034a6:	f0 1f 00 f3 	mcall	80003870 <act8+0x3d8>
800034aa:	e3 dc b0 10 	bfexts	r1,r12,0x0,0x10
    color16(63,127,63), //whitish white 4
    color16(00,000,00) //black 8
800034ae:	30 0a       	mov	r10,0
800034b0:	14 9b       	mov	r11,r10
800034b2:	14 9c       	mov	r12,r10
800034b4:	f0 1f 00 ef 	mcall	80003870 <act8+0x3d8>
  };
800034b8:	fe 78 d9 e6 	mov	r8,-9754
800034bc:	ba 68       	st.h	sp[0xc],r8
800034be:	e0 68 2a 12 	mov	r8,10770
800034c2:	ba 78       	st.h	sp[0xe],r8
800034c4:	fe 78 f6 c7 	mov	r8,-2361
800034c8:	fb 58 00 10 	st.h	sp[16],r8
800034cc:	fb 51 00 12 	st.h	sp[18],r1
800034d0:	fb 51 00 14 	st.h	sp[20],r1
800034d4:	fb 5c 00 16 	st.h	sp[22],r12
  // background grid
  et024006_DrawFilledRect(0, 0, 320, 240, 0x0000 );
800034d8:	30 08       	mov	r8,0
800034da:	e0 69 00 f0 	mov	r9,240
800034de:	e0 6a 01 40 	mov	r10,320
800034e2:	10 9b       	mov	r11,r8
800034e4:	10 9c       	mov	r12,r8
800034e6:	f0 1f 00 e4 	mcall	80003874 <act8+0x3dc>
800034ea:	30 13       	mov	r3,1
  for( uint8_t i = 0; i<16; i++ ){
800034ec:	06 92       	mov	r2,r3
    for( uint8_t j = 0; j<12; j++ ){
      et024006_DrawFilledRect(20*i + 1, 20* j + 1, 18, 18, 0xFFFF );
800034ee:	e0 65 ff ff 	mov	r5,65535
800034f2:	31 24       	mov	r4,18
800034f4:	c1 08       	rjmp	80003514 <act8+0x7c>
800034f6:	0a 98       	mov	r8,r5
800034f8:	08 99       	mov	r9,r4
800034fa:	08 9a       	mov	r10,r4
800034fc:	0e 9b       	mov	r11,r7
800034fe:	0c 9c       	mov	r12,r6
80003500:	f0 1f 00 dd 	mcall	80003874 <act8+0x3dc>
80003504:	2e c7       	sub	r7,-20
    color16(00,000,00) //black 8
  };
  // background grid
  et024006_DrawFilledRect(0, 0, 320, 240, 0x0000 );
  for( uint8_t i = 0; i<16; i++ ){
    for( uint8_t j = 0; j<12; j++ ){
80003506:	e0 47 00 f1 	cp.w	r7,241
8000350a:	cf 61       	brne	800034f6 <act8+0x5e>
8000350c:	2e c3       	sub	r3,-20
    color16(63,127,63), //whitish white 4
    color16(00,000,00) //black 8
  };
  // background grid
  et024006_DrawFilledRect(0, 0, 320, 240, 0x0000 );
  for( uint8_t i = 0; i<16; i++ ){
8000350e:	e0 43 01 41 	cp.w	r3,321
80003512:	c0 40       	breq	8000351a <act8+0x82>
80003514:	06 96       	mov	r6,r3
80003516:	04 97       	mov	r7,r2
80003518:	ce fb       	rjmp	800034f6 <act8+0x5e>
8000351a:	30 00       	mov	r0,0
    uint16_t color = colors[3];
    int x1 = rand()%15;
    int y1 = rand()%11;
    int width, height;
    do{
      width = rand()%5 + 1;
8000351c:	e0 65 66 67 	mov	r5,26215
80003520:	ea 15 66 66 	orh	r5,0x6666
      et024006_DrawFilledRect(0, 0, 20, 20, 0x0000);
80003524:	00 94       	mov	r4,r0
80003526:	31 43       	mov	r3,20
    }while((width + x1)>16);
    do{
      height = rand()%5 + 1;
      et024006_DrawFilledRect(0, 0, 20, 20, 0xFF00);
    }while((height + y1)>12);
    et024006_DrawFilledRect(20*x1+1, 20*y1+1, 20*width-2, 20*height-2, color);
80003528:	5c 71       	castu.h	r1
8000352a:	50 01       	stdsp	sp[0x0],r1
  }
  // random rectangles without collision
  // uint8_t used_square[16][12];
  for(uint8_t piece = 0; piece < 20; piece++){
    uint16_t color = colors[3];
    int x1 = rand()%15;
8000352c:	f0 1f 00 d3 	mcall	80003878 <act8+0x3e0>
80003530:	e0 6a 88 89 	mov	r10,34953
80003534:	ea 1a 88 88 	orh	r10,0x8888
80003538:	f8 0a 04 48 	muls.d	r8,r12,r10
8000353c:	f8 09 00 01 	add	r1,r12,r9
80003540:	a3 51       	asr	r1,0x3
80003542:	f8 08 14 1f 	asr	r8,r12,0x1f
80003546:	10 11       	sub	r1,r8
80003548:	e2 08 15 04 	lsl	r8,r1,0x4
8000354c:	f0 01 01 01 	sub	r1,r8,r1
80003550:	f8 01 01 01 	sub	r1,r12,r1
    int y1 = rand()%11;
80003554:	f0 1f 00 c9 	mcall	80003878 <act8+0x3e0>
80003558:	e0 6a a2 e9 	mov	r10,41705
8000355c:	ea 1a 2e 8b 	orh	r10,0x2e8b
80003560:	f8 0a 04 48 	muls.d	r8,r12,r10
80003564:	f2 02 14 01 	asr	r2,r9,0x1
80003568:	f8 08 14 1f 	asr	r8,r12,0x1f
8000356c:	10 12       	sub	r2,r8
8000356e:	e4 02 00 28 	add	r8,r2,r2<<0x2
80003572:	e4 08 00 12 	add	r2,r2,r8<<0x1
80003576:	f8 02 01 02 	sub	r2,r12,r2
    int width, height;
    do{
      width = rand()%5 + 1;
8000357a:	f0 1f 00 c0 	mcall	80003878 <act8+0x3e0>
8000357e:	f8 05 04 48 	muls.d	r8,r12,r5
80003582:	f2 06 14 01 	asr	r6,r9,0x1
80003586:	f8 08 14 1f 	asr	r8,r12,0x1f
8000358a:	10 16       	sub	r6,r8
8000358c:	ec 06 00 26 	add	r6,r6,r6<<0x2
80003590:	f8 06 01 06 	sub	r6,r12,r6
80003594:	2f f6       	sub	r6,-1
      et024006_DrawFilledRect(0, 0, 20, 20, 0x0000);
80003596:	08 98       	mov	r8,r4
80003598:	06 99       	mov	r9,r3
8000359a:	06 9a       	mov	r10,r3
8000359c:	08 9b       	mov	r11,r4
8000359e:	08 9c       	mov	r12,r4
800035a0:	f0 1f 00 b5 	mcall	80003874 <act8+0x3dc>
    }while((width + x1)>16);
800035a4:	ec 01 00 08 	add	r8,r6,r1
800035a8:	59 08       	cp.w	r8,16
800035aa:	fe 99 ff e8 	brgt	8000357a <act8+0xe2>
    do{
      height = rand()%5 + 1;
800035ae:	f0 1f 00 b3 	mcall	80003878 <act8+0x3e0>
800035b2:	f8 05 04 48 	muls.d	r8,r12,r5
800035b6:	f2 07 14 01 	asr	r7,r9,0x1
800035ba:	f8 08 14 1f 	asr	r8,r12,0x1f
800035be:	10 17       	sub	r7,r8
800035c0:	ee 07 00 27 	add	r7,r7,r7<<0x2
800035c4:	f8 07 01 07 	sub	r7,r12,r7
800035c8:	2f f7       	sub	r7,-1
      et024006_DrawFilledRect(0, 0, 20, 20, 0xFF00);
800035ca:	e0 68 ff 00 	mov	r8,65280
800035ce:	06 99       	mov	r9,r3
800035d0:	06 9a       	mov	r10,r3
800035d2:	08 9b       	mov	r11,r4
800035d4:	08 9c       	mov	r12,r4
800035d6:	f0 1f 00 a8 	mcall	80003874 <act8+0x3dc>
    }while((height + y1)>12);
800035da:	ee 02 00 08 	add	r8,r7,r2
800035de:	58 c8       	cp.w	r8,12
800035e0:	fe 99 ff e7 	brgt	800035ae <act8+0x116>
    et024006_DrawFilledRect(20*x1+1, 20*y1+1, 20*width-2, 20*height-2, color);
800035e4:	ee 07 00 27 	add	r7,r7,r7<<0x2
800035e8:	ee 09 15 01 	lsl	r9,r7,0x1
800035ec:	20 19       	sub	r9,1
800035ee:	a1 79       	lsl	r9,0x1
800035f0:	ec 06 00 26 	add	r6,r6,r6<<0x2
800035f4:	ec 0a 15 01 	lsl	r10,r6,0x1
800035f8:	20 1a       	sub	r10,1
800035fa:	a1 7a       	lsl	r10,0x1
800035fc:	e4 02 10 14 	mul	r2,r2,20
80003600:	e4 cb ff ff 	sub	r11,r2,-1
80003604:	e2 01 10 14 	mul	r1,r1,20
80003608:	e2 cc ff ff 	sub	r12,r1,-1
8000360c:	40 08       	lddsp	r8,sp[0x0]
8000360e:	e2 19 ff fe 	andl	r9,0xfffe,COH
80003612:	e2 1a ff fe 	andl	r10,0xfffe,COH
80003616:	5c 7b       	castu.h	r11
80003618:	5c 7c       	castu.h	r12
8000361a:	f0 1f 00 97 	mcall	80003874 <act8+0x3dc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000361e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003622:	e8 79 27 c0 	mov	r9,600000
80003626:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000362a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000362e:	14 38       	cp.w	r8,r10
80003630:	e0 88 00 09 	brls	80003642 <act8+0x1aa>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003634:	12 38       	cp.w	r8,r9
80003636:	fe 98 ff fa 	brls	8000362a <act8+0x192>
8000363a:	12 3a       	cp.w	r10,r9
8000363c:	e0 83 01 05 	brlo	80003846 <act8+0x3ae>
80003640:	cf 5b       	rjmp	8000362a <act8+0x192>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003642:	12 38       	cp.w	r8,r9
80003644:	e0 8b 01 01 	brhi	80003846 <act8+0x3ae>
80003648:	12 3a       	cp.w	r10,r9
8000364a:	e0 83 00 fe 	brlo	80003846 <act8+0x3ae>
8000364e:	ce eb       	rjmp	8000362a <act8+0x192>
80003650:	30 00       	mov	r0,0
    delay_ms(50);
  }
  //create pieces
  for(uint8_t piece = 0; piece < 15; piece++){
    uint16_t color = colors[rand()%5];
80003652:	e0 65 66 67 	mov	r5,26215
80003656:	ea 15 66 66 	orh	r5,0x6666
    int x1 = rand()%15;
    int y1 = rand()%11;
    int width, height;
    do{
      width = rand()%5 + 1;
      et024006_DrawFilledRect(0, 0, 20, 20, 0x0000);
8000365a:	00 94       	mov	r4,r0
8000365c:	31 42       	mov	r2,20
    et024006_DrawFilledRect(20*x1+1, 20*y1+1, 20*width-2, 20*height-2, color);
    delay_ms(50);
  }
  //create pieces
  for(uint8_t piece = 0; piece < 15; piece++){
    uint16_t color = colors[rand()%5];
8000365e:	f0 1f 00 87 	mcall	80003878 <act8+0x3e0>
80003662:	f8 05 04 48 	muls.d	r8,r12,r5
80003666:	f2 08 14 01 	asr	r8,r9,0x1
8000366a:	f8 09 14 1f 	asr	r9,r12,0x1f
8000366e:	12 18       	sub	r8,r9
80003670:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003674:	10 1c       	sub	r12,r8
80003676:	fa c8 ff e8 	sub	r8,sp,-24
8000367a:	f0 0c 00 1c 	add	r12,r8,r12<<0x1
8000367e:	f9 0c ff f4 	ld.sh	r12,r12[-12]
80003682:	50 0c       	stdsp	sp[0x0],r12
    int x1 = rand()%15;
80003684:	f0 1f 00 7d 	mcall	80003878 <act8+0x3e0>
80003688:	e0 6a 88 89 	mov	r10,34953
8000368c:	ea 1a 88 88 	orh	r10,0x8888
80003690:	f8 0a 04 48 	muls.d	r8,r12,r10
80003694:	f8 09 00 01 	add	r1,r12,r9
80003698:	a3 51       	asr	r1,0x3
8000369a:	f8 08 14 1f 	asr	r8,r12,0x1f
8000369e:	10 11       	sub	r1,r8
800036a0:	e2 08 15 04 	lsl	r8,r1,0x4
800036a4:	f0 01 01 01 	sub	r1,r8,r1
800036a8:	f8 01 01 01 	sub	r1,r12,r1
    int y1 = rand()%11;
800036ac:	f0 1f 00 73 	mcall	80003878 <act8+0x3e0>
800036b0:	e0 6a a2 e9 	mov	r10,41705
800036b4:	ea 1a 2e 8b 	orh	r10,0x2e8b
800036b8:	f8 0a 04 48 	muls.d	r8,r12,r10
800036bc:	f2 03 14 01 	asr	r3,r9,0x1
800036c0:	f8 08 14 1f 	asr	r8,r12,0x1f
800036c4:	10 13       	sub	r3,r8
800036c6:	e6 03 00 28 	add	r8,r3,r3<<0x2
800036ca:	e6 08 00 13 	add	r3,r3,r8<<0x1
800036ce:	f8 03 01 03 	sub	r3,r12,r3
    int width, height;
    do{
      width = rand()%5 + 1;
800036d2:	f0 1f 00 6a 	mcall	80003878 <act8+0x3e0>
800036d6:	f8 05 04 48 	muls.d	r8,r12,r5
800036da:	f2 06 14 01 	asr	r6,r9,0x1
800036de:	f8 08 14 1f 	asr	r8,r12,0x1f
800036e2:	10 16       	sub	r6,r8
800036e4:	ec 06 00 26 	add	r6,r6,r6<<0x2
800036e8:	f8 06 01 06 	sub	r6,r12,r6
800036ec:	2f f6       	sub	r6,-1
      et024006_DrawFilledRect(0, 0, 20, 20, 0x0000);
800036ee:	08 98       	mov	r8,r4
800036f0:	04 99       	mov	r9,r2
800036f2:	04 9a       	mov	r10,r2
800036f4:	08 9b       	mov	r11,r4
800036f6:	08 9c       	mov	r12,r4
800036f8:	f0 1f 00 5f 	mcall	80003874 <act8+0x3dc>
    }while((width + x1)>=16);
800036fc:	ec 01 00 08 	add	r8,r6,r1
80003700:	58 f8       	cp.w	r8,15
80003702:	fe 99 ff e8 	brgt	800036d2 <act8+0x23a>
    do{
      height = rand()%5 + 1;
80003706:	f0 1f 00 5d 	mcall	80003878 <act8+0x3e0>
8000370a:	f8 05 04 48 	muls.d	r8,r12,r5
8000370e:	f2 07 14 01 	asr	r7,r9,0x1
80003712:	f8 08 14 1f 	asr	r8,r12,0x1f
80003716:	10 17       	sub	r7,r8
80003718:	ee 07 00 27 	add	r7,r7,r7<<0x2
8000371c:	f8 07 01 07 	sub	r7,r12,r7
80003720:	2f f7       	sub	r7,-1
      et024006_DrawFilledRect(0, 0, 20, 20, 0xFF00);
80003722:	e0 68 ff 00 	mov	r8,65280
80003726:	04 99       	mov	r9,r2
80003728:	04 9a       	mov	r10,r2
8000372a:	08 9b       	mov	r11,r4
8000372c:	08 9c       	mov	r12,r4
8000372e:	f0 1f 00 52 	mcall	80003874 <act8+0x3dc>
    }while((height + y1)>=12);
80003732:	ee 03 00 08 	add	r8,r7,r3
80003736:	58 b8       	cp.w	r8,11
80003738:	fe 99 ff e7 	brgt	80003706 <act8+0x26e>
    if (x1 && y1){
8000373c:	58 01       	cp.w	r1,0
8000373e:	5f 19       	srne	r9
80003740:	58 03       	cp.w	r3,0
80003742:	5f 18       	srne	r8
80003744:	f3 e8 00 08 	and	r8,r9,r8
80003748:	30 09       	mov	r9,0
8000374a:	f2 08 18 00 	cp.b	r8,r9
8000374e:	c1 b0       	breq	80003784 <act8+0x2ec>
      et024006_DrawFilledRect(20*x1-1, 20*y1-1, 20*width+2, 20*height+2, 0x0000);
80003750:	ee 07 00 29 	add	r9,r7,r7<<0x2
80003754:	a1 79       	lsl	r9,0x1
80003756:	2f f9       	sub	r9,-1
80003758:	a1 79       	lsl	r9,0x1
8000375a:	ec 06 00 2a 	add	r10,r6,r6<<0x2
8000375e:	a1 7a       	lsl	r10,0x1
80003760:	2f fa       	sub	r10,-1
80003762:	a1 7a       	lsl	r10,0x1
80003764:	e6 0b 10 14 	mul	r11,r3,20
80003768:	20 1b       	sub	r11,1
8000376a:	e2 0c 10 14 	mul	r12,r1,20
8000376e:	20 1c       	sub	r12,1
80003770:	08 98       	mov	r8,r4
80003772:	e2 19 ff fe 	andl	r9,0xfffe,COH
80003776:	e2 1a ff fe 	andl	r10,0xfffe,COH
8000377a:	5c 7b       	castu.h	r11
8000377c:	5c 7c       	castu.h	r12
8000377e:	f0 1f 00 3e 	mcall	80003874 <act8+0x3dc>
80003782:	c1 48       	rjmp	800037aa <act8+0x312>
    }else{
      et024006_DrawFilledRect(20*x1, 20*y1, 20*width+1, 20*height+1, 0x0000);
80003784:	ee 09 10 14 	mul	r9,r7,20
80003788:	2f f9       	sub	r9,-1
8000378a:	ec 0a 10 14 	mul	r10,r6,20
8000378e:	2f fa       	sub	r10,-1
80003790:	e6 0b 10 14 	mul	r11,r3,20
80003794:	e2 0c 10 14 	mul	r12,r1,20
80003798:	08 98       	mov	r8,r4
8000379a:	5c 79       	castu.h	r9
8000379c:	5c 7a       	castu.h	r10
8000379e:	e2 1b ff fc 	andl	r11,0xfffc,COH
800037a2:	e2 1c ff fc 	andl	r12,0xfffc,COH
800037a6:	f0 1f 00 34 	mcall	80003874 <act8+0x3dc>
    }
    et024006_DrawFilledRect(20*x1+1, 20*y1+1, 20*width-2, 20*height-2, color);
800037aa:	ee 07 00 27 	add	r7,r7,r7<<0x2
800037ae:	ee 09 15 01 	lsl	r9,r7,0x1
800037b2:	20 19       	sub	r9,1
800037b4:	a1 79       	lsl	r9,0x1
800037b6:	ec 06 00 26 	add	r6,r6,r6<<0x2
800037ba:	ec 0a 15 01 	lsl	r10,r6,0x1
800037be:	20 1a       	sub	r10,1
800037c0:	a1 7a       	lsl	r10,0x1
800037c2:	e6 03 10 14 	mul	r3,r3,20
800037c6:	e6 cb ff ff 	sub	r11,r3,-1
800037ca:	e2 01 10 14 	mul	r1,r1,20
800037ce:	e2 cc ff ff 	sub	r12,r1,-1
800037d2:	40 08       	lddsp	r8,sp[0x0]
800037d4:	5c 78       	castu.h	r8
800037d6:	e2 19 ff fe 	andl	r9,0xfffe,COH
800037da:	e2 1a ff fe 	andl	r10,0xfffe,COH
800037de:	5c 7b       	castu.h	r11
800037e0:	5c 7c       	castu.h	r12
800037e2:	f0 1f 00 25 	mcall	80003874 <act8+0x3dc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800037e6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800037ea:	e8 79 27 c0 	mov	r9,600000
800037ee:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800037f2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800037f6:	14 38       	cp.w	r8,r10
800037f8:	e0 88 00 08 	brls	80003808 <act8+0x370>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800037fc:	12 38       	cp.w	r8,r9
800037fe:	fe 98 ff fa 	brls	800037f2 <act8+0x35a>
80003802:	12 3a       	cp.w	r10,r9
80003804:	c2 93       	brcs	80003856 <act8+0x3be>
80003806:	cf 6b       	rjmp	800037f2 <act8+0x35a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003808:	12 38       	cp.w	r8,r9
8000380a:	e0 8b 00 26 	brhi	80003856 <act8+0x3be>
8000380e:	12 3a       	cp.w	r10,r9
80003810:	c2 33       	brcs	80003856 <act8+0x3be>
80003812:	cf 0b       	rjmp	800037f2 <act8+0x35a>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003814:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003818:	f0 ca ff f4 	sub	r10,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000381c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003820:	14 38       	cp.w	r8,r10
80003822:	e0 88 00 08 	brls	80003832 <act8+0x39a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003826:	12 38       	cp.w	r8,r9
80003828:	fe 98 ff fa 	brls	8000381c <act8+0x384>
8000382c:	12 3a       	cp.w	r10,r9
8000382e:	c0 73       	brcs	8000383c <act8+0x3a4>
80003830:	cf 6b       	rjmp	8000381c <act8+0x384>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003832:	12 38       	cp.w	r8,r9
80003834:	e0 8b 00 04 	brhi	8000383c <act8+0x3a4>
80003838:	12 3a       	cp.w	r10,r9
8000383a:	cf 12       	brcc	8000381c <act8+0x384>
    delay_ms(50);
  }
  while(valid_state == *actual_state){
8000383c:	19 88       	ld.ub	r8,r12[0x0]
8000383e:	f6 08 18 00 	cp.b	r8,r11
80003842:	ce 90       	breq	80003814 <act8+0x37c>
80003844:	c1 38       	rjmp	8000386a <act8+0x3d2>
      et024006_DrawFilledRect(20*i + 1, 20* j + 1, 18, 18, 0xFFFF );
    }
  }
  // random rectangles without collision
  // uint8_t used_square[16][12];
  for(uint8_t piece = 0; piece < 20; piece++){
80003846:	2f f0       	sub	r0,-1
80003848:	5c 50       	castu.b	r0
8000384a:	31 48       	mov	r8,20
8000384c:	f0 00 18 00 	cp.b	r0,r8
80003850:	fe 91 fe 6e 	brne	8000352c <act8+0x94>
80003854:	cf ea       	rjmp	80003650 <act8+0x1b8>
    }while((height + y1)>12);
    et024006_DrawFilledRect(20*x1+1, 20*y1+1, 20*width-2, 20*height-2, color);
    delay_ms(50);
  }
  //create pieces
  for(uint8_t piece = 0; piece < 15; piece++){
80003856:	2f f0       	sub	r0,-1
80003858:	5c 50       	castu.b	r0
8000385a:	30 fa       	mov	r10,15
8000385c:	f4 00 18 00 	cp.b	r0,r10
80003860:	fe 91 fe ff 	brne	8000365e <act8+0x1c6>
80003864:	40 1b       	lddsp	r11,sp[0x4]
80003866:	40 2c       	lddsp	r12,sp[0x8]
80003868:	ce ab       	rjmp	8000383c <act8+0x3a4>
    //delay_ms(500);
    //et024006_DrawFilledRect(0, 0, 20, 20, 0xFF00);
    //delay_ms(500);
	delay_us(1);
  }
}
8000386a:	2f ad       	sub	sp,-24
8000386c:	d8 32       	popm	r0-r7,pc
8000386e:	00 00       	add	r0,r0
80003870:	80 00       	ld.sh	r0,r0[0x0]
80003872:	31 dc       	mov	r12,29
80003874:	80 00       	ld.sh	r0,r0[0x0]
80003876:	24 7c       	sub	r12,71
80003878:	80 00       	ld.sh	r0,r0[0x0]
8000387a:	85 f0       	st.w	r2[0x3c],r0

8000387c <act5>:
#include "et024006dhu.h"
#include "stdlib.h"

void act5(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){
8000387c:	d4 31       	pushm	r0-r7,lr
8000387e:	20 8d       	sub	sp,32
80003880:	50 6c       	stdsp	sp[0x18],r12
80003882:	50 7b       	stdsp	sp[0x1c],r11
80003884:	50 5a       	stdsp	sp[0x14],r10

    uint16_t size=1,j=1,k=1,rr,rg,rb;
  	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80003886:	30 08       	mov	r8,0
80003888:	e0 69 00 f0 	mov	r9,240
8000388c:	e0 6a 01 40 	mov	r10,320
80003890:	10 9b       	mov	r11,r8
80003892:	10 9c       	mov	r12,r8
80003894:	f0 1f 00 5b 	mcall	80003a00 <act5+0x184>
80003898:	30 14       	mov	r4,1
  		rr=rand();
  		rg=rand();
  		rb=rand();
  		for( k=0; k<8; k++){
  			for(j=0;j<8;j++){
  				et024006_DrawFilledRect(k*size,j*size,size,size,(k+j)%2==0?color16(rr%31,rg%63,rb%31):WHITE);
8000389a:	30 09       	mov	r9,0
8000389c:	50 39       	stdsp	sp[0xc],r9
8000389e:	50 49       	stdsp	sp[0x10],r9
800038a0:	e0 61 ff ff 	mov	r1,65535

void act5(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){

    uint16_t size=1,j=1,k=1,rr,rg,rb;
  	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
  	while(*actual_state == valid_state){
800038a4:	ca 58       	rjmp	800039ee <act5+0x172>
  		if(*btn_pressed==UP){
800038a6:	40 59       	lddsp	r9,sp[0x14]
800038a8:	72 08       	ld.w	r8,r9[0x0]
800038aa:	58 18       	cp.w	r8,1
800038ac:	c0 e1       	brne	800038c8 <act5+0x4c>
  			size<<=1;
800038ae:	a1 74       	lsl	r4,0x1
800038b0:	5c 84       	casts.h	r4
  			size=(size>32)?(size>>1):size;
800038b2:	32 09       	mov	r9,32
800038b4:	f2 04 19 00 	cp.h	r4,r9
800038b8:	e0 88 00 04 	brls	800038c0 <act5+0x44>
800038bc:	e9 d4 c0 2f 	bfextu	r4,r4,0x1,0xf
        *btn_pressed = NONE;
800038c0:	30 09       	mov	r9,0
800038c2:	40 58       	lddsp	r8,sp[0x14]
800038c4:	91 09       	st.w	r8[0x0],r9
800038c6:	c1 38       	rjmp	800038ec <act5+0x70>
  		}//IF
  		if(*btn_pressed==DOWN){
800038c8:	58 28       	cp.w	r8,2
800038ca:	c1 11       	brne	800038ec <act5+0x70>
  			size>>=1;
800038cc:	e9 d4 c0 2f 	bfextu	r4,r4,0x1,0xf
  			size=(size<1)?(1):size;
800038d0:	f9 b4 00 01 	moveq	r4,1
  			et024006_DrawFilledRect(0 , 0, 320, 240, BLACK );
800038d4:	30 08       	mov	r8,0
800038d6:	e0 69 00 f0 	mov	r9,240
800038da:	e0 6a 01 40 	mov	r10,320
800038de:	10 9b       	mov	r11,r8
800038e0:	10 9c       	mov	r12,r8
800038e2:	f0 1f 00 48 	mcall	80003a00 <act5+0x184>
        *btn_pressed = NONE;
800038e6:	30 09       	mov	r9,0
800038e8:	40 58       	lddsp	r8,sp[0x14]
800038ea:	91 09       	st.w	r8[0x0],r9
  		}//If
  		rr=rand();
800038ec:	f0 1f 00 46 	mcall	80003a04 <act5+0x188>
800038f0:	18 96       	mov	r6,r12
  		rg=rand();
800038f2:	f0 1f 00 45 	mcall	80003a04 <act5+0x188>
800038f6:	18 97       	mov	r7,r12
  		rb=rand();
800038f8:	f0 1f 00 43 	mcall	80003a04 <act5+0x188>
  		for( k=0; k<8; k++){
  			for(j=0;j<8;j++){
  				et024006_DrawFilledRect(k*size,j*size,size,size,(k+j)%2==0?color16(rr%31,rg%63,rb%31):WHITE);
800038fc:	5c 7c       	castu.h	r12
800038fe:	e0 68 10 85 	mov	r8,4229
80003902:	ea 18 08 42 	orh	r8,0x842
80003906:	f8 08 06 4a 	mulu.d	r10,r12,r8
8000390a:	f8 0b 01 09 	sub	r9,r12,r11
8000390e:	a1 99       	lsr	r9,0x1
80003910:	f2 0b 00 0b 	add	r11,r9,r11
80003914:	f6 09 16 04 	lsr	r9,r11,0x4
80003918:	f2 0a 15 05 	lsl	r10,r9,0x5
8000391c:	f4 09 01 09 	sub	r9,r10,r9
80003920:	12 1c       	sub	r12,r9
80003922:	5c 5c       	castu.b	r12
80003924:	50 2c       	stdsp	sp[0x8],r12
80003926:	5c 77       	castu.h	r7
80003928:	e0 6b 41 05 	mov	r11,16645
8000392c:	ea 1b 04 10 	orh	r11,0x410
80003930:	ee 0b 06 4a 	mulu.d	r10,r7,r11
80003934:	ee 0b 01 09 	sub	r9,r7,r11
80003938:	a1 99       	lsr	r9,0x1
8000393a:	f2 0b 00 0b 	add	r11,r9,r11
8000393e:	f6 09 16 05 	lsr	r9,r11,0x5
80003942:	f2 0a 15 06 	lsl	r10,r9,0x6
80003946:	f4 09 01 09 	sub	r9,r10,r9
8000394a:	12 17       	sub	r7,r9
8000394c:	f3 d7 c0 08 	bfextu	r9,r7,0x0,0x8
80003950:	50 19       	stdsp	sp[0x4],r9
80003952:	5c 76       	castu.h	r6
80003954:	ec 08 06 48 	mulu.d	r8,r6,r8
80003958:	ec 09 01 0a 	sub	r10,r6,r9
8000395c:	a1 9a       	lsr	r10,0x1
8000395e:	f4 09 00 09 	add	r9,r10,r9
80003962:	f2 08 16 04 	lsr	r8,r9,0x4
80003966:	f0 09 15 05 	lsl	r9,r8,0x5
8000396a:	f2 08 01 08 	sub	r8,r9,r8
8000396e:	10 16       	sub	r6,r8
80003970:	5c 56       	castu.b	r6
80003972:	50 06       	stdsp	sp[0x0],r6
80003974:	30 00       	mov	r0,0
80003976:	40 33       	lddsp	r3,sp[0xc]
80003978:	08 95       	mov	r5,r4
8000397a:	5c 75       	castu.h	r5
8000397c:	c2 08       	rjmp	800039bc <act5+0x140>
8000397e:	ee 03 00 08 	add	r8,r7,r3
80003982:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003986:	c0 30       	breq	8000398c <act5+0x110>
80003988:	02 98       	mov	r8,r1
8000398a:	c0 88       	rjmp	8000399a <act5+0x11e>
8000398c:	40 2a       	lddsp	r10,sp[0x8]
8000398e:	40 1b       	lddsp	r11,sp[0x4]
80003990:	40 0c       	lddsp	r12,sp[0x0]
80003992:	f0 1f 00 1e 	mcall	80003a08 <act5+0x18c>
80003996:	f1 dc c0 10 	bfextu	r8,r12,0x0,0x10
8000399a:	0a 99       	mov	r9,r5
8000399c:	0a 9a       	mov	r10,r5
8000399e:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
800039a2:	04 9c       	mov	r12,r2
800039a4:	f0 1f 00 17 	mcall	80003a00 <act5+0x184>
800039a8:	2f f7       	sub	r7,-1
800039aa:	08 06       	add	r6,r4
800039ac:	5c 86       	casts.h	r6
  		}//If
  		rr=rand();
  		rg=rand();
  		rb=rand();
  		for( k=0; k<8; k++){
  			for(j=0;j<8;j++){
800039ae:	58 87       	cp.w	r7,8
800039b0:	ce 71       	brne	8000397e <act5+0x102>
800039b2:	2f f3       	sub	r3,-1
800039b4:	08 00       	add	r0,r4
800039b6:	5c 80       	casts.h	r0
        *btn_pressed = NONE;
  		}//If
  		rr=rand();
  		rg=rand();
  		rb=rand();
  		for( k=0; k<8; k++){
800039b8:	58 83       	cp.w	r3,8
800039ba:	c0 60       	breq	800039c6 <act5+0x14a>
  			for(j=0;j<8;j++){
  				et024006_DrawFilledRect(k*size,j*size,size,size,(k+j)%2==0?color16(rr%31,rg%63,rb%31):WHITE);
800039bc:	e5 d0 c0 10 	bfextu	r2,r0,0x0,0x10
800039c0:	40 36       	lddsp	r6,sp[0xc]
800039c2:	40 47       	lddsp	r7,sp[0x10]
800039c4:	cd db       	rjmp	8000397e <act5+0x102>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800039c6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800039ca:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800039ce:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800039d2:	14 38       	cp.w	r8,r10
800039d4:	e0 88 00 08 	brls	800039e4 <act5+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800039d8:	12 38       	cp.w	r8,r9
800039da:	fe 98 ff fa 	brls	800039ce <act5+0x152>
800039de:	12 3a       	cp.w	r10,r9
800039e0:	c0 73       	brcs	800039ee <act5+0x172>
800039e2:	cf 6b       	rjmp	800039ce <act5+0x152>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800039e4:	12 38       	cp.w	r8,r9
800039e6:	e0 8b 00 04 	brhi	800039ee <act5+0x172>
800039ea:	12 3a       	cp.w	r10,r9
800039ec:	cf 12       	brcc	800039ce <act5+0x152>

void act5(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){

    uint16_t size=1,j=1,k=1,rr,rg,rb;
  	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
  	while(*actual_state == valid_state){
800039ee:	40 79       	lddsp	r9,sp[0x1c]
800039f0:	13 88       	ld.ub	r8,r9[0x0]
800039f2:	40 69       	lddsp	r9,sp[0x18]
800039f4:	f2 08 18 00 	cp.b	r8,r9
800039f8:	fe 90 ff 57 	breq	800038a6 <act5+0x2a>
  				et024006_DrawFilledRect(k*size,j*size,size,size,(k+j)%2==0?color16(rr%31,rg%63,rb%31):WHITE);
  			}//For
  		}//For
  		delay_ms(1);
  	}//WhilerawPixel( rnd_px_x, rnd_px_y, color16(rnd_r, rnd_g, rnd_b) );
}
800039fc:	2f 8d       	sub	sp,-32
800039fe:	d8 32       	popm	r0-r7,pc
80003a00:	80 00       	ld.sh	r0,r0[0x0]
80003a02:	24 7c       	sub	r12,71
80003a04:	80 00       	ld.sh	r0,r0[0x0]
80003a06:	85 f0       	st.w	r2[0x3c],r0
80003a08:	80 00       	ld.sh	r0,r0[0x0]
80003a0a:	31 dc       	mov	r12,29

80003a0c <act13>:
#include "et024006dhu.h"
#include "delay.h"

void act13(uint8_t valid_state, uint8_t * actual_state){
80003a0c:	eb cd 40 c0 	pushm	r6-r7,lr
80003a10:	18 96       	mov	r6,r12
80003a12:	16 97       	mov	r7,r11
  clr_disp();
80003a14:	f0 1f 00 4b 	mcall	80003b40 <act13+0x134>
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, WHITE );
80003a18:	e0 68 ff ff 	mov	r8,65535
80003a1c:	e0 69 00 f0 	mov	r9,240
80003a20:	e0 6a 01 40 	mov	r10,320
80003a24:	30 0b       	mov	r11,0
80003a26:	16 9c       	mov	r12,r11
80003a28:	f0 1f 00 47 	mcall	80003b44 <act13+0x138>
	et024006_DrawFilledCircle(120,0,195,BLACK,TFT_QUADRANT3);
80003a2c:	e0 68 00 c0 	mov	r8,192
80003a30:	30 09       	mov	r9,0
80003a32:	e0 6a 00 c3 	mov	r10,195
80003a36:	12 9b       	mov	r11,r9
80003a38:	37 8c       	mov	r12,120
80003a3a:	f0 1f 00 44 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(120,0,194,WHITE,TFT_QUADRANT3);
80003a3e:	e0 68 00 c0 	mov	r8,192
80003a42:	e0 69 ff ff 	mov	r9,65535
80003a46:	e0 6a 00 c2 	mov	r10,194
80003a4a:	30 0b       	mov	r11,0
80003a4c:	37 8c       	mov	r12,120
80003a4e:	f0 1f 00 3f 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(120,75,120,BLACK,TFT_QUADRANT2);
80003a52:	33 08       	mov	r8,48
80003a54:	30 09       	mov	r9,0
80003a56:	37 8a       	mov	r10,120
80003a58:	34 bb       	mov	r11,75
80003a5a:	14 9c       	mov	r12,r10
80003a5c:	f0 1f 00 3b 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(120,75,119,WHITE,TFT_QUADRANT2);
80003a60:	33 08       	mov	r8,48
80003a62:	e0 69 ff ff 	mov	r9,65535
80003a66:	37 7a       	mov	r10,119
80003a68:	34 bb       	mov	r11,75
80003a6a:	37 8c       	mov	r12,120
80003a6c:	f0 1f 00 37 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(75,75,75,BLACK,TFT_QUADRANT1);
80003a70:	30 c8       	mov	r8,12
80003a72:	30 09       	mov	r9,0
80003a74:	34 ba       	mov	r10,75
80003a76:	14 9b       	mov	r11,r10
80003a78:	14 9c       	mov	r12,r10
80003a7a:	f0 1f 00 34 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(75,75,74,WHITE,TFT_QUADRANT1);
80003a7e:	30 c8       	mov	r8,12
80003a80:	e0 69 ff ff 	mov	r9,65535
80003a84:	34 aa       	mov	r10,74
80003a86:	34 bb       	mov	r11,75
80003a88:	16 9c       	mov	r12,r11
80003a8a:	f0 1f 00 30 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(75,45,45,BLACK,TFT_QUADRANT0);
80003a8e:	30 38       	mov	r8,3
80003a90:	30 09       	mov	r9,0
80003a92:	32 da       	mov	r10,45
80003a94:	14 9b       	mov	r11,r10
80003a96:	34 bc       	mov	r12,75
80003a98:	f0 1f 00 2c 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(75,45,44,WHITE,TFT_QUADRANT0);
80003a9c:	30 38       	mov	r8,3
80003a9e:	e0 69 ff ff 	mov	r9,65535
80003aa2:	32 ca       	mov	r10,44
80003aa4:	32 db       	mov	r11,45
80003aa6:	34 bc       	mov	r12,75
80003aa8:	f0 1f 00 28 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(90,45,30,BLACK,TFT_QUADRANT3);
80003aac:	e0 68 00 c0 	mov	r8,192
80003ab0:	30 09       	mov	r9,0
80003ab2:	31 ea       	mov	r10,30
80003ab4:	32 db       	mov	r11,45
80003ab6:	35 ac       	mov	r12,90
80003ab8:	f0 1f 00 24 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(90,45,29,WHITE,TFT_QUADRANT3);
80003abc:	e0 68 00 c0 	mov	r8,192
80003ac0:	e0 69 ff ff 	mov	r9,65535
80003ac4:	31 da       	mov	r10,29
80003ac6:	32 db       	mov	r11,45
80003ac8:	35 ac       	mov	r12,90
80003aca:	f0 1f 00 20 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(90,60,15,BLACK,TFT_QUADRANT2);
80003ace:	33 08       	mov	r8,48
80003ad0:	30 09       	mov	r9,0
80003ad2:	30 fa       	mov	r10,15
80003ad4:	33 cb       	mov	r11,60
80003ad6:	35 ac       	mov	r12,90
80003ad8:	f0 1f 00 1c 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(90,60,14,WHITE,TFT_QUADRANT2);
80003adc:	33 08       	mov	r8,48
80003ade:	e0 69 ff ff 	mov	r9,65535
80003ae2:	30 ea       	mov	r10,14
80003ae4:	33 cb       	mov	r11,60
80003ae6:	35 ac       	mov	r12,90
80003ae8:	f0 1f 00 18 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(90,60,15,BLACK,TFT_QUADRANT1);
80003aec:	30 c8       	mov	r8,12
80003aee:	30 09       	mov	r9,0
80003af0:	30 fa       	mov	r10,15
80003af2:	33 cb       	mov	r11,60
80003af4:	35 ac       	mov	r12,90
80003af6:	f0 1f 00 15 	mcall	80003b48 <act13+0x13c>
	et024006_DrawFilledCircle(90,60,14,WHITE,TFT_QUADRANT1);
80003afa:	30 c8       	mov	r8,12
80003afc:	e0 69 ff ff 	mov	r9,65535
80003b00:	30 ea       	mov	r10,14
80003b02:	33 cb       	mov	r11,60
80003b04:	35 ac       	mov	r12,90
80003b06:	f0 1f 00 11 	mcall	80003b48 <act13+0x13c>
  while(*actual_state == valid_state){delay_us(1);}
80003b0a:	c1 58       	rjmp	80003b34 <act13+0x128>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003b0c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003b10:	f0 ca ff f4 	sub	r10,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003b14:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003b18:	14 38       	cp.w	r8,r10
80003b1a:	e0 88 00 08 	brls	80003b2a <act13+0x11e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003b1e:	12 38       	cp.w	r8,r9
80003b20:	fe 98 ff fa 	brls	80003b14 <act13+0x108>
80003b24:	12 3a       	cp.w	r10,r9
80003b26:	c0 73       	brcs	80003b34 <act13+0x128>
80003b28:	cf 6b       	rjmp	80003b14 <act13+0x108>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003b2a:	12 38       	cp.w	r8,r9
80003b2c:	e0 8b 00 04 	brhi	80003b34 <act13+0x128>
80003b30:	12 3a       	cp.w	r10,r9
80003b32:	cf 12       	brcc	80003b14 <act13+0x108>
80003b34:	0f 88       	ld.ub	r8,r7[0x0]
80003b36:	ec 08 18 00 	cp.b	r8,r6
80003b3a:	ce 90       	breq	80003b0c <act13+0x100>
}
80003b3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003b40:	80 00       	ld.sh	r0,r0[0x0]
80003b42:	33 b0       	mov	r0,59
80003b44:	80 00       	ld.sh	r0,r0[0x0]
80003b46:	24 7c       	sub	r12,71
80003b48:	80 00       	ld.sh	r0,r0[0x0]
80003b4a:	24 d8       	sub	r8,77

80003b4c <draw_gradient_rectangle>:
void draw_gradient_rectangle( uint16_t x, uint16_t y, uint16_t width,
    uint16_t height, uint16_t color1, uint16_t color2, uint8_t vertical){
80003b4c:	d4 31       	pushm	r0-r7,lr
80003b4e:	20 cd       	sub	sp,48
80003b50:	fa c4 ff ac 	sub	r4,sp,-84
80003b54:	50 9c       	stdsp	sp[0x24],r12
80003b56:	50 bb       	stdsp	sp[0x2c],r11
80003b58:	14 93       	mov	r3,r10
80003b5a:	12 9e       	mov	lr,r9
80003b5c:	68 19       	ld.w	r9,r4[0x4]
  int r, g, b, delta_r, delta_g, delta_b;
  delta_r = ((color2&0xF800)>>11) - ((color1&0xF800)>>11);
80003b5e:	5c 78       	castu.h	r8
80003b60:	f0 0c 16 0b 	lsr	r12,r8,0xb
80003b64:	50 6c       	stdsp	sp[0x18],r12
80003b66:	88 9a       	ld.uh	r10,r4[0x2]
80003b68:	f4 02 16 0b 	lsr	r2,r10,0xb
80003b6c:	18 12       	sub	r2,r12
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
80003b6e:	f7 d8 c0 a6 	bfextu	r11,r8,0x5,0x6
80003b72:	50 5b       	stdsp	sp[0x14],r11
80003b74:	e3 da c0 a6 	bfextu	r1,r10,0x5,0x6
80003b78:	16 11       	sub	r1,r11
  delta_b = (color2&0x1F) - (color1&0x1F);
80003b7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b7e:	50 48       	stdsp	sp[0x10],r8
80003b80:	f5 da c0 05 	bfextu	r10,r10,0x0,0x5
80003b84:	f4 08 01 00 	sub	r0,r10,r8
  if(vertical){
80003b88:	58 09       	cp.w	r9,0
80003b8a:	c0 41       	brne	80003b92 <draw_gradient_rectangle+0x46>
      b = delta_b * i;
      b = b/height + (color1&0x1F);
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
    }
  }else{
    for (uint16_t i = 0; i < width; i++){
80003b8c:	58 03       	cp.w	r3,0
80003b8e:	c3 e1       	brne	80003c0a <draw_gradient_rectangle+0xbe>
80003b90:	c8 78       	rjmp	80003c9e <draw_gradient_rectangle+0x152>
  int r, g, b, delta_r, delta_g, delta_b;
  delta_r = ((color2&0xF800)>>11) - ((color1&0xF800)>>11);
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
  delta_b = (color2&0x1F) - (color1&0x1F);
  if(vertical){
    for (uint16_t i = 0; i < height; i++){
80003b92:	58 0e       	cp.w	lr,0
80003b94:	e0 80 00 85 	breq	80003c9e <draw_gradient_rectangle+0x152>
  return(color);
}
void clr_disp(void){
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
}
void draw_gradient_rectangle( uint16_t x, uint16_t y, uint16_t width,
80003b98:	50 82       	stdsp	sp[0x20],r2
80003b9a:	50 71       	stdsp	sp[0x1c],r1
80003b9c:	50 20       	stdsp	sp[0x8],r0
80003b9e:	30 06       	mov	r6,0
80003ba0:	0c 95       	mov	r5,r6
80003ba2:	0c 94       	mov	r4,r6
80003ba4:	0c 97       	mov	r7,r6
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
  delta_b = (color2&0x1F) - (color1&0x1F);
  if(vertical){
    for (uint16_t i = 0; i < height; i++){
      r = delta_r * i;
      r = r/height + (color1>>11);
80003ba6:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
      g = delta_g *  i;
      g = g/height + ((color1&0x7E0)>>5);
      b = delta_b * i;
      b = b/height + (color1&0x1F);
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
80003baa:	5c 73       	castu.h	r3
80003bac:	50 a3       	stdsp	sp[0x28],r3
80003bae:	40 93       	lddsp	r3,sp[0x24]
80003bb0:	5c 73       	castu.h	r3
80003bb2:	40 b0       	lddsp	r0,sp[0x2c]
80003bb4:	1c 91       	mov	r1,lr
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
  delta_b = (color2&0x1F) - (color1&0x1F);
  if(vertical){
    for (uint16_t i = 0; i < height; i++){
      r = delta_r * i;
      r = r/height + (color1>>11);
80003bb6:	e8 02 0c 08 	divs	r8,r4,r2
      g = delta_g *  i;
      g = g/height + ((color1&0x7E0)>>5);
80003bba:	ea 02 0c 0a 	divs	r10,r5,r2
80003bbe:	fa eb 00 00 	st.d	sp[0],r10
      b = delta_b * i;
      b = b/height + (color1&0x1F);
80003bc2:	ec 02 0c 0a 	divs	r10,r6,r2
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
80003bc6:	40 4c       	lddsp	r12,sp[0x10]
80003bc8:	f8 0a 00 0a 	add	r10,r12,r10
80003bcc:	40 5b       	lddsp	r11,sp[0x14]
80003bce:	40 1c       	lddsp	r12,sp[0x4]
80003bd0:	18 0b       	add	r11,r12
80003bd2:	40 6c       	lddsp	r12,sp[0x18]
80003bd4:	10 0c       	add	r12,r8
80003bd6:	5c 5a       	castu.b	r10
80003bd8:	5c 5b       	castu.b	r11
80003bda:	5c 5c       	castu.b	r12
80003bdc:	f0 1f 00 32 	mcall	80003ca4 <draw_gradient_rectangle+0x158>
80003be0:	0e 9b       	mov	r11,r7
80003be2:	00 0b       	add	r11,r0
80003be4:	f3 dc c0 10 	bfextu	r9,r12,0x0,0x10
80003be8:	40 aa       	lddsp	r10,sp[0x28]
80003bea:	5c 7b       	castu.h	r11
80003bec:	06 9c       	mov	r12,r3
80003bee:	f0 1f 00 2f 	mcall	80003ca8 <draw_gradient_rectangle+0x15c>
80003bf2:	2f f7       	sub	r7,-1
80003bf4:	40 8b       	lddsp	r11,sp[0x20]
80003bf6:	16 04       	add	r4,r11
80003bf8:	40 7a       	lddsp	r10,sp[0x1c]
80003bfa:	14 05       	add	r5,r10
80003bfc:	40 29       	lddsp	r9,sp[0x8]
80003bfe:	12 06       	add	r6,r9
  int r, g, b, delta_r, delta_g, delta_b;
  delta_r = ((color2&0xF800)>>11) - ((color1&0xF800)>>11);
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
  delta_b = (color2&0x1F) - (color1&0x1F);
  if(vertical){
    for (uint16_t i = 0; i < height; i++){
80003c00:	ee 01 19 00 	cp.h	r1,r7
80003c04:	fe 9b ff d9 	brhi	80003bb6 <draw_gradient_rectangle+0x6a>
80003c08:	c4 b8       	rjmp	80003c9e <draw_gradient_rectangle+0x152>
  return(color);
}
void clr_disp(void){
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
}
void draw_gradient_rectangle( uint16_t x, uint16_t y, uint16_t width,
80003c0a:	30 06       	mov	r6,0
80003c0c:	0c 95       	mov	r5,r6
80003c0e:	0c 94       	mov	r4,r6
80003c10:	0c 97       	mov	r7,r6
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
    }
  }else{
    for (uint16_t i = 0; i < width; i++){
      r = delta_r * i;
      r = r/width + (color1>>11);
80003c12:	f9 d3 c0 10 	bfextu	r12,r3,0x0,0x10
80003c16:	50 0c       	stdsp	sp[0x0],r12
      g = delta_g *  i;
      g = g/width + ((color1&0x7E0)>>5);
      b = delta_b * i;
      b = b/width + (color1&0x1F);
      et024006_DrawVertLine(x + i, y, height, color16(r,g,b));
80003c18:	5c 7e       	castu.h	lr
80003c1a:	50 7e       	stdsp	sp[0x1c],lr
80003c1c:	40 bb       	lddsp	r11,sp[0x2c]
80003c1e:	5c 7b       	castu.h	r11
80003c20:	50 8b       	stdsp	sp[0x20],r11
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
    }
  }else{
    for (uint16_t i = 0; i < width; i++){
      r = delta_r * i;
      r = r/width + (color1>>11);
80003c22:	40 08       	lddsp	r8,sp[0x0]
80003c24:	e8 08 0c 08 	divs	r8,r4,r8
80003c28:	fa e9 00 08 	st.d	sp[8],r8
      g = delta_g *  i;
      g = g/width + ((color1&0x7E0)>>5);
80003c2c:	40 0c       	lddsp	r12,sp[0x0]
80003c2e:	ea 0c 0c 08 	divs	r8,r5,r12
      b = delta_b * i;
      b = b/width + (color1&0x1F);
80003c32:	ec 0c 0c 0a 	divs	r10,r6,r12
      et024006_DrawVertLine(x + i, y, height, color16(r,g,b));
80003c36:	40 4c       	lddsp	r12,sp[0x10]
80003c38:	f8 0a 00 0a 	add	r10,r12,r10
80003c3c:	40 5b       	lddsp	r11,sp[0x14]
80003c3e:	10 0b       	add	r11,r8
80003c40:	40 6c       	lddsp	r12,sp[0x18]
80003c42:	40 39       	lddsp	r9,sp[0xc]
80003c44:	12 0c       	add	r12,r9
80003c46:	5c 5a       	castu.b	r10
80003c48:	5c 5b       	castu.b	r11
80003c4a:	5c 5c       	castu.b	r12
80003c4c:	f0 1f 00 16 	mcall	80003ca4 <draw_gradient_rectangle+0x158>
80003c50:	0e 98       	mov	r8,r7
80003c52:	40 9b       	lddsp	r11,sp[0x24]
80003c54:	16 08       	add	r8,r11
80003c56:	f3 dc c0 10 	bfextu	r9,r12,0x0,0x10
80003c5a:	40 7a       	lddsp	r10,sp[0x1c]
80003c5c:	40 8b       	lddsp	r11,sp[0x20]
80003c5e:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80003c62:	f0 1f 00 13 	mcall	80003cac <draw_gradient_rectangle+0x160>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003c66:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003c6a:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003c6e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003c72:	14 38       	cp.w	r8,r10
80003c74:	e0 88 00 08 	brls	80003c84 <draw_gradient_rectangle+0x138>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003c78:	12 38       	cp.w	r8,r9
80003c7a:	fe 98 ff fa 	brls	80003c6e <draw_gradient_rectangle+0x122>
80003c7e:	12 3a       	cp.w	r10,r9
80003c80:	c0 73       	brcs	80003c8e <draw_gradient_rectangle+0x142>
80003c82:	cf 6b       	rjmp	80003c6e <draw_gradient_rectangle+0x122>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003c84:	12 38       	cp.w	r8,r9
80003c86:	e0 8b 00 04 	brhi	80003c8e <draw_gradient_rectangle+0x142>
80003c8a:	12 3a       	cp.w	r10,r9
80003c8c:	cf 12       	brcc	80003c6e <draw_gradient_rectangle+0x122>
      // et024006_PrintString(g_str, (const unsigned char *)&FONT6x8, 0, 10, BLUE, -1);
      // et024006_PrintString(b_str, (const unsigned char *)&FONT6x8, 0, 20, BLUE, -1);
      delay_ms(1);
    }
  }
}
80003c8e:	2f f7       	sub	r7,-1
80003c90:	04 04       	add	r4,r2
80003c92:	02 05       	add	r5,r1
80003c94:	00 06       	add	r6,r0
      b = delta_b * i;
      b = b/height + (color1&0x1F);
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
    }
  }else{
    for (uint16_t i = 0; i < width; i++){
80003c96:	ee 03 19 00 	cp.h	r3,r7
80003c9a:	fe 9b ff c4 	brhi	80003c22 <draw_gradient_rectangle+0xd6>
      // et024006_PrintString(g_str, (const unsigned char *)&FONT6x8, 0, 10, BLUE, -1);
      // et024006_PrintString(b_str, (const unsigned char *)&FONT6x8, 0, 20, BLUE, -1);
      delay_ms(1);
    }
  }
}
80003c9e:	2f 4d       	sub	sp,-48
80003ca0:	d8 32       	popm	r0-r7,pc
80003ca2:	00 00       	add	r0,r0
80003ca4:	80 00       	ld.sh	r0,r0[0x0]
80003ca6:	31 dc       	mov	r12,29
80003ca8:	80 00       	ld.sh	r0,r0[0x0]
80003caa:	26 30       	sub	r0,99
80003cac:	80 00       	ld.sh	r0,r0[0x0]
80003cae:	24 bc       	sub	r12,75

80003cb0 <act7>:
#include "et024006dhu.h"

void act7(uint8_t valid_state, uint8_t * actual_state){//Video test screen
80003cb0:	d4 31       	pushm	r0-r7,lr
80003cb2:	20 dd       	sub	sp,52
80003cb4:	18 90       	mov	r0,r12
80003cb6:	16 91       	mov	r1,r11
  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80003cb8:	30 08       	mov	r8,0
80003cba:	e0 69 00 f0 	mov	r9,240
80003cbe:	e0 6a 01 40 	mov	r10,320
80003cc2:	10 9b       	mov	r11,r8
80003cc4:	10 9c       	mov	r12,r8
80003cc6:	f0 1f 00 c4 	mcall	80003fd4 <act7+0x324>
  uint16_t colors[] = {
    color16(63,000,00), //red 0
80003cca:	30 0a       	mov	r10,0
80003ccc:	14 9b       	mov	r11,r10
80003cce:	33 fc       	mov	r12,63
80003cd0:	f0 1f 00 c2 	mcall	80003fd8 <act7+0x328>
80003cd4:	5c 8c       	casts.h	r12
80003cd6:	50 7c       	stdsp	sp[0x1c],r12
    color16(00,127,00), //green 1
80003cd8:	30 0a       	mov	r10,0
80003cda:	37 fb       	mov	r11,127
80003cdc:	14 9c       	mov	r12,r10
80003cde:	f0 1f 00 bf 	mcall	80003fd8 <act7+0x328>
80003ce2:	5c 8c       	casts.h	r12
80003ce4:	50 6c       	stdsp	sp[0x18],r12
    color16(00,000,63), //blue 2
80003ce6:	33 fa       	mov	r10,63
80003ce8:	30 0b       	mov	r11,0
80003cea:	16 9c       	mov	r12,r11
80003cec:	f0 1f 00 bb 	mcall	80003fd8 <act7+0x328>
80003cf0:	5c 8c       	casts.h	r12
80003cf2:	50 5c       	stdsp	sp[0x14],r12
    color16(63,127,63), //white 3
80003cf4:	33 fa       	mov	r10,63
80003cf6:	37 fb       	mov	r11,127
80003cf8:	14 9c       	mov	r12,r10
80003cfa:	f0 1f 00 b8 	mcall	80003fd8 <act7+0x328>
80003cfe:	5c 8c       	casts.h	r12
80003d00:	50 0c       	stdsp	sp[0x0],r12
    color16(63,127,00), //yellow 4
80003d02:	30 0a       	mov	r10,0
80003d04:	37 fb       	mov	r11,127
80003d06:	33 fc       	mov	r12,63
80003d08:	f0 1f 00 b4 	mcall	80003fd8 <act7+0x328>
80003d0c:	5c 8c       	casts.h	r12
80003d0e:	50 4c       	stdsp	sp[0x10],r12
    color16(00,127,63), //cyan 5
80003d10:	33 fa       	mov	r10,63
80003d12:	37 fb       	mov	r11,127
80003d14:	30 0c       	mov	r12,0
80003d16:	f0 1f 00 b1 	mcall	80003fd8 <act7+0x328>
80003d1a:	5c 8c       	casts.h	r12
80003d1c:	50 3c       	stdsp	sp[0xc],r12
    color16(63,000,63), //magenta 6
80003d1e:	33 fa       	mov	r10,63
80003d20:	30 0b       	mov	r11,0
80003d22:	14 9c       	mov	r12,r10
80003d24:	f0 1f 00 ad 	mcall	80003fd8 <act7+0x328>
80003d28:	5c 8c       	casts.h	r12
80003d2a:	50 2c       	stdsp	sp[0x8],r12
    color16(63,127,63), //white 7
    color16(00,000,00) //black 8
80003d2c:	30 0a       	mov	r10,0
80003d2e:	14 9b       	mov	r11,r10
80003d30:	14 9c       	mov	r12,r10
80003d32:	f0 1f 00 aa 	mcall	80003fd8 <act7+0x328>
80003d36:	5c 8c       	casts.h	r12
80003d38:	50 1c       	stdsp	sp[0x4],r12
  };
80003d3a:	40 79       	lddsp	r9,sp[0x1c]
80003d3c:	fb 59 00 22 	st.h	sp[34],r9
80003d40:	40 68       	lddsp	r8,sp[0x18]
80003d42:	fb 58 00 24 	st.h	sp[36],r8
80003d46:	40 59       	lddsp	r9,sp[0x14]
80003d48:	fb 59 00 26 	st.h	sp[38],r9
80003d4c:	40 08       	lddsp	r8,sp[0x0]
80003d4e:	fb 58 00 28 	st.h	sp[40],r8
80003d52:	40 49       	lddsp	r9,sp[0x10]
80003d54:	fb 59 00 2a 	st.h	sp[42],r9
80003d58:	40 38       	lddsp	r8,sp[0xc]
80003d5a:	fb 58 00 2c 	st.h	sp[44],r8
80003d5e:	40 29       	lddsp	r9,sp[0x8]
80003d60:	fb 59 00 2e 	st.h	sp[46],r9
80003d64:	40 08       	lddsp	r8,sp[0x0]
80003d66:	fb 58 00 30 	st.h	sp[48],r8
80003d6a:	fb 5c 00 32 	st.h	sp[50],r12
80003d6e:	fa c5 ff de 	sub	r5,sp,-34
80003d72:	30 07       	mov	r7,0
80003d74:	0e 96       	mov	r6,r7

  uint16_t position = 0;
  for( int i=0 ; i<7 ; i++ ){
    if(i%3){
80003d76:	e0 64 55 56 	mov	r4,21846
80003d7a:	ea 14 55 55 	orh	r4,0x5555
      et024006_DrawFilledRect(position, 0, 46, 120, colors[i] );
      position += 46;
    }else{
      et024006_DrawFilledRect(position, 0, 45, 120, colors[i] );
80003d7e:	37 83       	mov	r3,120
80003d80:	0e 92       	mov	r2,r7
    color16(00,000,00) //black 8
  };

  uint16_t position = 0;
  for( int i=0 ; i<7 ; i++ ){
    if(i%3){
80003d82:	ee 04 04 4a 	muls.d	r10,r7,r4
80003d86:	ee 08 14 1f 	asr	r8,r7,0x1f
80003d8a:	10 1b       	sub	r11,r8
80003d8c:	f6 0b 00 1b 	add	r11,r11,r11<<0x1
80003d90:	ee 0b 01 0b 	sub	r11,r7,r11
80003d94:	c0 c0       	breq	80003dac <act7+0xfc>
      et024006_DrawFilledRect(position, 0, 46, 120, colors[i] );
80003d96:	8a 88       	ld.uh	r8,r5[0x0]
80003d98:	06 99       	mov	r9,r3
80003d9a:	32 ea       	mov	r10,46
80003d9c:	04 9b       	mov	r11,r2
80003d9e:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
80003da2:	f0 1f 00 8d 	mcall	80003fd4 <act7+0x324>
      position += 46;
80003da6:	2d 26       	sub	r6,-46
80003da8:	5c 86       	casts.h	r6
80003daa:	c0 b8       	rjmp	80003dc0 <act7+0x110>
    }else{
      et024006_DrawFilledRect(position, 0, 45, 120, colors[i] );
80003dac:	8a 88       	ld.uh	r8,r5[0x0]
80003dae:	06 99       	mov	r9,r3
80003db0:	32 da       	mov	r10,45
80003db2:	04 9b       	mov	r11,r2
80003db4:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
80003db8:	f0 1f 00 87 	mcall	80003fd4 <act7+0x324>
      position += 45;
80003dbc:	2d 36       	sub	r6,-45
80003dbe:	5c 86       	casts.h	r6
    color16(63,127,63), //white 7
    color16(00,000,00) //black 8
  };

  uint16_t position = 0;
  for( int i=0 ; i<7 ; i++ ){
80003dc0:	2f f7       	sub	r7,-1
80003dc2:	2f e5       	sub	r5,-2
80003dc4:	58 77       	cp.w	r7,7
80003dc6:	cd e1       	brne	80003d82 <act7+0xd2>
80003dc8:	30 06       	mov	r6,0
80003dca:	30 27       	mov	r7,2
      et024006_DrawFilledRect(position, 0, 45, 120, colors[i] );
      position += 45;
    }
  }
  for( int i=0 ; i<8 ; i++ ){
      et024006_DrawFilledRect(40 * i, 120, 40, 40, colors[ (i+2) % 9 ] );
80003dcc:	e0 65 8e 39 	mov	r5,36409
80003dd0:	ea 15 38 e3 	orh	r5,0x38e3
80003dd4:	32 84       	mov	r4,40
80003dd6:	37 83       	mov	r3,120
80003dd8:	ee 05 04 48 	muls.d	r8,r7,r5
80003ddc:	a1 59       	asr	r9,0x1
80003dde:	ee 08 14 1f 	asr	r8,r7,0x1f
80003de2:	f2 08 01 08 	sub	r8,r9,r8
80003de6:	f0 08 00 38 	add	r8,r8,r8<<0x3
80003dea:	ee 08 01 08 	sub	r8,r7,r8
80003dee:	fa c9 ff cc 	sub	r9,sp,-52
80003df2:	f2 08 00 18 	add	r8,r9,r8<<0x1
80003df6:	f1 18 ff ee 	ld.uh	r8,r8[-18]
80003dfa:	08 99       	mov	r9,r4
80003dfc:	08 9a       	mov	r10,r4
80003dfe:	06 9b       	mov	r11,r3
80003e00:	0c 9c       	mov	r12,r6
80003e02:	f0 1f 00 75 	mcall	80003fd4 <act7+0x324>
80003e06:	2f f7       	sub	r7,-1
80003e08:	2d 86       	sub	r6,-40
    }else{
      et024006_DrawFilledRect(position, 0, 45, 120, colors[i] );
      position += 45;
    }
  }
  for( int i=0 ; i<8 ; i++ ){
80003e0a:	58 a7       	cp.w	r7,10
80003e0c:	ce 61       	brne	80003dd8 <act7+0x128>
      et024006_DrawFilledRect(40 * i, 120, 40, 40, colors[ (i+2) % 9 ] );
  }
  draw_gradient_rectangle( 0, 160, 320, 10, color16(63,127,63), color16(00,000,00),0);
80003e0e:	40 17       	lddsp	r7,sp[0x4]
80003e10:	5c 77       	castu.h	r7
80003e12:	40 05       	lddsp	r5,sp[0x0]
80003e14:	5c 75       	castu.h	r5
80003e16:	30 06       	mov	r6,0
80003e18:	1a d6       	st.w	--sp,r6
80003e1a:	1a d7       	st.w	--sp,r7
80003e1c:	0a 98       	mov	r8,r5
80003e1e:	30 a9       	mov	r9,10
80003e20:	e0 6a 01 40 	mov	r10,320
80003e24:	e0 6b 00 a0 	mov	r11,160
80003e28:	0c 9c       	mov	r12,r6
80003e2a:	f0 1f 00 6d 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 0, 170, 160, 10, color16(00,000,00), color16(63,000,00),0);
80003e2e:	fb 12 00 26 	ld.uh	r2,sp[38]
80003e32:	1a d6       	st.w	--sp,r6
80003e34:	1a d2       	st.w	--sp,r2
80003e36:	0e 98       	mov	r8,r7
80003e38:	30 a9       	mov	r9,10
80003e3a:	e0 6a 00 a0 	mov	r10,160
80003e3e:	e0 6b 00 aa 	mov	r11,170
80003e42:	0c 9c       	mov	r12,r6
80003e44:	f0 1f 00 66 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 160, 170, 160, 10, color16(63,000,00), color16(63,127,63),0);
80003e48:	1a d6       	st.w	--sp,r6
80003e4a:	1a d5       	st.w	--sp,r5
80003e4c:	04 98       	mov	r8,r2
80003e4e:	30 a9       	mov	r9,10
80003e50:	e0 6a 00 a0 	mov	r10,160
80003e54:	e0 6b 00 aa 	mov	r11,170
80003e58:	14 9c       	mov	r12,r10
80003e5a:	f0 1f 00 61 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 0, 180, 160, 10, color16(00,000,00), color16(00,127,00),0);
80003e5e:	fb 14 00 32 	ld.uh	r4,sp[50]
80003e62:	1a d6       	st.w	--sp,r6
80003e64:	1a d4       	st.w	--sp,r4
80003e66:	0e 98       	mov	r8,r7
80003e68:	30 a9       	mov	r9,10
80003e6a:	e0 6a 00 a0 	mov	r10,160
80003e6e:	e0 6b 00 b4 	mov	r11,180
80003e72:	0c 9c       	mov	r12,r6
80003e74:	f0 1f 00 5a 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 160, 180, 160, 10, color16(00,127,00), color16(63,127,63),0);
80003e78:	2f 8d       	sub	sp,-32
80003e7a:	1a d6       	st.w	--sp,r6
80003e7c:	1a d5       	st.w	--sp,r5
80003e7e:	08 98       	mov	r8,r4
80003e80:	30 a9       	mov	r9,10
80003e82:	e0 6a 00 a0 	mov	r10,160
80003e86:	e0 6b 00 b4 	mov	r11,180
80003e8a:	14 9c       	mov	r12,r10
80003e8c:	f0 1f 00 54 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 0, 190, 160, 10, color16(00,000,00), color16(00,000,63),0);
80003e90:	fb 13 00 1e 	ld.uh	r3,sp[30]
80003e94:	1a d6       	st.w	--sp,r6
80003e96:	1a d3       	st.w	--sp,r3
80003e98:	0e 98       	mov	r8,r7
80003e9a:	30 a9       	mov	r9,10
80003e9c:	e0 6a 00 a0 	mov	r10,160
80003ea0:	e0 6b 00 be 	mov	r11,190
80003ea4:	0c 9c       	mov	r12,r6
80003ea6:	f0 1f 00 4e 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 160, 190, 160, 10, color16(00,000,63), color16(63,127,63),0);
80003eaa:	1a d6       	st.w	--sp,r6
80003eac:	1a d5       	st.w	--sp,r5
80003eae:	06 98       	mov	r8,r3
80003eb0:	30 a9       	mov	r9,10
80003eb2:	e0 6a 00 a0 	mov	r10,160
80003eb6:	e0 6b 00 be 	mov	r11,190
80003eba:	14 9c       	mov	r12,r10
80003ebc:	f0 1f 00 48 	mcall	80003fdc <act7+0x32c>

  draw_gradient_rectangle( 0, 200, 160, 10, color16(63,000,00), color16(63,127,00),0);
80003ec0:	fb 17 00 2a 	ld.uh	r7,sp[42]
80003ec4:	1a d6       	st.w	--sp,r6
80003ec6:	1a d7       	st.w	--sp,r7
80003ec8:	04 98       	mov	r8,r2
80003eca:	30 a9       	mov	r9,10
80003ecc:	e0 6a 00 a0 	mov	r10,160
80003ed0:	e0 6b 00 c8 	mov	r11,200
80003ed4:	0c 9c       	mov	r12,r6
80003ed6:	f0 1f 00 42 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 160, 200, 160, 10, color16(63,127,00), color16(00,127,00),0);
80003eda:	2f 8d       	sub	sp,-32
80003edc:	1a d6       	st.w	--sp,r6
80003ede:	1a d4       	st.w	--sp,r4
80003ee0:	0e 98       	mov	r8,r7
80003ee2:	30 a9       	mov	r9,10
80003ee4:	e0 6a 00 a0 	mov	r10,160
80003ee8:	e0 6b 00 c8 	mov	r11,200
80003eec:	14 9c       	mov	r12,r10
80003eee:	f0 1f 00 3c 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 0, 210, 160, 10, color16(00,127,00), color16(00,127,63),0);
80003ef2:	fb 17 00 16 	ld.uh	r7,sp[22]
80003ef6:	1a d6       	st.w	--sp,r6
80003ef8:	1a d7       	st.w	--sp,r7
80003efa:	08 98       	mov	r8,r4
80003efc:	30 a9       	mov	r9,10
80003efe:	e0 6a 00 a0 	mov	r10,160
80003f02:	e0 6b 00 d2 	mov	r11,210
80003f06:	0c 9c       	mov	r12,r6
80003f08:	f0 1f 00 35 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 160, 210, 160, 10, color16(00,127,63), color16(00,000,63),0);
80003f0c:	1a d6       	st.w	--sp,r6
80003f0e:	1a d3       	st.w	--sp,r3
80003f10:	0e 98       	mov	r8,r7
80003f12:	30 a9       	mov	r9,10
80003f14:	e0 6a 00 a0 	mov	r10,160
80003f18:	e0 6b 00 d2 	mov	r11,210
80003f1c:	14 9c       	mov	r12,r10
80003f1e:	f0 1f 00 30 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 0, 220, 160, 10, color16(00,000,63), color16(63,000,63),0);
80003f22:	fb 17 00 22 	ld.uh	r7,sp[34]
80003f26:	1a d6       	st.w	--sp,r6
80003f28:	1a d7       	st.w	--sp,r7
80003f2a:	06 98       	mov	r8,r3
80003f2c:	30 a9       	mov	r9,10
80003f2e:	e0 6a 00 a0 	mov	r10,160
80003f32:	e0 6b 00 dc 	mov	r11,220
80003f36:	0c 9c       	mov	r12,r6
80003f38:	f0 1f 00 29 	mcall	80003fdc <act7+0x32c>
  draw_gradient_rectangle( 160, 220, 160, 10, color16(63,000,63), color16(63,000,00),0);
80003f3c:	2f 8d       	sub	sp,-32
80003f3e:	1a d6       	st.w	--sp,r6
80003f40:	1a d2       	st.w	--sp,r2
80003f42:	0e 98       	mov	r8,r7
80003f44:	30 a9       	mov	r9,10
80003f46:	e0 6a 00 a0 	mov	r10,160
80003f4a:	e0 6b 00 dc 	mov	r11,220
80003f4e:	14 9c       	mov	r12,r10
80003f50:	f0 1f 00 23 	mcall	80003fdc <act7+0x32c>
80003f54:	30 47       	mov	r7,4
80003f56:	2f ed       	sub	sp,-8
  for( int i=0 ; i<16 ; i++ ){
      et024006_DrawFilledRect(20 * i, 230, 20, 10, colors[ (i+4) % 9 ] );
80003f58:	e0 65 8e 39 	mov	r5,36409
80003f5c:	ea 15 38 e3 	orh	r5,0x38e3
80003f60:	30 a4       	mov	r4,10
80003f62:	31 43       	mov	r3,20
80003f64:	e0 62 00 e6 	mov	r2,230
80003f68:	ee 05 04 48 	muls.d	r8,r7,r5
80003f6c:	f2 08 14 01 	asr	r8,r9,0x1
80003f70:	ee 09 14 1f 	asr	r9,r7,0x1f
80003f74:	12 18       	sub	r8,r9
80003f76:	f0 08 00 38 	add	r8,r8,r8<<0x3
80003f7a:	ee 08 01 08 	sub	r8,r7,r8
80003f7e:	fa c9 ff cc 	sub	r9,sp,-52
80003f82:	f2 08 00 18 	add	r8,r9,r8<<0x1
80003f86:	f1 18 ff ee 	ld.uh	r8,r8[-18]
80003f8a:	08 99       	mov	r9,r4
80003f8c:	06 9a       	mov	r10,r3
80003f8e:	04 9b       	mov	r11,r2
80003f90:	0c 9c       	mov	r12,r6
80003f92:	f0 1f 00 11 	mcall	80003fd4 <act7+0x324>
80003f96:	2f f7       	sub	r7,-1
80003f98:	2e c6       	sub	r6,-20
  draw_gradient_rectangle( 160, 200, 160, 10, color16(63,127,00), color16(00,127,00),0);
  draw_gradient_rectangle( 0, 210, 160, 10, color16(00,127,00), color16(00,127,63),0);
  draw_gradient_rectangle( 160, 210, 160, 10, color16(00,127,63), color16(00,000,63),0);
  draw_gradient_rectangle( 0, 220, 160, 10, color16(00,000,63), color16(63,000,63),0);
  draw_gradient_rectangle( 160, 220, 160, 10, color16(63,000,63), color16(63,000,00),0);
  for( int i=0 ; i<16 ; i++ ){
80003f9a:	59 47       	cp.w	r7,20
80003f9c:	ce 61       	brne	80003f68 <act7+0x2b8>
80003f9e:	c1 58       	rjmp	80003fc8 <act7+0x318>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003fa0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003fa4:	f0 ca ff f4 	sub	r10,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003fa8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003fac:	14 38       	cp.w	r8,r10
80003fae:	e0 88 00 08 	brls	80003fbe <act7+0x30e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003fb2:	12 38       	cp.w	r8,r9
80003fb4:	fe 98 ff fa 	brls	80003fa8 <act7+0x2f8>
80003fb8:	12 3a       	cp.w	r10,r9
80003fba:	c0 73       	brcs	80003fc8 <act7+0x318>
80003fbc:	cf 6b       	rjmp	80003fa8 <act7+0x2f8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003fbe:	12 38       	cp.w	r8,r9
80003fc0:	e0 8b 00 04 	brhi	80003fc8 <act7+0x318>
80003fc4:	12 3a       	cp.w	r10,r9
80003fc6:	cf 12       	brcc	80003fa8 <act7+0x2f8>
      et024006_DrawFilledRect(20 * i, 230, 20, 10, colors[ (i+4) % 9 ] );
  }
  while(*actual_state == valid_state){delay_us(1);}
80003fc8:	03 88       	ld.ub	r8,r1[0x0]
80003fca:	e0 08 18 00 	cp.b	r8,r0
80003fce:	ce 90       	breq	80003fa0 <act7+0x2f0>
}
80003fd0:	2f 3d       	sub	sp,-52
80003fd2:	d8 32       	popm	r0-r7,pc
80003fd4:	80 00       	ld.sh	r0,r0[0x0]
80003fd6:	24 7c       	sub	r12,71
80003fd8:	80 00       	ld.sh	r0,r0[0x0]
80003fda:	31 dc       	mov	r12,29
80003fdc:	80 00       	ld.sh	r0,r0[0x0]
80003fde:	3b 4c       	mov	r12,-76

80003fe0 <act11>:
#include "et024006dhu.h"
#include "delay.h"

void act11(uint8_t valid_state, uint8_t * actual_state){
80003fe0:	eb cd 40 c0 	pushm	r6-r7,lr
80003fe4:	18 97       	mov	r7,r12
80003fe6:	16 96       	mov	r6,r11
    clr_disp();
80003fe8:	f0 1f 01 c7 	mcall	80004704 <act11+0x724>
    et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, WHITE );
80003fec:	e0 68 ff ff 	mov	r8,65535
80003ff0:	e0 69 00 f0 	mov	r9,240
80003ff4:	e0 6a 01 40 	mov	r10,320
80003ff8:	30 0b       	mov	r11,0
80003ffa:	16 9c       	mov	r12,r11
80003ffc:	f0 1f 01 c3 	mcall	80004708 <act11+0x728>
    et024006_DrawHorizLine( 49, 235, 231, BLACK);delay_ms(50);
80004000:	30 09       	mov	r9,0
80004002:	e0 6a 00 e7 	mov	r10,231
80004006:	e0 6b 00 eb 	mov	r11,235
8000400a:	33 1c       	mov	r12,49
8000400c:	f0 1f 01 c0 	mcall	8000470c <act11+0x72c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004010:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004014:	e8 79 27 c0 	mov	r9,600000
80004018:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000401c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004020:	14 38       	cp.w	r8,r10
80004022:	e0 88 00 09 	brls	80004034 <act11+0x54>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004026:	12 38       	cp.w	r8,r9
80004028:	fe 98 ff fa 	brls	8000401c <act11+0x3c>
8000402c:	12 3a       	cp.w	r10,r9
8000402e:	e0 83 01 ea 	brlo	80004402 <act11+0x422>
80004032:	cf 5b       	rjmp	8000401c <act11+0x3c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004034:	12 38       	cp.w	r8,r9
80004036:	e0 8b 01 e6 	brhi	80004402 <act11+0x422>
8000403a:	12 3a       	cp.w	r10,r9
8000403c:	e0 83 01 e3 	brlo	80004402 <act11+0x422>
80004040:	ce eb       	rjmp	8000401c <act11+0x3c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004042:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004046:	14 38       	cp.w	r8,r10
80004048:	e0 88 00 09 	brls	8000405a <act11+0x7a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000404c:	12 38       	cp.w	r8,r9
8000404e:	fe 98 ff fa 	brls	80004042 <act11+0x62>
80004052:	12 3a       	cp.w	r10,r9
80004054:	e0 83 01 e6 	brlo	80004420 <act11+0x440>
80004058:	cf 5b       	rjmp	80004042 <act11+0x62>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000405a:	12 38       	cp.w	r8,r9
8000405c:	e0 8b 01 e2 	brhi	80004420 <act11+0x440>
80004060:	12 3a       	cp.w	r10,r9
80004062:	e0 83 01 df 	brlo	80004420 <act11+0x440>
80004066:	ce eb       	rjmp	80004042 <act11+0x62>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004068:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000406c:	14 38       	cp.w	r8,r10
8000406e:	e0 88 00 09 	brls	80004080 <act11+0xa0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004072:	12 38       	cp.w	r8,r9
80004074:	fe 98 ff fa 	brls	80004068 <act11+0x88>
80004078:	12 3a       	cp.w	r10,r9
8000407a:	e0 83 01 e2 	brlo	8000443e <act11+0x45e>
8000407e:	cf 5b       	rjmp	80004068 <act11+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004080:	12 38       	cp.w	r8,r9
80004082:	e0 8b 01 de 	brhi	8000443e <act11+0x45e>
80004086:	12 3a       	cp.w	r10,r9
80004088:	e0 83 01 db 	brlo	8000443e <act11+0x45e>
8000408c:	ce eb       	rjmp	80004068 <act11+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000408e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004092:	14 38       	cp.w	r8,r10
80004094:	e0 88 00 09 	brls	800040a6 <act11+0xc6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004098:	12 38       	cp.w	r8,r9
8000409a:	fe 98 ff fa 	brls	8000408e <act11+0xae>
8000409e:	12 3a       	cp.w	r10,r9
800040a0:	e0 83 01 df 	brlo	8000445e <act11+0x47e>
800040a4:	cf 5b       	rjmp	8000408e <act11+0xae>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800040a6:	12 38       	cp.w	r8,r9
800040a8:	e0 8b 01 db 	brhi	8000445e <act11+0x47e>
800040ac:	12 3a       	cp.w	r10,r9
800040ae:	e0 83 01 d8 	brlo	8000445e <act11+0x47e>
800040b2:	ce eb       	rjmp	8000408e <act11+0xae>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800040b4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800040b8:	14 38       	cp.w	r8,r10
800040ba:	e0 88 00 09 	brls	800040cc <act11+0xec>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800040be:	12 38       	cp.w	r8,r9
800040c0:	fe 98 ff fa 	brls	800040b4 <act11+0xd4>
800040c4:	12 3a       	cp.w	r10,r9
800040c6:	e0 83 01 db 	brlo	8000447c <act11+0x49c>
800040ca:	cf 5b       	rjmp	800040b4 <act11+0xd4>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800040cc:	12 38       	cp.w	r8,r9
800040ce:	e0 8b 01 d7 	brhi	8000447c <act11+0x49c>
800040d2:	12 3a       	cp.w	r10,r9
800040d4:	e0 83 01 d4 	brlo	8000447c <act11+0x49c>
800040d8:	ce eb       	rjmp	800040b4 <act11+0xd4>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800040da:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800040de:	14 38       	cp.w	r8,r10
800040e0:	e0 88 00 09 	brls	800040f2 <act11+0x112>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800040e4:	12 38       	cp.w	r8,r9
800040e6:	fe 98 ff fa 	brls	800040da <act11+0xfa>
800040ea:	12 3a       	cp.w	r10,r9
800040ec:	e0 83 01 d6 	brlo	80004498 <act11+0x4b8>
800040f0:	cf 5b       	rjmp	800040da <act11+0xfa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800040f2:	12 38       	cp.w	r8,r9
800040f4:	e0 8b 01 d2 	brhi	80004498 <act11+0x4b8>
800040f8:	12 3a       	cp.w	r10,r9
800040fa:	e0 83 01 cf 	brlo	80004498 <act11+0x4b8>
800040fe:	ce eb       	rjmp	800040da <act11+0xfa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004100:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004104:	14 38       	cp.w	r8,r10
80004106:	e0 88 00 09 	brls	80004118 <act11+0x138>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000410a:	12 38       	cp.w	r8,r9
8000410c:	fe 98 ff fa 	brls	80004100 <act11+0x120>
80004110:	12 3a       	cp.w	r10,r9
80004112:	e0 83 01 d2 	brlo	800044b6 <act11+0x4d6>
80004116:	cf 5b       	rjmp	80004100 <act11+0x120>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004118:	12 38       	cp.w	r8,r9
8000411a:	e0 8b 01 ce 	brhi	800044b6 <act11+0x4d6>
8000411e:	12 3a       	cp.w	r10,r9
80004120:	e0 83 01 cb 	brlo	800044b6 <act11+0x4d6>
80004124:	ce eb       	rjmp	80004100 <act11+0x120>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004126:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000412a:	14 38       	cp.w	r8,r10
8000412c:	e0 88 00 09 	brls	8000413e <act11+0x15e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004130:	12 38       	cp.w	r8,r9
80004132:	fe 98 ff fa 	brls	80004126 <act11+0x146>
80004136:	12 3a       	cp.w	r10,r9
80004138:	e0 83 01 ce 	brlo	800044d4 <act11+0x4f4>
8000413c:	cf 5b       	rjmp	80004126 <act11+0x146>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000413e:	12 38       	cp.w	r8,r9
80004140:	e0 8b 01 ca 	brhi	800044d4 <act11+0x4f4>
80004144:	12 3a       	cp.w	r10,r9
80004146:	e0 83 01 c7 	brlo	800044d4 <act11+0x4f4>
8000414a:	ce eb       	rjmp	80004126 <act11+0x146>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000414c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004150:	14 38       	cp.w	r8,r10
80004152:	e0 88 00 09 	brls	80004164 <act11+0x184>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004156:	12 38       	cp.w	r8,r9
80004158:	fe 98 ff fa 	brls	8000414c <act11+0x16c>
8000415c:	12 3a       	cp.w	r10,r9
8000415e:	e0 83 01 ca 	brlo	800044f2 <act11+0x512>
80004162:	cf 5b       	rjmp	8000414c <act11+0x16c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004164:	12 38       	cp.w	r8,r9
80004166:	e0 8b 01 c6 	brhi	800044f2 <act11+0x512>
8000416a:	12 3a       	cp.w	r10,r9
8000416c:	e0 83 01 c3 	brlo	800044f2 <act11+0x512>
80004170:	ce eb       	rjmp	8000414c <act11+0x16c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004172:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004176:	14 38       	cp.w	r8,r10
80004178:	e0 88 00 09 	brls	8000418a <act11+0x1aa>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000417c:	12 38       	cp.w	r8,r9
8000417e:	fe 98 ff fa 	brls	80004172 <act11+0x192>
80004182:	12 3a       	cp.w	r10,r9
80004184:	e0 83 01 c7 	brlo	80004512 <act11+0x532>
80004188:	cf 5b       	rjmp	80004172 <act11+0x192>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000418a:	12 38       	cp.w	r8,r9
8000418c:	e0 8b 01 c3 	brhi	80004512 <act11+0x532>
80004190:	12 3a       	cp.w	r10,r9
80004192:	e0 83 01 c0 	brlo	80004512 <act11+0x532>
80004196:	ce eb       	rjmp	80004172 <act11+0x192>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004198:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000419c:	14 38       	cp.w	r8,r10
8000419e:	e0 88 00 09 	brls	800041b0 <act11+0x1d0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800041a2:	12 38       	cp.w	r8,r9
800041a4:	fe 98 ff fa 	brls	80004198 <act11+0x1b8>
800041a8:	12 3a       	cp.w	r10,r9
800041aa:	e0 83 01 c4 	brlo	80004532 <act11+0x552>
800041ae:	cf 5b       	rjmp	80004198 <act11+0x1b8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800041b0:	12 38       	cp.w	r8,r9
800041b2:	e0 8b 01 c0 	brhi	80004532 <act11+0x552>
800041b6:	12 3a       	cp.w	r10,r9
800041b8:	e0 83 01 bd 	brlo	80004532 <act11+0x552>
800041bc:	ce eb       	rjmp	80004198 <act11+0x1b8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800041be:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800041c2:	14 38       	cp.w	r8,r10
800041c4:	e0 88 00 09 	brls	800041d6 <act11+0x1f6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800041c8:	12 38       	cp.w	r8,r9
800041ca:	fe 98 ff fa 	brls	800041be <act11+0x1de>
800041ce:	12 3a       	cp.w	r10,r9
800041d0:	e0 83 01 bf 	brlo	8000454e <act11+0x56e>
800041d4:	cf 5b       	rjmp	800041be <act11+0x1de>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800041d6:	12 38       	cp.w	r8,r9
800041d8:	e0 8b 01 bb 	brhi	8000454e <act11+0x56e>
800041dc:	12 3a       	cp.w	r10,r9
800041de:	e0 83 01 b8 	brlo	8000454e <act11+0x56e>
800041e2:	ce eb       	rjmp	800041be <act11+0x1de>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800041e4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800041e8:	14 38       	cp.w	r8,r10
800041ea:	e0 88 00 09 	brls	800041fc <act11+0x21c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800041ee:	12 38       	cp.w	r8,r9
800041f0:	fe 98 ff fa 	brls	800041e4 <act11+0x204>
800041f4:	12 3a       	cp.w	r10,r9
800041f6:	e0 83 01 bb 	brlo	8000456c <act11+0x58c>
800041fa:	cf 5b       	rjmp	800041e4 <act11+0x204>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800041fc:	12 38       	cp.w	r8,r9
800041fe:	e0 8b 01 b7 	brhi	8000456c <act11+0x58c>
80004202:	12 3a       	cp.w	r10,r9
80004204:	e0 83 01 b4 	brlo	8000456c <act11+0x58c>
80004208:	ce eb       	rjmp	800041e4 <act11+0x204>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000420a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000420e:	14 38       	cp.w	r8,r10
80004210:	e0 88 00 09 	brls	80004222 <act11+0x242>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004214:	12 38       	cp.w	r8,r9
80004216:	fe 98 ff fa 	brls	8000420a <act11+0x22a>
8000421a:	12 3a       	cp.w	r10,r9
8000421c:	e0 83 01 b8 	brlo	8000458c <act11+0x5ac>
80004220:	cf 5b       	rjmp	8000420a <act11+0x22a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004222:	12 38       	cp.w	r8,r9
80004224:	e0 8b 01 b4 	brhi	8000458c <act11+0x5ac>
80004228:	12 3a       	cp.w	r10,r9
8000422a:	e0 83 01 b1 	brlo	8000458c <act11+0x5ac>
8000422e:	ce eb       	rjmp	8000420a <act11+0x22a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004230:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004234:	14 38       	cp.w	r8,r10
80004236:	e0 88 00 09 	brls	80004248 <act11+0x268>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000423a:	12 38       	cp.w	r8,r9
8000423c:	fe 98 ff fa 	brls	80004230 <act11+0x250>
80004240:	12 3a       	cp.w	r10,r9
80004242:	e0 83 01 b5 	brlo	800045ac <act11+0x5cc>
80004246:	cf 5b       	rjmp	80004230 <act11+0x250>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004248:	12 38       	cp.w	r8,r9
8000424a:	e0 8b 01 b1 	brhi	800045ac <act11+0x5cc>
8000424e:	12 3a       	cp.w	r10,r9
80004250:	e0 83 01 ae 	brlo	800045ac <act11+0x5cc>
80004254:	ce eb       	rjmp	80004230 <act11+0x250>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004256:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000425a:	14 38       	cp.w	r8,r10
8000425c:	e0 88 00 09 	brls	8000426e <act11+0x28e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004260:	12 38       	cp.w	r8,r9
80004262:	fe 98 ff fa 	brls	80004256 <act11+0x276>
80004266:	12 3a       	cp.w	r10,r9
80004268:	e0 83 01 b3 	brlo	800045ce <act11+0x5ee>
8000426c:	cf 5b       	rjmp	80004256 <act11+0x276>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000426e:	12 38       	cp.w	r8,r9
80004270:	e0 8b 01 af 	brhi	800045ce <act11+0x5ee>
80004274:	12 3a       	cp.w	r10,r9
80004276:	e0 83 01 ac 	brlo	800045ce <act11+0x5ee>
8000427a:	ce eb       	rjmp	80004256 <act11+0x276>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000427c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004280:	14 38       	cp.w	r8,r10
80004282:	e0 88 00 09 	brls	80004294 <act11+0x2b4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004286:	12 38       	cp.w	r8,r9
80004288:	fe 98 ff fa 	brls	8000427c <act11+0x29c>
8000428c:	12 3a       	cp.w	r10,r9
8000428e:	e0 83 01 b3 	brlo	800045f4 <act11+0x614>
80004292:	cf 5b       	rjmp	8000427c <act11+0x29c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004294:	12 38       	cp.w	r8,r9
80004296:	e0 8b 01 af 	brhi	800045f4 <act11+0x614>
8000429a:	12 3a       	cp.w	r10,r9
8000429c:	e0 83 01 ac 	brlo	800045f4 <act11+0x614>
800042a0:	ce eb       	rjmp	8000427c <act11+0x29c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800042a2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800042a6:	14 38       	cp.w	r8,r10
800042a8:	e0 88 00 09 	brls	800042ba <act11+0x2da>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800042ac:	12 38       	cp.w	r8,r9
800042ae:	fe 98 ff fa 	brls	800042a2 <act11+0x2c2>
800042b2:	12 3a       	cp.w	r10,r9
800042b4:	e0 83 01 b2 	brlo	80004618 <act11+0x638>
800042b8:	cf 5b       	rjmp	800042a2 <act11+0x2c2>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800042ba:	12 38       	cp.w	r8,r9
800042bc:	e0 8b 01 ae 	brhi	80004618 <act11+0x638>
800042c0:	12 3a       	cp.w	r10,r9
800042c2:	e0 83 01 ab 	brlo	80004618 <act11+0x638>
800042c6:	ce eb       	rjmp	800042a2 <act11+0x2c2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800042c8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800042cc:	14 38       	cp.w	r8,r10
800042ce:	e0 88 00 09 	brls	800042e0 <act11+0x300>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800042d2:	12 38       	cp.w	r8,r9
800042d4:	fe 98 ff fa 	brls	800042c8 <act11+0x2e8>
800042d8:	12 3a       	cp.w	r10,r9
800042da:	e0 83 01 b1 	brlo	8000463c <act11+0x65c>
800042de:	cf 5b       	rjmp	800042c8 <act11+0x2e8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800042e0:	12 38       	cp.w	r8,r9
800042e2:	e0 8b 01 ad 	brhi	8000463c <act11+0x65c>
800042e6:	12 3a       	cp.w	r10,r9
800042e8:	e0 83 01 aa 	brlo	8000463c <act11+0x65c>
800042ec:	ce eb       	rjmp	800042c8 <act11+0x2e8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800042ee:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800042f2:	14 38       	cp.w	r8,r10
800042f4:	e0 88 00 09 	brls	80004306 <act11+0x326>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800042f8:	12 38       	cp.w	r8,r9
800042fa:	fe 98 ff fa 	brls	800042ee <act11+0x30e>
800042fe:	12 3a       	cp.w	r10,r9
80004300:	e0 83 01 ae 	brlo	8000465c <act11+0x67c>
80004304:	cf 5b       	rjmp	800042ee <act11+0x30e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004306:	12 38       	cp.w	r8,r9
80004308:	e0 8b 01 aa 	brhi	8000465c <act11+0x67c>
8000430c:	12 3a       	cp.w	r10,r9
8000430e:	e0 83 01 a7 	brlo	8000465c <act11+0x67c>
80004312:	ce eb       	rjmp	800042ee <act11+0x30e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004314:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004318:	14 38       	cp.w	r8,r10
8000431a:	e0 88 00 09 	brls	8000432c <act11+0x34c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000431e:	12 38       	cp.w	r8,r9
80004320:	fe 98 ff fa 	brls	80004314 <act11+0x334>
80004324:	12 3a       	cp.w	r10,r9
80004326:	e0 83 01 ab 	brlo	8000467c <act11+0x69c>
8000432a:	cf 5b       	rjmp	80004314 <act11+0x334>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000432c:	12 38       	cp.w	r8,r9
8000432e:	e0 8b 01 a7 	brhi	8000467c <act11+0x69c>
80004332:	12 3a       	cp.w	r10,r9
80004334:	e0 83 01 a4 	brlo	8000467c <act11+0x69c>
80004338:	ce eb       	rjmp	80004314 <act11+0x334>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000433a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000433e:	14 38       	cp.w	r8,r10
80004340:	e0 88 00 09 	brls	80004352 <act11+0x372>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004344:	12 38       	cp.w	r8,r9
80004346:	fe 98 ff fa 	brls	8000433a <act11+0x35a>
8000434a:	12 3a       	cp.w	r10,r9
8000434c:	e0 83 01 a9 	brlo	8000469e <act11+0x6be>
80004350:	cf 5b       	rjmp	8000433a <act11+0x35a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004352:	12 38       	cp.w	r8,r9
80004354:	e0 8b 01 a5 	brhi	8000469e <act11+0x6be>
80004358:	12 3a       	cp.w	r10,r9
8000435a:	e0 83 01 a2 	brlo	8000469e <act11+0x6be>
8000435e:	ce eb       	rjmp	8000433a <act11+0x35a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004360:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004364:	14 38       	cp.w	r8,r10
80004366:	e0 88 00 09 	brls	80004378 <act11+0x398>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000436a:	12 38       	cp.w	r8,r9
8000436c:	fe 98 ff fa 	brls	80004360 <act11+0x380>
80004370:	12 3a       	cp.w	r10,r9
80004372:	e0 83 01 a8 	brlo	800046c2 <act11+0x6e2>
80004376:	cf 5b       	rjmp	80004360 <act11+0x380>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004378:	12 38       	cp.w	r8,r9
8000437a:	e0 8b 01 a4 	brhi	800046c2 <act11+0x6e2>
8000437e:	12 3a       	cp.w	r10,r9
80004380:	e0 83 01 a1 	brlo	800046c2 <act11+0x6e2>
80004384:	ce eb       	rjmp	80004360 <act11+0x380>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004386:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000438a:	14 38       	cp.w	r8,r10
8000438c:	e0 88 00 09 	brls	8000439e <act11+0x3be>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004390:	12 38       	cp.w	r8,r9
80004392:	fe 98 ff fa 	brls	80004386 <act11+0x3a6>
80004396:	12 3a       	cp.w	r10,r9
80004398:	e0 83 01 a6 	brlo	800046e4 <act11+0x704>
8000439c:	cf 5b       	rjmp	80004386 <act11+0x3a6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000439e:	12 38       	cp.w	r8,r9
800043a0:	e0 8b 01 a2 	brhi	800046e4 <act11+0x704>
800043a4:	12 3a       	cp.w	r10,r9
800043a6:	e0 83 01 9f 	brlo	800046e4 <act11+0x704>
800043aa:	ce eb       	rjmp	80004386 <act11+0x3a6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800043ac:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800043b0:	14 38       	cp.w	r8,r10
800043b2:	e0 88 00 08 	brls	800043c2 <act11+0x3e2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800043b6:	12 38       	cp.w	r8,r9
800043b8:	fe 98 ff fa 	brls	800043ac <act11+0x3cc>
800043bc:	12 3a       	cp.w	r10,r9
800043be:	c1 c3       	brcs	800043f6 <act11+0x416>
800043c0:	cf 6b       	rjmp	800043ac <act11+0x3cc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800043c2:	12 38       	cp.w	r8,r9
800043c4:	e0 8b 00 19 	brhi	800043f6 <act11+0x416>
800043c8:	12 3a       	cp.w	r10,r9
800043ca:	c1 63       	brcs	800043f6 <act11+0x416>
800043cc:	cf 0b       	rjmp	800043ac <act11+0x3cc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800043ce:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800043d2:	f0 ca ff f4 	sub	r10,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800043d6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800043da:	14 38       	cp.w	r8,r10
800043dc:	e0 88 00 08 	brls	800043ec <act11+0x40c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800043e0:	12 38       	cp.w	r8,r9
800043e2:	fe 98 ff fa 	brls	800043d6 <act11+0x3f6>
800043e6:	12 3a       	cp.w	r10,r9
800043e8:	c0 73       	brcs	800043f6 <act11+0x416>
800043ea:	cf 6b       	rjmp	800043d6 <act11+0x3f6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800043ec:	12 38       	cp.w	r8,r9
800043ee:	e0 8b 00 04 	brhi	800043f6 <act11+0x416>
800043f2:	12 3a       	cp.w	r10,r9
800043f4:	cf 12       	brcc	800043d6 <act11+0x3f6>
    et024006_DrawLine( 112, 111, 160, 0, BLUE);delay_ms(50);
    et024006_DrawLine( 112, 154, 160, 0, BLUE);delay_ms(50);
    et024006_DrawLine( 195, 154, 160, 0, BLUE);delay_ms(50);
    et024006_DrawLine( 195, 111, 160, 0, BLUE);delay_ms(50);
    et024006_DrawLine( 256, 111, 160, 0, BLUE);delay_ms(50);
  while(*actual_state == valid_state){
800043f6:	0d 88       	ld.ub	r8,r6[0x0]
800043f8:	ee 08 18 00 	cp.b	r8,r7
800043fc:	ce 90       	breq	800043ce <act11+0x3ee>
800043fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

void act11(uint8_t valid_state, uint8_t * actual_state){
    clr_disp();
    et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, WHITE );
    et024006_DrawHorizLine( 49, 235, 231, BLACK);delay_ms(50);
    et024006_DrawHorizLine( 98, 192, 107, BLACK);delay_ms(50);
80004402:	30 09       	mov	r9,0
80004404:	36 ba       	mov	r10,107
80004406:	e0 6b 00 c0 	mov	r11,192
8000440a:	36 2c       	mov	r12,98
8000440c:	f0 1f 00 c0 	mcall	8000470c <act11+0x72c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004410:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004414:	e8 79 27 c0 	mov	r9,600000
80004418:	f0 09 00 0a 	add	r10,r8,r9
8000441c:	fe 9f fe 13 	bral	80004042 <act11+0x62>
    et024006_DrawHorizLine( 49, 137, 49, BLACK);delay_ms(50);
80004420:	30 09       	mov	r9,0
80004422:	33 1a       	mov	r10,49
80004424:	e0 6b 00 89 	mov	r11,137
80004428:	14 9c       	mov	r12,r10
8000442a:	f0 1f 00 b9 	mcall	8000470c <act11+0x72c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000442e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004432:	e8 79 27 c0 	mov	r9,600000
80004436:	f0 09 00 0a 	add	r10,r8,r9
8000443a:	fe 9f fe 17 	bral	80004068 <act11+0x88>
    et024006_DrawHorizLine( 205, 137, 75, BLACK);delay_ms(50);
8000443e:	30 09       	mov	r9,0
80004440:	34 ba       	mov	r10,75
80004442:	e0 6b 00 89 	mov	r11,137
80004446:	e0 6c 00 cd 	mov	r12,205
8000444a:	f0 1f 00 b1 	mcall	8000470c <act11+0x72c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000444e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004452:	e8 79 27 c0 	mov	r9,600000
80004456:	f0 09 00 0a 	add	r10,r8,r9
8000445a:	fe 9f fe 1a 	bral	8000408e <act11+0xae>
    et024006_DrawHorizLine( 111, 155, 85, BLACK);delay_ms(50);
8000445e:	30 09       	mov	r9,0
80004460:	35 5a       	mov	r10,85
80004462:	e0 6b 00 9b 	mov	r11,155
80004466:	36 fc       	mov	r12,111
80004468:	f0 1f 00 a9 	mcall	8000470c <act11+0x72c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000446c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004470:	e8 79 27 c0 	mov	r9,600000
80004474:	f0 09 00 0a 	add	r10,r8,r9
80004478:	fe 9f fe 1e 	bral	800040b4 <act11+0xd4>
    et024006_DrawHorizLine( 70, 112, 41, BLACK);delay_ms(50);
8000447c:	30 09       	mov	r9,0
8000447e:	32 9a       	mov	r10,41
80004480:	37 0b       	mov	r11,112
80004482:	34 6c       	mov	r12,70
80004484:	f0 1f 00 a2 	mcall	8000470c <act11+0x72c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004488:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000448c:	e8 79 27 c0 	mov	r9,600000
80004490:	f0 09 00 0a 	add	r10,r8,r9
80004494:	fe 9f fe 23 	bral	800040da <act11+0xfa>
    et024006_DrawHorizLine( 196, 112, 61, BLACK);delay_ms(50);
80004498:	30 09       	mov	r9,0
8000449a:	33 da       	mov	r10,61
8000449c:	37 0b       	mov	r11,112
8000449e:	e0 6c 00 c4 	mov	r12,196
800044a2:	f0 1f 00 9b 	mcall	8000470c <act11+0x72c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800044a6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800044aa:	e8 79 27 c0 	mov	r9,600000
800044ae:	f0 09 00 0a 	add	r10,r8,r9
800044b2:	fe 9f fe 27 	bral	80004100 <act11+0x120>

    et024006_DrawVertLine( 49, 137, 98, BLACK);delay_ms(50);
800044b6:	30 09       	mov	r9,0
800044b8:	36 2a       	mov	r10,98
800044ba:	e0 6b 00 89 	mov	r11,137
800044be:	33 1c       	mov	r12,49
800044c0:	f0 1f 00 94 	mcall	80004710 <act11+0x730>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800044c4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800044c8:	e8 79 27 c0 	mov	r9,600000
800044cc:	f0 09 00 0a 	add	r10,r8,r9
800044d0:	fe 9f fe 2b 	bral	80004126 <act11+0x146>
    et024006_DrawVertLine( 98, 137, 55, BLACK);delay_ms(50);
800044d4:	30 09       	mov	r9,0
800044d6:	33 7a       	mov	r10,55
800044d8:	e0 6b 00 89 	mov	r11,137
800044dc:	36 2c       	mov	r12,98
800044de:	f0 1f 00 8d 	mcall	80004710 <act11+0x730>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800044e2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800044e6:	e8 79 27 c0 	mov	r9,600000
800044ea:	f0 09 00 0a 	add	r10,r8,r9
800044ee:	fe 9f fe 2f 	bral	8000414c <act11+0x16c>
    et024006_DrawVertLine( 205, 137, 55, BLACK);delay_ms(50);
800044f2:	30 09       	mov	r9,0
800044f4:	33 7a       	mov	r10,55
800044f6:	e0 6b 00 89 	mov	r11,137
800044fa:	e0 6c 00 cd 	mov	r12,205
800044fe:	f0 1f 00 85 	mcall	80004710 <act11+0x730>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004502:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004506:	e8 79 27 c0 	mov	r9,600000
8000450a:	f0 09 00 0a 	add	r10,r8,r9
8000450e:	fe 9f fe 32 	bral	80004172 <act11+0x192>
    et024006_DrawVertLine( 280, 137, 98, BLACK);delay_ms(50);
80004512:	30 09       	mov	r9,0
80004514:	36 2a       	mov	r10,98
80004516:	e0 6b 00 89 	mov	r11,137
8000451a:	e0 6c 01 18 	mov	r12,280
8000451e:	f0 1f 00 7d 	mcall	80004710 <act11+0x730>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004522:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004526:	e8 79 27 c0 	mov	r9,600000
8000452a:	f0 09 00 0a 	add	r10,r8,r9
8000452e:	fe 9f fe 35 	bral	80004198 <act11+0x1b8>
    et024006_DrawVertLine( 111, 112, 43, BLACK);delay_ms(50);
80004532:	30 09       	mov	r9,0
80004534:	32 ba       	mov	r10,43
80004536:	37 0b       	mov	r11,112
80004538:	36 fc       	mov	r12,111
8000453a:	f0 1f 00 76 	mcall	80004710 <act11+0x730>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000453e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004542:	e8 79 27 c0 	mov	r9,600000
80004546:	f0 09 00 0a 	add	r10,r8,r9
8000454a:	fe 9f fe 3a 	bral	800041be <act11+0x1de>
    et024006_DrawVertLine( 196, 112, 43, BLACK);delay_ms(50);
8000454e:	30 09       	mov	r9,0
80004550:	32 ba       	mov	r10,43
80004552:	37 0b       	mov	r11,112
80004554:	e0 6c 00 c4 	mov	r12,196
80004558:	f0 1f 00 6e 	mcall	80004710 <act11+0x730>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000455c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004560:	e8 79 27 c0 	mov	r9,600000
80004564:	f0 09 00 0a 	add	r10,r8,r9
80004568:	fe 9f fe 3e 	bral	800041e4 <act11+0x204>

    et024006_DrawLine( 49, 137, 70, 112, BLACK);delay_ms(50);
8000456c:	30 08       	mov	r8,0
8000456e:	37 09       	mov	r9,112
80004570:	34 6a       	mov	r10,70
80004572:	e0 6b 00 89 	mov	r11,137
80004576:	33 1c       	mov	r12,49
80004578:	f0 1f 00 67 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000457c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004580:	e8 79 27 c0 	mov	r9,600000
80004584:	f0 09 00 0a 	add	r10,r8,r9
80004588:	fe 9f fe 41 	bral	8000420a <act11+0x22a>
    et024006_DrawLine( 98, 137, 111, 112, BLACK);delay_ms(50);
8000458c:	30 08       	mov	r8,0
8000458e:	37 09       	mov	r9,112
80004590:	36 fa       	mov	r10,111
80004592:	e0 6b 00 89 	mov	r11,137
80004596:	36 2c       	mov	r12,98
80004598:	f0 1f 00 5f 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000459c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800045a0:	e8 79 27 c0 	mov	r9,600000
800045a4:	f0 09 00 0a 	add	r10,r8,r9
800045a8:	fe 9f fe 44 	bral	80004230 <act11+0x250>
    et024006_DrawLine( 98, 192, 111, 155, BLACK);delay_ms(50);
800045ac:	30 08       	mov	r8,0
800045ae:	e0 69 00 9b 	mov	r9,155
800045b2:	36 fa       	mov	r10,111
800045b4:	e0 6b 00 c0 	mov	r11,192
800045b8:	36 2c       	mov	r12,98
800045ba:	f0 1f 00 57 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800045be:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800045c2:	e8 79 27 c0 	mov	r9,600000
800045c6:	f0 09 00 0a 	add	r10,r8,r9
800045ca:	fe 9f fe 46 	bral	80004256 <act11+0x276>
    et024006_DrawLine( 205, 192, 196, 155, BLACK);delay_ms(50);
800045ce:	30 08       	mov	r8,0
800045d0:	e0 69 00 9b 	mov	r9,155
800045d4:	e0 6a 00 c4 	mov	r10,196
800045d8:	e0 6b 00 c0 	mov	r11,192
800045dc:	e0 6c 00 cd 	mov	r12,205
800045e0:	f0 1f 00 4d 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800045e4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800045e8:	e8 79 27 c0 	mov	r9,600000
800045ec:	f0 09 00 0a 	add	r10,r8,r9
800045f0:	fe 9f fe 46 	bral	8000427c <act11+0x29c>
    et024006_DrawLine( 205, 137, 196, 112, BLACK);delay_ms(50);
800045f4:	30 08       	mov	r8,0
800045f6:	37 09       	mov	r9,112
800045f8:	e0 6a 00 c4 	mov	r10,196
800045fc:	e0 6b 00 89 	mov	r11,137
80004600:	e0 6c 00 cd 	mov	r12,205
80004604:	f0 1f 00 44 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004608:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000460c:	e8 79 27 c0 	mov	r9,600000
80004610:	f0 09 00 0a 	add	r10,r8,r9
80004614:	fe 9f fe 47 	bral	800042a2 <act11+0x2c2>
    et024006_DrawLine( 280, 137, 257, 112, BLACK);delay_ms(50);
80004618:	30 08       	mov	r8,0
8000461a:	37 09       	mov	r9,112
8000461c:	e0 6a 01 01 	mov	r10,257
80004620:	e0 6b 00 89 	mov	r11,137
80004624:	e0 6c 01 18 	mov	r12,280
80004628:	f0 1f 00 3b 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000462c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004630:	e8 79 27 c0 	mov	r9,600000
80004634:	f0 09 00 0a 	add	r10,r8,r9
80004638:	fe 9f fe 48 	bral	800042c8 <act11+0x2e8>

    et024006_DrawLine( 71, 111, 160, 0, BLUE);delay_ms(50);
8000463c:	31 f8       	mov	r8,31
8000463e:	30 09       	mov	r9,0
80004640:	e0 6a 00 a0 	mov	r10,160
80004644:	36 fb       	mov	r11,111
80004646:	34 7c       	mov	r12,71
80004648:	f0 1f 00 33 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000464c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004650:	e8 79 27 c0 	mov	r9,600000
80004654:	f0 09 00 0a 	add	r10,r8,r9
80004658:	fe 9f fe 4b 	bral	800042ee <act11+0x30e>
    et024006_DrawLine( 112, 111, 160, 0, BLUE);delay_ms(50);
8000465c:	31 f8       	mov	r8,31
8000465e:	30 09       	mov	r9,0
80004660:	e0 6a 00 a0 	mov	r10,160
80004664:	36 fb       	mov	r11,111
80004666:	37 0c       	mov	r12,112
80004668:	f0 1f 00 2b 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000466c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004670:	e8 79 27 c0 	mov	r9,600000
80004674:	f0 09 00 0a 	add	r10,r8,r9
80004678:	fe 9f fe 4e 	bral	80004314 <act11+0x334>
    et024006_DrawLine( 112, 154, 160, 0, BLUE);delay_ms(50);
8000467c:	31 f8       	mov	r8,31
8000467e:	30 09       	mov	r9,0
80004680:	e0 6a 00 a0 	mov	r10,160
80004684:	e0 6b 00 9a 	mov	r11,154
80004688:	37 0c       	mov	r12,112
8000468a:	f0 1f 00 23 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000468e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004692:	e8 79 27 c0 	mov	r9,600000
80004696:	f0 09 00 0a 	add	r10,r8,r9
8000469a:	fe 9f fe 50 	bral	8000433a <act11+0x35a>
    et024006_DrawLine( 195, 154, 160, 0, BLUE);delay_ms(50);
8000469e:	31 f8       	mov	r8,31
800046a0:	30 09       	mov	r9,0
800046a2:	e0 6a 00 a0 	mov	r10,160
800046a6:	e0 6b 00 9a 	mov	r11,154
800046aa:	e0 6c 00 c3 	mov	r12,195
800046ae:	f0 1f 00 1a 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800046b2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800046b6:	e8 79 27 c0 	mov	r9,600000
800046ba:	f0 09 00 0a 	add	r10,r8,r9
800046be:	fe 9f fe 51 	bral	80004360 <act11+0x380>
    et024006_DrawLine( 195, 111, 160, 0, BLUE);delay_ms(50);
800046c2:	31 f8       	mov	r8,31
800046c4:	30 09       	mov	r9,0
800046c6:	e0 6a 00 a0 	mov	r10,160
800046ca:	36 fb       	mov	r11,111
800046cc:	e0 6c 00 c3 	mov	r12,195
800046d0:	f0 1f 00 11 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800046d4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800046d8:	e8 79 27 c0 	mov	r9,600000
800046dc:	f0 09 00 0a 	add	r10,r8,r9
800046e0:	fe 9f fe 53 	bral	80004386 <act11+0x3a6>
    et024006_DrawLine( 256, 111, 160, 0, BLUE);delay_ms(50);
800046e4:	31 f8       	mov	r8,31
800046e6:	30 09       	mov	r9,0
800046e8:	e0 6a 00 a0 	mov	r10,160
800046ec:	36 fb       	mov	r11,111
800046ee:	e0 6c 01 00 	mov	r12,256
800046f2:	f0 1f 00 09 	mcall	80004714 <act11+0x734>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800046f6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800046fa:	e8 79 27 c0 	mov	r9,600000
800046fe:	f0 09 00 0a 	add	r10,r8,r9
80004702:	c5 5a       	rjmp	800043ac <act11+0x3cc>
80004704:	80 00       	ld.sh	r0,r0[0x0]
80004706:	33 b0       	mov	r0,59
80004708:	80 00       	ld.sh	r0,r0[0x0]
8000470a:	24 7c       	sub	r12,71
8000470c:	80 00       	ld.sh	r0,r0[0x0]
8000470e:	26 30       	sub	r0,99
80004710:	80 00       	ld.sh	r0,r0[0x0]
80004712:	24 bc       	sub	r12,75
80004714:	80 00       	ld.sh	r0,r0[0x0]
80004716:	23 24       	sub	r4,50

80004718 <drawHollowTriangle>:

void drawHollowTriangle(int centerx, int centery, int radio, int dir, int color){ //dir=0 VOLTEADO ; dir=1 NORMAL
80004718:	eb cd 40 fe 	pushm	r1-r7,lr
8000471c:	20 2d       	sub	sp,8
8000471e:	18 96       	mov	r6,r12
80004720:	16 94       	mov	r4,r11
80004722:	14 95       	mov	r5,r10
80004724:	12 91       	mov	r1,r9
80004726:	10 92       	mov	r2,r8
  int l,b,p1x,p1y,p2x,p2y,p3x,p3y;
  b= radio*(0.866);
80004728:	14 9c       	mov	r12,r10
8000472a:	f0 1f 00 34 	mcall	800047f8 <drawHollowTriangle+0xe0>
8000472e:	fa eb 00 00 	st.d	sp[0],r10
80004732:	e0 68 c0 83 	mov	r8,49283
80004736:	ea 18 a1 ca 	orh	r8,0xa1ca
8000473a:	e0 69 b6 45 	mov	r9,46661
8000473e:	ea 19 3f eb 	orh	r9,0x3feb
80004742:	f0 1f 00 2f 	mcall	800047fc <drawHollowTriangle+0xe4>
80004746:	f0 1f 00 2f 	mcall	80004800 <drawHollowTriangle+0xe8>
8000474a:	18 93       	mov	r3,r12
	l = (radio)*(0.5);
8000474c:	30 08       	mov	r8,0
8000474e:	fc 19 3f e0 	movh	r9,0x3fe0
80004752:	fa ea 00 00 	ld.d	r10,sp[0]
80004756:	f0 1f 00 2a 	mcall	800047fc <drawHollowTriangle+0xe4>
8000475a:	f0 1f 00 2a 	mcall	80004800 <drawHollowTriangle+0xe8>
	if (dir ==1) //TRIANGULO NORMAL
8000475e:	58 11       	cp.w	r1,1
80004760:	c2 61       	brne	800047ac <drawHollowTriangle+0x94>
		p1y=centery-radio;
		p2x=centerx-b;
		p2y=centery+l;
		p3x=centerx+b;
		p3y=centery+l;
		et024006_DrawLine(p1x,p1y,p2x,p2y,color);
80004762:	5c 72       	castu.h	r2
80004764:	f8 04 00 07 	add	r7,r12,r4
80004768:	5c 77       	castu.h	r7
8000476a:	ec 03 01 01 	sub	r1,r6,r3
8000476e:	5c 71       	castu.h	r1
80004770:	e8 05 01 05 	sub	r5,r4,r5
80004774:	5c 75       	castu.h	r5
80004776:	e9 d6 c0 10 	bfextu	r4,r6,0x0,0x10
8000477a:	04 98       	mov	r8,r2
8000477c:	0e 99       	mov	r9,r7
8000477e:	02 9a       	mov	r10,r1
80004780:	0a 9b       	mov	r11,r5
80004782:	08 9c       	mov	r12,r4
80004784:	f0 1f 00 20 	mcall	80004804 <drawHollowTriangle+0xec>
		et024006_DrawLine(p1x,p1y,p3x,p3y,color);
80004788:	e6 06 00 06 	add	r6,r3,r6
8000478c:	5c 76       	castu.h	r6
8000478e:	04 98       	mov	r8,r2
80004790:	0e 99       	mov	r9,r7
80004792:	0c 9a       	mov	r10,r6
80004794:	0a 9b       	mov	r11,r5
80004796:	08 9c       	mov	r12,r4
80004798:	f0 1f 00 1b 	mcall	80004804 <drawHollowTriangle+0xec>
		et024006_DrawLine(p2x,p2y,p3x,p3y,color);
8000479c:	04 98       	mov	r8,r2
8000479e:	0e 99       	mov	r9,r7
800047a0:	0c 9a       	mov	r10,r6
800047a2:	0e 9b       	mov	r11,r7
800047a4:	02 9c       	mov	r12,r1
800047a6:	f0 1f 00 18 	mcall	80004804 <drawHollowTriangle+0xec>
800047aa:	c2 48       	rjmp	800047f2 <drawHollowTriangle+0xda>
		p1y=centery+radio;
		p2x=centerx-b;
		p2y=centery-l;
		p3x=centerx+b;
		p3y=centery-l;
		et024006_DrawLine(p1x,p1y,p2x,p2y,color);
800047ac:	5c 72       	castu.h	r2
800047ae:	e8 0c 01 07 	sub	r7,r4,r12
800047b2:	5c 77       	castu.h	r7
800047b4:	ec 03 01 01 	sub	r1,r6,r3
800047b8:	5c 71       	castu.h	r1
800047ba:	08 05       	add	r5,r4
800047bc:	5c 75       	castu.h	r5
800047be:	e9 d6 c0 10 	bfextu	r4,r6,0x0,0x10
800047c2:	04 98       	mov	r8,r2
800047c4:	0e 99       	mov	r9,r7
800047c6:	02 9a       	mov	r10,r1
800047c8:	0a 9b       	mov	r11,r5
800047ca:	08 9c       	mov	r12,r4
800047cc:	f0 1f 00 0e 	mcall	80004804 <drawHollowTriangle+0xec>
		et024006_DrawLine(p1x,p1y,p3x,p3y,color);
800047d0:	e6 06 00 06 	add	r6,r3,r6
800047d4:	5c 76       	castu.h	r6
800047d6:	04 98       	mov	r8,r2
800047d8:	0e 99       	mov	r9,r7
800047da:	0c 9a       	mov	r10,r6
800047dc:	0a 9b       	mov	r11,r5
800047de:	08 9c       	mov	r12,r4
800047e0:	f0 1f 00 09 	mcall	80004804 <drawHollowTriangle+0xec>
		et024006_DrawLine(p2x,p2y,p3x,p3y,color);
800047e4:	04 98       	mov	r8,r2
800047e6:	0e 99       	mov	r9,r7
800047e8:	0c 9a       	mov	r10,r6
800047ea:	0e 9b       	mov	r11,r7
800047ec:	02 9c       	mov	r12,r1
800047ee:	f0 1f 00 06 	mcall	80004804 <drawHollowTriangle+0xec>
	}//Fin if
}//Fin fn
800047f2:	2f ed       	sub	sp,-8
800047f4:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800047f8:	80 00       	ld.sh	r0,r0[0x0]
800047fa:	74 ba       	ld.w	r10,r10[0x2c]
800047fc:	80 00       	ld.sh	r0,r0[0x0]
800047fe:	70 04       	ld.w	r4,r8[0x0]
80004800:	80 00       	ld.sh	r0,r0[0x0]
80004802:	74 8c       	ld.w	r12,r10[0x20]
80004804:	80 00       	ld.sh	r0,r0[0x0]
80004806:	23 24       	sub	r4,50

80004808 <act12>:
#include "et024006dhu.h"
#include "delay.h"



void act12(uint8_t valid_state, uint8_t * actual_state){
80004808:	d4 31       	pushm	r0-r7,lr
8000480a:	20 5d       	sub	sp,20
8000480c:	50 3c       	stdsp	sp[0xc],r12
8000480e:	50 4b       	stdsp	sp[0x10],r11
#define off 20
  int l,b,p1x,p1y,p2x,p2y,p3x,p3y;
  //Triangle illusion
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, WHITE ); //Lienzo en Blanco	enter=1;
80004810:	e0 68 ff ff 	mov	r8,65535
80004814:	e0 69 00 f0 	mov	r9,240
80004818:	e0 6a 01 40 	mov	r10,320
8000481c:	30 0b       	mov	r11,0
8000481e:	16 9c       	mov	r12,r11
80004820:	f0 1f 00 44 	mcall	80004930 <act12+0x128>
	int temp1, temp2, temp3, temp4, temp5;

	for (int i=1; i<=10; i++){
		drawHollowTriangle(160, 120+off, 6*i,0, BLACK); //T. invertido
80004824:	30 08       	mov	r8,0
80004826:	10 99       	mov	r9,r8
80004828:	30 6a       	mov	r10,6
8000482a:	e0 6b 00 8c 	mov	r11,140
8000482e:	e0 6c 00 a0 	mov	r12,160
80004832:	f0 1f 00 41 	mcall	80004934 <act12+0x12c>
80004836:	30 c7       	mov	r7,12
80004838:	30 06       	mov	r6,0
8000483a:	e0 65 00 8c 	mov	r5,140
8000483e:	e0 64 00 a0 	mov	r4,160
80004842:	0c 98       	mov	r8,r6
80004844:	0c 99       	mov	r9,r6
80004846:	0e 9a       	mov	r10,r7
80004848:	0a 9b       	mov	r11,r5
8000484a:	08 9c       	mov	r12,r4
8000484c:	f0 1f 00 3a 	mcall	80004934 <act12+0x12c>
80004850:	2f a7       	sub	r7,-6

		if (i == 10){
80004852:	e0 47 00 42 	cp.w	r7,66
80004856:	cf 61       	brne	80004842 <act12+0x3a>
80004858:	30 62       	mov	r2,6
8000485a:	30 18       	mov	r8,1
8000485c:	50 28       	stdsp	sp[0x8],r8
8000485e:	30 05       	mov	r5,0
			temp5=0;

			for (int j=1; j<=10; j++){
				for (int y=0; y<=3-(j*0.3); y++){ // Y toma los valores: 3,3,3,2,2,2,1,1,1 (Grosor)
					temp4= (6*j)-y;
					drawHollowTriangle(160, 2*temp1+off,(temp4),1, BLACK); //Triangulo arriba
80004860:	10 94       	mov	r4,r8
80004862:	35 00       	mov	r0,80
					drawHollowTriangle((temp3-1),(121+60-temp1-1)+off,temp4,1, BLACK);//T derecha
80004864:	e0 63 00 aa 	mov	r3,170
80004868:	c2 d8       	rjmp	800048c2 <act12+0xba>
	int temp1, temp2, temp3, temp4, temp5;

	for (int i=1; i<=10; i++){
		drawHollowTriangle(160, 120+off, 6*i,0, BLACK); //T. invertido

		if (i == 10){
8000486a:	0a 96       	mov	r6,r5
			for (int j=1; j<=10; j++){
				for (int y=0; y<=3-(j*0.3); y++){ // Y toma los valores: 3,3,3,2,2,2,1,1,1 (Grosor)
					temp4= (6*j)-y;
					drawHollowTriangle(160, 2*temp1+off,(temp4),1, BLACK); //Triangulo arriba
					drawHollowTriangle((temp3-1),(121+60-temp1-1)+off,temp4,1, BLACK);//T derecha
					drawHollowTriangle((temp2+1),(121+60-temp1-1)+off,temp4,1, BLACK);//T izq
8000486c:	e0 61 00 d4 	mov	r1,212
	int temp1, temp2, temp3, temp4, temp5;

	for (int i=1; i<=10; i++){
		drawHollowTriangle(160, 120+off, 6*i,0, BLACK); //T. invertido

		if (i == 10){
80004870:	e4 06 01 07 	sub	r7,r2,r6
			temp5=0;

			for (int j=1; j<=10; j++){
				for (int y=0; y<=3-(j*0.3); y++){ // Y toma los valores: 3,3,3,2,2,2,1,1,1 (Grosor)
					temp4= (6*j)-y;
					drawHollowTriangle(160, 2*temp1+off,(temp4),1, BLACK); //Triangulo arriba
80004874:	0a 98       	mov	r8,r5
80004876:	08 99       	mov	r9,r4
80004878:	0e 9a       	mov	r10,r7
8000487a:	00 9b       	mov	r11,r0
8000487c:	e0 6c 00 a0 	mov	r12,160
80004880:	f0 1f 00 2d 	mcall	80004934 <act12+0x12c>
					drawHollowTriangle((temp3-1),(121+60-temp1-1)+off,temp4,1, BLACK);//T derecha
80004884:	0a 98       	mov	r8,r5
80004886:	08 99       	mov	r9,r4
80004888:	0e 9a       	mov	r10,r7
8000488a:	06 9b       	mov	r11,r3
8000488c:	36 bc       	mov	r12,107
8000488e:	f0 1f 00 2a 	mcall	80004934 <act12+0x12c>
					drawHollowTriangle((temp2+1),(121+60-temp1-1)+off,temp4,1, BLACK);//T izq
80004892:	0a 98       	mov	r8,r5
80004894:	08 99       	mov	r9,r4
80004896:	0e 9a       	mov	r10,r7
80004898:	06 9b       	mov	r11,r3
8000489a:	02 9c       	mov	r12,r1
8000489c:	f0 1f 00 26 	mcall	80004934 <act12+0x12c>
			temp3=160-60*(0.866);//p3x;
			temp4=2;
			temp5=0;

			for (int j=1; j<=10; j++){
				for (int y=0; y<=3-(j*0.3); y++){ // Y toma los valores: 3,3,3,2,2,2,1,1,1 (Grosor)
800048a0:	2f f6       	sub	r6,-1
800048a2:	0c 9c       	mov	r12,r6
800048a4:	f0 1f 00 25 	mcall	80004938 <act12+0x130>
800048a8:	14 98       	mov	r8,r10
800048aa:	16 99       	mov	r9,r11
800048ac:	fa ea 00 00 	ld.d	r10,sp[0]
800048b0:	f0 1f 00 23 	mcall	8000493c <act12+0x134>
800048b4:	cd e1       	brne	80004870 <act12+0x68>
			temp2=160+60*(0.866);//p2x;
			temp3=160-60*(0.866);//p3x;
			temp4=2;
			temp5=0;

			for (int j=1; j<=10; j++){
800048b6:	40 28       	lddsp	r8,sp[0x8]
800048b8:	2f f8       	sub	r8,-1
800048ba:	50 28       	stdsp	sp[0x8],r8
800048bc:	2f a2       	sub	r2,-6
800048be:	58 b8       	cp.w	r8,11
800048c0:	c3 00       	breq	80004920 <act12+0x118>
				for (int y=0; y<=3-(j*0.3); y++){ // Y toma los valores: 3,3,3,2,2,2,1,1,1 (Grosor)
800048c2:	40 2c       	lddsp	r12,sp[0x8]
800048c4:	f0 1f 00 1d 	mcall	80004938 <act12+0x130>
800048c8:	e0 68 33 33 	mov	r8,13107
800048cc:	ea 18 33 33 	orh	r8,0x3333
800048d0:	e0 69 33 33 	mov	r9,13107
800048d4:	ea 19 bf d3 	orh	r9,0xbfd3
800048d8:	f0 1f 00 1a 	mcall	80004940 <act12+0x138>
800048dc:	30 08       	mov	r8,0
800048de:	fc 19 40 08 	movh	r9,0x4008
800048e2:	f0 1f 00 19 	mcall	80004944 <act12+0x13c>
800048e6:	fa eb 00 00 	st.d	sp[0],r10
800048ea:	30 08       	mov	r8,0
800048ec:	30 09       	mov	r9,0
800048ee:	f0 1f 00 14 	mcall	8000493c <act12+0x134>
800048f2:	cb c1       	brne	8000486a <act12+0x62>
800048f4:	ce 1b       	rjmp	800048b6 <act12+0xae>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800048f6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800048fa:	f0 c9 ff f4 	sub	r9,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800048fe:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004902:	12 38       	cp.w	r8,r9
80004904:	e0 88 00 08 	brls	80004914 <act12+0x10c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004908:	14 38       	cp.w	r8,r10
8000490a:	fe 98 ff fa 	brls	800048fe <act12+0xf6>
8000490e:	14 39       	cp.w	r9,r10
80004910:	c0 a3       	brcs	80004924 <act12+0x11c>
80004912:	cf 6b       	rjmp	800048fe <act12+0xf6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004914:	14 38       	cp.w	r8,r10
80004916:	e0 8b 00 07 	brhi	80004924 <act12+0x11c>
8000491a:	14 39       	cp.w	r9,r10
8000491c:	cf 12       	brcc	800048fe <act12+0xf6>
8000491e:	c0 38       	rjmp	80004924 <act12+0x11c>
80004920:	40 3b       	lddsp	r11,sp[0xc]
80004922:	40 4c       	lddsp	r12,sp[0x10]
					drawHollowTriangle((temp2+1),(121+60-temp1-1)+off,temp4,1, BLACK);//T izq
				}//Fin for 2
			}//Fin for 1
		} //Fin if principal
	} //Fin for principal
  while(*actual_state == valid_state){
80004924:	19 88       	ld.ub	r8,r12[0x0]
80004926:	f6 08 18 00 	cp.b	r8,r11
8000492a:	ce 60       	breq	800048f6 <act12+0xee>
	  delay_us(1);
  }
}
8000492c:	2f bd       	sub	sp,-20
8000492e:	d8 32       	popm	r0-r7,pc
80004930:	80 00       	ld.sh	r0,r0[0x0]
80004932:	24 7c       	sub	r12,71
80004934:	80 00       	ld.sh	r0,r0[0x0]
80004936:	47 18       	lddsp	r8,sp[0x1c4]
80004938:	80 00       	ld.sh	r0,r0[0x0]
8000493a:	74 ba       	ld.w	r10,r10[0x2c]
8000493c:	80 00       	ld.sh	r0,r0[0x0]
8000493e:	75 c0       	ld.w	r0,r10[0x70]
80004940:	80 00       	ld.sh	r0,r0[0x0]
80004942:	70 04       	ld.w	r4,r8[0x0]
80004944:	80 00       	ld.sh	r0,r0[0x0]
80004946:	73 78       	ld.w	r8,r9[0x5c]

80004948 <drawFilledTriangle>:

void drawFilledTriangle(int centerx, int centery, int radio, int dir, int color){
80004948:	eb cd 40 fc 	pushm	r2-r7,lr
8000494c:	18 92       	mov	r2,r12
8000494e:	16 93       	mov	r3,r11
80004950:	14 96       	mov	r6,r10
80004952:	12 94       	mov	r4,r9
80004954:	10 95       	mov	r5,r8
	for(int i=0; i<=radio; i++){
80004956:	58 0a       	cp.w	r10,0
80004958:	c0 d5       	brlt	80004972 <drawFilledTriangle+0x2a>
8000495a:	30 07       	mov	r7,0
		drawHollowTriangle(centerx,centery,radio-i,dir,color);
8000495c:	0a 98       	mov	r8,r5
8000495e:	08 99       	mov	r9,r4
80004960:	ec 07 01 0a 	sub	r10,r6,r7
80004964:	06 9b       	mov	r11,r3
80004966:	04 9c       	mov	r12,r2
80004968:	f0 1f 00 04 	mcall	80004978 <drawFilledTriangle+0x30>
		et024006_DrawLine(p2x,p2y,p3x,p3y,color);
	}//Fin if
}//Fin fn

void drawFilledTriangle(int centerx, int centery, int radio, int dir, int color){
	for(int i=0; i<=radio; i++){
8000496c:	2f f7       	sub	r7,-1
8000496e:	0e 36       	cp.w	r6,r7
80004970:	cf 64       	brge	8000495c <drawFilledTriangle+0x14>
80004972:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80004976:	00 00       	add	r0,r0
80004978:	80 00       	ld.sh	r0,r0[0x0]
8000497a:	47 18       	lddsp	r8,sp[0x1c4]

8000497c <act19>:
#include "et024006dhu.h"
#include "delay.h"

void act19(uint8_t valid_state, uint8_t * actual_state){
8000497c:	d4 31       	pushm	r0-r7,lr
8000497e:	20 3d       	sub	sp,12
80004980:	50 1c       	stdsp	sp[0x4],r12
80004982:	50 2b       	stdsp	sp[0x8],r11
  clr_disp(); //limplia el display
80004984:	f0 1f 00 79 	mcall	80004b68 <act19+0x1ec>
80004988:	30 08       	mov	r8,0
8000498a:	50 08       	stdsp	sp[0x0],r8
8000498c:	31 e0       	mov	r0,30
  #define RADIO 30
  for(int y=RADIO; y<=(ET024006_HEIGHT); y+=1.5*RADIO){ //2*sin(60)
    for (int x=(-(y%2)*(0.8*RADIO)); x<=(ET024006_WIDTH+RADIO); x+=(0.866*RADIO)){ //sin(60)
      if(x%2==1){
        drawFilledTriangle(x,y,RADIO,1,color16(rand()%31,rand()%63,rand()%31));//No invertido
8000498e:	e0 64 08 43 	mov	r4,2115
80004992:	ea 14 84 21 	orh	r4,0x8421
80004996:	e0 63 20 83 	mov	r3,8323
8000499a:	ea 13 82 08 	orh	r3,0x8208
8000499e:	00 92       	mov	r2,r0

void act19(uint8_t valid_state, uint8_t * actual_state){
  clr_disp(); //limplia el display
  #define RADIO 30
  for(int y=RADIO; y<=(ET024006_HEIGHT); y+=1.5*RADIO){ //2*sin(60)
    for (int x=(-(y%2)*(0.8*RADIO)); x<=(ET024006_WIDTH+RADIO); x+=(0.866*RADIO)){ //sin(60)
800049a0:	e0 08 16 1f 	lsr	r8,r0,0x1f
800049a4:	e0 08 00 0c 	add	r12,r0,r8
800049a8:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800049ac:	f0 0c 01 0c 	sub	r12,r8,r12
800049b0:	f0 1f 00 6f 	mcall	80004b6c <act19+0x1f0>
800049b4:	30 08       	mov	r8,0
800049b6:	fc 19 40 38 	movh	r9,0x4038
800049ba:	f0 1f 00 6e 	mcall	80004b70 <act19+0x1f4>
800049be:	f0 1f 00 6e 	mcall	80004b74 <act19+0x1f8>
800049c2:	18 97       	mov	r7,r12
800049c4:	e0 4c 01 5e 	cp.w	r12,350
800049c8:	e0 89 00 9f 	brgt	80004b06 <act19+0x18a>
      if(x%2==1){
        drawFilledTriangle(x,y,RADIO,1,color16(rand()%31,rand()%63,rand()%31));//No invertido
      }else{
        drawFilledTriangle(x,y-RADIO/2,RADIO,0,color16(rand()%31,rand()%63,rand()%31));//Invertido
800049cc:	e0 c1 00 0f 	sub	r1,r0,15
void act19(uint8_t valid_state, uint8_t * actual_state){
  clr_disp(); //limplia el display
  #define RADIO 30
  for(int y=RADIO; y<=(ET024006_HEIGHT); y+=1.5*RADIO){ //2*sin(60)
    for (int x=(-(y%2)*(0.8*RADIO)); x<=(ET024006_WIDTH+RADIO); x+=(0.866*RADIO)){ //sin(60)
      if(x%2==1){
800049d0:	ee 08 16 1f 	lsr	r8,r7,0x1f
800049d4:	ee 08 00 09 	add	r9,r7,r8
800049d8:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800049dc:	f2 08 01 08 	sub	r8,r9,r8
800049e0:	58 18       	cp.w	r8,1
800049e2:	c4 01       	brne	80004a62 <act19+0xe6>
        drawFilledTriangle(x,y,RADIO,1,color16(rand()%31,rand()%63,rand()%31));//No invertido
800049e4:	f0 1f 00 65 	mcall	80004b78 <act19+0x1fc>
800049e8:	18 96       	mov	r6,r12
800049ea:	f0 1f 00 64 	mcall	80004b78 <act19+0x1fc>
800049ee:	18 95       	mov	r5,r12
800049f0:	f0 1f 00 62 	mcall	80004b78 <act19+0x1fc>
800049f4:	ec 04 04 48 	muls.d	r8,r6,r4
800049f8:	ec 09 00 08 	add	r8,r6,r9
800049fc:	a5 48       	asr	r8,0x4
800049fe:	ec 09 14 1f 	asr	r9,r6,0x1f
80004a02:	12 18       	sub	r8,r9
80004a04:	f0 09 15 05 	lsl	r9,r8,0x5
80004a08:	f2 08 01 08 	sub	r8,r9,r8
80004a0c:	10 16       	sub	r6,r8
80004a0e:	ea 03 04 48 	muls.d	r8,r5,r3
80004a12:	ea 09 00 08 	add	r8,r5,r9
80004a16:	a5 58       	asr	r8,0x5
80004a18:	ea 09 14 1f 	asr	r9,r5,0x1f
80004a1c:	12 18       	sub	r8,r9
80004a1e:	f0 09 15 06 	lsl	r9,r8,0x6
80004a22:	f2 08 01 08 	sub	r8,r9,r8
80004a26:	10 15       	sub	r5,r8
80004a28:	f8 04 04 48 	muls.d	r8,r12,r4
80004a2c:	f8 09 00 08 	add	r8,r12,r9
80004a30:	a5 48       	asr	r8,0x4
80004a32:	f8 09 14 1f 	asr	r9,r12,0x1f
80004a36:	12 18       	sub	r8,r9
80004a38:	f0 09 15 05 	lsl	r9,r8,0x5
80004a3c:	f2 08 01 08 	sub	r8,r9,r8
80004a40:	10 1c       	sub	r12,r8
80004a42:	f5 d6 c0 08 	bfextu	r10,r6,0x0,0x8
80004a46:	f7 d5 c0 08 	bfextu	r11,r5,0x0,0x8
80004a4a:	5c 5c       	castu.b	r12
80004a4c:	f0 1f 00 4c 	mcall	80004b7c <act19+0x200>
80004a50:	f1 dc c0 10 	bfextu	r8,r12,0x0,0x10
80004a54:	30 19       	mov	r9,1
80004a56:	04 9a       	mov	r10,r2
80004a58:	00 9b       	mov	r11,r0
80004a5a:	0e 9c       	mov	r12,r7
80004a5c:	f0 1f 00 49 	mcall	80004b80 <act19+0x204>
80004a60:	c3 f8       	rjmp	80004ade <act19+0x162>
      }else{
        drawFilledTriangle(x,y-RADIO/2,RADIO,0,color16(rand()%31,rand()%63,rand()%31));//Invertido
80004a62:	f0 1f 00 46 	mcall	80004b78 <act19+0x1fc>
80004a66:	18 96       	mov	r6,r12
80004a68:	f0 1f 00 44 	mcall	80004b78 <act19+0x1fc>
80004a6c:	18 95       	mov	r5,r12
80004a6e:	f0 1f 00 43 	mcall	80004b78 <act19+0x1fc>
80004a72:	ec 04 04 48 	muls.d	r8,r6,r4
80004a76:	ec 09 00 08 	add	r8,r6,r9
80004a7a:	a5 48       	asr	r8,0x4
80004a7c:	ec 09 14 1f 	asr	r9,r6,0x1f
80004a80:	12 18       	sub	r8,r9
80004a82:	f0 09 15 05 	lsl	r9,r8,0x5
80004a86:	f2 08 01 08 	sub	r8,r9,r8
80004a8a:	10 16       	sub	r6,r8
80004a8c:	ea 03 04 48 	muls.d	r8,r5,r3
80004a90:	ea 09 00 08 	add	r8,r5,r9
80004a94:	a5 58       	asr	r8,0x5
80004a96:	ea 09 14 1f 	asr	r9,r5,0x1f
80004a9a:	12 18       	sub	r8,r9
80004a9c:	f0 09 15 06 	lsl	r9,r8,0x6
80004aa0:	f2 08 01 08 	sub	r8,r9,r8
80004aa4:	10 15       	sub	r5,r8
80004aa6:	f8 04 04 48 	muls.d	r8,r12,r4
80004aaa:	f8 09 00 08 	add	r8,r12,r9
80004aae:	a5 48       	asr	r8,0x4
80004ab0:	f8 09 14 1f 	asr	r9,r12,0x1f
80004ab4:	12 18       	sub	r8,r9
80004ab6:	f0 09 15 05 	lsl	r9,r8,0x5
80004aba:	f2 08 01 08 	sub	r8,r9,r8
80004abe:	10 1c       	sub	r12,r8
80004ac0:	f5 d6 c0 08 	bfextu	r10,r6,0x0,0x8
80004ac4:	f7 d5 c0 08 	bfextu	r11,r5,0x0,0x8
80004ac8:	5c 5c       	castu.b	r12
80004aca:	f0 1f 00 2d 	mcall	80004b7c <act19+0x200>
80004ace:	f1 dc c0 10 	bfextu	r8,r12,0x0,0x10
80004ad2:	30 09       	mov	r9,0
80004ad4:	04 9a       	mov	r10,r2
80004ad6:	02 9b       	mov	r11,r1
80004ad8:	0e 9c       	mov	r12,r7
80004ada:	f0 1f 00 2a 	mcall	80004b80 <act19+0x204>

void act19(uint8_t valid_state, uint8_t * actual_state){
  clr_disp(); //limplia el display
  #define RADIO 30
  for(int y=RADIO; y<=(ET024006_HEIGHT); y+=1.5*RADIO){ //2*sin(60)
    for (int x=(-(y%2)*(0.8*RADIO)); x<=(ET024006_WIDTH+RADIO); x+=(0.866*RADIO)){ //sin(60)
80004ade:	0e 9c       	mov	r12,r7
80004ae0:	f0 1f 00 23 	mcall	80004b6c <act19+0x1f0>
80004ae4:	e0 68 14 7b 	mov	r8,5243
80004ae8:	ea 18 47 ae 	orh	r8,0x47ae
80004aec:	e0 69 fa e1 	mov	r9,64225
80004af0:	ea 19 40 39 	orh	r9,0x4039
80004af4:	f0 1f 00 24 	mcall	80004b84 <act19+0x208>
80004af8:	f0 1f 00 1f 	mcall	80004b74 <act19+0x1f8>
80004afc:	18 97       	mov	r7,r12
80004afe:	e0 4c 01 5e 	cp.w	r12,350
80004b02:	fe 9a ff 67 	brle	800049d0 <act19+0x54>
#include "delay.h"

void act19(uint8_t valid_state, uint8_t * actual_state){
  clr_disp(); //limplia el display
  #define RADIO 30
  for(int y=RADIO; y<=(ET024006_HEIGHT); y+=1.5*RADIO){ //2*sin(60)
80004b06:	00 9c       	mov	r12,r0
80004b08:	f0 1f 00 19 	mcall	80004b6c <act19+0x1f0>
80004b0c:	30 08       	mov	r8,0
80004b0e:	e0 69 80 00 	mov	r9,32768
80004b12:	ea 19 40 46 	orh	r9,0x4046
80004b16:	f0 1f 00 1c 	mcall	80004b84 <act19+0x208>
80004b1a:	f0 1f 00 17 	mcall	80004b74 <act19+0x1f8>
80004b1e:	18 90       	mov	r0,r12
80004b20:	40 08       	lddsp	r8,sp[0x0]
80004b22:	2f f8       	sub	r8,-1
80004b24:	50 08       	stdsp	sp[0x0],r8
80004b26:	58 58       	cp.w	r8,5
80004b28:	fe 91 ff 3c 	brne	800049a0 <act19+0x24>
80004b2c:	40 1b       	lddsp	r11,sp[0x4]
80004b2e:	40 2c       	lddsp	r12,sp[0x8]
80004b30:	c1 58       	rjmp	80004b5a <act19+0x1de>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004b32:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004b36:	f0 ca ff f4 	sub	r10,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004b3a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004b3e:	14 38       	cp.w	r8,r10
80004b40:	e0 88 00 08 	brls	80004b50 <act19+0x1d4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004b44:	12 38       	cp.w	r8,r9
80004b46:	fe 98 ff fa 	brls	80004b3a <act19+0x1be>
80004b4a:	12 3a       	cp.w	r10,r9
80004b4c:	c0 73       	brcs	80004b5a <act19+0x1de>
80004b4e:	cf 6b       	rjmp	80004b3a <act19+0x1be>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004b50:	12 38       	cp.w	r8,r9
80004b52:	e0 8b 00 04 	brhi	80004b5a <act19+0x1de>
80004b56:	12 3a       	cp.w	r10,r9
80004b58:	cf 12       	brcc	80004b3a <act19+0x1be>
      }else{
        drawFilledTriangle(x,y-RADIO/2,RADIO,0,color16(rand()%31,rand()%63,rand()%31));//Invertido
      }//If
    }//For X
  }//For Y
  while (valid_state == *actual_state){delay_us(1);}
80004b5a:	19 88       	ld.ub	r8,r12[0x0]
80004b5c:	f6 08 18 00 	cp.b	r8,r11
80004b60:	ce 90       	breq	80004b32 <act19+0x1b6>
}
80004b62:	2f dd       	sub	sp,-12
80004b64:	d8 32       	popm	r0-r7,pc
80004b66:	00 00       	add	r0,r0
80004b68:	80 00       	ld.sh	r0,r0[0x0]
80004b6a:	33 b0       	mov	r0,59
80004b6c:	80 00       	ld.sh	r0,r0[0x0]
80004b6e:	74 ba       	ld.w	r10,r10[0x2c]
80004b70:	80 00       	ld.sh	r0,r0[0x0]
80004b72:	70 04       	ld.w	r4,r8[0x0]
80004b74:	80 00       	ld.sh	r0,r0[0x0]
80004b76:	74 8c       	ld.w	r12,r10[0x20]
80004b78:	80 00       	ld.sh	r0,r0[0x0]
80004b7a:	85 f0       	st.w	r2[0x3c],r0
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	31 dc       	mov	r12,29
80004b80:	80 00       	ld.sh	r0,r0[0x0]
80004b82:	49 48       	lddpc	r8,80004bd0 <act9+0x8>
80004b84:	80 00       	ld.sh	r0,r0[0x0]
80004b86:	73 78       	ld.w	r8,r9[0x5c]

80004b88 <act10>:
#include "et024006dhu.h"
void act10(uint8_t valid_state, uint8_t * actual_state){
80004b88:	eb cd 40 fc 	pushm	r2-r7,lr
80004b8c:	18 94       	mov	r4,r12
80004b8e:	16 96       	mov	r6,r11
	do{
  // Draw the picture.
  et024006_PutPixmap(avr32_logo, 320, 0, 0, 0, 0, 320, 240);
80004b90:	48 c3       	lddpc	r3,80004bc0 <act10+0x38>
80004b92:	e0 62 00 f0 	mov	r2,240
80004b96:	e0 65 01 40 	mov	r5,320
80004b9a:	30 07       	mov	r7,0
80004b9c:	1a d2       	st.w	--sp,r2
80004b9e:	1a d5       	st.w	--sp,r5
80004ba0:	1a d7       	st.w	--sp,r7
80004ba2:	0e 98       	mov	r8,r7
80004ba4:	0e 99       	mov	r9,r7
80004ba6:	0e 9a       	mov	r10,r7
80004ba8:	0a 9b       	mov	r11,r5
80004baa:	06 9c       	mov	r12,r3
80004bac:	f0 1f 00 06 	mcall	80004bc4 <act10+0x3c>
  }while(*actual_state == valid_state);
80004bb0:	2f dd       	sub	sp,-12
80004bb2:	0d 88       	ld.ub	r8,r6[0x0]
80004bb4:	e8 08 18 00 	cp.b	r8,r4
80004bb8:	cf 20       	breq	80004b9c <act10+0x14>
}
80004bba:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80004bbe:	00 00       	add	r0,r0
80004bc0:	80 00       	ld.sh	r0,r0[0x0]
80004bc2:	90 48       	ld.sh	r8,r8[0x8]
80004bc4:	80 00       	ld.sh	r0,r0[0x0]
80004bc6:	26 b0       	sub	r0,107

80004bc8 <act9>:
#include "et024006dhu.h"

void act9(uint8_t valid_state, uint8_t * actual_state){
80004bc8:	d4 31       	pushm	r0-r7,lr
80004bca:	20 2d       	sub	sp,8
80004bcc:	50 0c       	stdsp	sp[0x0],r12
80004bce:	50 1b       	stdsp	sp[0x4],r11
80004bd0:	30 03       	mov	r3,0
80004bd2:	06 97       	mov	r7,r3
80004bd4:	e0 65 00 ff 	mov	r5,255
80004bd8:	e0 64 00 c8 	mov	r4,200
		g = 0;
		b = 0;

		while(radio > 0){

			if (r == 255 && g < 255 && b == 0 ){
80004bdc:	30 06       	mov	r6,0
				}else if(r == 255 && g == 0 && b > 0){
				b = b - 17;
			}

			radio = radio - 2;
			et024006_DrawFilledCircle( x,  y,  radio,
80004bde:	0a 92       	mov	r2,r5
80004be0:	37 81       	mov	r1,120
80004be2:	e0 60 00 a0 	mov	r0,160
		g = 0;
		b = 0;

		while(radio > 0){

			if (r == 255 && g < 255 && b == 0 ){
80004be6:	e0 45 00 ff 	cp.w	r5,255
80004bea:	5f 08       	sreq	r8
80004bec:	e0 47 00 fe 	cp.w	r7,254
80004bf0:	5f a9       	srle	r9
80004bf2:	f1 e9 00 09 	and	r9,r8,r9
80004bf6:	ec 09 18 00 	cp.b	r9,r6
80004bfa:	c0 50       	breq	80004c04 <act9+0x3c>
80004bfc:	58 03       	cp.w	r3,0
80004bfe:	c0 31       	brne	80004c04 <act9+0x3c>
				g = g + 17;
80004c00:	2e f7       	sub	r7,-17
		g = 0;
		b = 0;

		while(radio > 0){

			if (r == 255 && g < 255 && b == 0 ){
80004c02:	c3 c8       	rjmp	80004c7a <act9+0xb2>
				g = g + 17;
				}else if (r > 0 && g == 255 && b == 0){
80004c04:	e0 47 00 ff 	cp.w	r7,255
80004c08:	5f 09       	sreq	r9
80004c0a:	58 05       	cp.w	r5,0
80004c0c:	5f 9a       	srgt	r10
80004c0e:	f3 ea 00 0a 	and	r10,r9,r10
80004c12:	ec 0a 18 00 	cp.b	r10,r6
80004c16:	c0 50       	breq	80004c20 <act9+0x58>
80004c18:	58 03       	cp.w	r3,0
80004c1a:	c0 31       	brne	80004c20 <act9+0x58>
				r = r - 17; //17
80004c1c:	21 15       	sub	r5,17

		while(radio > 0){

			if (r == 255 && g < 255 && b == 0 ){
				g = g + 17;
				}else if (r > 0 && g == 255 && b == 0){
80004c1e:	c2 e8       	rjmp	80004c7a <act9+0xb2>
				r = r - 17; //17
				}else if(r == 0 && g == 255 && b < 255){
80004c20:	58 05       	cp.w	r5,0
80004c22:	5f 0a       	sreq	r10
80004c24:	14 69       	and	r9,r10
80004c26:	ec 09 18 00 	cp.b	r9,r6
80004c2a:	c0 70       	breq	80004c38 <act9+0x70>
80004c2c:	e0 43 00 fe 	cp.w	r3,254
80004c30:	e0 89 00 04 	brgt	80004c38 <act9+0x70>
				b = b + 17;
80004c34:	2e f3       	sub	r3,-17

			if (r == 255 && g < 255 && b == 0 ){
				g = g + 17;
				}else if (r > 0 && g == 255 && b == 0){
				r = r - 17; //17
				}else if(r == 0 && g == 255 && b < 255){
80004c36:	c2 28       	rjmp	80004c7a <act9+0xb2>
				b = b + 17;
				}else if(r == 0 && g > 0 && b == 255){
80004c38:	58 07       	cp.w	r7,0
80004c3a:	5f 99       	srgt	r9
80004c3c:	12 6a       	and	r10,r9
80004c3e:	ec 0a 18 00 	cp.b	r10,r6
80004c42:	c0 60       	breq	80004c4e <act9+0x86>
80004c44:	e0 43 00 ff 	cp.w	r3,255
80004c48:	c0 31       	brne	80004c4e <act9+0x86>
				g = g - 17;
80004c4a:	21 17       	sub	r7,17
				g = g + 17;
				}else if (r > 0 && g == 255 && b == 0){
				r = r - 17; //17
				}else if(r == 0 && g == 255 && b < 255){
				b = b + 17;
				}else if(r == 0 && g > 0 && b == 255){
80004c4c:	c1 78       	rjmp	80004c7a <act9+0xb2>
				g = g - 17;
				}else if(r < 255 && g == 0 && b == 255){
80004c4e:	58 07       	cp.w	r7,0
80004c50:	5f 09       	sreq	r9
80004c52:	e0 45 00 fe 	cp.w	r5,254
80004c56:	5f aa       	srle	r10
80004c58:	f3 ea 00 0a 	and	r10,r9,r10
80004c5c:	ec 0a 18 00 	cp.b	r10,r6
80004c60:	c0 60       	breq	80004c6c <act9+0xa4>
80004c62:	e0 43 00 ff 	cp.w	r3,255
80004c66:	c0 31       	brne	80004c6c <act9+0xa4>
				r = r + 17;
80004c68:	2e f5       	sub	r5,-17
				r = r - 17; //17
				}else if(r == 0 && g == 255 && b < 255){
				b = b + 17;
				}else if(r == 0 && g > 0 && b == 255){
				g = g - 17;
				}else if(r < 255 && g == 0 && b == 255){
80004c6a:	c0 88       	rjmp	80004c7a <act9+0xb2>
				r = r + 17;
				}else if(r == 255 && g == 0 && b > 0){
80004c6c:	12 68       	and	r8,r9
80004c6e:	ec 08 18 00 	cp.b	r8,r6
80004c72:	c0 40       	breq	80004c7a <act9+0xb2>
				b = b - 17;
80004c74:	58 03       	cp.w	r3,0
80004c76:	f7 b3 09 11 	subgt	r3,17
			}

			radio = radio - 2;
80004c7a:	20 24       	sub	r4,2
			et024006_DrawFilledCircle( x,  y,  radio,
				et024006_Color(r ,g , b),
80004c7c:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
80004c80:	0e 9b       	mov	r11,r7
80004c82:	5c 5b       	castu.b	r11
80004c84:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80004c88:	f0 1f 00 15 	mcall	80004cdc <act9+0x114>
				}else if(r == 255 && g == 0 && b > 0){
				b = b - 17;
			}

			radio = radio - 2;
			et024006_DrawFilledCircle( x,  y,  radio,
80004c8c:	04 98       	mov	r8,r2
80004c8e:	f3 dc c0 10 	bfextu	r9,r12,0x0,0x10
80004c92:	08 9a       	mov	r10,r4
80004c94:	5c 7a       	castu.h	r10
80004c96:	02 9b       	mov	r11,r1
80004c98:	00 9c       	mov	r12,r0
80004c9a:	f0 1f 00 12 	mcall	80004ce0 <act9+0x118>
		int r,g,b;
		r = 255;
		g = 0;
		b = 0;

		while(radio > 0){
80004c9e:	58 04       	cp.w	r4,0
80004ca0:	ca 31       	brne	80004be6 <act9+0x1e>
80004ca2:	40 0b       	lddsp	r11,sp[0x0]
80004ca4:	40 1c       	lddsp	r12,sp[0x4]
80004ca6:	c1 58       	rjmp	80004cd0 <act9+0x108>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004ca8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004cac:	f0 ca ff f4 	sub	r10,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004cb0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004cb4:	14 38       	cp.w	r8,r10
80004cb6:	e0 88 00 08 	brls	80004cc6 <act9+0xfe>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004cba:	12 38       	cp.w	r8,r9
80004cbc:	fe 98 ff fa 	brls	80004cb0 <act9+0xe8>
80004cc0:	12 3a       	cp.w	r10,r9
80004cc2:	c0 73       	brcs	80004cd0 <act9+0x108>
80004cc4:	cf 6b       	rjmp	80004cb0 <act9+0xe8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004cc6:	12 38       	cp.w	r8,r9
80004cc8:	e0 8b 00 04 	brhi	80004cd0 <act9+0x108>
80004ccc:	12 3a       	cp.w	r10,r9
80004cce:	cf 12       	brcc	80004cb0 <act9+0xe8>
				et024006_Color(r ,g , b),
				(TFT_QUADRANT0|TFT_QUADRANT1|TFT_QUADRANT2|TFT_QUADRANT3)
			);

		}
	while(valid_state == *actual_state){delay_us(1);}
80004cd0:	19 88       	ld.ub	r8,r12[0x0]
80004cd2:	f6 08 18 00 	cp.b	r8,r11
80004cd6:	ce 90       	breq	80004ca8 <act9+0xe0>

}
80004cd8:	2f ed       	sub	sp,-8
80004cda:	d8 32       	popm	r0-r7,pc
80004cdc:	80 00       	ld.sh	r0,r0[0x0]
80004cde:	20 08       	sub	r8,0
80004ce0:	80 00       	ld.sh	r0,r0[0x0]
80004ce2:	24 d8       	sub	r8,77

80004ce4 <verticalPrint>:
			}//If
		}//For
	}//While
	free(col); //liberar memoria
}
void verticalPrint(char *str,size_t size, uint16_t x, et024006_color_t color, uint8_t space_rows){
80004ce4:	d4 31       	pushm	r0-r7,lr
80004ce6:	20 2d       	sub	sp,8
80004ce8:	18 92       	mov	r2,r12
80004cea:	16 91       	mov	r1,r11
	char str2[]={' ','\0'};
80004cec:	30 0b       	mov	r11,0
80004cee:	ba db       	st.b	sp[0x5],r11
			}//If
		}//For
	}//While
	free(col); //liberar memoria
}
void verticalPrint(char *str,size_t size, uint16_t x, et024006_color_t color, uint8_t space_rows){
80004cf0:	10 96       	mov	r6,r8
80004cf2:	e9 d8 b0 10 	bfexts	r4,r8,0x0,0x10
80004cf6:	30 05       	mov	r5,0
80004cf8:	0a 97       	mov	r7,r5
	char str2[]={' ','\0'};
	uint16_t i=0;
	for (uint16_t y=0;y<230;y+=space_rows){
		str2[0]=str[i++];
		et024006_PrintString(str2, (const unsigned char *)&FONT8x8, x, y, color, -1);
80004cfa:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80004cfe:	5c 7a       	castu.h	r10
80004d00:	50 0a       	stdsp	sp[0x0],r10
	free(col); //liberar memoria
}
void verticalPrint(char *str,size_t size, uint16_t x, et024006_color_t color, uint8_t space_rows){
	char str2[]={' ','\0'};
	uint16_t i=0;
	for (uint16_t y=0;y<230;y+=space_rows){
80004d02:	e0 63 00 e5 	mov	r3,229
		str2[0]=str[i++];
80004d06:	0e 98       	mov	r8,r7
80004d08:	5c 78       	castu.h	r8
80004d0a:	e4 08 07 08 	ld.ub	r8,r2[r8]
80004d0e:	ba c8       	st.b	sp[0x4],r8
80004d10:	2f f7       	sub	r7,-1
80004d12:	5c 87       	casts.h	r7
		et024006_PrintString(str2, (const unsigned char *)&FONT8x8, x, y, color, -1);
80004d14:	3f f8       	mov	r8,-1
80004d16:	1a d8       	st.w	--sp,r8
80004d18:	00 98       	mov	r8,r0
80004d1a:	f3 d5 c0 10 	bfextu	r9,r5,0x0,0x10
80004d1e:	40 1a       	lddsp	r10,sp[0x4]
80004d20:	48 cb       	lddpc	r11,80004d50 <verticalPrint+0x6c>
80004d22:	fa cc ff f8 	sub	r12,sp,-8
80004d26:	f0 1f 00 0c 	mcall	80004d54 <verticalPrint+0x70>
		if (i>=size){break;}
80004d2a:	0e 98       	mov	r8,r7
80004d2c:	5c 78       	castu.h	r8
80004d2e:	2f fd       	sub	sp,-4
80004d30:	02 38       	cp.w	r8,r1
80004d32:	c0 c2       	brcc	80004d4a <verticalPrint+0x66>
80004d34:	ec 05 00 05 	add	r5,r6,r5
80004d38:	5c 85       	casts.h	r5
80004d3a:	0c 04       	add	r4,r6
80004d3c:	5c 84       	casts.h	r4
	free(col); //liberar memoria
}
void verticalPrint(char *str,size_t size, uint16_t x, et024006_color_t color, uint8_t space_rows){
	char str2[]={' ','\0'};
	uint16_t i=0;
	for (uint16_t y=0;y<230;y+=space_rows){
80004d3e:	08 98       	mov	r8,r4
80004d40:	0c 18       	sub	r8,r6
80004d42:	e6 08 19 00 	cp.h	r8,r3
80004d46:	fe 98 ff e0 	brls	80004d06 <verticalPrint+0x22>
		str2[0]=str[i++];
		et024006_PrintString(str2, (const unsigned char *)&FONT8x8, x, y, color, -1);
		if (i>=size){break;}
	}//For
}//verticalPrint
80004d4a:	2f ed       	sub	sp,-8
80004d4c:	d8 32       	popm	r0-r7,pc
80004d4e:	00 00       	add	r0,r0
80004d50:	80 00       	ld.sh	r0,r0[0x0]
80004d52:	8c 00       	ld.sh	r0,r6[0x0]
80004d54:	80 00       	ld.sh	r0,r0[0x0]
80004d56:	20 e8       	sub	r8,14

80004d58 <act6>:
#include "et024006dhu.h"

void verticalPrint(char *str,size_t size, uint16_t x, et024006_color_t color, uint8_t space_rows);
void addToArr(char * str, char add, size_t size);

void act6(uint8_t valid_state, uint8_t * actual_state){//Video test screen
80004d58:	d4 31       	pushm	r0-r7,lr
80004d5a:	20 fd       	sub	sp,60
80004d5c:	50 0c       	stdsp	sp[0x0],r12
80004d5e:	50 1b       	stdsp	sp[0x4],r11
	#define COLS 11  //Numero de columnas a mostrar
	#define SPACEC 25 //Espacio entre columnas
	#define ROWS 20 //Numero de caracteres verticalmente
	#define SPACER 13 //Espacio entre filas

	et024006_DrawFilledRect(0 , 0, 320, 240, BLACK ); //fondo negro
80004d60:	30 08       	mov	r8,0
80004d62:	e0 69 00 f0 	mov	r9,240
80004d66:	e0 6a 01 40 	mov	r10,320
80004d6a:	10 9b       	mov	r11,r8
80004d6c:	10 9c       	mov	r12,r8
80004d6e:	f0 1f 00 3f 	mcall	80004e68 <act6+0x110>
	char* col;
	col = (char*)malloc(sizeof(char)*ROWS*COLS); //Asignar memoria
80004d72:	e0 6c 00 dc 	mov	r12,220
80004d76:	f0 1f 00 3e 	mcall	80004e6c <act6+0x114>
80004d7a:	50 3c       	stdsp	sp[0xc],r12
80004d7c:	18 98       	mov	r8,r12
80004d7e:	fa cb ff f0 	sub	r11,sp,-16
#include "et024006dhu.h"

void verticalPrint(char *str,size_t size, uint16_t x, et024006_color_t color, uint8_t space_rows);
void addToArr(char * str, char add, size_t size);

void act6(uint8_t valid_state, uint8_t * actual_state){//Video test screen
80004d82:	f8 ca ff 24 	sub	r10,r12,-220
80004d86:	16 99       	mov	r9,r11
	char* col;
	col = (char*)malloc(sizeof(char)*ROWS*COLS); //Asignar memoria
	char* colPointers[COLS];

	for (uint16_t i=0; i<COLS; i++){
		colPointers[i]=&col[i*ROWS];
80004d88:	12 a8       	st.w	r9++,r8
80004d8a:	2e c8       	sub	r8,-20
	et024006_DrawFilledRect(0 , 0, 320, 240, BLACK ); //fondo negro
	char* col;
	col = (char*)malloc(sizeof(char)*ROWS*COLS); //Asignar memoria
	char* colPointers[COLS];

	for (uint16_t i=0; i<COLS; i++){
80004d8c:	14 38       	cp.w	r8,r10
80004d8e:	cf d1       	brne	80004d88 <act6+0x30>
80004d90:	c6 08       	rjmp	80004e50 <act6+0xf8>
80004d92:	40 26       	lddsp	r6,sp[0x8]
80004d94:	31 97       	mov	r7,25
				matrix_char= ' ';
			}else{
				matrix_char = (rand()%(126-32))+32;
			}//If

			et024006_DrawFilledRect(i*SPACEC , 0, 30, ET024006_HEIGHT, BLACK );
80004d96:	e0 61 00 f0 	mov	r1,240
80004d9a:	31 e0       	mov	r0,30
			addToArr(colPointers[i-1],matrix_char,ROWS-1);
80004d9c:	31 34       	mov	r4,19
	}//For

	while(*actual_state == valid_state){
		char matrix_char;
		for (uint16_t i=1; i<COLS+1 ;i++){
			if (rand()%2!=1){ //Espacios con mas probabilidad que caracteres
80004d9e:	f0 1f 00 35 	mcall	80004e70 <act6+0x118>
80004da2:	f8 08 16 1f 	lsr	r8,r12,0x1f
80004da6:	10 0c       	add	r12,r8
80004da8:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80004dac:	f8 08 01 08 	sub	r8,r12,r8
80004db0:	58 18       	cp.w	r8,1
80004db2:	c0 30       	breq	80004db8 <act6+0x60>
80004db4:	32 03       	mov	r3,32
80004db6:	c1 58       	rjmp	80004de0 <act6+0x88>
				matrix_char= ' ';
			}else{
				matrix_char = (rand()%(126-32))+32;
80004db8:	f0 1f 00 2e 	mcall	80004e70 <act6+0x118>
80004dbc:	e0 6a 41 5d 	mov	r10,16733
80004dc0:	ea 1a ae 4c 	orh	r10,0xae4c
80004dc4:	f8 0a 04 42 	muls.d	r2,r12,r10
80004dc8:	f8 03 00 03 	add	r3,r12,r3
80004dcc:	a7 43       	asr	r3,0x6
80004dce:	f8 08 14 1f 	asr	r8,r12,0x1f
80004dd2:	10 13       	sub	r3,r8
80004dd4:	e6 03 10 5e 	mul	r3,r3,94
80004dd8:	f8 03 01 03 	sub	r3,r12,r3
80004ddc:	2e 03       	sub	r3,-32
80004dde:	5c 53       	castu.b	r3
80004de0:	0e 92       	mov	r2,r7
			}//If

			et024006_DrawFilledRect(i*SPACEC , 0, 30, ET024006_HEIGHT, BLACK );
80004de2:	30 08       	mov	r8,0
80004de4:	02 99       	mov	r9,r1
80004de6:	00 9a       	mov	r10,r0
80004de8:	10 9b       	mov	r11,r8
80004dea:	0e 9c       	mov	r12,r7
80004dec:	f0 1f 00 1f 	mcall	80004e68 <act6+0x110>
			addToArr(colPointers[i-1],matrix_char,ROWS-1);
80004df0:	6c 05       	ld.w	r5,r6[0x0]
80004df2:	08 9a       	mov	r10,r4
80004df4:	06 9b       	mov	r11,r3
80004df6:	0a 9c       	mov	r12,r5
80004df8:	f0 1f 00 1f 	mcall	80004e74 <act6+0x11c>

			if (rand()%12!=1){//Detalles en blanco con baja probabilidad
80004dfc:	f0 1f 00 1d 	mcall	80004e70 <act6+0x118>
80004e00:	e0 6a aa ab 	mov	r10,43691
80004e04:	ea 1a 2a aa 	orh	r10,0x2aaa
80004e08:	f8 0a 04 48 	muls.d	r8,r12,r10
80004e0c:	f2 08 14 01 	asr	r8,r9,0x1
80004e10:	f8 09 14 1f 	asr	r9,r12,0x1f
80004e14:	12 18       	sub	r8,r9
80004e16:	f0 08 00 18 	add	r8,r8,r8<<0x1
80004e1a:	f8 08 01 2c 	sub	r12,r12,r8<<0x2
80004e1e:	58 1c       	cp.w	r12,1
80004e20:	c0 a0       	breq	80004e34 <act6+0xdc>
				verticalPrint(colPointers[i-1],ROWS-1,i*SPACEC,GREEN, SPACER);
80004e22:	30 d8       	mov	r8,13
80004e24:	e0 69 07 e0 	mov	r9,2016
80004e28:	0e 9a       	mov	r10,r7
80004e2a:	08 9b       	mov	r11,r4
80004e2c:	0a 9c       	mov	r12,r5
80004e2e:	f0 1f 00 13 	mcall	80004e78 <act6+0x120>
80004e32:	c0 98       	rjmp	80004e44 <act6+0xec>
			}else{
				verticalPrint(colPointers[i-1],ROWS-1,i*SPACEC,WHITE, SPACER);
80004e34:	30 d8       	mov	r8,13
80004e36:	e0 69 ff ff 	mov	r9,65535
80004e3a:	0e 9a       	mov	r10,r7
80004e3c:	08 9b       	mov	r11,r4
80004e3e:	0a 9c       	mov	r12,r5
80004e40:	f0 1f 00 0e 	mcall	80004e78 <act6+0x120>
80004e44:	2e 77       	sub	r7,-25
80004e46:	2f c6       	sub	r6,-4
		colPointers[i]=&col[i*ROWS];
	}//For

	while(*actual_state == valid_state){
		char matrix_char;
		for (uint16_t i=1; i<COLS+1 ;i++){
80004e48:	e0 47 01 2c 	cp.w	r7,300
80004e4c:	ca 91       	brne	80004d9e <act6+0x46>
80004e4e:	c0 28       	rjmp	80004e52 <act6+0xfa>
	et024006_DrawFilledRect(0 , 0, 320, 240, BLACK ); //fondo negro
	char* col;
	col = (char*)malloc(sizeof(char)*ROWS*COLS); //Asignar memoria
	char* colPointers[COLS];

	for (uint16_t i=0; i<COLS; i++){
80004e50:	50 2b       	stdsp	sp[0x8],r11
		colPointers[i]=&col[i*ROWS];
	}//For

	while(*actual_state == valid_state){
80004e52:	40 19       	lddsp	r9,sp[0x4]
80004e54:	13 88       	ld.ub	r8,r9[0x0]
80004e56:	40 0a       	lddsp	r10,sp[0x0]
80004e58:	f4 08 18 00 	cp.b	r8,r10
80004e5c:	c9 b0       	breq	80004d92 <act6+0x3a>
			}else{
				verticalPrint(colPointers[i-1],ROWS-1,i*SPACEC,WHITE, SPACER);
			}//If
		}//For
	}//While
	free(col); //liberar memoria
80004e5e:	40 3c       	lddsp	r12,sp[0xc]
80004e60:	f0 1f 00 07 	mcall	80004e7c <act6+0x124>
}
80004e64:	2f 1d       	sub	sp,-60
80004e66:	d8 32       	popm	r0-r7,pc
80004e68:	80 00       	ld.sh	r0,r0[0x0]
80004e6a:	24 7c       	sub	r12,71
80004e6c:	80 00       	ld.sh	r0,r0[0x0]
80004e6e:	80 6c       	ld.sh	r12,r0[0xc]
80004e70:	80 00       	ld.sh	r0,r0[0x0]
80004e72:	85 f0       	st.w	r2[0x3c],r0
80004e74:	80 00       	ld.sh	r0,r0[0x0]
80004e76:	32 28       	mov	r8,34
80004e78:	80 00       	ld.sh	r0,r0[0x0]
80004e7a:	4c e4       	lddpc	r4,80004fb0 <euclidian_distance+0x4c>
80004e7c:	80 00       	ld.sh	r0,r0[0x0]
80004e7e:	80 5c       	ld.sh	r12,r0[0xa]

80004e80 <act4>:
#include "et024006dhu.h"
#include "stdlib.h"

void act4(uint8_t valid_state, uint8_t * actual_state){
80004e80:	d4 31       	pushm	r0-r7,lr
80004e82:	18 97       	mov	r7,r12
80004e84:	16 93       	mov	r3,r11
et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80004e86:	30 08       	mov	r8,0
80004e88:	e0 69 00 f0 	mov	r9,240
80004e8c:	e0 6a 01 40 	mov	r10,320
80004e90:	10 9b       	mov	r11,r8
80004e92:	10 9c       	mov	r12,r8
80004e94:	f0 1f 00 30 	mcall	80004f54 <act4+0xd4>
  while(*actual_state == valid_state){
80004e98:	07 82       	ld.ub	r2,r3[0x0]
80004e9a:	ee 02 18 00 	cp.b	r2,r7
80004e9e:	c5 91       	brne	80004f50 <act4+0xd0>
    uint16_t rnd_px_x = rand()%320;
    uint16_t rnd_px_y = rand()%240;
    uint8_t rnd_r = rand()%64;
    uint8_t rnd_g = rand()%128;
    uint8_t rnd_b = rand()%64;
    et024006_DrawPixel( rnd_px_x, rnd_px_y, color16(rnd_r, rnd_g, rnd_b) );
80004ea0:	e0 61 88 89 	mov	r1,34953
80004ea4:	ea 11 88 88 	orh	r1,0x8888
80004ea8:	e0 60 66 67 	mov	r0,26215
80004eac:	ea 10 66 66 	orh	r0,0x6666
#include "stdlib.h"

void act4(uint8_t valid_state, uint8_t * actual_state){
et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
  while(*actual_state == valid_state){
    uint16_t rnd_px_x = rand()%320;
80004eb0:	f0 1f 00 2a 	mcall	80004f58 <act4+0xd8>
80004eb4:	18 96       	mov	r6,r12
    uint16_t rnd_px_y = rand()%240;
80004eb6:	f0 1f 00 29 	mcall	80004f58 <act4+0xd8>
80004eba:	18 97       	mov	r7,r12
    uint8_t rnd_r = rand()%64;
80004ebc:	f0 1f 00 27 	mcall	80004f58 <act4+0xd8>
80004ec0:	18 94       	mov	r4,r12
    uint8_t rnd_g = rand()%128;
80004ec2:	f0 1f 00 26 	mcall	80004f58 <act4+0xd8>
80004ec6:	18 95       	mov	r5,r12
    uint8_t rnd_b = rand()%64;
80004ec8:	f0 1f 00 24 	mcall	80004f58 <act4+0xd8>
    et024006_DrawPixel( rnd_px_x, rnd_px_y, color16(rnd_r, rnd_g, rnd_b) );
80004ecc:	f8 08 14 1f 	asr	r8,r12,0x1f
80004ed0:	bb 88       	lsr	r8,0x1a
80004ed2:	f8 08 00 0a 	add	r10,r12,r8
80004ed6:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80004eda:	10 1a       	sub	r10,r8
80004edc:	ea 08 14 1f 	asr	r8,r5,0x1f
80004ee0:	b9 98       	lsr	r8,0x19
80004ee2:	ea 08 00 0b 	add	r11,r5,r8
80004ee6:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80004eea:	10 1b       	sub	r11,r8
80004eec:	e8 08 14 1f 	asr	r8,r4,0x1f
80004ef0:	bb 88       	lsr	r8,0x1a
80004ef2:	e8 08 00 0c 	add	r12,r4,r8
80004ef6:	f9 dc c0 06 	bfextu	r12,r12,0x0,0x6
80004efa:	10 1c       	sub	r12,r8
80004efc:	5c 5a       	castu.b	r10
80004efe:	5c 5b       	castu.b	r11
80004f00:	5c 5c       	castu.b	r12
80004f02:	f0 1f 00 17 	mcall	80004f5c <act4+0xdc>
80004f06:	ee 01 04 48 	muls.d	r8,r7,r1
80004f0a:	ee 09 00 08 	add	r8,r7,r9
80004f0e:	a7 58       	asr	r8,0x7
80004f10:	ee 09 14 1f 	asr	r9,r7,0x1f
80004f14:	12 18       	sub	r8,r9
80004f16:	f0 09 15 04 	lsl	r9,r8,0x4
80004f1a:	f2 08 01 08 	sub	r8,r9,r8
80004f1e:	a5 68       	lsl	r8,0x4
80004f20:	10 17       	sub	r7,r8
80004f22:	ec 00 04 48 	muls.d	r8,r6,r0
80004f26:	f2 08 14 07 	asr	r8,r9,0x7
80004f2a:	ec 09 14 1f 	asr	r9,r6,0x1f
80004f2e:	12 18       	sub	r8,r9
80004f30:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004f34:	a7 68       	lsl	r8,0x6
80004f36:	10 16       	sub	r6,r8
80004f38:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80004f3c:	0e 9b       	mov	r11,r7
80004f3e:	5c 7b       	castu.h	r11
80004f40:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
80004f44:	f0 1f 00 07 	mcall	80004f60 <act4+0xe0>
#include "et024006dhu.h"
#include "stdlib.h"

void act4(uint8_t valid_state, uint8_t * actual_state){
et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
  while(*actual_state == valid_state){
80004f48:	07 88       	ld.ub	r8,r3[0x0]
80004f4a:	e4 08 18 00 	cp.b	r8,r2
80004f4e:	cb 10       	breq	80004eb0 <act4+0x30>
80004f50:	d8 32       	popm	r0-r7,pc
80004f52:	00 00       	add	r0,r0
80004f54:	80 00       	ld.sh	r0,r0[0x0]
80004f56:	24 7c       	sub	r12,71
80004f58:	80 00       	ld.sh	r0,r0[0x0]
80004f5a:	85 f0       	st.w	r2[0x3c],r0
80004f5c:	80 00       	ld.sh	r0,r0[0x0]
80004f5e:	31 dc       	mov	r12,29
80004f60:	80 00       	ld.sh	r0,r0[0x0]
80004f62:	20 70       	sub	r0,7

80004f64 <euclidian_distance>:
void draw_square2D(point2D * p1, uint16_t size, uint16_t color){
  if (p1->x >= 0.0 && p1->x <= 320.4 - size && p1->y >= 0.0 && p1->y <= 240.4 - size){
    et024006_DrawFilledRect(round(p1->x), round(p1->y), size, size, color);
  }
}
float euclidian_distance(point2D * p1, point2D * p2){
80004f64:	d4 21       	pushm	r4-r7,lr
80004f66:	18 97       	mov	r7,r12
80004f68:	16 96       	mov	r6,r11
  return ( sqrt(pow(p1->x - p2->x,2) + pow(p1->y - p2->y,2)) );
80004f6a:	76 0b       	ld.w	r11,r11[0x0]
80004f6c:	78 0c       	ld.w	r12,r12[0x0]
80004f6e:	f0 1f 00 10 	mcall	80004fac <euclidian_distance+0x48>
80004f72:	f0 1f 00 10 	mcall	80004fb0 <euclidian_distance+0x4c>
80004f76:	14 98       	mov	r8,r10
80004f78:	16 99       	mov	r9,r11
80004f7a:	f0 1f 00 0f 	mcall	80004fb4 <euclidian_distance+0x50>
80004f7e:	14 94       	mov	r4,r10
80004f80:	16 95       	mov	r5,r11
80004f82:	6c 1b       	ld.w	r11,r6[0x4]
80004f84:	6e 1c       	ld.w	r12,r7[0x4]
80004f86:	f0 1f 00 0a 	mcall	80004fac <euclidian_distance+0x48>
80004f8a:	f0 1f 00 0a 	mcall	80004fb0 <euclidian_distance+0x4c>
80004f8e:	14 98       	mov	r8,r10
80004f90:	16 99       	mov	r9,r11
80004f92:	f0 1f 00 09 	mcall	80004fb4 <euclidian_distance+0x50>
80004f96:	14 98       	mov	r8,r10
80004f98:	16 99       	mov	r9,r11
80004f9a:	08 9a       	mov	r10,r4
80004f9c:	0a 9b       	mov	r11,r5
80004f9e:	f0 1f 00 07 	mcall	80004fb8 <euclidian_distance+0x54>
80004fa2:	f0 1f 00 07 	mcall	80004fbc <euclidian_distance+0x58>
80004fa6:	f0 1f 00 07 	mcall	80004fc0 <euclidian_distance+0x5c>
}
80004faa:	d8 22       	popm	r4-r7,pc
80004fac:	80 00       	ld.sh	r0,r0[0x0]
80004fae:	7a 14       	ld.w	r4,sp[0x4]
80004fb0:	80 00       	ld.sh	r0,r0[0x0]
80004fb2:	7d 00       	ld.w	r0,lr[0x40]
80004fb4:	80 00       	ld.sh	r0,r0[0x0]
80004fb6:	70 04       	ld.w	r4,r8[0x0]
80004fb8:	80 00       	ld.sh	r0,r0[0x0]
80004fba:	73 78       	ld.w	r8,r9[0x5c]
80004fbc:	80 00       	ld.sh	r0,r0[0x0]
80004fbe:	5c f0       	rol	r0
80004fc0:	80 00       	ld.sh	r0,r0[0x0]
80004fc2:	7d 60       	ld.w	r0,lr[0x58]

80004fc4 <draw_square2D>:
    if (p2->x >= 0.0 && p2->x <= 320.4 && p2->y >= 0.0 && p2->y <= 240.4){
      et024006_DrawLine(round(p1->x), round(p1->y), round(p2->x), round(p2->y), BLACK);
    }
  }
}
void draw_square2D(point2D * p1, uint16_t size, uint16_t color){
80004fc4:	d4 31       	pushm	r0-r7,lr
80004fc6:	18 96       	mov	r6,r12
80004fc8:	16 95       	mov	r5,r11
80004fca:	14 94       	mov	r4,r10
  if (p1->x >= 0.0 && p1->x <= 320.4 - size && p1->y >= 0.0 && p1->y <= 240.4 - size){
80004fcc:	78 07       	ld.w	r7,r12[0x0]
80004fce:	30 0b       	mov	r11,0
80004fd0:	0e 9c       	mov	r12,r7
80004fd2:	f0 1f 00 2e 	mcall	80005088 <draw_square2D+0xc4>
80004fd6:	c5 70       	breq	80005084 <draw_square2D+0xc0>
80004fd8:	0e 9c       	mov	r12,r7
80004fda:	f0 1f 00 2d 	mcall	8000508c <draw_square2D+0xc8>
80004fde:	14 90       	mov	r0,r10
80004fe0:	16 91       	mov	r1,r11
80004fe2:	5c 75       	castu.h	r5
80004fe4:	0a 9c       	mov	r12,r5
80004fe6:	f0 1f 00 2b 	mcall	80005090 <draw_square2D+0xcc>
80004fea:	14 92       	mov	r2,r10
80004fec:	16 93       	mov	r3,r11
80004fee:	14 98       	mov	r8,r10
80004ff0:	06 99       	mov	r9,r3
80004ff2:	e0 6a 66 66 	mov	r10,26214
80004ff6:	ea 1a 66 66 	orh	r10,0x6666
80004ffa:	e0 6b 06 66 	mov	r11,1638
80004ffe:	ea 1b 40 74 	orh	r11,0x4074
80005002:	f0 1f 00 25 	mcall	80005094 <draw_square2D+0xd0>
80005006:	00 98       	mov	r8,r0
80005008:	02 99       	mov	r9,r1
8000500a:	f0 1f 00 24 	mcall	80005098 <draw_square2D+0xd4>
8000500e:	c3 b0       	breq	80005084 <draw_square2D+0xc0>
80005010:	6c 17       	ld.w	r7,r6[0x4]
80005012:	30 0b       	mov	r11,0
80005014:	0e 9c       	mov	r12,r7
80005016:	f0 1f 00 1d 	mcall	80005088 <draw_square2D+0xc4>
8000501a:	c3 50       	breq	80005084 <draw_square2D+0xc0>
8000501c:	0e 9c       	mov	r12,r7
8000501e:	f0 1f 00 1c 	mcall	8000508c <draw_square2D+0xc8>
80005022:	14 96       	mov	r6,r10
80005024:	16 97       	mov	r7,r11
80005026:	04 98       	mov	r8,r2
80005028:	06 99       	mov	r9,r3
8000502a:	e0 6a cc cd 	mov	r10,52429
8000502e:	ea 1a cc cc 	orh	r10,0xcccc
80005032:	e0 6b 0c cc 	mov	r11,3276
80005036:	ea 1b 40 6e 	orh	r11,0x406e
8000503a:	f0 1f 00 17 	mcall	80005094 <draw_square2D+0xd0>
8000503e:	0c 98       	mov	r8,r6
80005040:	0e 99       	mov	r9,r7
80005042:	f0 1f 00 16 	mcall	80005098 <draw_square2D+0xd4>
80005046:	c1 f0       	breq	80005084 <draw_square2D+0xc0>
    et024006_DrawFilledRect(round(p1->x), round(p1->y), size, size, color);
80005048:	0c 9a       	mov	r10,r6
8000504a:	0e 9b       	mov	r11,r7
8000504c:	f0 1f 00 14 	mcall	8000509c <draw_square2D+0xd8>
80005050:	14 96       	mov	r6,r10
80005052:	16 97       	mov	r7,r11
80005054:	00 9a       	mov	r10,r0
80005056:	02 9b       	mov	r11,r1
80005058:	f0 1f 00 11 	mcall	8000509c <draw_square2D+0xd8>
8000505c:	14 92       	mov	r2,r10
8000505e:	16 93       	mov	r3,r11
80005060:	5c 74       	castu.h	r4
80005062:	0c 9a       	mov	r10,r6
80005064:	0e 9b       	mov	r11,r7
80005066:	f0 1f 00 0f 	mcall	800050a0 <draw_square2D+0xdc>
8000506a:	ef dc c0 10 	bfextu	r7,r12,0x0,0x10
8000506e:	04 9a       	mov	r10,r2
80005070:	06 9b       	mov	r11,r3
80005072:	f0 1f 00 0c 	mcall	800050a0 <draw_square2D+0xdc>
80005076:	08 98       	mov	r8,r4
80005078:	0a 99       	mov	r9,r5
8000507a:	0a 9a       	mov	r10,r5
8000507c:	0e 9b       	mov	r11,r7
8000507e:	5c 7c       	castu.h	r12
80005080:	f0 1f 00 09 	mcall	800050a4 <draw_square2D+0xe0>
80005084:	d8 32       	popm	r0-r7,pc
80005086:	00 00       	add	r0,r0
80005088:	80 00       	ld.sh	r0,r0[0x0]
8000508a:	76 90       	ld.w	r0,r11[0x24]
8000508c:	80 00       	ld.sh	r0,r0[0x0]
8000508e:	7d 00       	ld.w	r0,lr[0x40]
80005090:	80 00       	ld.sh	r0,r0[0x0]
80005092:	74 ba       	ld.w	r10,r10[0x2c]
80005094:	80 00       	ld.sh	r0,r0[0x0]
80005096:	71 dc       	ld.w	r12,r8[0x74]
80005098:	80 00       	ld.sh	r0,r0[0x0]
8000509a:	75 c0       	ld.w	r0,r10[0x70]
8000509c:	80 00       	ld.sh	r0,r0[0x0]
8000509e:	5b b4       	cp.w	r4,-5
800050a0:	80 00       	ld.sh	r0,r0[0x0]
800050a2:	74 88       	ld.w	r8,r10[0x20]
800050a4:	80 00       	ld.sh	r0,r0[0x0]
800050a6:	24 7c       	sub	r12,71

800050a8 <act3>:
#include "et024006dhu.h"
#include "delay.h"

void act3(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){
800050a8:	d4 31       	pushm	r0-r7,lr
800050aa:	20 2d       	sub	sp,8
800050ac:	18 91       	mov	r1,r12
800050ae:	16 94       	mov	r4,r11
800050b0:	14 95       	mov	r5,r10
  point2D v = {.x = 0.0,.y = 0.0}, r = {.x = 0.0,.y = 0.0};
800050b2:	30 07       	mov	r7,0
800050b4:	50 07       	stdsp	sp[0x0],r7
800050b6:	50 17       	stdsp	sp[0x4],r7
800050b8:	0e 96       	mov	r6,r7
    if(*btn_pressed == RIGHT){
      v.x = v.x + 10.0;
      *btn_pressed = NONE;
    }
    if(*btn_pressed == LEFT){
      v.x = v.x - 10.0;
800050ba:	fc 10 41 20 	movh	r0,0x4120
      r.y = r.y + v.y;
    }

    clr_disp();
    draw_square2D(&r, 10, WHITE);
    v.x /= 2.0;
800050be:	fc 13 3f 00 	movh	r3,0x3f00
#include "et024006dhu.h"
#include "delay.h"

void act3(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){
  point2D v = {.x = 0.0,.y = 0.0}, r = {.x = 0.0,.y = 0.0};
  while(*actual_state == valid_state){
800050c2:	c7 58       	rjmp	800051ac <act3+0x104>
    if(*btn_pressed == UP){
800050c4:	6a 08       	ld.w	r8,r5[0x0]
800050c6:	58 18       	cp.w	r8,1
800050c8:	c0 91       	brne	800050da <act3+0x32>
      v.y = v.y - 10.0;
800050ca:	00 9b       	mov	r11,r0
800050cc:	0c 9c       	mov	r12,r6
800050ce:	f0 1f 00 3b 	mcall	800051b8 <act3+0x110>
800050d2:	18 96       	mov	r6,r12
      *btn_pressed = NONE;
800050d4:	30 09       	mov	r9,0
800050d6:	8b 09       	st.w	r5[0x0],r9
800050d8:	c1 68       	rjmp	80005104 <act3+0x5c>
    }
    if(*btn_pressed == DOWN){
800050da:	58 28       	cp.w	r8,2
800050dc:	c0 91       	brne	800050ee <act3+0x46>
      v.y = v.y + 10.0;
800050de:	00 9b       	mov	r11,r0
800050e0:	0c 9c       	mov	r12,r6
800050e2:	f0 1f 00 37 	mcall	800051bc <act3+0x114>
800050e6:	18 96       	mov	r6,r12
      *btn_pressed = NONE;
800050e8:	30 08       	mov	r8,0
800050ea:	8b 08       	st.w	r5[0x0],r8
800050ec:	c1 68       	rjmp	80005118 <act3+0x70>
    }
    if(*btn_pressed == RIGHT){
800050ee:	6a 08       	ld.w	r8,r5[0x0]
800050f0:	58 48       	cp.w	r8,4
800050f2:	c0 91       	brne	80005104 <act3+0x5c>
      v.x = v.x + 10.0;
800050f4:	00 9b       	mov	r11,r0
800050f6:	0e 9c       	mov	r12,r7
800050f8:	f0 1f 00 31 	mcall	800051bc <act3+0x114>
800050fc:	18 97       	mov	r7,r12
      *btn_pressed = NONE;
800050fe:	30 09       	mov	r9,0
80005100:	8b 09       	st.w	r5[0x0],r9
80005102:	c0 b8       	rjmp	80005118 <act3+0x70>
    }
    if(*btn_pressed == LEFT){
80005104:	6a 08       	ld.w	r8,r5[0x0]
80005106:	58 38       	cp.w	r8,3
80005108:	c0 81       	brne	80005118 <act3+0x70>
      v.x = v.x - 10.0;
8000510a:	00 9b       	mov	r11,r0
8000510c:	0e 9c       	mov	r12,r7
8000510e:	f0 1f 00 2b 	mcall	800051b8 <act3+0x110>
80005112:	18 97       	mov	r7,r12
      *btn_pressed = NONE;
80005114:	30 08       	mov	r8,0
80005116:	8b 08       	st.w	r5[0x0],r8
    }
    if((r.x + v.x)< ET024006_WIDTH - 11 && (r.x + v.x)> 0.0 ){
80005118:	40 0b       	lddsp	r11,sp[0x0]
8000511a:	0e 9c       	mov	r12,r7
8000511c:	f0 1f 00 28 	mcall	800051bc <act3+0x114>
80005120:	18 92       	mov	r2,r12
80005122:	e0 6b 80 00 	mov	r11,32768
80005126:	ea 1b 43 9a 	orh	r11,0x439a
8000512a:	f0 1f 00 26 	mcall	800051c0 <act3+0x118>
8000512e:	c0 70       	breq	8000513c <act3+0x94>
80005130:	04 9b       	mov	r11,r2
80005132:	30 0c       	mov	r12,0
80005134:	f0 1f 00 23 	mcall	800051c0 <act3+0x118>
      r.x = r.x + v.x;
80005138:	fb f2 1a 00 	st.wne	sp[0x0],r2
    }
    if((r.y + v.y)<ET024006_HEIGHT - 11 && (r.y + v.y)> 0.0 ){
8000513c:	40 1b       	lddsp	r11,sp[0x4]
8000513e:	0c 9c       	mov	r12,r6
80005140:	f0 1f 00 1f 	mcall	800051bc <act3+0x114>
80005144:	18 92       	mov	r2,r12
80005146:	fc 1b 43 65 	movh	r11,0x4365
8000514a:	f0 1f 00 1e 	mcall	800051c0 <act3+0x118>
8000514e:	c0 70       	breq	8000515c <act3+0xb4>
80005150:	04 9b       	mov	r11,r2
80005152:	30 0c       	mov	r12,0
80005154:	f0 1f 00 1b 	mcall	800051c0 <act3+0x118>
      r.y = r.y + v.y;
80005158:	fb f2 1a 01 	st.wne	sp[0x4],r2
    }

    clr_disp();
8000515c:	f0 1f 00 1a 	mcall	800051c4 <act3+0x11c>
    draw_square2D(&r, 10, WHITE);
80005160:	e0 6a ff ff 	mov	r10,65535
80005164:	30 ab       	mov	r11,10
80005166:	1a 9c       	mov	r12,sp
80005168:	f0 1f 00 18 	mcall	800051c8 <act3+0x120>
    v.x /= 2.0;
8000516c:	06 9b       	mov	r11,r3
8000516e:	0e 9c       	mov	r12,r7
80005170:	f0 1f 00 17 	mcall	800051cc <act3+0x124>
80005174:	18 97       	mov	r7,r12
    v.y /= 2.0;
80005176:	06 9b       	mov	r11,r3
80005178:	0c 9c       	mov	r12,r6
8000517a:	f0 1f 00 15 	mcall	800051cc <act3+0x124>
8000517e:	18 96       	mov	r6,r12
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005180:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005184:	e6 69 0a e0 	mov	r9,396000
80005188:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000518c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005190:	14 38       	cp.w	r8,r10
80005192:	e0 88 00 08 	brls	800051a2 <act3+0xfa>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005196:	12 38       	cp.w	r8,r9
80005198:	fe 98 ff fa 	brls	8000518c <act3+0xe4>
8000519c:	12 3a       	cp.w	r10,r9
8000519e:	c0 73       	brcs	800051ac <act3+0x104>
800051a0:	cf 6b       	rjmp	8000518c <act3+0xe4>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800051a2:	12 38       	cp.w	r8,r9
800051a4:	e0 8b 00 04 	brhi	800051ac <act3+0x104>
800051a8:	12 3a       	cp.w	r10,r9
800051aa:	cf 12       	brcc	8000518c <act3+0xe4>
#include "et024006dhu.h"
#include "delay.h"

void act3(uint8_t valid_state, uint8_t * actual_state, enum btn * btn_pressed){
  point2D v = {.x = 0.0,.y = 0.0}, r = {.x = 0.0,.y = 0.0};
  while(*actual_state == valid_state){
800051ac:	09 88       	ld.ub	r8,r4[0x0]
800051ae:	e2 08 18 00 	cp.b	r8,r1
800051b2:	c8 90       	breq	800050c4 <act3+0x1c>
    draw_square2D(&r, 10, WHITE);
    v.x /= 2.0;
    v.y /= 2.0;
    delay_ms(33);
  }
}
800051b4:	2f ed       	sub	sp,-8
800051b6:	d8 32       	popm	r0-r7,pc
800051b8:	80 00       	ld.sh	r0,r0[0x0]
800051ba:	7a 14       	ld.w	r4,sp[0x4]
800051bc:	80 00       	ld.sh	r0,r0[0x0]
800051be:	7a e4       	ld.w	r4,sp[0x38]
800051c0:	80 00       	ld.sh	r0,r0[0x0]
800051c2:	76 c4       	ld.w	r4,r11[0x30]
800051c4:	80 00       	ld.sh	r0,r0[0x0]
800051c6:	33 b0       	mov	r0,59
800051c8:	80 00       	ld.sh	r0,r0[0x0]
800051ca:	4f c4       	lddpc	r4,800053b8 <draw_point2D+0x98>
800051cc:	80 00       	ld.sh	r0,r0[0x0]
800051ce:	7b 90       	ld.w	r0,sp[0x64]

800051d0 <draw_line2D>:
void draw_point2D(point2D * p){
  if (p->x >= 0.0 && p->x <= 320.4 && p->y >= 0.0 && p->y <= 240.4){
    et024006_DrawPixel( round(p->x), round(p->y), color16(63,000,63));
  }
}
void draw_line2D(point2D * p1, point2D * p2){
800051d0:	d4 31       	pushm	r0-r7,lr
800051d2:	20 2d       	sub	sp,8
800051d4:	18 96       	mov	r6,r12
800051d6:	16 95       	mov	r5,r11
  if (p1->x >= 0.0 && p1->x <= 320.4 && p1->y >= 0.0 && p1->y <= 240.4){
800051d8:	78 07       	ld.w	r7,r12[0x0]
800051da:	30 0b       	mov	r11,0
800051dc:	0e 9c       	mov	r12,r7
800051de:	f0 1f 00 4b 	mcall	80005308 <draw_line2D+0x138>
800051e2:	e0 80 00 91 	breq	80005304 <draw_line2D+0x134>
800051e6:	0e 9c       	mov	r12,r7
800051e8:	f0 1f 00 49 	mcall	8000530c <draw_line2D+0x13c>
800051ec:	14 92       	mov	r2,r10
800051ee:	16 93       	mov	r3,r11
800051f0:	14 98       	mov	r8,r10
800051f2:	06 99       	mov	r9,r3
800051f4:	e0 6a 66 66 	mov	r10,26214
800051f8:	ea 1a 66 66 	orh	r10,0x6666
800051fc:	e0 6b 06 66 	mov	r11,1638
80005200:	ea 1b 40 74 	orh	r11,0x4074
80005204:	f0 1f 00 43 	mcall	80005310 <draw_line2D+0x140>
80005208:	c7 e0       	breq	80005304 <draw_line2D+0x134>
8000520a:	6c 17       	ld.w	r7,r6[0x4]
8000520c:	30 0b       	mov	r11,0
8000520e:	0e 9c       	mov	r12,r7
80005210:	f0 1f 00 3e 	mcall	80005308 <draw_line2D+0x138>
80005214:	c7 80       	breq	80005304 <draw_line2D+0x134>
80005216:	0e 9c       	mov	r12,r7
80005218:	f0 1f 00 3d 	mcall	8000530c <draw_line2D+0x13c>
8000521c:	14 90       	mov	r0,r10
8000521e:	16 91       	mov	r1,r11
80005220:	14 98       	mov	r8,r10
80005222:	02 99       	mov	r9,r1
80005224:	e0 6a cc cd 	mov	r10,52429
80005228:	ea 1a cc cc 	orh	r10,0xcccc
8000522c:	e0 6b 0c cc 	mov	r11,3276
80005230:	ea 1b 40 6e 	orh	r11,0x406e
80005234:	f0 1f 00 37 	mcall	80005310 <draw_line2D+0x140>
80005238:	c6 60       	breq	80005304 <draw_line2D+0x134>
    if (p2->x >= 0.0 && p2->x <= 320.4 && p2->y >= 0.0 && p2->y <= 240.4){
8000523a:	6a 07       	ld.w	r7,r5[0x0]
8000523c:	30 0b       	mov	r11,0
8000523e:	0e 9c       	mov	r12,r7
80005240:	f0 1f 00 32 	mcall	80005308 <draw_line2D+0x138>
80005244:	c6 00       	breq	80005304 <draw_line2D+0x134>
80005246:	0e 9c       	mov	r12,r7
80005248:	f0 1f 00 31 	mcall	8000530c <draw_line2D+0x13c>
8000524c:	fa eb 00 00 	st.d	sp[0],r10
80005250:	14 98       	mov	r8,r10
80005252:	16 99       	mov	r9,r11
80005254:	e0 6a 66 66 	mov	r10,26214
80005258:	ea 1a 66 66 	orh	r10,0x6666
8000525c:	e0 6b 06 66 	mov	r11,1638
80005260:	ea 1b 40 74 	orh	r11,0x4074
80005264:	f0 1f 00 2b 	mcall	80005310 <draw_line2D+0x140>
80005268:	c4 e0       	breq	80005304 <draw_line2D+0x134>
8000526a:	6a 17       	ld.w	r7,r5[0x4]
8000526c:	30 0b       	mov	r11,0
8000526e:	0e 9c       	mov	r12,r7
80005270:	f0 1f 00 26 	mcall	80005308 <draw_line2D+0x138>
80005274:	c4 80       	breq	80005304 <draw_line2D+0x134>
80005276:	0e 9c       	mov	r12,r7
80005278:	f0 1f 00 25 	mcall	8000530c <draw_line2D+0x13c>
8000527c:	14 96       	mov	r6,r10
8000527e:	16 97       	mov	r7,r11
80005280:	14 98       	mov	r8,r10
80005282:	0e 99       	mov	r9,r7
80005284:	e0 6a cc cd 	mov	r10,52429
80005288:	ea 1a cc cc 	orh	r10,0xcccc
8000528c:	e0 6b 0c cc 	mov	r11,3276
80005290:	ea 1b 40 6e 	orh	r11,0x406e
80005294:	f0 1f 00 1f 	mcall	80005310 <draw_line2D+0x140>
80005298:	c3 60       	breq	80005304 <draw_line2D+0x134>
      et024006_DrawLine(round(p1->x), round(p1->y), round(p2->x), round(p2->y), BLACK);
8000529a:	0c 9a       	mov	r10,r6
8000529c:	0e 9b       	mov	r11,r7
8000529e:	f0 1f 00 1e 	mcall	80005314 <draw_line2D+0x144>
800052a2:	14 96       	mov	r6,r10
800052a4:	16 97       	mov	r7,r11
800052a6:	fa ea 00 00 	ld.d	r10,sp[0]
800052aa:	f0 1f 00 1b 	mcall	80005314 <draw_line2D+0x144>
800052ae:	14 94       	mov	r4,r10
800052b0:	16 95       	mov	r5,r11
800052b2:	00 9a       	mov	r10,r0
800052b4:	02 9b       	mov	r11,r1
800052b6:	f0 1f 00 18 	mcall	80005314 <draw_line2D+0x144>
800052ba:	14 90       	mov	r0,r10
800052bc:	16 91       	mov	r1,r11
800052be:	04 9a       	mov	r10,r2
800052c0:	06 9b       	mov	r11,r3
800052c2:	f0 1f 00 15 	mcall	80005314 <draw_line2D+0x144>
800052c6:	14 92       	mov	r2,r10
800052c8:	16 93       	mov	r3,r11
800052ca:	0c 9a       	mov	r10,r6
800052cc:	0e 9b       	mov	r11,r7
800052ce:	f0 1f 00 13 	mcall	80005318 <draw_line2D+0x148>
800052d2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800052d6:	08 9a       	mov	r10,r4
800052d8:	0a 9b       	mov	r11,r5
800052da:	f0 1f 00 10 	mcall	80005318 <draw_line2D+0x148>
800052de:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800052e2:	00 9a       	mov	r10,r0
800052e4:	02 9b       	mov	r11,r1
800052e6:	f0 1f 00 0d 	mcall	80005318 <draw_line2D+0x148>
800052ea:	ef dc c0 10 	bfextu	r7,r12,0x0,0x10
800052ee:	04 9a       	mov	r10,r2
800052f0:	06 9b       	mov	r11,r3
800052f2:	f0 1f 00 0a 	mcall	80005318 <draw_line2D+0x148>
800052f6:	30 08       	mov	r8,0
800052f8:	0c 99       	mov	r9,r6
800052fa:	0a 9a       	mov	r10,r5
800052fc:	0e 9b       	mov	r11,r7
800052fe:	5c 7c       	castu.h	r12
80005300:	f0 1f 00 07 	mcall	8000531c <draw_line2D+0x14c>
    }
  }
}
80005304:	2f ed       	sub	sp,-8
80005306:	d8 32       	popm	r0-r7,pc
80005308:	80 00       	ld.sh	r0,r0[0x0]
8000530a:	76 90       	ld.w	r0,r11[0x24]
8000530c:	80 00       	ld.sh	r0,r0[0x0]
8000530e:	7d 00       	ld.w	r0,lr[0x40]
80005310:	80 00       	ld.sh	r0,r0[0x0]
80005312:	75 c0       	ld.w	r0,r10[0x70]
80005314:	80 00       	ld.sh	r0,r0[0x0]
80005316:	5b b4       	cp.w	r4,-5
80005318:	80 00       	ld.sh	r0,r0[0x0]
8000531a:	74 88       	ld.w	r8,r10[0x20]
8000531c:	80 00       	ld.sh	r0,r0[0x0]
8000531e:	23 24       	sub	r4,50

80005320 <draw_point2D>:
	for(int i=0; i<=radio; i++){
		drawHollowTriangle(centerx,centery,radio-i,dir,color);
	}//For
}//drawFilledTriangle

void draw_point2D(point2D * p){
80005320:	eb cd 40 f8 	pushm	r3-r7,lr
80005324:	18 97       	mov	r7,r12
  if (p->x >= 0.0 && p->x <= 320.4 && p->y >= 0.0 && p->y <= 240.4){
80005326:	78 05       	ld.w	r5,r12[0x0]
80005328:	30 0b       	mov	r11,0
8000532a:	0a 9c       	mov	r12,r5
8000532c:	f0 1f 00 29 	mcall	800053d0 <draw_point2D+0xb0>
80005330:	c4 e0       	breq	800053cc <draw_point2D+0xac>
80005332:	0a 9c       	mov	r12,r5
80005334:	f0 1f 00 28 	mcall	800053d4 <draw_point2D+0xb4>
80005338:	14 94       	mov	r4,r10
8000533a:	16 95       	mov	r5,r11
8000533c:	14 98       	mov	r8,r10
8000533e:	0a 99       	mov	r9,r5
80005340:	e0 6a 66 66 	mov	r10,26214
80005344:	ea 1a 66 66 	orh	r10,0x6666
80005348:	e0 6b 06 66 	mov	r11,1638
8000534c:	ea 1b 40 74 	orh	r11,0x4074
80005350:	f0 1f 00 22 	mcall	800053d8 <draw_point2D+0xb8>
80005354:	c3 c0       	breq	800053cc <draw_point2D+0xac>
80005356:	6e 17       	ld.w	r7,r7[0x4]
80005358:	30 0b       	mov	r11,0
8000535a:	0e 9c       	mov	r12,r7
8000535c:	f0 1f 00 1d 	mcall	800053d0 <draw_point2D+0xb0>
80005360:	c3 60       	breq	800053cc <draw_point2D+0xac>
80005362:	0e 9c       	mov	r12,r7
80005364:	f0 1f 00 1c 	mcall	800053d4 <draw_point2D+0xb4>
80005368:	14 96       	mov	r6,r10
8000536a:	16 97       	mov	r7,r11
8000536c:	14 98       	mov	r8,r10
8000536e:	0e 99       	mov	r9,r7
80005370:	e0 6a cc cd 	mov	r10,52429
80005374:	ea 1a cc cc 	orh	r10,0xcccc
80005378:	e0 6b 0c cc 	mov	r11,3276
8000537c:	ea 1b 40 6e 	orh	r11,0x406e
80005380:	f0 1f 00 16 	mcall	800053d8 <draw_point2D+0xb8>
80005384:	c2 40       	breq	800053cc <draw_point2D+0xac>
    et024006_DrawPixel( round(p->x), round(p->y), color16(63,000,63));
80005386:	33 fa       	mov	r10,63
80005388:	30 0b       	mov	r11,0
8000538a:	14 9c       	mov	r12,r10
8000538c:	f0 1f 00 14 	mcall	800053dc <draw_point2D+0xbc>
80005390:	e7 dc b0 10 	bfexts	r3,r12,0x0,0x10
80005394:	0c 9a       	mov	r10,r6
80005396:	0e 9b       	mov	r11,r7
80005398:	f0 1f 00 12 	mcall	800053e0 <draw_point2D+0xc0>
8000539c:	14 96       	mov	r6,r10
8000539e:	16 97       	mov	r7,r11
800053a0:	08 9a       	mov	r10,r4
800053a2:	0a 9b       	mov	r11,r5
800053a4:	f0 1f 00 0f 	mcall	800053e0 <draw_point2D+0xc0>
800053a8:	14 94       	mov	r4,r10
800053aa:	16 95       	mov	r5,r11
800053ac:	5c 73       	castu.h	r3
800053ae:	0c 9a       	mov	r10,r6
800053b0:	0e 9b       	mov	r11,r7
800053b2:	f0 1f 00 0d 	mcall	800053e4 <draw_point2D+0xc4>
800053b6:	ef dc c0 10 	bfextu	r7,r12,0x0,0x10
800053ba:	08 9a       	mov	r10,r4
800053bc:	0a 9b       	mov	r11,r5
800053be:	f0 1f 00 0a 	mcall	800053e4 <draw_point2D+0xc4>
800053c2:	06 9a       	mov	r10,r3
800053c4:	0e 9b       	mov	r11,r7
800053c6:	5c 7c       	castu.h	r12
800053c8:	f0 1f 00 08 	mcall	800053e8 <draw_point2D+0xc8>
800053cc:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800053d0:	80 00       	ld.sh	r0,r0[0x0]
800053d2:	76 90       	ld.w	r0,r11[0x24]
800053d4:	80 00       	ld.sh	r0,r0[0x0]
800053d6:	7d 00       	ld.w	r0,lr[0x40]
800053d8:	80 00       	ld.sh	r0,r0[0x0]
800053da:	75 c0       	ld.w	r0,r10[0x70]
800053dc:	80 00       	ld.sh	r0,r0[0x0]
800053de:	31 dc       	mov	r12,29
800053e0:	80 00       	ld.sh	r0,r0[0x0]
800053e2:	5b b4       	cp.w	r4,-5
800053e4:	80 00       	ld.sh	r0,r0[0x0]
800053e6:	74 88       	ld.w	r8,r10[0x20]
800053e8:	80 00       	ld.sh	r0,r0[0x0]
800053ea:	20 70       	sub	r0,7

800053ec <draw_impossible_polygon>:
    rotation += 1;
    delay_ms(33);
  }
}

void draw_impossible_polygon(uint8_t n, point2D * center, float radius, float rotation){
800053ec:	d4 31       	pushm	r0-r7,lr
800053ee:	1a 97       	mov	r7,sp
800053f0:	21 6d       	sub	sp,88
800053f2:	16 93       	mov	r3,r11
800053f4:	ef 4a ff c8 	st.w	r7[-56],r10
800053f8:	ef 49 ff d4 	st.w	r7[-44],r9
    }
  }
  for (int i=0; i<n; i++){
    draw_line2D(&p[i][3], &p[(i+1)%n][2]);
  }
}
800053fc:	ef 4d ff fc 	st.w	r7[-4],sp
    delay_ms(33);
  }
}

void draw_impossible_polygon(uint8_t n, point2D * center, float radius, float rotation){
  float center_angle = 360.0/n;
80005400:	18 94       	mov	r4,r12
80005402:	f0 1f 00 dc 	mcall	80005770 <draw_impossible_polygon+0x384>
80005406:	ee eb ff b4 	st.d	r7[-76],r10
8000540a:	14 98       	mov	r8,r10
8000540c:	16 99       	mov	r9,r11
8000540e:	30 0a       	mov	r10,0
80005410:	e0 6b 80 00 	mov	r11,32768
80005414:	ea 1b 40 76 	orh	r11,0x4076
80005418:	f0 1f 00 d7 	mcall	80005774 <draw_impossible_polygon+0x388>
8000541c:	f0 1f 00 d7 	mcall	80005778 <draw_impossible_polygon+0x38c>
80005420:	ef 4c ff e4 	st.w	r7[-28],r12
  float corner_angle = (180.0 - center_angle)/2;
80005424:	f0 1f 00 d6 	mcall	8000577c <draw_impossible_polygon+0x390>
80005428:	14 98       	mov	r8,r10
8000542a:	16 99       	mov	r9,r11
8000542c:	30 0a       	mov	r10,0
8000542e:	e0 6b 80 00 	mov	r11,32768
80005432:	ea 1b 40 66 	orh	r11,0x4066
80005436:	f0 1f 00 d3 	mcall	80005780 <draw_impossible_polygon+0x394>
8000543a:	30 08       	mov	r8,0
8000543c:	fc 19 3f e0 	movh	r9,0x3fe0
80005440:	f0 1f 00 d1 	mcall	80005784 <draw_impossible_polygon+0x398>
80005444:	f0 1f 00 cd 	mcall	80005778 <draw_impossible_polygon+0x38c>
80005448:	ef 4c ff e0 	st.w	r7[-32],r12
  //initial points
  point2D p[n][4];
8000544c:	e8 08 15 05 	lsl	r8,r4,0x5
80005450:	2f c8       	sub	r8,-4
80005452:	10 1d       	sub	sp,r8
80005454:	ef 4d ff f8 	st.w	r7[-8],sp
80005458:	ef 4d ff dc 	st.w	r7[-36],sp
  for (int i=0; i<n; i++){
8000545c:	58 04       	cp.w	r4,0
8000545e:	e0 8a 00 77 	brle	8000554c <draw_impossible_polygon+0x160>
80005462:	1a 95       	mov	r5,sp
80005464:	30 06       	mov	r6,0
    p[i][0].x = center->x + radius * sin(to_rad((i*360.0)/n + rotation));
80005466:	ef 4d ff d0 	st.w	r7[-48],sp
8000546a:	ef 44 ff c4 	st.w	r7[-60],r4
8000546e:	06 94       	mov	r4,r3
80005470:	ee fc ff c8 	ld.w	r12,r7[-56]
80005474:	f0 1f 00 c2 	mcall	8000577c <draw_impossible_polygon+0x390>
80005478:	ee eb ff bc 	st.d	r7[-68],r10
8000547c:	0c 9c       	mov	r12,r6
8000547e:	f0 1f 00 bd 	mcall	80005770 <draw_impossible_polygon+0x384>
80005482:	30 08       	mov	r8,0
80005484:	e0 69 80 00 	mov	r9,32768
80005488:	ea 19 40 76 	orh	r9,0x4076
8000548c:	f0 1f 00 be 	mcall	80005784 <draw_impossible_polygon+0x398>
80005490:	ee e8 ff b4 	ld.d	r8,r7[-76]
80005494:	f0 1f 00 b8 	mcall	80005774 <draw_impossible_polygon+0x388>
80005498:	14 92       	mov	r2,r10
8000549a:	16 93       	mov	r3,r11
8000549c:	ee fc ff d4 	ld.w	r12,r7[-44]
800054a0:	f0 1f 00 b7 	mcall	8000577c <draw_impossible_polygon+0x390>
800054a4:	14 98       	mov	r8,r10
800054a6:	16 99       	mov	r9,r11
800054a8:	04 9a       	mov	r10,r2
800054aa:	06 9b       	mov	r11,r3
800054ac:	f0 1f 00 b7 	mcall	80005788 <draw_impossible_polygon+0x39c>
800054b0:	f0 1f 00 b2 	mcall	80005778 <draw_impossible_polygon+0x38c>
800054b4:	f0 1f 00 b6 	mcall	8000578c <draw_impossible_polygon+0x3a0>
800054b8:	f0 1f 00 b1 	mcall	8000577c <draw_impossible_polygon+0x390>
800054bc:	14 90       	mov	r0,r10
800054be:	16 91       	mov	r1,r11
800054c0:	f0 1f 00 b4 	mcall	80005790 <draw_impossible_polygon+0x3a4>
800054c4:	ee eb ff ac 	st.d	r7[-84],r10
800054c8:	68 0c       	ld.w	r12,r4[0x0]
800054ca:	f0 1f 00 ad 	mcall	8000577c <draw_impossible_polygon+0x390>
800054ce:	14 92       	mov	r2,r10
800054d0:	16 93       	mov	r3,r11
800054d2:	ee e8 ff ac 	ld.d	r8,r7[-84]
800054d6:	ee ea ff bc 	ld.d	r10,r7[-68]
800054da:	f0 1f 00 ab 	mcall	80005784 <draw_impossible_polygon+0x398>
800054de:	14 98       	mov	r8,r10
800054e0:	16 99       	mov	r9,r11
800054e2:	04 9a       	mov	r10,r2
800054e4:	06 9b       	mov	r11,r3
800054e6:	f0 1f 00 a9 	mcall	80005788 <draw_impossible_polygon+0x39c>
800054ea:	f0 1f 00 a4 	mcall	80005778 <draw_impossible_polygon+0x38c>
800054ee:	ee f9 ff d0 	ld.w	r9,r7[-48]
800054f2:	93 0c       	st.w	r9[0x0],r12
    p[i][0].y = center->y + radius * cos(to_rad((i*360.0)/n + rotation));
800054f4:	00 9a       	mov	r10,r0
800054f6:	02 9b       	mov	r11,r1
800054f8:	f0 1f 00 a7 	mcall	80005794 <draw_impossible_polygon+0x3a8>
800054fc:	14 90       	mov	r0,r10
800054fe:	16 91       	mov	r1,r11
80005500:	68 1c       	ld.w	r12,r4[0x4]
80005502:	f0 1f 00 9f 	mcall	8000577c <draw_impossible_polygon+0x390>
80005506:	14 92       	mov	r2,r10
80005508:	16 93       	mov	r3,r11
8000550a:	00 98       	mov	r8,r0
8000550c:	02 99       	mov	r9,r1
8000550e:	ee ea ff bc 	ld.d	r10,r7[-68]
80005512:	f0 1f 00 9d 	mcall	80005784 <draw_impossible_polygon+0x398>
80005516:	14 98       	mov	r8,r10
80005518:	16 99       	mov	r9,r11
8000551a:	04 9a       	mov	r10,r2
8000551c:	06 9b       	mov	r11,r3
8000551e:	f0 1f 00 9b 	mcall	80005788 <draw_impossible_polygon+0x39c>
80005522:	f0 1f 00 96 	mcall	80005778 <draw_impossible_polygon+0x38c>
80005526:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000552a:	91 1c       	st.w	r8[0x4],r12
    draw_point2D(&p[i][0]);
8000552c:	0a 9c       	mov	r12,r5
8000552e:	f0 1f 00 9b 	mcall	80005798 <draw_impossible_polygon+0x3ac>
void draw_impossible_polygon(uint8_t n, point2D * center, float radius, float rotation){
  float center_angle = 360.0/n;
  float corner_angle = (180.0 - center_angle)/2;
  //initial points
  point2D p[n][4];
  for (int i=0; i<n; i++){
80005532:	2f f6       	sub	r6,-1
80005534:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005538:	2e 09       	sub	r9,-32
8000553a:	ef 49 ff d0 	st.w	r7[-48],r9
8000553e:	2e 05       	sub	r5,-32
80005540:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005544:	0c 38       	cp.w	r8,r6
80005546:	fe 99 ff 95 	brgt	80005470 <draw_impossible_polygon+0x84>
8000554a:	10 94       	mov	r4,r8
8000554c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005550:	ef 49 ff e8 	st.w	r7[-24],r9
80005554:	30 08       	mov	r8,0
80005556:	ef 48 ff d8 	st.w	r7[-40],r8
8000555a:	30 19       	mov	r9,1
8000555c:	ef 49 ff d0 	st.w	r7[-48],r9
    draw_point2D(&p[i][0]);
  }
  for (int j=1; j<4; j++){
    for (int i=0; i<n; i++){
      float angle = (center_angle * (i + j) + corner_angle) ;
      float dp = euclidian_distance(&p[i][j-1], &p[(i+1)%n][j-1]);
80005560:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005564:	ef 48 ff f0 	st.w	r7[-16],r8
      if (j==3)
        dp = euclidian_distance(&p[i][j-2], &p[(i+1)%n][j-2]) *0.83/(1+(n-2)/15.0);
80005568:	e8 c9 00 02 	sub	r9,r4,2
8000556c:	ef 49 ff f4 	st.w	r7[-12],r9
80005570:	08 91       	mov	r1,r4
80005572:	cc 88       	rjmp	80005702 <draw_impossible_polygon+0x316>
    draw_point2D(&p[i][0]);
  }
  for (int j=1; j<4; j++){
    for (int i=0; i<n; i++){
      float angle = (center_angle * (i + j) + corner_angle) ;
      float dp = euclidian_distance(&p[i][j-1], &p[(i+1)%n][j-1]);
80005574:	2f f5       	sub	r5,-1
80005576:	ea 01 0c 08 	divs	r8,r5,r1
8000557a:	12 90       	mov	r0,r9
8000557c:	ef 46 ff c4 	st.w	r7[-60],r6
80005580:	ee f8 ff d8 	ld.w	r8,r7[-40]
80005584:	f0 00 00 2b 	add	r11,r8,r0<<0x2
80005588:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000558c:	f2 0b 00 3b 	add	r11,r9,r11<<0x3
80005590:	0c 9c       	mov	r12,r6
80005592:	f0 1f 00 83 	mcall	8000579c <draw_impossible_polygon+0x3b0>
      if (j==3)
80005596:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000559a:	58 38       	cp.w	r8,3
8000559c:	c3 21       	brne	80005600 <draw_impossible_polygon+0x214>
        dp = euclidian_distance(&p[i][j-2], &p[(i+1)%n][j-2]) *0.83/(1+(n-2)/15.0);
8000559e:	e0 0b 15 02 	lsl	r11,r0,0x2
800055a2:	20 2b       	sub	r11,2
800055a4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800055a8:	12 0b       	add	r11,r9
800055aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800055ae:	f0 0b 00 3b 	add	r11,r8,r11<<0x3
800055b2:	04 9c       	mov	r12,r2
800055b4:	f0 1f 00 7a 	mcall	8000579c <draw_impossible_polygon+0x3b0>
800055b8:	f0 1f 00 71 	mcall	8000577c <draw_impossible_polygon+0x390>
800055bc:	e0 68 c2 8f 	mov	r8,49807
800055c0:	ea 18 28 f5 	orh	r8,0x28f5
800055c4:	e0 69 8f 5c 	mov	r9,36700
800055c8:	ea 19 3f ea 	orh	r9,0x3fea
800055cc:	f0 1f 00 6e 	mcall	80005784 <draw_impossible_polygon+0x398>
800055d0:	ee eb ff bc 	st.d	r7[-68],r10
800055d4:	ee fc ff f4 	ld.w	r12,r7[-12]
800055d8:	f0 1f 00 66 	mcall	80005770 <draw_impossible_polygon+0x384>
800055dc:	30 08       	mov	r8,0
800055de:	fc 19 40 2e 	movh	r9,0x402e
800055e2:	f0 1f 00 65 	mcall	80005774 <draw_impossible_polygon+0x388>
800055e6:	30 08       	mov	r8,0
800055e8:	fc 19 3f f0 	movh	r9,0x3ff0
800055ec:	f0 1f 00 67 	mcall	80005788 <draw_impossible_polygon+0x39c>
800055f0:	14 98       	mov	r8,r10
800055f2:	16 99       	mov	r9,r11
800055f4:	ee ea ff bc 	ld.d	r10,r7[-68]
800055f8:	f0 1f 00 5f 	mcall	80005774 <draw_impossible_polygon+0x388>
800055fc:	f0 1f 00 5f 	mcall	80005778 <draw_impossible_polygon+0x38c>
      p[i][j].x = p[i][j-1].x + 1.2*dp * sin(to_rad(angle + rotation));
80005600:	f0 1f 00 5f 	mcall	8000577c <draw_impossible_polygon+0x390>
80005604:	e0 68 33 33 	mov	r8,13107
80005608:	ea 18 33 33 	orh	r8,0x3333
8000560c:	e0 69 33 33 	mov	r9,13107
80005610:	ea 19 3f f3 	orh	r9,0x3ff3
80005614:	f0 1f 00 5c 	mcall	80005784 <draw_impossible_polygon+0x398>
80005618:	ee eb ff bc 	st.d	r7[-68],r10
8000561c:	06 9c       	mov	r12,r3
8000561e:	f0 1f 00 61 	mcall	800057a0 <draw_impossible_polygon+0x3b4>
80005622:	ee fb ff e4 	ld.w	r11,r7[-28]
80005626:	f0 1f 00 60 	mcall	800057a4 <draw_impossible_polygon+0x3b8>
8000562a:	ee fb ff e0 	ld.w	r11,r7[-32]
8000562e:	f0 1f 00 5f 	mcall	800057a8 <draw_impossible_polygon+0x3bc>
80005632:	ee fb ff d4 	ld.w	r11,r7[-44]
80005636:	f0 1f 00 5d 	mcall	800057a8 <draw_impossible_polygon+0x3bc>
8000563a:	f0 1f 00 55 	mcall	8000578c <draw_impossible_polygon+0x3a0>
8000563e:	f0 1f 00 50 	mcall	8000577c <draw_impossible_polygon+0x390>
80005642:	ee eb ff b4 	st.d	r7[-76],r10
80005646:	f0 1f 00 53 	mcall	80005790 <draw_impossible_polygon+0x3a4>
8000564a:	ee eb ff ac 	st.d	r7[-84],r10
8000564e:	ee f9 ff a8 	ld.w	r9,r7[-88]
80005652:	72 0c       	ld.w	r12,r9[0x0]
80005654:	f0 1f 00 4a 	mcall	8000577c <draw_impossible_polygon+0x390>
80005658:	ee eb ff c8 	st.d	r7[-56],r10
8000565c:	ee e8 ff ac 	ld.d	r8,r7[-84]
80005660:	ee ea ff bc 	ld.d	r10,r7[-68]
80005664:	f0 1f 00 48 	mcall	80005784 <draw_impossible_polygon+0x398>
80005668:	14 98       	mov	r8,r10
8000566a:	16 99       	mov	r9,r11
8000566c:	ee ea ff c8 	ld.d	r10,r7[-56]
80005670:	f0 1f 00 46 	mcall	80005788 <draw_impossible_polygon+0x39c>
80005674:	f0 1f 00 41 	mcall	80005778 <draw_impossible_polygon+0x38c>
80005678:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000567c:	91 2c       	st.w	r8[0x8],r12
      p[i][j].y = p[i][j-1].y + 1.2*dp * cos(to_rad(angle + rotation));
8000567e:	ee ea ff b4 	ld.d	r10,r7[-76]
80005682:	f0 1f 00 45 	mcall	80005794 <draw_impossible_polygon+0x3a8>
80005686:	ee eb ff ac 	st.d	r7[-84],r10
8000568a:	ee f9 ff a8 	ld.w	r9,r7[-88]
8000568e:	72 1c       	ld.w	r12,r9[0x4]
80005690:	f0 1f 00 3b 	mcall	8000577c <draw_impossible_polygon+0x390>
80005694:	ee eb ff b4 	st.d	r7[-76],r10
80005698:	ee e8 ff ac 	ld.d	r8,r7[-84]
8000569c:	ee ea ff bc 	ld.d	r10,r7[-68]
800056a0:	f0 1f 00 39 	mcall	80005784 <draw_impossible_polygon+0x398>
800056a4:	14 98       	mov	r8,r10
800056a6:	16 99       	mov	r9,r11
800056a8:	ee ea ff b4 	ld.d	r10,r7[-76]
800056ac:	f0 1f 00 37 	mcall	80005788 <draw_impossible_polygon+0x39c>
800056b0:	f0 1f 00 32 	mcall	80005778 <draw_impossible_polygon+0x38c>
800056b4:	ee f8 ff a8 	ld.w	r8,r7[-88]
800056b8:	91 3c       	st.w	r8[0xc],r12
      draw_line2D(&p[i][j-1], &p[i][j]);
800056ba:	08 9b       	mov	r11,r4
800056bc:	ee fc ff c4 	ld.w	r12,r7[-60]
800056c0:	f0 1f 00 3b 	mcall	800057ac <draw_impossible_polygon+0x3c0>
800056c4:	2e 06       	sub	r6,-32
800056c6:	ee f9 ff a8 	ld.w	r9,r7[-88]
800056ca:	2e 09       	sub	r9,-32
800056cc:	ef 49 ff a8 	st.w	r7[-88],r9
800056d0:	2f f3       	sub	r3,-1
800056d2:	2e 04       	sub	r4,-32
800056d4:	2e 02       	sub	r2,-32
    p[i][0].x = center->x + radius * sin(to_rad((i*360.0)/n + rotation));
    p[i][0].y = center->y + radius * cos(to_rad((i*360.0)/n + rotation));
    draw_point2D(&p[i][0]);
  }
  for (int j=1; j<4; j++){
    for (int i=0; i<n; i++){
800056d6:	0a 31       	cp.w	r1,r5
800056d8:	fe 99 ff 4e 	brgt	80005574 <draw_impossible_polygon+0x188>
  for (int i=0; i<n; i++){
    p[i][0].x = center->x + radius * sin(to_rad((i*360.0)/n + rotation));
    p[i][0].y = center->y + radius * cos(to_rad((i*360.0)/n + rotation));
    draw_point2D(&p[i][0]);
  }
  for (int j=1; j<4; j++){
800056dc:	ee f8 ff d0 	ld.w	r8,r7[-48]
800056e0:	2f f8       	sub	r8,-1
800056e2:	ef 48 ff d0 	st.w	r7[-48],r8
800056e6:	ee f9 ff d8 	ld.w	r9,r7[-40]
800056ea:	2f f9       	sub	r9,-1
800056ec:	ef 49 ff d8 	st.w	r7[-40],r9
800056f0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800056f4:	2f 88       	sub	r8,-8
800056f6:	ef 48 ff e8 	st.w	r7[-24],r8
800056fa:	ee f9 ff d0 	ld.w	r9,r7[-48]
800056fe:	58 49       	cp.w	r9,4
80005700:	c1 b0       	breq	80005736 <draw_impossible_polygon+0x34a>
    for (int i=0; i<n; i++){
80005702:	58 01       	cp.w	r1,0
80005704:	fe 9a ff ec 	brle	800056dc <draw_impossible_polygon+0x2f0>
80005708:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000570c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80005710:	f2 08 00 30 	add	r0,r9,r8<<0x3
80005714:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005718:	ef 48 ff ec 	st.w	r7[-20],r8
8000571c:	ee f4 ff e8 	ld.w	r4,r7[-24]
80005720:	2f 84       	sub	r4,-8
80005722:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005726:	20 82       	sub	r2,8
80005728:	10 93       	mov	r3,r8
8000572a:	ee f6 ff e8 	ld.w	r6,r7[-24]
8000572e:	30 05       	mov	r5,0
80005730:	ef 40 ff a8 	st.w	r7[-88],r0
80005734:	c2 0b       	rjmp	80005574 <draw_impossible_polygon+0x188>
80005736:	02 94       	mov	r4,r1
      p[i][j].x = p[i][j-1].x + 1.2*dp * sin(to_rad(angle + rotation));
      p[i][j].y = p[i][j-1].y + 1.2*dp * cos(to_rad(angle + rotation));
      draw_line2D(&p[i][j-1], &p[i][j]);
    }
  }
  for (int i=0; i<n; i++){
80005738:	58 01       	cp.w	r1,0
8000573a:	e0 8a 00 16 	brle	80005766 <draw_impossible_polygon+0x37a>
8000573e:	ee f6 ff f8 	ld.w	r6,r7[-8]
80005742:	2e 86       	sub	r6,-24
80005744:	30 03       	mov	r3,0
80005746:	ee f5 ff dc 	ld.w	r5,r7[-36]
    draw_line2D(&p[i][3], &p[(i+1)%n][2]);
8000574a:	2f f3       	sub	r3,-1
8000574c:	e6 04 0c 0a 	divs	r10,r3,r4
80005750:	a5 7b       	lsl	r11,0x5
80005752:	2f 0b       	sub	r11,-16
80005754:	ea 0b 00 0b 	add	r11,r5,r11
80005758:	0c 9c       	mov	r12,r6
8000575a:	f0 1f 00 15 	mcall	800057ac <draw_impossible_polygon+0x3c0>
8000575e:	2e 06       	sub	r6,-32
      p[i][j].x = p[i][j-1].x + 1.2*dp * sin(to_rad(angle + rotation));
      p[i][j].y = p[i][j-1].y + 1.2*dp * cos(to_rad(angle + rotation));
      draw_line2D(&p[i][j-1], &p[i][j]);
    }
  }
  for (int i=0; i<n; i++){
80005760:	06 34       	cp.w	r4,r3
80005762:	fe 99 ff f4 	brgt	8000574a <draw_impossible_polygon+0x35e>
    draw_line2D(&p[i][3], &p[(i+1)%n][2]);
  }
}
80005766:	ee fd ff fc 	ld.w	sp,r7[-4]
8000576a:	2e ad       	sub	sp,-88
8000576c:	d8 32       	popm	r0-r7,pc
8000576e:	00 00       	add	r0,r0
80005770:	80 00       	ld.sh	r0,r0[0x0]
80005772:	74 ba       	ld.w	r10,r10[0x2c]
80005774:	80 00       	ld.sh	r0,r0[0x0]
80005776:	76 f8       	ld.w	r8,r11[0x3c]
80005778:	80 00       	ld.sh	r0,r0[0x0]
8000577a:	7d 60       	ld.w	r0,lr[0x58]
8000577c:	80 00       	ld.sh	r0,r0[0x0]
8000577e:	7d 00       	ld.w	r0,lr[0x40]
80005780:	80 00       	ld.sh	r0,r0[0x0]
80005782:	71 dc       	ld.w	r12,r8[0x74]
80005784:	80 00       	ld.sh	r0,r0[0x0]
80005786:	70 04       	ld.w	r4,r8[0x0]
80005788:	80 00       	ld.sh	r0,r0[0x0]
8000578a:	73 78       	ld.w	r8,r9[0x5c]
8000578c:	80 00       	ld.sh	r0,r0[0x0]
8000578e:	31 e8       	mov	r8,30
80005790:	80 00       	ld.sh	r0,r0[0x0]
80005792:	5c 64       	casts.b	r4
80005794:	80 00       	ld.sh	r0,r0[0x0]
80005796:	5b 2c       	cp.w	r12,-14
80005798:	80 00       	ld.sh	r0,r0[0x0]
8000579a:	53 20       	stdsp	sp[0xc8],r0
8000579c:	80 00       	ld.sh	r0,r0[0x0]
8000579e:	4f 64       	lddpc	r4,80005974 <main+0xa8>
800057a0:	80 00       	ld.sh	r0,r0[0x0]
800057a2:	7c 72       	ld.w	r2,lr[0x1c]
800057a4:	80 00       	ld.sh	r0,r0[0x0]
800057a6:	7b 90       	ld.w	r0,sp[0x64]
800057a8:	80 00       	ld.sh	r0,r0[0x0]
800057aa:	7a e4       	ld.w	r4,sp[0x38]
800057ac:	80 00       	ld.sh	r0,r0[0x0]
800057ae:	51 d0       	stdsp	sp[0x74],r0

800057b0 <act14>:
#include "stdlib.h"
#include "delay.h"
#include "math.h"

void draw_impossible_polygon(uint8_t n, point2D * center, float radius, float rotation);
void act14(uint8_t valid_state, uint8_t * actual_state){
800057b0:	d4 31       	pushm	r0-r7,lr
800057b2:	1a 97       	mov	r7,sp
800057b4:	20 4d       	sub	sp,16
800057b6:	ef 4c ff f4 	st.w	r7[-12],r12
800057ba:	ef 4b ff f8 	st.w	r7[-8],r11
      draw_impossible_polygon( i+3, &center[i], 18-(total_polygons-i), rotation);
    }
    rotation += 1;
    delay_ms(33);
  }
}
800057be:	ef 4d ff fc 	st.w	r7[-4],sp
#include "delay.h"
#include "math.h"

void draw_impossible_polygon(uint8_t n, point2D * center, float radius, float rotation);
void act14(uint8_t valid_state, uint8_t * actual_state){
  et024006_DrawFilledRect(0, 0, ET024006_WIDTH, ET024006_HEIGHT, WHITE);
800057c2:	e0 68 ff ff 	mov	r8,65535
800057c6:	e0 69 00 f0 	mov	r9,240
800057ca:	e0 6a 01 40 	mov	r10,320
800057ce:	30 0b       	mov	r11,0
800057d0:	16 9c       	mov	r12,r11
800057d2:	f0 1f 00 39 	mcall	800058b4 <act14+0x104>
  uint8_t total_polygons = 3;
  point2D center[total_polygons];
800057d6:	20 7d       	sub	sp,28
800057d8:	1a 93       	mov	r3,sp
800057da:	1a 92       	mov	r2,sp
800057dc:	1a 96       	mov	r6,sp
800057de:	e0 64 01 40 	mov	r4,320
  for(int i = 0; i<total_polygons; i++){
    center[i].x = (i+1) * ET024006_WIDTH/(total_polygons+1);
    center[i].y = ET024006_HEIGHT/2;
800057e2:	fc 15 42 f0 	movh	r5,0x42f0
void act14(uint8_t valid_state, uint8_t * actual_state){
  et024006_DrawFilledRect(0, 0, ET024006_WIDTH, ET024006_HEIGHT, WHITE);
  uint8_t total_polygons = 3;
  point2D center[total_polygons];
  for(int i = 0; i<total_polygons; i++){
    center[i].x = (i+1) * ET024006_WIDTH/(total_polygons+1);
800057e6:	08 9c       	mov	r12,r4
800057e8:	58 04       	cp.w	r4,0
800057ea:	f7 bc 05 fd 	sublt	r12,-3
800057ee:	a3 4c       	asr	r12,0x2
800057f0:	f0 1f 00 32 	mcall	800058b8 <act14+0x108>
800057f4:	8d 0c       	st.w	r6[0x0],r12
    center[i].y = ET024006_HEIGHT/2;
800057f6:	8d 15       	st.w	r6[0x4],r5
800057f8:	e8 c4 fe c0 	sub	r4,r4,-320
800057fc:	2f 86       	sub	r6,-8
void draw_impossible_polygon(uint8_t n, point2D * center, float radius, float rotation);
void act14(uint8_t valid_state, uint8_t * actual_state){
  et024006_DrawFilledRect(0, 0, ET024006_WIDTH, ET024006_HEIGHT, WHITE);
  uint8_t total_polygons = 3;
  point2D center[total_polygons];
  for(int i = 0; i<total_polygons; i++){
800057fe:	e0 44 05 00 	cp.w	r4,1280
80005802:	cf 21       	brne	800057e6 <act14+0x36>
80005804:	30 05       	mov	r5,0
80005806:	30 04       	mov	r4,0
    center[i].y = ET024006_HEIGHT/2;
  }
  float rotation = 0.0;
  while(valid_state == *actual_state){
    for(int i = 0; i<total_polygons; i++){
      et024006_DrawFilledRect(center[i].x-(ET024006_WIDTH/total_polygons+1)/2, 0, ET024006_WIDTH/total_polygons+1, ET024006_HEIGHT, WHITE);
80005808:	fc 11 42 54 	movh	r1,0x4254
8000580c:	e0 60 ff ff 	mov	r0,65535
80005810:	c4 68       	rjmp	8000589c <act14+0xec>
void draw_impossible_polygon(uint8_t n, point2D * center, float radius, float rotation);
void act14(uint8_t valid_state, uint8_t * actual_state){
  et024006_DrawFilledRect(0, 0, ET024006_WIDTH, ET024006_HEIGHT, WHITE);
  uint8_t total_polygons = 3;
  point2D center[total_polygons];
  for(int i = 0; i<total_polygons; i++){
80005812:	30 f6       	mov	r6,15
80005814:	ef 44 ff f0 	st.w	r7[-16],r4
    center[i].y = ET024006_HEIGHT/2;
  }
  float rotation = 0.0;
  while(valid_state == *actual_state){
    for(int i = 0; i<total_polygons; i++){
      et024006_DrawFilledRect(center[i].x-(ET024006_WIDTH/total_polygons+1)/2, 0, ET024006_WIDTH/total_polygons+1, ET024006_HEIGHT, WHITE);
80005818:	02 9b       	mov	r11,r1
8000581a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000581e:	e4 09 03 0c 	ld.w	r12,r2[r9]
80005822:	f0 1f 00 27 	mcall	800058bc <act14+0x10c>
80005826:	f0 1f 00 27 	mcall	800058c0 <act14+0x110>
8000582a:	00 98       	mov	r8,r0
8000582c:	e0 69 00 f0 	mov	r9,240
80005830:	36 ba       	mov	r10,107
80005832:	08 9b       	mov	r11,r4
80005834:	5c 7c       	castu.h	r12
80005836:	f0 1f 00 20 	mcall	800058b4 <act14+0x104>
      draw_impossible_polygon( i+3, &center[i], 18-(total_polygons-i), rotation);
8000583a:	0c 9c       	mov	r12,r6
8000583c:	f0 1f 00 1f 	mcall	800058b8 <act14+0x108>
80005840:	0a 99       	mov	r9,r5
80005842:	18 9a       	mov	r10,r12
80005844:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005848:	e6 08 00 0b 	add	r11,r3,r8
8000584c:	ec cc 00 0c 	sub	r12,r6,12
80005850:	f0 1f 00 1d 	mcall	800058c4 <act14+0x114>
80005854:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005858:	2f 89       	sub	r9,-8
8000585a:	ef 49 ff f0 	st.w	r7[-16],r9
8000585e:	2f f6       	sub	r6,-1
    center[i].x = (i+1) * ET024006_WIDTH/(total_polygons+1);
    center[i].y = ET024006_HEIGHT/2;
  }
  float rotation = 0.0;
  while(valid_state == *actual_state){
    for(int i = 0; i<total_polygons; i++){
80005860:	59 89       	cp.w	r9,24
80005862:	cd b1       	brne	80005818 <act14+0x68>
      et024006_DrawFilledRect(center[i].x-(ET024006_WIDTH/total_polygons+1)/2, 0, ET024006_WIDTH/total_polygons+1, ET024006_HEIGHT, WHITE);
      draw_impossible_polygon( i+3, &center[i], 18-(total_polygons-i), rotation);
    }
    rotation += 1;
80005864:	fc 1b 3f 80 	movh	r11,0x3f80
80005868:	0a 9c       	mov	r12,r5
8000586a:	f0 1f 00 18 	mcall	800058c8 <act14+0x118>
8000586e:	18 95       	mov	r5,r12
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005870:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005874:	e6 69 0a e0 	mov	r9,396000
80005878:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000587c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005880:	14 38       	cp.w	r8,r10
80005882:	e0 88 00 08 	brls	80005892 <act14+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005886:	12 38       	cp.w	r8,r9
80005888:	fe 98 ff fa 	brls	8000587c <act14+0xcc>
8000588c:	12 3a       	cp.w	r10,r9
8000588e:	c0 73       	brcs	8000589c <act14+0xec>
80005890:	cf 6b       	rjmp	8000587c <act14+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005892:	12 38       	cp.w	r8,r9
80005894:	e0 8b 00 04 	brhi	8000589c <act14+0xec>
80005898:	12 3a       	cp.w	r10,r9
8000589a:	cf 12       	brcc	8000587c <act14+0xcc>
  for(int i = 0; i<total_polygons; i++){
    center[i].x = (i+1) * ET024006_WIDTH/(total_polygons+1);
    center[i].y = ET024006_HEIGHT/2;
  }
  float rotation = 0.0;
  while(valid_state == *actual_state){
8000589c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800058a0:	13 88       	ld.ub	r8,r9[0x0]
800058a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800058a6:	f2 08 18 00 	cp.b	r8,r9
800058aa:	cb 40       	breq	80005812 <act14+0x62>
      draw_impossible_polygon( i+3, &center[i], 18-(total_polygons-i), rotation);
    }
    rotation += 1;
    delay_ms(33);
  }
}
800058ac:	ee fd ff fc 	ld.w	sp,r7[-4]
800058b0:	2f cd       	sub	sp,-16
800058b2:	d8 32       	popm	r0-r7,pc
800058b4:	80 00       	ld.sh	r0,r0[0x0]
800058b6:	24 7c       	sub	r12,71
800058b8:	80 00       	ld.sh	r0,r0[0x0]
800058ba:	7c 72       	ld.w	r2,lr[0x1c]
800058bc:	80 00       	ld.sh	r0,r0[0x0]
800058be:	7a 14       	ld.w	r4,sp[0x4]
800058c0:	80 00       	ld.sh	r0,r0[0x0]
800058c2:	7c e6       	ld.w	r6,lr[0x38]
800058c4:	80 00       	ld.sh	r0,r0[0x0]
800058c6:	53 ec       	stdsp	sp[0xf8],r12
800058c8:	80 00       	ld.sh	r0,r0[0x0]
800058ca:	7a e4       	ld.w	r4,sp[0x38]

800058cc <main>:
__attribute__ ((__interrupt__));
void buttons_interrupt_routine (void);

// Main function
int main(void)
{
800058cc:	d4 31       	pushm	r0-r7,lr
800058ce:	20 7d       	sub	sp,28
  // Set CPU and PBA clock
  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
800058d0:	30 3a       	mov	r10,3
800058d2:	e0 6b 1b 00 	mov	r11,6912
800058d6:	ea 1b 00 b7 	orh	r11,0xb7
800058da:	30 0c       	mov	r12,0
800058dc:	f0 1f 00 71 	mcall	80005aa0 <main+0x1d4>
  gpio_enable_gpio_pin(LED0_GPIO);
800058e0:	33 bc       	mov	r12,59
800058e2:	f0 1f 00 71 	mcall	80005aa4 <main+0x1d8>
  gpio_enable_gpio_pin(LED1_GPIO);
800058e6:	33 cc       	mov	r12,60
800058e8:	f0 1f 00 6f 	mcall	80005aa4 <main+0x1d8>
  gpio_enable_gpio_pin(LED2_GPIO);
800058ec:	30 5c       	mov	r12,5
800058ee:	f0 1f 00 6e 	mcall	80005aa4 <main+0x1d8>
  gpio_enable_gpio_pin(LED3_GPIO);
800058f2:	30 6c       	mov	r12,6
800058f4:	f0 1f 00 6c 	mcall	80005aa4 <main+0x1d8>
  et024006_Init( FOSC0, FOSC0 );
800058f8:	e0 6b 1b 00 	mov	r11,6912
800058fc:	ea 1b 00 b7 	orh	r11,0xb7
80005900:	16 9c       	mov	r12,r11
80005902:	f0 1f 00 6a 	mcall	80005aa8 <main+0x1dc>

  //board_init();

	Disable_global_interrupt();
80005906:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80005908:	f0 1f 00 69 	mcall	80005aac <main+0x1e0>
	INTC_register_interrupt(&buttons_interrupt_routine, 70, 3);
8000590c:	4e 97       	lddpc	r7,80005ab0 <main+0x1e4>
8000590e:	30 3a       	mov	r10,3
80005910:	34 6b       	mov	r11,70
80005912:	0e 9c       	mov	r12,r7
80005914:	f0 1f 00 68 	mcall	80005ab4 <main+0x1e8>
	INTC_register_interrupt(&buttons_interrupt_routine, 71, 3);
80005918:	30 3a       	mov	r10,3
8000591a:	34 7b       	mov	r11,71
8000591c:	0e 9c       	mov	r12,r7
8000591e:	f0 1f 00 66 	mcall	80005ab4 <main+0x1e8>

	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
80005922:	fa c7 ff ee 	sub	r7,sp,-18
80005926:	30 aa       	mov	r10,10
80005928:	4e 4b       	lddpc	r11,80005ab8 <main+0x1ec>
8000592a:	0e 9c       	mov	r12,r7
8000592c:	f0 1f 00 64 	mcall	80005abc <main+0x1f0>

__attribute__ ((__interrupt__));
void buttons_interrupt_routine (void);

// Main function
int main(void)
80005930:	fa c5 ff e4 	sub	r5,sp,-28

	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
		gpio_enable_gpio_pin(button_ref[i]);
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
80005934:	30 24       	mov	r4,2
	INTC_register_interrupt(&buttons_interrupt_routine, 70, 3);
	INTC_register_interrupt(&buttons_interrupt_routine, 71, 3);

	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
		gpio_enable_gpio_pin(button_ref[i]);
80005936:	0f 26       	ld.uh	r6,r7++
80005938:	0c 9c       	mov	r12,r6
8000593a:	f0 1f 00 5b 	mcall	80005aa4 <main+0x1d8>
		gpio_enable_pin_pull_up(button_ref[i]);
8000593e:	0c 9c       	mov	r12,r6
80005940:	f0 1f 00 60 	mcall	80005ac0 <main+0x1f4>
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
80005944:	08 9b       	mov	r11,r4
80005946:	0c 9c       	mov	r12,r6
80005948:	f0 1f 00 5f 	mcall	80005ac4 <main+0x1f8>
	INTC_init_interrupts();
	INTC_register_interrupt(&buttons_interrupt_routine, 70, 3);
	INTC_register_interrupt(&buttons_interrupt_routine, 71, 3);

	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
8000594c:	0a 37       	cp.w	r7,r5
8000594e:	cf 41       	brne	80005936 <main+0x6a>
		gpio_enable_gpio_pin(button_ref[i]);
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
	}

	Enable_global_interrupt();
80005950:	d5 03       	csrf	0x10
  pwm_opt_t opt = {
    .diva = 0,
    .divb = 0,
    .prea = 0,
    .preb = 0
  };
80005952:	30 08       	mov	r8,0
80005954:	50 08       	stdsp	sp[0x0],r8
80005956:	50 18       	stdsp	sp[0x4],r8
80005958:	50 28       	stdsp	sp[0x8],r8
8000595a:	50 38       	stdsp	sp[0xc],r8
  pwm_init(&opt);
8000595c:	1a 9c       	mov	r12,sp
8000595e:	f0 1f 00 5b 	mcall	80005ac8 <main+0x1fc>
  pwm_channel6.CMR.calg = PWM_MODE_LEFT_ALIGNED;
80005962:	4d bb       	lddpc	r11,80005acc <main+0x200>
80005964:	76 08       	ld.w	r8,r11[0x0]
  pwm_channel6.CMR.cpol = PWM_POLARITY_HIGH; //PWM_POLARITY_LOW;//PWM_POLARITY_HIGH;
  pwm_channel6.CMR.cpd = PWM_UPDATE_DUTY;
80005966:	e0 18 f8 ff 	andl	r8,0xf8ff
  pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
8000596a:	a9 b8       	sbr	r8,0x9
8000596c:	30 19       	mov	r9,1
8000596e:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80005972:	97 08       	st.w	r11[0x0],r8
  pwm_channel_init(6, &pwm_channel6);
80005974:	30 6c       	mov	r12,6
80005976:	f0 1f 00 57 	mcall	80005ad0 <main+0x204>
  pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
8000597a:	34 0c       	mov	r12,64
8000597c:	f0 1f 00 56 	mcall	80005ad4 <main+0x208>
  /* PWM is fed by PBA bus clock which is by default the same
   * as the CPU speed. We set a 0 duty cycle and thus keep the
   * display black*/
  tft_bl_init();
  /* Lets do a nice fade in by increasing the duty cycle */
  while(pwm_channel6.cdty < pwm_channel6.cprd)
80005980:	4d 37       	lddpc	r7,80005acc <main+0x200>
  {
    pwm_channel6.cdty++;
    pwm_channel6.cupd = pwm_channel6.cdty;
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
80005982:	30 66       	mov	r6,6
80005984:	c1 c8       	rjmp	800059bc <main+0xf0>
   * display black*/
  tft_bl_init();
  /* Lets do a nice fade in by increasing the duty cycle */
  while(pwm_channel6.cdty < pwm_channel6.cprd)
  {
    pwm_channel6.cdty++;
80005986:	2f f8       	sub	r8,-1
80005988:	8f 18       	st.w	r7[0x4],r8
    pwm_channel6.cupd = pwm_channel6.cdty;
8000598a:	8f 48       	st.w	r7[0x10],r8
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
8000598c:	0e 9b       	mov	r11,r7
8000598e:	0c 9c       	mov	r12,r6
80005990:	f0 1f 00 52 	mcall	80005ad8 <main+0x20c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005994:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005998:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000599c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800059a0:	14 38       	cp.w	r8,r10
800059a2:	e0 88 00 08 	brls	800059b2 <main+0xe6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800059a6:	12 38       	cp.w	r8,r9
800059a8:	fe 98 ff fa 	brls	8000599c <main+0xd0>
800059ac:	12 3a       	cp.w	r10,r9
800059ae:	c0 73       	brcs	800059bc <main+0xf0>
800059b0:	cf 6b       	rjmp	8000599c <main+0xd0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800059b2:	12 38       	cp.w	r8,r9
800059b4:	e0 8b 00 04 	brhi	800059bc <main+0xf0>
800059b8:	12 3a       	cp.w	r10,r9
800059ba:	cf 12       	brcc	8000599c <main+0xd0>
  /* PWM is fed by PBA bus clock which is by default the same
   * as the CPU speed. We set a 0 duty cycle and thus keep the
   * display black*/
  tft_bl_init();
  /* Lets do a nice fade in by increasing the duty cycle */
  while(pwm_channel6.cdty < pwm_channel6.cprd)
800059bc:	6e 18       	ld.w	r8,r7[0x4]
800059be:	6e 29       	ld.w	r9,r7[0x8]
800059c0:	12 38       	cp.w	r8,r9
800059c2:	ce 23       	brcs	80005986 <main+0xba>
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
    delay_ms(1);
  }
  // Clear the display i.e. make it black
  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
800059c4:	30 08       	mov	r8,0
800059c6:	e0 69 00 f0 	mov	r9,240
800059ca:	e0 6a 01 40 	mov	r10,320
800059ce:	10 9b       	mov	r11,r8
800059d0:	10 9c       	mov	r12,r8
800059d2:	f0 1f 00 43 	mcall	80005adc <main+0x210>

  while(true){
    switch(state){
800059d6:	4c 37       	lddpc	r7,80005ae0 <main+0x214>
800059d8:	4c 36       	lddpc	r6,80005ae4 <main+0x218>
        break;
      case 14:
        act14(14, &state);
        break;
      case 15:
        act19(15, &state);
800059da:	30 f5       	mov	r5,15
        break;
      case 13:
        act13(13, &state);
        break;
      case 14:
        act14(14, &state);
800059dc:	30 e4       	mov	r4,14
        break;
      case 12:
        act12(12, &state);
        break;
      case 13:
        act13(13, &state);
800059de:	30 d3       	mov	r3,13
        break;
      case 11:
        act11(11, &state);
        break;
      case 12:
        act12(12, &state);
800059e0:	30 c2       	mov	r2,12
        break;
      case 10:
        act10(10, &state);
        break;
      case 11:
        act11(11, &state);
800059e2:	30 b1       	mov	r1,11
        break;
      case 9:
        act9(9, &state);
        break;
      case 10:
        act10(10, &state);
800059e4:	30 a0       	mov	r0,10
  }
  // Clear the display i.e. make it black
  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );

  while(true){
    switch(state){
800059e6:	0f 89       	ld.ub	r9,r7[0x0]
800059e8:	f2 c8 00 01 	sub	r8,r9,1
800059ec:	58 e8       	cp.w	r8,14
800059ee:	e0 8b 00 52 	brhi	80005a92 <main+0x1c6>
800059f2:	ec 08 03 2f 	ld.w	pc,r6[r8<<0x2]
      case 1:
        act1(1, &state);
800059f6:	0e 9b       	mov	r11,r7
800059f8:	30 1c       	mov	r12,1
800059fa:	f0 1f 00 3c 	mcall	80005ae8 <main+0x21c>
        break;
800059fe:	cf 4b       	rjmp	800059e6 <main+0x11a>
      case 2:
        act2(2, &state, &btn_pressed);
80005a00:	4b ba       	lddpc	r10,80005aec <main+0x220>
80005a02:	0e 9b       	mov	r11,r7
80005a04:	30 2c       	mov	r12,2
80005a06:	f0 1f 00 3b 	mcall	80005af0 <main+0x224>
        break;
80005a0a:	ce eb       	rjmp	800059e6 <main+0x11a>
      case 3:
        act3(3, &state, &btn_pressed);
80005a0c:	4b 8a       	lddpc	r10,80005aec <main+0x220>
80005a0e:	0e 9b       	mov	r11,r7
80005a10:	30 3c       	mov	r12,3
80005a12:	f0 1f 00 39 	mcall	80005af4 <main+0x228>
        break;
80005a16:	ce 8b       	rjmp	800059e6 <main+0x11a>
      case 4:
        act4(4, &state);
80005a18:	0e 9b       	mov	r11,r7
80005a1a:	30 4c       	mov	r12,4
80005a1c:	f0 1f 00 37 	mcall	80005af8 <main+0x22c>
        break;
80005a20:	ce 3b       	rjmp	800059e6 <main+0x11a>
      case 5:
        act5(5, &state, &btn_pressed);
80005a22:	4b 3a       	lddpc	r10,80005aec <main+0x220>
80005a24:	0e 9b       	mov	r11,r7
80005a26:	30 5c       	mov	r12,5
80005a28:	f0 1f 00 35 	mcall	80005afc <main+0x230>
        break;
80005a2c:	cd db       	rjmp	800059e6 <main+0x11a>
      case 6:
        act6(6, &state);
80005a2e:	0e 9b       	mov	r11,r7
80005a30:	30 6c       	mov	r12,6
80005a32:	f0 1f 00 34 	mcall	80005b00 <main+0x234>
        break;
80005a36:	cd 8b       	rjmp	800059e6 <main+0x11a>
      case 7:
        act7(7, &state);
80005a38:	0e 9b       	mov	r11,r7
80005a3a:	30 7c       	mov	r12,7
80005a3c:	f0 1f 00 32 	mcall	80005b04 <main+0x238>
        break;
80005a40:	cd 3b       	rjmp	800059e6 <main+0x11a>
      case 8:
        act8(8, &state);
80005a42:	0e 9b       	mov	r11,r7
80005a44:	30 8c       	mov	r12,8
80005a46:	f0 1f 00 31 	mcall	80005b08 <main+0x23c>
        break;
80005a4a:	cc eb       	rjmp	800059e6 <main+0x11a>
      case 9:
        act9(9, &state);
80005a4c:	0e 9b       	mov	r11,r7
80005a4e:	30 9c       	mov	r12,9
80005a50:	f0 1f 00 2f 	mcall	80005b0c <main+0x240>
        break;
80005a54:	cc 9b       	rjmp	800059e6 <main+0x11a>
      case 10:
        act10(10, &state);
80005a56:	0e 9b       	mov	r11,r7
80005a58:	00 9c       	mov	r12,r0
80005a5a:	f0 1f 00 2e 	mcall	80005b10 <main+0x244>
        break;
80005a5e:	cc 4b       	rjmp	800059e6 <main+0x11a>
      case 11:
        act11(11, &state);
80005a60:	0e 9b       	mov	r11,r7
80005a62:	02 9c       	mov	r12,r1
80005a64:	f0 1f 00 2c 	mcall	80005b14 <main+0x248>
        break;
80005a68:	cb fb       	rjmp	800059e6 <main+0x11a>
      case 12:
        act12(12, &state);
80005a6a:	0e 9b       	mov	r11,r7
80005a6c:	04 9c       	mov	r12,r2
80005a6e:	f0 1f 00 2b 	mcall	80005b18 <main+0x24c>
        break;
80005a72:	cb ab       	rjmp	800059e6 <main+0x11a>
      case 13:
        act13(13, &state);
80005a74:	0e 9b       	mov	r11,r7
80005a76:	06 9c       	mov	r12,r3
80005a78:	f0 1f 00 29 	mcall	80005b1c <main+0x250>
        break;
80005a7c:	cb 5b       	rjmp	800059e6 <main+0x11a>
      case 14:
        act14(14, &state);
80005a7e:	0e 9b       	mov	r11,r7
80005a80:	08 9c       	mov	r12,r4
80005a82:	f0 1f 00 28 	mcall	80005b20 <main+0x254>
        break;
80005a86:	cb 0b       	rjmp	800059e6 <main+0x11a>
      case 15:
        act19(15, &state);
80005a88:	0e 9b       	mov	r11,r7
80005a8a:	0a 9c       	mov	r12,r5
80005a8c:	f0 1f 00 26 	mcall	80005b24 <main+0x258>
        break;
80005a90:	ca bb       	rjmp	800059e6 <main+0x11a>
      default:
        state = (state + 1) % state_num;
80005a92:	2f f9       	sub	r9,-1
80005a94:	4a 58       	lddpc	r8,80005b28 <main+0x25c>
80005a96:	11 88       	ld.ub	r8,r8[0x0]
80005a98:	f2 08 0c 08 	divs	r8,r9,r8
80005a9c:	ae 89       	st.b	r7[0x0],r9
80005a9e:	ca 4b       	rjmp	800059e6 <main+0x11a>
80005aa0:	80 00       	ld.sh	r0,r0[0x0]
80005aa2:	30 c8       	mov	r8,12
80005aa4:	80 00       	ld.sh	r0,r0[0x0]
80005aa6:	2e 0c       	sub	r12,-32
80005aa8:	80 00       	ld.sh	r0,r0[0x0]
80005aaa:	27 c8       	sub	r8,124
80005aac:	80 00       	ld.sh	r0,r0[0x0]
80005aae:	2f 84       	sub	r4,-8
80005ab0:	80 00       	ld.sh	r0,r0[0x0]
80005ab2:	32 48       	mov	r8,36
80005ab4:	80 00       	ld.sh	r0,r0[0x0]
80005ab6:	2f 04       	sub	r4,-16
80005ab8:	80 02       	ld.sh	r2,r0[0x0]
80005aba:	e8 84 80 00 	brge	80115aba <_data_lma+0xe6fe2>
80005abe:	84 a4       	ld.uh	r4,r2[0x4]
80005ac0:	80 00       	ld.sh	r0,r0[0x0]
80005ac2:	2e 24       	sub	r4,-30
80005ac4:	80 00       	ld.sh	r0,r0[0x0]
80005ac6:	2e 8e       	sub	lr,-24
80005ac8:	80 00       	ld.sh	r0,r0[0x0]
80005aca:	31 54       	mov	r4,21
80005acc:	00 00       	add	r0,r0
80005ace:	00 0c       	add	r12,r0
80005ad0:	80 00       	ld.sh	r0,r0[0x0]
80005ad2:	30 e4       	mov	r4,14
80005ad4:	80 00       	ld.sh	r0,r0[0x0]
80005ad6:	31 1a       	mov	r10,17
80005ad8:	80 00       	ld.sh	r0,r0[0x0]
80005ada:	31 2c       	mov	r12,18
80005adc:	80 00       	ld.sh	r0,r0[0x0]
80005ade:	24 7c       	sub	r12,71
80005ae0:	00 00       	add	r0,r0
80005ae2:	00 08       	add	r8,r0
80005ae4:	80 02       	ld.sh	r2,r0[0x0]
80005ae6:	e8 48 80 00 	cp.w	r8,557056
80005aea:	33 cc       	mov	r12,60
80005aec:	00 00       	add	r0,r0
80005aee:	06 34       	cp.w	r4,r3
80005af0:	80 00       	ld.sh	r0,r0[0x0]
80005af2:	32 e4       	mov	r4,46
80005af4:	80 00       	ld.sh	r0,r0[0x0]
80005af6:	50 a8       	stdsp	sp[0x28],r8
80005af8:	80 00       	ld.sh	r0,r0[0x0]
80005afa:	4e 80       	lddpc	r0,80005c98 <sin+0x34>
80005afc:	80 00       	ld.sh	r0,r0[0x0]
80005afe:	38 7c       	mov	r12,-121
80005b00:	80 00       	ld.sh	r0,r0[0x0]
80005b02:	4d 58       	lddpc	r8,80005c54 <round+0xa0>
80005b04:	80 00       	ld.sh	r0,r0[0x0]
80005b06:	3c b0       	mov	r0,-53
80005b08:	80 00       	ld.sh	r0,r0[0x0]
80005b0a:	34 98       	mov	r8,73
80005b0c:	80 00       	ld.sh	r0,r0[0x0]
80005b0e:	4b c8       	lddpc	r8,80005bfc <round+0x48>
80005b10:	80 00       	ld.sh	r0,r0[0x0]
80005b12:	4b 88       	lddpc	r8,80005bf0 <round+0x3c>
80005b14:	80 00       	ld.sh	r0,r0[0x0]
80005b16:	3f e0       	mov	r0,-2
80005b18:	80 00       	ld.sh	r0,r0[0x0]
80005b1a:	48 08       	lddpc	r8,80005b18 <main+0x24c>
80005b1c:	80 00       	ld.sh	r0,r0[0x0]
80005b1e:	3a 0c       	mov	r12,-96
80005b20:	80 00       	ld.sh	r0,r0[0x0]
80005b22:	57 b0       	stdsp	sp[0x1ec],r0
80005b24:	80 00       	ld.sh	r0,r0[0x0]
80005b26:	49 7c       	lddpc	r12,80005b80 <cos+0x54>
80005b28:	00 00       	add	r0,r0
80005b2a:	00 2c       	rsub	r12,r0

80005b2c <cos>:
80005b2c:	d4 21       	pushm	r4-r7,lr
80005b2e:	20 4d       	sub	sp,16
80005b30:	e0 6e 21 fb 	mov	lr,8699
80005b34:	ea 1e 3f e9 	orh	lr,0x3fe9
80005b38:	14 98       	mov	r8,r10
80005b3a:	16 99       	mov	r9,r11
80005b3c:	16 95       	mov	r5,r11
80005b3e:	14 96       	mov	r6,r10
80005b40:	16 97       	mov	r7,r11
80005b42:	16 94       	mov	r4,r11
80005b44:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80005b48:	1c 3c       	cp.w	r12,lr
80005b4a:	e0 89 00 05 	brgt	80005b54 <cos+0x28>
80005b4e:	30 08       	mov	r8,0
80005b50:	30 09       	mov	r9,0
80005b52:	c1 98       	rjmp	80005b84 <cos+0x58>
80005b54:	e0 65 ff ff 	mov	r5,65535
80005b58:	ea 15 7f ef 	orh	r5,0x7fef
80005b5c:	0a 3c       	cp.w	r12,r5
80005b5e:	e0 8a 00 05 	brle	80005b68 <cos+0x3c>
80005b62:	e0 a0 0b 3d 	rcall	800071dc <__avr32_f64_sub>
80005b66:	c2 58       	rjmp	80005bb0 <cos+0x84>
80005b68:	1a 9c       	mov	r12,sp
80005b6a:	c0 fd       	rcall	80005d88 <__ieee754_rem_pio2>
80005b6c:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
80005b70:	58 1c       	cp.w	r12,1
80005b72:	c0 c0       	breq	80005b8a <cos+0x5e>
80005b74:	58 2c       	cp.w	r12,2
80005b76:	c1 10       	breq	80005b98 <cos+0x6c>
80005b78:	fa e8 00 08 	ld.d	r8,sp[8]
80005b7c:	fa ea 00 00 	ld.d	r10,sp[0]
80005b80:	58 0c       	cp.w	r12,0
80005b82:	c1 41       	brne	80005baa <cos+0x7e>
80005b84:	e0 a0 04 00 	rcall	80006384 <__kernel_cos>
80005b88:	c1 48       	rjmp	80005bb0 <cos+0x84>
80005b8a:	fa e8 00 08 	ld.d	r8,sp[8]
80005b8e:	fa ea 00 00 	ld.d	r10,sp[0]
80005b92:	e0 a0 08 5d 	rcall	80006c4c <__kernel_sin>
80005b96:	c0 78       	rjmp	80005ba4 <cos+0x78>
80005b98:	fa e8 00 08 	ld.d	r8,sp[8]
80005b9c:	fa ea 00 00 	ld.d	r10,sp[0]
80005ba0:	e0 a0 03 f2 	rcall	80006384 <__kernel_cos>
80005ba4:	ee 1b 80 00 	eorh	r11,0x8000
80005ba8:	c0 48       	rjmp	80005bb0 <cos+0x84>
80005baa:	30 1c       	mov	r12,1
80005bac:	e0 a0 08 50 	rcall	80006c4c <__kernel_sin>
80005bb0:	2f cd       	sub	sp,-16
80005bb2:	d8 22       	popm	r4-r7,pc

80005bb4 <round>:
80005bb4:	d4 21       	pushm	r4-r7,lr
80005bb6:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
80005bba:	14 96       	mov	r6,r10
80005bbc:	16 97       	mov	r7,r11
80005bbe:	14 94       	mov	r4,r10
80005bc0:	16 95       	mov	r5,r11
80005bc2:	16 98       	mov	r8,r11
80005bc4:	fc cc 03 ff 	sub	r12,lr,1023
80005bc8:	59 3c       	cp.w	r12,19
80005bca:	e0 89 00 25 	brgt	80005c14 <round+0x60>
80005bce:	58 0c       	cp.w	r12,0
80005bd0:	c0 e4       	brge	80005bec <round+0x38>
80005bd2:	e6 18 80 00 	andh	r8,0x8000,COH
80005bd6:	10 99       	mov	r9,r8
80005bd8:	ea 19 3f f0 	orh	r9,0x3ff0
80005bdc:	5b fc       	cp.w	r12,-1
80005bde:	f2 08 17 00 	moveq	r8,r9
80005be2:	f9 bc 00 00 	moveq	r12,0
80005be6:	f9 bc 01 00 	movne	r12,0
80005bea:	c3 88       	rjmp	80005c5a <round+0xa6>
80005bec:	ee 7a ff ff 	mov	r10,1048575
80005bf0:	f4 0c 08 4a 	asr	r10,r10,r12
80005bf4:	f5 eb 00 0b 	and	r11,r10,r11
80005bf8:	f7 e6 10 09 	or	r9,r11,r6
80005bfc:	c3 10       	breq	80005c5e <round+0xaa>
80005bfe:	e8 69 00 00 	mov	r9,524288
80005c02:	f2 0c 08 4c 	asr	r12,r9,r12
80005c06:	5c da       	com	r10
80005c08:	f8 07 00 08 	add	r8,r12,r7
80005c0c:	30 0c       	mov	r12,0
80005c0e:	f5 e8 00 08 	and	r8,r10,r8
80005c12:	c2 48       	rjmp	80005c5a <round+0xa6>
80005c14:	e0 4c 00 33 	cp.w	r12,51
80005c18:	e0 8a 00 0c 	brle	80005c30 <round+0x7c>
80005c1c:	e0 4c 04 00 	cp.w	r12,1024
80005c20:	c1 f1       	brne	80005c5e <round+0xaa>
80005c22:	14 98       	mov	r8,r10
80005c24:	16 99       	mov	r9,r11
80005c26:	e0 a0 0b a9 	rcall	80007378 <__avr32_f64_add>
80005c2a:	14 96       	mov	r6,r10
80005c2c:	16 97       	mov	r7,r11
80005c2e:	c1 88       	rjmp	80005c5e <round+0xaa>
80005c30:	3f fa       	mov	r10,-1
80005c32:	fc ce 04 13 	sub	lr,lr,1043
80005c36:	f4 0e 0a 4e 	lsr	lr,r10,lr
80005c3a:	fd e6 00 0a 	and	r10,lr,r6
80005c3e:	c1 00       	breq	80005c5e <round+0xaa>
80005c40:	f8 0c 11 33 	rsub	r12,r12,51
80005c44:	30 1a       	mov	r10,1
80005c46:	f4 0c 09 4a 	lsl	r10,r10,r12
80005c4a:	fc 0c 11 ff 	rsub	r12,lr,-1
80005c4e:	0c 0a       	add	r10,r6
80005c50:	0c 3a       	cp.w	r10,r6
80005c52:	f7 b8 03 ff 	sublo	r8,-1
80005c56:	f5 ec 00 0c 	and	r12,r10,r12
80005c5a:	10 97       	mov	r7,r8
80005c5c:	18 96       	mov	r6,r12
80005c5e:	0c 9a       	mov	r10,r6
80005c60:	0e 9b       	mov	r11,r7
80005c62:	d8 22       	popm	r4-r7,pc

80005c64 <sin>:
80005c64:	d4 21       	pushm	r4-r7,lr
80005c66:	20 4d       	sub	sp,16
80005c68:	e0 6e 21 fb 	mov	lr,8699
80005c6c:	ea 1e 3f e9 	orh	lr,0x3fe9
80005c70:	14 98       	mov	r8,r10
80005c72:	16 99       	mov	r9,r11
80005c74:	16 95       	mov	r5,r11
80005c76:	14 96       	mov	r6,r10
80005c78:	16 97       	mov	r7,r11
80005c7a:	16 94       	mov	r4,r11
80005c7c:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80005c80:	1c 3c       	cp.w	r12,lr
80005c82:	e0 89 00 06 	brgt	80005c8e <sin+0x2a>
80005c86:	30 0c       	mov	r12,0
80005c88:	30 08       	mov	r8,0
80005c8a:	30 09       	mov	r9,0
80005c8c:	c1 a8       	rjmp	80005cc0 <sin+0x5c>
80005c8e:	e0 65 ff ff 	mov	r5,65535
80005c92:	ea 15 7f ef 	orh	r5,0x7fef
80005c96:	0a 3c       	cp.w	r12,r5
80005c98:	e0 8a 00 05 	brle	80005ca2 <sin+0x3e>
80005c9c:	e0 a0 0a a0 	rcall	800071dc <__avr32_f64_sub>
80005ca0:	c2 68       	rjmp	80005cec <sin+0x88>
80005ca2:	1a 9c       	mov	r12,sp
80005ca4:	c7 2c       	rcall	80005d88 <__ieee754_rem_pio2>
80005ca6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
80005caa:	58 1c       	cp.w	r12,1
80005cac:	c0 d0       	breq	80005cc6 <sin+0x62>
80005cae:	58 2c       	cp.w	r12,2
80005cb0:	c1 20       	breq	80005cd4 <sin+0x70>
80005cb2:	fa e8 00 08 	ld.d	r8,sp[8]
80005cb6:	fa ea 00 00 	ld.d	r10,sp[0]
80005cba:	58 0c       	cp.w	r12,0
80005cbc:	c1 41       	brne	80005ce4 <sin+0x80>
80005cbe:	30 1c       	mov	r12,1
80005cc0:	e0 a0 07 c6 	rcall	80006c4c <__kernel_sin>
80005cc4:	c1 48       	rjmp	80005cec <sin+0x88>
80005cc6:	fa e8 00 08 	ld.d	r8,sp[8]
80005cca:	fa ea 00 00 	ld.d	r10,sp[0]
80005cce:	e0 a0 03 5b 	rcall	80006384 <__kernel_cos>
80005cd2:	c0 d8       	rjmp	80005cec <sin+0x88>
80005cd4:	30 1c       	mov	r12,1
80005cd6:	fa e8 00 08 	ld.d	r8,sp[8]
80005cda:	fa ea 00 00 	ld.d	r10,sp[0]
80005cde:	e0 a0 07 b7 	rcall	80006c4c <__kernel_sin>
80005ce2:	c0 38       	rjmp	80005ce8 <sin+0x84>
80005ce4:	e0 a0 03 50 	rcall	80006384 <__kernel_cos>
80005ce8:	ee 1b 80 00 	eorh	r11,0x8000
80005cec:	2f cd       	sub	sp,-16
80005cee:	d8 22       	popm	r4-r7,pc

80005cf0 <sqrt>:
80005cf0:	d4 31       	pushm	r0-r7,lr
80005cf2:	20 9d       	sub	sp,36
80005cf4:	33 07       	mov	r7,48
80005cf6:	14 94       	mov	r4,r10
80005cf8:	16 95       	mov	r5,r11
80005cfa:	e0 a0 02 7f 	rcall	800061f8 <__ieee754_sqrt>
80005cfe:	6e 08       	ld.w	r8,r7[0x0]
80005d00:	14 92       	mov	r2,r10
80005d02:	16 93       	mov	r3,r11
80005d04:	5b f8       	cp.w	r8,-1
80005d06:	c3 a0       	breq	80005d7a <sqrt+0x8a>
80005d08:	08 9a       	mov	r10,r4
80005d0a:	0a 9b       	mov	r11,r5
80005d0c:	e0 a0 08 f2 	rcall	80006ef0 <__isnand>
80005d10:	18 96       	mov	r6,r12
80005d12:	c3 41       	brne	80005d7a <sqrt+0x8a>
80005d14:	30 08       	mov	r8,0
80005d16:	30 09       	mov	r9,0
80005d18:	08 9a       	mov	r10,r4
80005d1a:	0a 9b       	mov	r11,r5
80005d1c:	e0 a0 0c 86 	rcall	80007628 <__avr32_f64_cmp_lt>
80005d20:	c2 d0       	breq	80005d7a <sqrt+0x8a>
80005d22:	30 18       	mov	r8,1
80005d24:	50 86       	stdsp	sp[0x20],r6
80005d26:	50 08       	stdsp	sp[0x0],r8
80005d28:	fa e5 00 08 	st.d	sp[8],r4
80005d2c:	49 68       	lddpc	r8,80005d84 <sqrt+0x94>
80005d2e:	fa e5 00 10 	st.d	sp[16],r4
80005d32:	50 18       	stdsp	sp[0x4],r8
80005d34:	6e 07       	ld.w	r7,r7[0x0]
80005d36:	58 07       	cp.w	r7,0
80005d38:	c0 61       	brne	80005d44 <sqrt+0x54>
80005d3a:	30 08       	mov	r8,0
80005d3c:	30 09       	mov	r9,0
80005d3e:	fa e9 00 18 	st.d	sp[24],r8
80005d42:	c0 b8       	rjmp	80005d58 <sqrt+0x68>
80005d44:	30 08       	mov	r8,0
80005d46:	30 09       	mov	r9,0
80005d48:	10 9a       	mov	r10,r8
80005d4a:	12 9b       	mov	r11,r9
80005d4c:	e0 a0 0c d6 	rcall	800076f8 <__avr32_f64_div>
80005d50:	fa eb 00 18 	st.d	sp[24],r10
80005d54:	58 27       	cp.w	r7,2
80005d56:	c0 50       	breq	80005d60 <sqrt+0x70>
80005d58:	1a 9c       	mov	r12,sp
80005d5a:	e0 a0 08 d9 	rcall	80006f0c <matherr>
80005d5e:	c0 51       	brne	80005d68 <sqrt+0x78>
80005d60:	e0 a0 11 78 	rcall	80008050 <__errno>
80005d64:	32 18       	mov	r8,33
80005d66:	99 08       	st.w	r12[0x0],r8
80005d68:	40 88       	lddsp	r8,sp[0x20]
80005d6a:	58 08       	cp.w	r8,0
80005d6c:	c0 50       	breq	80005d76 <sqrt+0x86>
80005d6e:	e0 a0 11 71 	rcall	80008050 <__errno>
80005d72:	40 88       	lddsp	r8,sp[0x20]
80005d74:	99 08       	st.w	r12[0x0],r8
80005d76:	fa e2 00 18 	ld.d	r2,sp[24]
80005d7a:	04 9a       	mov	r10,r2
80005d7c:	06 9b       	mov	r11,r3
80005d7e:	2f 7d       	sub	sp,-36
80005d80:	d8 32       	popm	r0-r7,pc
80005d82:	d7 03       	nop
80005d84:	80 02       	ld.sh	r2,r0[0x0]
80005d86:	e8 90 d4 31 	breq	801405e8 <_data_lma+0x111b10>

80005d88 <__ieee754_rem_pio2>:
80005d88:	d4 31       	pushm	r0-r7,lr
80005d8a:	20 ad       	sub	sp,40
80005d8c:	50 3b       	stdsp	sp[0xc],r11
80005d8e:	18 96       	mov	r6,r12
80005d90:	14 98       	mov	r8,r10
80005d92:	16 99       	mov	r9,r11
80005d94:	14 92       	mov	r2,r10
80005d96:	16 93       	mov	r3,r11
80005d98:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
80005d9c:	e0 6c 21 fb 	mov	r12,8699
80005da0:	ea 1c 3f e9 	orh	r12,0x3fe9
80005da4:	18 35       	cp.w	r5,r12
80005da6:	e0 89 00 0b 	brgt	80005dbc <__ieee754_rem_pio2+0x34>
80005daa:	ec e9 00 00 	st.d	r6[0],r8
80005dae:	30 07       	mov	r7,0
80005db0:	30 08       	mov	r8,0
80005db2:	30 09       	mov	r9,0
80005db4:	ec e9 00 08 	st.d	r6[8],r8
80005db8:	e0 8f 02 1a 	bral	800061ec <__ieee754_rem_pio2+0x464>
80005dbc:	e0 6c d9 7b 	mov	r12,55675
80005dc0:	ea 1c 40 02 	orh	r12,0x4002
80005dc4:	18 35       	cp.w	r5,r12
80005dc6:	e0 89 00 b6 	brgt	80005f32 <__ieee754_rem_pio2+0x1aa>
80005dca:	58 0b       	cp.w	r11,0
80005dcc:	e0 8a 00 59 	brle	80005e7e <__ieee754_rem_pio2+0xf6>
80005dd0:	fc 18 54 40 	movh	r8,0x5440
80005dd4:	e0 69 21 fb 	mov	r9,8699
80005dd8:	ea 19 3f f9 	orh	r9,0x3ff9
80005ddc:	e0 a0 0a 00 	rcall	800071dc <__avr32_f64_sub>
80005de0:	e0 68 21 fb 	mov	r8,8699
80005de4:	ea 18 3f f9 	orh	r8,0x3ff9
80005de8:	14 92       	mov	r2,r10
80005dea:	16 93       	mov	r3,r11
80005dec:	10 35       	cp.w	r5,r8
80005dee:	c1 e0       	breq	80005e2a <__ieee754_rem_pio2+0xa2>
80005df0:	e0 68 63 31 	mov	r8,25393
80005df4:	ea 18 1a 62 	orh	r8,0x1a62
80005df8:	e0 69 b4 61 	mov	r9,46177
80005dfc:	ea 19 3d d0 	orh	r9,0x3dd0
80005e00:	e0 a0 09 ee 	rcall	800071dc <__avr32_f64_sub>
80005e04:	14 94       	mov	r4,r10
80005e06:	16 95       	mov	r5,r11
80005e08:	08 98       	mov	r8,r4
80005e0a:	0a 99       	mov	r9,r5
80005e0c:	04 9a       	mov	r10,r2
80005e0e:	06 9b       	mov	r11,r3
80005e10:	ec e5 00 00 	st.d	r6[0],r4
80005e14:	e0 a0 09 e4 	rcall	800071dc <__avr32_f64_sub>
80005e18:	e0 68 63 31 	mov	r8,25393
80005e1c:	ea 18 1a 62 	orh	r8,0x1a62
80005e20:	e0 69 b4 61 	mov	r9,46177
80005e24:	ea 19 3d d0 	orh	r9,0x3dd0
80005e28:	c2 78       	rjmp	80005e76 <__ieee754_rem_pio2+0xee>
80005e2a:	fc 18 1a 60 	movh	r8,0x1a60
80005e2e:	e0 69 b4 61 	mov	r9,46177
80005e32:	ea 19 3d d0 	orh	r9,0x3dd0
80005e36:	e0 a0 09 d3 	rcall	800071dc <__avr32_f64_sub>
80005e3a:	e0 68 70 73 	mov	r8,28787
80005e3e:	ea 18 2e 03 	orh	r8,0x2e03
80005e42:	14 94       	mov	r4,r10
80005e44:	16 95       	mov	r5,r11
80005e46:	e0 69 19 8a 	mov	r9,6538
80005e4a:	ea 19 3b a3 	orh	r9,0x3ba3
80005e4e:	e0 a0 09 c7 	rcall	800071dc <__avr32_f64_sub>
80005e52:	14 92       	mov	r2,r10
80005e54:	16 93       	mov	r3,r11
80005e56:	04 98       	mov	r8,r2
80005e58:	06 99       	mov	r9,r3
80005e5a:	08 9a       	mov	r10,r4
80005e5c:	0a 9b       	mov	r11,r5
80005e5e:	ec e3 00 00 	st.d	r6[0],r2
80005e62:	e0 a0 09 bd 	rcall	800071dc <__avr32_f64_sub>
80005e66:	e0 68 70 73 	mov	r8,28787
80005e6a:	ea 18 2e 03 	orh	r8,0x2e03
80005e6e:	e0 69 19 8a 	mov	r9,6538
80005e72:	ea 19 3b a3 	orh	r9,0x3ba3
80005e76:	30 17       	mov	r7,1
80005e78:	e0 a0 09 b2 	rcall	800071dc <__avr32_f64_sub>
80005e7c:	c3 08       	rjmp	80005edc <__ieee754_rem_pio2+0x154>
80005e7e:	fc 18 54 40 	movh	r8,0x5440
80005e82:	e0 69 21 fb 	mov	r9,8699
80005e86:	ea 19 3f f9 	orh	r9,0x3ff9
80005e8a:	e0 a0 0a 77 	rcall	80007378 <__avr32_f64_add>
80005e8e:	e0 6c 21 fb 	mov	r12,8699
80005e92:	ea 1c 3f f9 	orh	r12,0x3ff9
80005e96:	14 92       	mov	r2,r10
80005e98:	16 93       	mov	r3,r11
80005e9a:	18 35       	cp.w	r5,r12
80005e9c:	c2 40       	breq	80005ee4 <__ieee754_rem_pio2+0x15c>
80005e9e:	e0 68 63 31 	mov	r8,25393
80005ea2:	ea 18 1a 62 	orh	r8,0x1a62
80005ea6:	e0 69 b4 61 	mov	r9,46177
80005eaa:	ea 19 3d d0 	orh	r9,0x3dd0
80005eae:	e0 a0 0a 65 	rcall	80007378 <__avr32_f64_add>
80005eb2:	14 94       	mov	r4,r10
80005eb4:	16 95       	mov	r5,r11
80005eb6:	08 98       	mov	r8,r4
80005eb8:	0a 99       	mov	r9,r5
80005eba:	04 9a       	mov	r10,r2
80005ebc:	06 9b       	mov	r11,r3
80005ebe:	ec e5 00 00 	st.d	r6[0],r4
80005ec2:	e0 a0 09 8d 	rcall	800071dc <__avr32_f64_sub>
80005ec6:	e0 68 63 31 	mov	r8,25393
80005eca:	ea 18 1a 62 	orh	r8,0x1a62
80005ece:	e0 69 b4 61 	mov	r9,46177
80005ed2:	ea 19 3d d0 	orh	r9,0x3dd0
80005ed6:	3f f7       	mov	r7,-1
80005ed8:	e0 a0 0a 50 	rcall	80007378 <__avr32_f64_add>
80005edc:	ec eb 00 08 	st.d	r6[8],r10
80005ee0:	e0 8f 01 86 	bral	800061ec <__ieee754_rem_pio2+0x464>
80005ee4:	fc 18 1a 60 	movh	r8,0x1a60
80005ee8:	e0 69 b4 61 	mov	r9,46177
80005eec:	ea 19 3d d0 	orh	r9,0x3dd0
80005ef0:	e0 a0 0a 44 	rcall	80007378 <__avr32_f64_add>
80005ef4:	e0 68 70 73 	mov	r8,28787
80005ef8:	ea 18 2e 03 	orh	r8,0x2e03
80005efc:	14 94       	mov	r4,r10
80005efe:	16 95       	mov	r5,r11
80005f00:	e0 69 19 8a 	mov	r9,6538
80005f04:	ea 19 3b a3 	orh	r9,0x3ba3
80005f08:	e0 a0 0a 38 	rcall	80007378 <__avr32_f64_add>
80005f0c:	14 92       	mov	r2,r10
80005f0e:	16 93       	mov	r3,r11
80005f10:	04 98       	mov	r8,r2
80005f12:	06 99       	mov	r9,r3
80005f14:	08 9a       	mov	r10,r4
80005f16:	0a 9b       	mov	r11,r5
80005f18:	ec e3 00 00 	st.d	r6[0],r2
80005f1c:	e0 a0 09 60 	rcall	800071dc <__avr32_f64_sub>
80005f20:	e0 68 70 73 	mov	r8,28787
80005f24:	ea 18 2e 03 	orh	r8,0x2e03
80005f28:	e0 69 19 8a 	mov	r9,6538
80005f2c:	ea 19 3b a3 	orh	r9,0x3ba3
80005f30:	cd 3b       	rjmp	80005ed6 <__ieee754_rem_pio2+0x14e>
80005f32:	e0 6c 21 fb 	mov	r12,8699
80005f36:	ea 1c 41 39 	orh	r12,0x4139
80005f3a:	18 35       	cp.w	r5,r12
80005f3c:	e0 89 00 f4 	brgt	80006124 <__ieee754_rem_pio2+0x39c>
80005f40:	e0 a0 07 44 	rcall	80006dc8 <fabs>
80005f44:	e0 68 c8 83 	mov	r8,51331
80005f48:	ea 18 6d c9 	orh	r8,0x6dc9
80005f4c:	14 92       	mov	r2,r10
80005f4e:	16 93       	mov	r3,r11
80005f50:	e0 69 5f 30 	mov	r9,24368
80005f54:	ea 19 3f e4 	orh	r9,0x3fe4
80005f58:	e0 a0 08 56 	rcall	80007004 <__avr32_f64_mul>
80005f5c:	30 08       	mov	r8,0
80005f5e:	fc 19 3f e0 	movh	r9,0x3fe0
80005f62:	e0 a0 0a 0b 	rcall	80007378 <__avr32_f64_add>
80005f66:	e0 a0 0a 93 	rcall	8000748c <__avr32_f64_to_s32>
80005f6a:	18 97       	mov	r7,r12
80005f6c:	e0 a0 0a a7 	rcall	800074ba <__avr32_s32_to_f64>
80005f70:	fc 18 54 40 	movh	r8,0x5440
80005f74:	e0 69 21 fb 	mov	r9,8699
80005f78:	ea 19 bf f9 	orh	r9,0xbff9
80005f7c:	fa eb 00 04 	st.d	sp[4],r10
80005f80:	e0 a0 08 42 	rcall	80007004 <__avr32_f64_mul>
80005f84:	14 98       	mov	r8,r10
80005f86:	16 99       	mov	r9,r11
80005f88:	04 9a       	mov	r10,r2
80005f8a:	06 9b       	mov	r11,r3
80005f8c:	e0 a0 09 f6 	rcall	80007378 <__avr32_f64_add>
80005f90:	e0 68 63 31 	mov	r8,25393
80005f94:	ea 18 1a 62 	orh	r8,0x1a62
80005f98:	14 92       	mov	r2,r10
80005f9a:	16 93       	mov	r3,r11
80005f9c:	e0 69 b4 61 	mov	r9,46177
80005fa0:	ea 19 3d d0 	orh	r9,0x3dd0
80005fa4:	fa ea 00 04 	ld.d	r10,sp[4]
80005fa8:	e0 a0 08 2e 	rcall	80007004 <__avr32_f64_mul>
80005fac:	14 90       	mov	r0,r10
80005fae:	16 91       	mov	r1,r11
80005fb0:	59 f7       	cp.w	r7,31
80005fb2:	e0 89 00 0a 	brgt	80005fc6 <__ieee754_rem_pio2+0x23e>
80005fb6:	ee c9 00 01 	sub	r9,r7,1
80005fba:	4d a8       	lddpc	r8,80006120 <__ieee754_rem_pio2+0x398>
80005fbc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80005fc0:	10 35       	cp.w	r5,r8
80005fc2:	e0 81 00 8b 	brne	800060d8 <__ieee754_rem_pio2+0x350>
80005fc6:	00 98       	mov	r8,r0
80005fc8:	02 99       	mov	r9,r1
80005fca:	04 9a       	mov	r10,r2
80005fcc:	06 9b       	mov	r11,r3
80005fce:	e0 a0 09 07 	rcall	800071dc <__avr32_f64_sub>
80005fd2:	ec eb 00 00 	st.d	r6[0],r10
80005fd6:	ea 0c 14 14 	asr	r12,r5,0x14
80005fda:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
80005fde:	f8 0b 01 0b 	sub	r11,r12,r11
80005fe2:	59 0b       	cp.w	r11,16
80005fe4:	e0 8a 00 82 	brle	800060e8 <__ieee754_rem_pio2+0x360>
80005fe8:	50 0c       	stdsp	sp[0x0],r12
80005fea:	fc 18 1a 60 	movh	r8,0x1a60
80005fee:	e0 69 b4 61 	mov	r9,46177
80005ff2:	ea 19 3d d0 	orh	r9,0x3dd0
80005ff6:	fa ea 00 04 	ld.d	r10,sp[4]
80005ffa:	e0 a0 08 05 	rcall	80007004 <__avr32_f64_mul>
80005ffe:	16 91       	mov	r1,r11
80006000:	14 90       	mov	r0,r10
80006002:	14 98       	mov	r8,r10
80006004:	02 99       	mov	r9,r1
80006006:	04 9a       	mov	r10,r2
80006008:	06 9b       	mov	r11,r3
8000600a:	e0 a0 08 e9 	rcall	800071dc <__avr32_f64_sub>
8000600e:	16 95       	mov	r5,r11
80006010:	14 98       	mov	r8,r10
80006012:	14 94       	mov	r4,r10
80006014:	0a 99       	mov	r9,r5
80006016:	04 9a       	mov	r10,r2
80006018:	06 9b       	mov	r11,r3
8000601a:	e0 a0 08 e1 	rcall	800071dc <__avr32_f64_sub>
8000601e:	00 98       	mov	r8,r0
80006020:	02 99       	mov	r9,r1
80006022:	e0 a0 08 dd 	rcall	800071dc <__avr32_f64_sub>
80006026:	e0 68 70 73 	mov	r8,28787
8000602a:	ea 18 2e 03 	orh	r8,0x2e03
8000602e:	14 92       	mov	r2,r10
80006030:	16 93       	mov	r3,r11
80006032:	e0 69 19 8a 	mov	r9,6538
80006036:	ea 19 3b a3 	orh	r9,0x3ba3
8000603a:	fa ea 00 04 	ld.d	r10,sp[4]
8000603e:	e0 a0 07 e3 	rcall	80007004 <__avr32_f64_mul>
80006042:	04 98       	mov	r8,r2
80006044:	06 99       	mov	r9,r3
80006046:	e0 a0 08 cb 	rcall	800071dc <__avr32_f64_sub>
8000604a:	16 91       	mov	r1,r11
8000604c:	14 98       	mov	r8,r10
8000604e:	14 90       	mov	r0,r10
80006050:	02 99       	mov	r9,r1
80006052:	08 9a       	mov	r10,r4
80006054:	0a 9b       	mov	r11,r5
80006056:	e0 a0 08 c3 	rcall	800071dc <__avr32_f64_sub>
8000605a:	ec eb 00 00 	st.d	r6[0],r10
8000605e:	40 0c       	lddsp	r12,sp[0x0]
80006060:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
80006064:	16 1c       	sub	r12,r11
80006066:	e0 4c 00 31 	cp.w	r12,49
8000606a:	e0 89 00 05 	brgt	80006074 <__ieee754_rem_pio2+0x2ec>
8000606e:	08 92       	mov	r2,r4
80006070:	0a 93       	mov	r3,r5
80006072:	c3 b8       	rjmp	800060e8 <__ieee754_rem_pio2+0x360>
80006074:	fc 18 2e 00 	movh	r8,0x2e00
80006078:	e0 69 19 8a 	mov	r9,6538
8000607c:	ea 19 3b a3 	orh	r9,0x3ba3
80006080:	fa ea 00 04 	ld.d	r10,sp[4]
80006084:	e0 a0 07 c0 	rcall	80007004 <__avr32_f64_mul>
80006088:	16 91       	mov	r1,r11
8000608a:	14 90       	mov	r0,r10
8000608c:	14 98       	mov	r8,r10
8000608e:	02 99       	mov	r9,r1
80006090:	08 9a       	mov	r10,r4
80006092:	0a 9b       	mov	r11,r5
80006094:	e0 a0 08 a4 	rcall	800071dc <__avr32_f64_sub>
80006098:	14 98       	mov	r8,r10
8000609a:	16 93       	mov	r3,r11
8000609c:	14 92       	mov	r2,r10
8000609e:	06 99       	mov	r9,r3
800060a0:	08 9a       	mov	r10,r4
800060a2:	0a 9b       	mov	r11,r5
800060a4:	e0 a0 08 9c 	rcall	800071dc <__avr32_f64_sub>
800060a8:	00 98       	mov	r8,r0
800060aa:	02 99       	mov	r9,r1
800060ac:	e0 a0 08 98 	rcall	800071dc <__avr32_f64_sub>
800060b0:	e0 68 49 c1 	mov	r8,18881
800060b4:	ea 18 25 20 	orh	r8,0x2520
800060b8:	14 94       	mov	r4,r10
800060ba:	16 95       	mov	r5,r11
800060bc:	e0 69 83 9a 	mov	r9,33690
800060c0:	ea 19 39 7b 	orh	r9,0x397b
800060c4:	fa ea 00 04 	ld.d	r10,sp[4]
800060c8:	e0 a0 07 9e 	rcall	80007004 <__avr32_f64_mul>
800060cc:	08 98       	mov	r8,r4
800060ce:	0a 99       	mov	r9,r5
800060d0:	e0 a0 08 86 	rcall	800071dc <__avr32_f64_sub>
800060d4:	14 90       	mov	r0,r10
800060d6:	16 91       	mov	r1,r11
800060d8:	00 98       	mov	r8,r0
800060da:	02 99       	mov	r9,r1
800060dc:	04 9a       	mov	r10,r2
800060de:	06 9b       	mov	r11,r3
800060e0:	e0 a0 08 7e 	rcall	800071dc <__avr32_f64_sub>
800060e4:	ec eb 00 00 	st.d	r6[0],r10
800060e8:	ec e8 00 00 	ld.d	r8,r6[0]
800060ec:	04 9a       	mov	r10,r2
800060ee:	06 9b       	mov	r11,r3
800060f0:	e0 a0 08 76 	rcall	800071dc <__avr32_f64_sub>
800060f4:	00 98       	mov	r8,r0
800060f6:	ec c5 ff f8 	sub	r5,r6,-8
800060fa:	02 99       	mov	r9,r1
800060fc:	e0 a0 08 70 	rcall	800071dc <__avr32_f64_sub>
80006100:	ea eb 00 00 	st.d	r5[0],r10
80006104:	40 38       	lddsp	r8,sp[0xc]
80006106:	58 08       	cp.w	r8,0
80006108:	c7 24       	brge	800061ec <__ieee754_rem_pio2+0x464>
8000610a:	6c 08       	ld.w	r8,r6[0x0]
8000610c:	ee 18 80 00 	eorh	r8,0x8000
80006110:	8d 08       	st.w	r6[0x0],r8
80006112:	5c 37       	neg	r7
80006114:	6a 08       	ld.w	r8,r5[0x0]
80006116:	ee 18 80 00 	eorh	r8,0x8000
8000611a:	8b 08       	st.w	r5[0x0],r8
8000611c:	c6 88       	rjmp	800061ec <__ieee754_rem_pio2+0x464>
8000611e:	d7 03       	nop
80006120:	80 02       	ld.sh	r2,r0[0x0]
80006122:	e8 98 e0 6c 	brls	801421fa <_data_lma+0x113722>
80006126:	ff ff ea 1c 	st.wqs	pc[0x70],pc
8000612a:	7f ef       	ld.w	pc,pc[0x78]
8000612c:	18 35       	cp.w	r5,r12
8000612e:	e0 8a 00 08 	brle	8000613e <__ieee754_rem_pio2+0x3b6>
80006132:	30 07       	mov	r7,0
80006134:	e0 a0 08 54 	rcall	800071dc <__avr32_f64_sub>
80006138:	ec eb 00 00 	st.d	r6[0],r10
8000613c:	cd 0a       	rjmp	80005edc <__ieee754_rem_pio2+0x154>
8000613e:	ea 03 14 14 	asr	r3,r5,0x14
80006142:	e6 c3 04 16 	sub	r3,r3,1046
80006146:	e6 08 15 14 	lsl	r8,r3,0x14
8000614a:	ea 08 01 01 	sub	r1,r5,r8
8000614e:	02 9b       	mov	r11,r1
80006150:	e0 a0 09 9e 	rcall	8000748c <__avr32_f64_to_s32>
80006154:	e0 a0 09 b3 	rcall	800074ba <__avr32_s32_to_f64>
80006158:	14 94       	mov	r4,r10
8000615a:	16 95       	mov	r5,r11
8000615c:	08 98       	mov	r8,r4
8000615e:	0a 99       	mov	r9,r5
80006160:	fa e5 00 10 	st.d	sp[16],r4
80006164:	02 9b       	mov	r11,r1
80006166:	04 9a       	mov	r10,r2
80006168:	e0 a0 08 3a 	rcall	800071dc <__avr32_f64_sub>
8000616c:	30 08       	mov	r8,0
8000616e:	fc 19 41 70 	movh	r9,0x4170
80006172:	e0 a0 07 49 	rcall	80007004 <__avr32_f64_mul>
80006176:	14 90       	mov	r0,r10
80006178:	16 91       	mov	r1,r11
8000617a:	e0 a0 09 89 	rcall	8000748c <__avr32_f64_to_s32>
8000617e:	e0 a0 09 9e 	rcall	800074ba <__avr32_s32_to_f64>
80006182:	16 95       	mov	r5,r11
80006184:	14 94       	mov	r4,r10
80006186:	0a 99       	mov	r9,r5
80006188:	08 98       	mov	r8,r4
8000618a:	fa e5 00 18 	st.d	sp[24],r4
8000618e:	00 9a       	mov	r10,r0
80006190:	02 9b       	mov	r11,r1
80006192:	e0 a0 08 25 	rcall	800071dc <__avr32_f64_sub>
80006196:	30 08       	mov	r8,0
80006198:	fc 19 41 70 	movh	r9,0x4170
8000619c:	30 35       	mov	r5,3
8000619e:	e0 a0 07 33 	rcall	80007004 <__avr32_f64_mul>
800061a2:	fa c7 ff d8 	sub	r7,sp,-40
800061a6:	af 2b       	st.d	--r7,r10
800061a8:	ee ea 00 00 	ld.d	r10,r7[0]
800061ac:	0a 91       	mov	r1,r5
800061ae:	20 87       	sub	r7,8
800061b0:	20 15       	sub	r5,1
800061b2:	30 08       	mov	r8,0
800061b4:	30 09       	mov	r9,0
800061b6:	e0 a0 09 f2 	rcall	8000759a <__avr32_f64_cmp_eq>
800061ba:	cf 71       	brne	800061a8 <__ieee754_rem_pio2+0x420>
800061bc:	48 e8       	lddpc	r8,800061f4 <__ieee754_rem_pio2+0x46c>
800061be:	02 99       	mov	r9,r1
800061c0:	1a d8       	st.w	--sp,r8
800061c2:	06 9a       	mov	r10,r3
800061c4:	30 28       	mov	r8,2
800061c6:	fa cc ff ec 	sub	r12,sp,-20
800061ca:	0c 9b       	mov	r11,r6
800061cc:	cd 0d       	rcall	8000656c <__kernel_rem_pio2>
800061ce:	2f fd       	sub	sp,-4
800061d0:	18 97       	mov	r7,r12
800061d2:	40 38       	lddsp	r8,sp[0xc]
800061d4:	58 08       	cp.w	r8,0
800061d6:	c0 b4       	brge	800061ec <__ieee754_rem_pio2+0x464>
800061d8:	6c 08       	ld.w	r8,r6[0x0]
800061da:	ee 18 80 00 	eorh	r8,0x8000
800061de:	8d 08       	st.w	r6[0x0],r8
800061e0:	5c 37       	neg	r7
800061e2:	2f 86       	sub	r6,-8
800061e4:	6c 08       	ld.w	r8,r6[0x0]
800061e6:	ee 18 80 00 	eorh	r8,0x8000
800061ea:	8d 08       	st.w	r6[0x0],r8
800061ec:	0e 9c       	mov	r12,r7
800061ee:	2f 6d       	sub	sp,-40
800061f0:	d8 32       	popm	r0-r7,pc
800061f2:	d7 03       	nop
800061f4:	80 02       	ld.sh	r2,r0[0x0]
800061f6:	e9 18 d4 31 	ld.uh	r8,r4[-11215]

800061f8 <__ieee754_sqrt>:
800061f8:	d4 31       	pushm	r0-r7,lr
800061fa:	fc 1e 7f f0 	movh	lr,0x7ff0
800061fe:	16 9c       	mov	r12,r11
80006200:	14 96       	mov	r6,r10
80006202:	16 97       	mov	r7,r11
80006204:	14 94       	mov	r4,r10
80006206:	16 95       	mov	r5,r11
80006208:	16 99       	mov	r9,r11
8000620a:	14 98       	mov	r8,r10
8000620c:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
80006210:	1c 3c       	cp.w	r12,lr
80006212:	c0 c1       	brne	8000622a <__ieee754_sqrt+0x32>
80006214:	14 98       	mov	r8,r10
80006216:	16 99       	mov	r9,r11
80006218:	e0 a0 06 f6 	rcall	80007004 <__avr32_f64_mul>
8000621c:	14 98       	mov	r8,r10
8000621e:	16 99       	mov	r9,r11
80006220:	0c 9a       	mov	r10,r6
80006222:	0e 9b       	mov	r11,r7
80006224:	e0 a0 08 aa 	rcall	80007378 <__avr32_f64_add>
80006228:	c1 38       	rjmp	8000624e <__ieee754_sqrt+0x56>
8000622a:	58 0b       	cp.w	r11,0
8000622c:	e0 89 00 14 	brgt	80006254 <__ieee754_sqrt+0x5c>
80006230:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80006234:	14 4c       	or	r12,r10
80006236:	e0 80 00 a3 	breq	8000637c <__ieee754_sqrt+0x184>
8000623a:	58 0b       	cp.w	r11,0
8000623c:	c0 c0       	breq	80006254 <__ieee754_sqrt+0x5c>
8000623e:	14 98       	mov	r8,r10
80006240:	16 99       	mov	r9,r11
80006242:	e0 a0 07 cd 	rcall	800071dc <__avr32_f64_sub>
80006246:	14 98       	mov	r8,r10
80006248:	16 99       	mov	r9,r11
8000624a:	e0 a0 0a 57 	rcall	800076f8 <__avr32_f64_div>
8000624e:	14 96       	mov	r6,r10
80006250:	16 97       	mov	r7,r11
80006252:	c9 58       	rjmp	8000637c <__ieee754_sqrt+0x184>
80006254:	f2 0a 14 14 	asr	r10,r9,0x14
80006258:	c0 60       	breq	80006264 <__ieee754_sqrt+0x6c>
8000625a:	c1 88       	rjmp	8000628a <__ieee754_sqrt+0x92>
8000625c:	f0 09 16 0b 	lsr	r9,r8,0xb
80006260:	21 5a       	sub	r10,21
80006262:	b5 78       	lsl	r8,0x15
80006264:	58 09       	cp.w	r9,0
80006266:	cf b0       	breq	8000625c <__ieee754_sqrt+0x64>
80006268:	30 0b       	mov	r11,0
8000626a:	c0 38       	rjmp	80006270 <__ieee754_sqrt+0x78>
8000626c:	a1 79       	lsl	r9,0x1
8000626e:	2f fb       	sub	r11,-1
80006270:	ed b9 00 14 	bld	r9,0x14
80006274:	cf c1       	brne	8000626c <__ieee754_sqrt+0x74>
80006276:	2f fa       	sub	r10,-1
80006278:	f6 0c 11 20 	rsub	r12,r11,32
8000627c:	16 1a       	sub	r10,r11
8000627e:	f0 0c 0a 4c 	lsr	r12,r8,r12
80006282:	f0 0b 09 48 	lsl	r8,r8,r11
80006286:	f9 e9 10 09 	or	r9,r12,r9
8000628a:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000628e:	f4 c6 03 ff 	sub	r6,r10,1023
80006292:	b5 a9       	sbr	r9,0x14
80006294:	ed b6 00 00 	bld	r6,0x0
80006298:	c0 61       	brne	800062a4 <__ieee754_sqrt+0xac>
8000629a:	f0 0a 16 1f 	lsr	r10,r8,0x1f
8000629e:	a1 78       	lsl	r8,0x1
800062a0:	f4 09 00 19 	add	r9,r10,r9<<0x1
800062a4:	30 07       	mov	r7,0
800062a6:	f0 0a 15 01 	lsl	r10,r8,0x1
800062aa:	0e 9c       	mov	r12,r7
800062ac:	bf 98       	lsr	r8,0x1f
800062ae:	fc 1b 00 20 	movh	r11,0x20
800062b2:	f0 09 00 18 	add	r8,r8,r9<<0x1
800062b6:	0e 99       	mov	r9,r7
800062b8:	f2 0b 00 0e 	add	lr,r9,r11
800062bc:	2f f7       	sub	r7,-1
800062be:	10 3e       	cp.w	lr,r8
800062c0:	f1 de ea 18 	suble	r8,r8,lr
800062c4:	f9 db ea 0c 	addle	r12,r12,r11
800062c8:	fd db ea 09 	addle	r9,lr,r11
800062cc:	f4 0e 16 1f 	lsr	lr,r10,0x1f
800062d0:	a1 9b       	lsr	r11,0x1
800062d2:	fc 08 00 18 	add	r8,lr,r8<<0x1
800062d6:	a1 7a       	lsl	r10,0x1
800062d8:	59 67       	cp.w	r7,22
800062da:	ce f1       	brne	800062b8 <__ieee754_sqrt+0xc0>
800062dc:	30 07       	mov	r7,0
800062de:	fc 15 80 00 	movh	r5,0x8000
800062e2:	0e 9b       	mov	r11,r7
800062e4:	0e 94       	mov	r4,r7
800062e6:	0e 92       	mov	r2,r7
800062e8:	ea 04 00 0e 	add	lr,r5,r4
800062ec:	10 39       	cp.w	r9,r8
800062ee:	c0 95       	brlt	80006300 <__ieee754_sqrt+0x108>
800062f0:	5f 03       	sreq	r3
800062f2:	14 3e       	cp.w	lr,r10
800062f4:	5f 81       	srls	r1
800062f6:	e3 e3 00 03 	and	r3,r1,r3
800062fa:	e4 03 18 00 	cp.b	r3,r2
800062fe:	c1 70       	breq	8000632c <__ieee754_sqrt+0x134>
80006300:	1c 93       	mov	r3,lr
80006302:	fc 05 00 04 	add	r4,lr,r5
80006306:	e6 13 80 00 	andh	r3,0x8000,COH
8000630a:	fc 11 80 00 	movh	r1,0x8000
8000630e:	02 33       	cp.w	r3,r1
80006310:	c0 61       	brne	8000631c <__ieee754_sqrt+0x124>
80006312:	58 04       	cp.w	r4,0
80006314:	c0 45       	brlt	8000631c <__ieee754_sqrt+0x124>
80006316:	f2 c3 ff ff 	sub	r3,r9,-1
8000631a:	c0 28       	rjmp	8000631e <__ieee754_sqrt+0x126>
8000631c:	12 93       	mov	r3,r9
8000631e:	12 18       	sub	r8,r9
80006320:	0a 0b       	add	r11,r5
80006322:	1c 3a       	cp.w	r10,lr
80006324:	f7 b8 03 01 	sublo	r8,1
80006328:	06 99       	mov	r9,r3
8000632a:	1c 1a       	sub	r10,lr
8000632c:	f4 0e 16 1f 	lsr	lr,r10,0x1f
80006330:	a1 95       	lsr	r5,0x1
80006332:	2f f7       	sub	r7,-1
80006334:	fc 08 00 18 	add	r8,lr,r8<<0x1
80006338:	a1 7a       	lsl	r10,0x1
8000633a:	e0 47 00 20 	cp.w	r7,32
8000633e:	cd 51       	brne	800062e8 <__ieee754_sqrt+0xf0>
80006340:	14 48       	or	r8,r10
80006342:	c0 a0       	breq	80006356 <__ieee754_sqrt+0x15e>
80006344:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
80006348:	5b fb       	cp.w	r11,-1
8000634a:	f7 bc 00 ff 	subeq	r12,-1
8000634e:	f9 bb 00 00 	moveq	r11,0
80006352:	f1 db e1 0b 	addne	r11,r8,r11
80006356:	a1 9b       	lsr	r11,0x1
80006358:	16 99       	mov	r9,r11
8000635a:	bf b9       	sbr	r9,0x1f
8000635c:	ec 0a 14 01 	asr	r10,r6,0x1
80006360:	f8 08 14 01 	asr	r8,r12,0x1
80006364:	b5 6a       	lsl	r10,0x14
80006366:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000636a:	f2 0b 17 10 	movne	r11,r9
8000636e:	fc 19 3f e0 	movh	r9,0x3fe0
80006372:	16 96       	mov	r6,r11
80006374:	12 0a       	add	r10,r9
80006376:	f4 08 00 08 	add	r8,r10,r8
8000637a:	10 97       	mov	r7,r8
8000637c:	0c 9a       	mov	r10,r6
8000637e:	0e 9b       	mov	r11,r7
80006380:	d8 32       	popm	r0-r7,pc
80006382:	d7 03       	nop

80006384 <__kernel_cos>:
80006384:	d4 31       	pushm	r0-r7,lr
80006386:	20 6d       	sub	sp,24
80006388:	fa e9 00 08 	st.d	sp[8],r8
8000638c:	14 92       	mov	r2,r10
8000638e:	16 93       	mov	r3,r11
80006390:	14 96       	mov	r6,r10
80006392:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
80006396:	e0 69 ff ff 	mov	r9,65535
8000639a:	ea 19 3e 3f 	orh	r9,0x3e3f
8000639e:	12 37       	cp.w	r7,r9
800063a0:	e0 89 00 09 	brgt	800063b2 <__kernel_cos+0x2e>
800063a4:	e0 a0 08 74 	rcall	8000748c <__avr32_f64_to_s32>
800063a8:	c0 51       	brne	800063b2 <__kernel_cos+0x2e>
800063aa:	30 0a       	mov	r10,0
800063ac:	fc 1b 3f f0 	movh	r11,0x3ff0
800063b0:	cd b8       	rjmp	80006566 <__kernel_cos+0x1e2>
800063b2:	04 98       	mov	r8,r2
800063b4:	06 99       	mov	r9,r3
800063b6:	04 9a       	mov	r10,r2
800063b8:	06 9b       	mov	r11,r3
800063ba:	e0 a0 06 25 	rcall	80007004 <__avr32_f64_mul>
800063be:	e0 68 38 d4 	mov	r8,14548
800063c2:	ea 18 be 88 	orh	r8,0xbe88
800063c6:	14 94       	mov	r4,r10
800063c8:	16 95       	mov	r5,r11
800063ca:	e0 69 fa e9 	mov	r9,64233
800063ce:	ea 19 bd a8 	orh	r9,0xbda8
800063d2:	e0 a0 06 19 	rcall	80007004 <__avr32_f64_mul>
800063d6:	e0 68 b1 c4 	mov	r8,45508
800063da:	ea 18 bd b4 	orh	r8,0xbdb4
800063de:	e0 69 ee 9e 	mov	r9,61086
800063e2:	ea 19 3e 21 	orh	r9,0x3e21
800063e6:	e0 a0 07 c9 	rcall	80007378 <__avr32_f64_add>
800063ea:	14 98       	mov	r8,r10
800063ec:	16 99       	mov	r9,r11
800063ee:	08 9a       	mov	r10,r4
800063f0:	0a 9b       	mov	r11,r5
800063f2:	e0 a0 06 09 	rcall	80007004 <__avr32_f64_mul>
800063f6:	e0 68 52 ad 	mov	r8,21165
800063fa:	ea 18 80 9c 	orh	r8,0x809c
800063fe:	e0 69 7e 4f 	mov	r9,32335
80006402:	ea 19 3e 92 	orh	r9,0x3e92
80006406:	e0 a0 06 eb 	rcall	800071dc <__avr32_f64_sub>
8000640a:	14 98       	mov	r8,r10
8000640c:	16 99       	mov	r9,r11
8000640e:	08 9a       	mov	r10,r4
80006410:	0a 9b       	mov	r11,r5
80006412:	e0 a0 05 f9 	rcall	80007004 <__avr32_f64_mul>
80006416:	e0 68 15 90 	mov	r8,5520
8000641a:	ea 18 19 cb 	orh	r8,0x19cb
8000641e:	e0 69 01 a0 	mov	r9,416
80006422:	ea 19 3e fa 	orh	r9,0x3efa
80006426:	e0 a0 07 a9 	rcall	80007378 <__avr32_f64_add>
8000642a:	14 98       	mov	r8,r10
8000642c:	16 99       	mov	r9,r11
8000642e:	08 9a       	mov	r10,r4
80006430:	0a 9b       	mov	r11,r5
80006432:	e0 a0 05 e9 	rcall	80007004 <__avr32_f64_mul>
80006436:	e0 68 51 77 	mov	r8,20855
8000643a:	ea 18 16 c1 	orh	r8,0x16c1
8000643e:	e0 69 c1 6c 	mov	r9,49516
80006442:	ea 19 3f 56 	orh	r9,0x3f56
80006446:	e0 a0 06 cb 	rcall	800071dc <__avr32_f64_sub>
8000644a:	14 98       	mov	r8,r10
8000644c:	16 99       	mov	r9,r11
8000644e:	08 9a       	mov	r10,r4
80006450:	0a 9b       	mov	r11,r5
80006452:	e0 a0 05 d9 	rcall	80007004 <__avr32_f64_mul>
80006456:	e0 68 55 4c 	mov	r8,21836
8000645a:	ea 18 55 55 	orh	r8,0x5555
8000645e:	e0 69 55 55 	mov	r9,21845
80006462:	ea 19 3f a5 	orh	r9,0x3fa5
80006466:	e0 a0 07 89 	rcall	80007378 <__avr32_f64_add>
8000646a:	14 98       	mov	r8,r10
8000646c:	16 99       	mov	r9,r11
8000646e:	08 9a       	mov	r10,r4
80006470:	0a 9b       	mov	r11,r5
80006472:	e0 a0 05 c9 	rcall	80007004 <__avr32_f64_mul>
80006476:	fa eb 00 00 	st.d	sp[0],r10
8000647a:	e0 68 33 32 	mov	r8,13106
8000647e:	ea 18 3f d3 	orh	r8,0x3fd3
80006482:	10 37       	cp.w	r7,r8
80006484:	e0 89 00 2b 	brgt	800064da <__kernel_cos+0x156>
80006488:	30 08       	mov	r8,0
8000648a:	fc 19 3f e0 	movh	r9,0x3fe0
8000648e:	08 9a       	mov	r10,r4
80006490:	0a 9b       	mov	r11,r5
80006492:	e0 a0 05 b9 	rcall	80007004 <__avr32_f64_mul>
80006496:	fa e8 00 00 	ld.d	r8,sp[0]
8000649a:	14 90       	mov	r0,r10
8000649c:	16 91       	mov	r1,r11
8000649e:	08 9a       	mov	r10,r4
800064a0:	0a 9b       	mov	r11,r5
800064a2:	e0 a0 05 b1 	rcall	80007004 <__avr32_f64_mul>
800064a6:	fa e8 00 08 	ld.d	r8,sp[8]
800064aa:	16 97       	mov	r7,r11
800064ac:	14 96       	mov	r6,r10
800064ae:	06 9b       	mov	r11,r3
800064b0:	04 9a       	mov	r10,r2
800064b2:	e0 a0 05 a9 	rcall	80007004 <__avr32_f64_mul>
800064b6:	14 98       	mov	r8,r10
800064b8:	16 99       	mov	r9,r11
800064ba:	0c 9a       	mov	r10,r6
800064bc:	0e 9b       	mov	r11,r7
800064be:	e0 a0 06 8f 	rcall	800071dc <__avr32_f64_sub>
800064c2:	14 98       	mov	r8,r10
800064c4:	16 99       	mov	r9,r11
800064c6:	00 9a       	mov	r10,r0
800064c8:	02 9b       	mov	r11,r1
800064ca:	e0 a0 06 89 	rcall	800071dc <__avr32_f64_sub>
800064ce:	14 98       	mov	r8,r10
800064d0:	16 99       	mov	r9,r11
800064d2:	30 0a       	mov	r10,0
800064d4:	fc 1b 3f f0 	movh	r11,0x3ff0
800064d8:	c4 58       	rjmp	80006562 <__kernel_cos+0x1de>
800064da:	fc 19 3f e9 	movh	r9,0x3fe9
800064de:	12 37       	cp.w	r7,r9
800064e0:	e0 8a 00 06 	brle	800064ec <__kernel_cos+0x168>
800064e4:	30 06       	mov	r6,0
800064e6:	fc 17 3f d2 	movh	r7,0x3fd2
800064ea:	c0 88       	rjmp	800064fa <__kernel_cos+0x176>
800064ec:	fc 1a ff e0 	movh	r10,0xffe0
800064f0:	30 08       	mov	r8,0
800064f2:	ee 0a 00 09 	add	r9,r7,r10
800064f6:	10 96       	mov	r6,r8
800064f8:	12 97       	mov	r7,r9
800064fa:	0c 98       	mov	r8,r6
800064fc:	0e 99       	mov	r9,r7
800064fe:	30 0a       	mov	r10,0
80006500:	fc 1b 3f f0 	movh	r11,0x3ff0
80006504:	e0 a0 06 6c 	rcall	800071dc <__avr32_f64_sub>
80006508:	30 08       	mov	r8,0
8000650a:	fa eb 00 10 	st.d	sp[16],r10
8000650e:	fc 19 3f e0 	movh	r9,0x3fe0
80006512:	08 9a       	mov	r10,r4
80006514:	0a 9b       	mov	r11,r5
80006516:	e0 a0 05 77 	rcall	80007004 <__avr32_f64_mul>
8000651a:	0c 98       	mov	r8,r6
8000651c:	0e 99       	mov	r9,r7
8000651e:	e0 a0 06 5f 	rcall	800071dc <__avr32_f64_sub>
80006522:	fa e8 00 00 	ld.d	r8,sp[0]
80006526:	14 90       	mov	r0,r10
80006528:	16 91       	mov	r1,r11
8000652a:	08 9a       	mov	r10,r4
8000652c:	0a 9b       	mov	r11,r5
8000652e:	e0 a0 05 6b 	rcall	80007004 <__avr32_f64_mul>
80006532:	fa e8 00 08 	ld.d	r8,sp[8]
80006536:	16 97       	mov	r7,r11
80006538:	14 96       	mov	r6,r10
8000653a:	06 9b       	mov	r11,r3
8000653c:	04 9a       	mov	r10,r2
8000653e:	e0 a0 05 63 	rcall	80007004 <__avr32_f64_mul>
80006542:	14 98       	mov	r8,r10
80006544:	16 99       	mov	r9,r11
80006546:	0c 9a       	mov	r10,r6
80006548:	0e 9b       	mov	r11,r7
8000654a:	e0 a0 06 49 	rcall	800071dc <__avr32_f64_sub>
8000654e:	14 98       	mov	r8,r10
80006550:	16 99       	mov	r9,r11
80006552:	00 9a       	mov	r10,r0
80006554:	02 9b       	mov	r11,r1
80006556:	e0 a0 06 43 	rcall	800071dc <__avr32_f64_sub>
8000655a:	14 98       	mov	r8,r10
8000655c:	16 99       	mov	r9,r11
8000655e:	fa ea 00 10 	ld.d	r10,sp[16]
80006562:	e0 a0 06 3d 	rcall	800071dc <__avr32_f64_sub>
80006566:	2f ad       	sub	sp,-24
80006568:	d8 32       	popm	r0-r7,pc
8000656a:	d7 03       	nop

8000656c <__kernel_rem_pio2>:
8000656c:	d4 31       	pushm	r0-r7,lr
8000656e:	fa cd 02 70 	sub	sp,sp,624
80006572:	50 b9       	stdsp	sp[0x2c],r9
80006574:	fa f9 02 94 	ld.w	r9,sp[660]
80006578:	50 68       	stdsp	sp[0x18],r8
8000657a:	50 c9       	stdsp	sp[0x30],r9
8000657c:	16 94       	mov	r4,r11
8000657e:	40 b8       	lddsp	r8,sp[0x2c]
80006580:	4b e9       	lddpc	r9,80006678 <__kernel_rem_pio2+0x10c>
80006582:	20 18       	sub	r8,1
80006584:	40 6b       	lddsp	r11,sp[0x18]
80006586:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000658a:	50 58       	stdsp	sp[0x14],r8
8000658c:	50 39       	stdsp	sp[0xc],r9
8000658e:	30 08       	mov	r8,0
80006590:	f4 c9 00 03 	sub	r9,r10,3
80006594:	10 97       	mov	r7,r8
80006596:	31 83       	mov	r3,24
80006598:	f2 03 0c 02 	divs	r2,r9,r3
8000659c:	f0 02 0c 48 	max	r8,r8,r2
800065a0:	40 59       	lddsp	r9,sp[0x14]
800065a2:	10 96       	mov	r6,r8
800065a4:	10 93       	mov	r3,r8
800065a6:	50 78       	stdsp	sp[0x1c],r8
800065a8:	40 31       	lddsp	r1,sp[0xc]
800065aa:	5c d6       	com	r6
800065ac:	12 13       	sub	r3,r9
800065ae:	ec 06 00 16 	add	r6,r6,r6<<0x1
800065b2:	40 c8       	lddsp	r8,sp[0x30]
800065b4:	50 ac       	stdsp	sp[0x28],r12
800065b6:	12 01       	add	r1,r9
800065b8:	f4 06 00 36 	add	r6,r10,r6<<0x3
800065bc:	fa c2 fe 80 	sub	r2,sp,-384
800065c0:	f0 03 00 25 	add	r5,r8,r3<<0x2
800065c4:	c0 d8       	rjmp	800065de <__kernel_rem_pio2+0x72>
800065c6:	ee 03 00 08 	add	r8,r7,r3
800065ca:	c0 47       	brpl	800065d2 <__kernel_rem_pio2+0x66>
800065cc:	30 0a       	mov	r10,0
800065ce:	30 0b       	mov	r11,0
800065d0:	c0 48       	rjmp	800065d8 <__kernel_rem_pio2+0x6c>
800065d2:	6a 0c       	ld.w	r12,r5[0x0]
800065d4:	e0 a0 07 73 	rcall	800074ba <__avr32_s32_to_f64>
800065d8:	a5 2a       	st.d	r2++,r10
800065da:	2f f7       	sub	r7,-1
800065dc:	2f c5       	sub	r5,-4
800065de:	02 37       	cp.w	r7,r1
800065e0:	fe 9a ff f3 	brle	800065c6 <__kernel_rem_pio2+0x5a>
800065e4:	fa c0 ff c0 	sub	r0,sp,-64
800065e8:	40 53       	lddsp	r3,sp[0x14]
800065ea:	30 02       	mov	r2,0
800065ec:	fa cc fe 80 	sub	r12,sp,-384
800065f0:	0c 95       	mov	r5,r6
800065f2:	c1 b8       	rjmp	80006628 <__kernel_rem_pio2+0xbc>
800065f4:	ee e8 00 00 	ld.d	r8,r7[0]
800065f8:	50 0c       	stdsp	sp[0x0],r12
800065fa:	20 87       	sub	r7,8
800065fc:	a3 0b       	ld.d	r10,r1++
800065fe:	e0 a0 05 03 	rcall	80007004 <__avr32_f64_mul>
80006602:	14 98       	mov	r8,r10
80006604:	16 99       	mov	r9,r11
80006606:	fa ea 00 04 	ld.d	r10,sp[4]
8000660a:	e0 a0 06 b7 	rcall	80007378 <__avr32_f64_add>
8000660e:	2f f6       	sub	r6,-1
80006610:	fa eb 00 04 	st.d	sp[4],r10
80006614:	40 0c       	lddsp	r12,sp[0x0]
80006616:	40 5b       	lddsp	r11,sp[0x14]
80006618:	16 36       	cp.w	r6,r11
8000661a:	fe 9a ff ed 	brle	800065f4 <__kernel_rem_pio2+0x88>
8000661e:	fa e8 00 04 	ld.d	r8,sp[4]
80006622:	2f f2       	sub	r2,-1
80006624:	a1 28       	st.d	r0++,r8
80006626:	2f f3       	sub	r3,-1
80006628:	40 38       	lddsp	r8,sp[0xc]
8000662a:	10 32       	cp.w	r2,r8
8000662c:	e0 89 00 0b 	brgt	80006642 <__kernel_rem_pio2+0xd6>
80006630:	30 0a       	mov	r10,0
80006632:	30 0b       	mov	r11,0
80006634:	40 a1       	lddsp	r1,sp[0x28]
80006636:	f8 03 00 37 	add	r7,r12,r3<<0x3
8000663a:	fa eb 00 04 	st.d	sp[4],r10
8000663e:	30 06       	mov	r6,0
80006640:	ce bb       	rjmp	80006616 <__kernel_rem_pio2+0xaa>
80006642:	40 38       	lddsp	r8,sp[0xc]
80006644:	fa ca fd e0 	sub	r10,sp,-544
80006648:	20 18       	sub	r8,1
8000664a:	0a 96       	mov	r6,r5
8000664c:	f4 08 00 2a 	add	r10,r10,r8<<0x2
80006650:	40 37       	lddsp	r7,sp[0xc]
80006652:	50 fa       	stdsp	sp[0x3c],r10
80006654:	50 e4       	stdsp	sp[0x38],r4
80006656:	fa c9 fd 90 	sub	r9,sp,-624
8000665a:	f2 07 00 38 	add	r8,r9,r7<<0x3
8000665e:	ee c5 00 01 	sub	r5,r7,1
80006662:	f0 e2 fd d0 	ld.d	r2,r8[-560]
80006666:	fa c1 fd e0 	sub	r1,sp,-544
8000666a:	fa c8 ff c0 	sub	r8,sp,-64
8000666e:	50 11       	stdsp	sp[0x4],r1
80006670:	f0 05 00 34 	add	r4,r8,r5<<0x3
80006674:	0e 90       	mov	r0,r7
80006676:	c2 58       	rjmp	800066c0 <__kernel_rem_pio2+0x154>
80006678:	80 02       	ld.sh	r2,r0[0x0]
8000667a:	ea 20 e0 a0 	sub	r0,712864
8000667e:	04 c4       	st.b	r2++,r4
80006680:	e0 a0 07 06 	rcall	8000748c <__avr32_f64_to_s32>
80006684:	e0 a0 07 1b 	rcall	800074ba <__avr32_s32_to_f64>
80006688:	30 08       	mov	r8,0
8000668a:	fc 19 c1 70 	movh	r9,0xc170
8000668e:	fa eb 00 20 	st.d	sp[32],r10
80006692:	e0 a0 04 b9 	rcall	80007004 <__avr32_f64_mul>
80006696:	14 98       	mov	r8,r10
80006698:	16 99       	mov	r9,r11
8000669a:	04 9a       	mov	r10,r2
8000669c:	06 9b       	mov	r11,r3
8000669e:	e0 a0 06 6d 	rcall	80007378 <__avr32_f64_add>
800066a2:	e0 a0 06 f5 	rcall	8000748c <__avr32_f64_to_s32>
800066a6:	40 1a       	lddsp	r10,sp[0x4]
800066a8:	14 ac       	st.w	r10++,r12
800066aa:	e8 e8 00 00 	ld.d	r8,r4[0]
800066ae:	50 1a       	stdsp	sp[0x4],r10
800066b0:	20 10       	sub	r0,1
800066b2:	fa ea 00 20 	ld.d	r10,sp[32]
800066b6:	20 84       	sub	r4,8
800066b8:	e0 a0 06 60 	rcall	80007378 <__avr32_f64_add>
800066bc:	14 92       	mov	r2,r10
800066be:	16 93       	mov	r3,r11
800066c0:	30 08       	mov	r8,0
800066c2:	fc 19 3e 70 	movh	r9,0x3e70
800066c6:	04 9a       	mov	r10,r2
800066c8:	06 9b       	mov	r11,r3
800066ca:	58 00       	cp.w	r0,0
800066cc:	fe 99 ff d8 	brgt	8000667c <__kernel_rem_pio2+0x110>
800066d0:	0c 9c       	mov	r12,r6
800066d2:	e0 a0 04 1f 	rcall	80006f10 <scalbn>
800066d6:	30 08       	mov	r8,0
800066d8:	fc 19 3f c0 	movh	r9,0x3fc0
800066dc:	14 92       	mov	r2,r10
800066de:	16 93       	mov	r3,r11
800066e0:	e0 a0 04 92 	rcall	80007004 <__avr32_f64_mul>
800066e4:	e0 a0 03 76 	rcall	80006dd0 <floor>
800066e8:	30 08       	mov	r8,0
800066ea:	fc 19 c0 20 	movh	r9,0xc020
800066ee:	e0 a0 04 8b 	rcall	80007004 <__avr32_f64_mul>
800066f2:	14 98       	mov	r8,r10
800066f4:	16 99       	mov	r9,r11
800066f6:	04 9a       	mov	r10,r2
800066f8:	06 9b       	mov	r11,r3
800066fa:	e0 a0 06 3f 	rcall	80007378 <__avr32_f64_add>
800066fe:	14 92       	mov	r2,r10
80006700:	16 93       	mov	r3,r11
80006702:	e0 a0 06 c5 	rcall	8000748c <__avr32_f64_to_s32>
80006706:	18 90       	mov	r0,r12
80006708:	e0 a0 06 d9 	rcall	800074ba <__avr32_s32_to_f64>
8000670c:	14 98       	mov	r8,r10
8000670e:	16 99       	mov	r9,r11
80006710:	04 9a       	mov	r10,r2
80006712:	06 9b       	mov	r11,r3
80006714:	e0 a0 05 64 	rcall	800071dc <__avr32_f64_sub>
80006718:	fa eb 00 04 	st.d	sp[4],r10
8000671c:	58 06       	cp.w	r6,0
8000671e:	e0 8a 00 18 	brle	8000674e <__kernel_rem_pio2+0x1e2>
80006722:	fa c8 fd 90 	sub	r8,sp,-624
80006726:	ec 0b 11 18 	rsub	r11,r6,24
8000672a:	f0 05 00 29 	add	r9,r8,r5<<0x2
8000672e:	ec 0c 11 17 	rsub	r12,r6,23
80006732:	f2 fa ff b0 	ld.w	r10,r9[-80]
80006736:	f4 0b 08 48 	asr	r8,r10,r11
8000673a:	f0 0b 09 4b 	lsl	r11,r8,r11
8000673e:	10 00       	add	r0,r8
80006740:	f4 0b 01 0b 	sub	r11,r10,r11
80006744:	f3 4b ff b0 	st.w	r9[-80],r11
80006748:	f6 0c 08 44 	asr	r4,r11,r12
8000674c:	c1 58       	rjmp	80006776 <__kernel_rem_pio2+0x20a>
8000674e:	58 06       	cp.w	r6,0
80006750:	c0 91       	brne	80006762 <__kernel_rem_pio2+0x1f6>
80006752:	fa cb fd 90 	sub	r11,sp,-624
80006756:	f6 05 00 28 	add	r8,r11,r5<<0x2
8000675a:	f0 f4 ff b0 	ld.w	r4,r8[-80]
8000675e:	b7 54       	asr	r4,0x17
80006760:	c0 b8       	rjmp	80006776 <__kernel_rem_pio2+0x20a>
80006762:	30 08       	mov	r8,0
80006764:	fc 19 3f e0 	movh	r9,0x3fe0
80006768:	e0 a0 07 2c 	rcall	800075c0 <__avr32_f64_cmp_ge>
8000676c:	c0 31       	brne	80006772 <__kernel_rem_pio2+0x206>
8000676e:	30 04       	mov	r4,0
80006770:	c5 58       	rjmp	8000681a <__kernel_rem_pio2+0x2ae>
80006772:	30 24       	mov	r4,2
80006774:	c0 48       	rjmp	8000677c <__kernel_rem_pio2+0x210>
80006776:	58 04       	cp.w	r4,0
80006778:	e0 8a 00 51 	brle	8000681a <__kernel_rem_pio2+0x2ae>
8000677c:	30 08       	mov	r8,0
8000677e:	2f f0       	sub	r0,-1
80006780:	10 93       	mov	r3,r8
80006782:	c1 48       	rjmp	800067aa <__kernel_rem_pio2+0x23e>
80006784:	62 09       	ld.w	r9,r1[0x0]
80006786:	58 03       	cp.w	r3,0
80006788:	c0 81       	brne	80006798 <__kernel_rem_pio2+0x22c>
8000678a:	58 09       	cp.w	r9,0
8000678c:	c0 d0       	breq	800067a6 <__kernel_rem_pio2+0x23a>
8000678e:	fc 1a 01 00 	movh	r10,0x100
80006792:	12 1a       	sub	r10,r9
80006794:	83 0a       	st.w	r1[0x0],r10
80006796:	c0 78       	rjmp	800067a4 <__kernel_rem_pio2+0x238>
80006798:	e0 6b ff ff 	mov	r11,65535
8000679c:	ea 1b 00 ff 	orh	r11,0xff
800067a0:	12 1b       	sub	r11,r9
800067a2:	83 0b       	st.w	r1[0x0],r11
800067a4:	30 13       	mov	r3,1
800067a6:	2f f8       	sub	r8,-1
800067a8:	2f c1       	sub	r1,-4
800067aa:	0e 38       	cp.w	r8,r7
800067ac:	ce c5       	brlt	80006784 <__kernel_rem_pio2+0x218>
800067ae:	58 06       	cp.w	r6,0
800067b0:	e0 8a 00 1a 	brle	800067e4 <__kernel_rem_pio2+0x278>
800067b4:	58 16       	cp.w	r6,1
800067b6:	c0 40       	breq	800067be <__kernel_rem_pio2+0x252>
800067b8:	58 26       	cp.w	r6,2
800067ba:	c1 51       	brne	800067e4 <__kernel_rem_pio2+0x278>
800067bc:	c0 a8       	rjmp	800067d0 <__kernel_rem_pio2+0x264>
800067be:	fa ca fd 90 	sub	r10,sp,-624
800067c2:	f4 05 00 28 	add	r8,r10,r5<<0x2
800067c6:	f0 f9 ff b0 	ld.w	r9,r8[-80]
800067ca:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
800067ce:	c0 98       	rjmp	800067e0 <__kernel_rem_pio2+0x274>
800067d0:	fa c9 fd 90 	sub	r9,sp,-624
800067d4:	f2 05 00 28 	add	r8,r9,r5<<0x2
800067d8:	f0 f9 ff b0 	ld.w	r9,r8[-80]
800067dc:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
800067e0:	f1 49 ff b0 	st.w	r8[-80],r9
800067e4:	58 24       	cp.w	r4,2
800067e6:	c1 a1       	brne	8000681a <__kernel_rem_pio2+0x2ae>
800067e8:	fa e8 00 04 	ld.d	r8,sp[4]
800067ec:	30 0a       	mov	r10,0
800067ee:	fc 1b 3f f0 	movh	r11,0x3ff0
800067f2:	e0 a0 04 f5 	rcall	800071dc <__avr32_f64_sub>
800067f6:	fa eb 00 04 	st.d	sp[4],r10
800067fa:	58 03       	cp.w	r3,0
800067fc:	c0 f0       	breq	8000681a <__kernel_rem_pio2+0x2ae>
800067fe:	0c 9c       	mov	r12,r6
80006800:	30 0a       	mov	r10,0
80006802:	fc 1b 3f f0 	movh	r11,0x3ff0
80006806:	e0 a0 03 85 	rcall	80006f10 <scalbn>
8000680a:	14 98       	mov	r8,r10
8000680c:	16 99       	mov	r9,r11
8000680e:	fa ea 00 04 	ld.d	r10,sp[4]
80006812:	e0 a0 04 e5 	rcall	800071dc <__avr32_f64_sub>
80006816:	fa eb 00 04 	st.d	sp[4],r10
8000681a:	30 08       	mov	r8,0
8000681c:	30 09       	mov	r9,0
8000681e:	fa ea 00 04 	ld.d	r10,sp[4]
80006822:	e0 a0 06 bc 	rcall	8000759a <__avr32_f64_cmp_eq>
80006826:	c6 40       	breq	800068ee <__kernel_rem_pio2+0x382>
80006828:	fa c8 fd e0 	sub	r8,sp,-544
8000682c:	f0 05 00 29 	add	r9,r8,r5<<0x2
80006830:	30 08       	mov	r8,0
80006832:	c0 58       	rjmp	8000683c <__kernel_rem_pio2+0x2d0>
80006834:	72 0a       	ld.w	r10,r9[0x0]
80006836:	20 15       	sub	r5,1
80006838:	14 48       	or	r8,r10
8000683a:	20 49       	sub	r9,4
8000683c:	40 3b       	lddsp	r11,sp[0xc]
8000683e:	16 35       	cp.w	r5,r11
80006840:	cf a4       	brge	80006834 <__kernel_rem_pio2+0x2c8>
80006842:	58 08       	cp.w	r8,0
80006844:	c5 b1       	brne	800068fa <__kernel_rem_pio2+0x38e>
80006846:	40 f9       	lddsp	r9,sp[0x3c]
80006848:	30 18       	mov	r8,1
8000684a:	c0 28       	rjmp	8000684e <__kernel_rem_pio2+0x2e2>
8000684c:	2f f8       	sub	r8,-1
8000684e:	72 0a       	ld.w	r10,r9[0x0]
80006850:	20 49       	sub	r9,4
80006852:	58 0a       	cp.w	r10,0
80006854:	cf c0       	breq	8000684c <__kernel_rem_pio2+0x2e0>
80006856:	0e 08       	add	r8,r7
80006858:	40 ba       	lddsp	r10,sp[0x2c]
8000685a:	50 d8       	stdsp	sp[0x34],r8
8000685c:	ee 0a 00 02 	add	r2,r7,r10
80006860:	fa c8 fe 80 	sub	r8,sp,-384
80006864:	04 91       	mov	r1,r2
80006866:	ee c5 ff ff 	sub	r5,r7,-1
8000686a:	40 73       	lddsp	r3,sp[0x1c]
8000686c:	40 c9       	lddsp	r9,sp[0x30]
8000686e:	2f f3       	sub	r3,-1
80006870:	fa cb ff c0 	sub	r11,sp,-64
80006874:	0e 03       	add	r3,r7
80006876:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8000687a:	f2 03 00 23 	add	r3,r9,r3<<0x2
8000687e:	50 8b       	stdsp	sp[0x20],r11
80006880:	f0 02 00 32 	add	r2,r8,r2<<0x3
80006884:	0c 94       	mov	r4,r6
80006886:	c2 d8       	rjmp	800068e0 <__kernel_rem_pio2+0x374>
80006888:	66 0c       	ld.w	r12,r3[0x0]
8000688a:	e0 a0 06 18 	rcall	800074ba <__avr32_s32_to_f64>
8000688e:	30 08       	mov	r8,0
80006890:	e4 eb 00 00 	st.d	r2[0],r10
80006894:	30 09       	mov	r9,0
80006896:	fa ca fe 80 	sub	r10,sp,-384
8000689a:	40 a0       	lddsp	r0,sp[0x28]
8000689c:	f4 01 00 37 	add	r7,r10,r1<<0x3
800068a0:	30 06       	mov	r6,0
800068a2:	fa e9 00 04 	st.d	sp[4],r8
800068a6:	c1 08       	rjmp	800068c6 <__kernel_rem_pio2+0x35a>
800068a8:	ee e8 00 00 	ld.d	r8,r7[0]
800068ac:	a1 0b       	ld.d	r10,r0++
800068ae:	20 87       	sub	r7,8
800068b0:	e0 a0 03 aa 	rcall	80007004 <__avr32_f64_mul>
800068b4:	2f f6       	sub	r6,-1
800068b6:	14 98       	mov	r8,r10
800068b8:	16 99       	mov	r9,r11
800068ba:	fa ea 00 04 	ld.d	r10,sp[4]
800068be:	e0 a0 05 5d 	rcall	80007378 <__avr32_f64_add>
800068c2:	fa eb 00 04 	st.d	sp[4],r10
800068c6:	40 58       	lddsp	r8,sp[0x14]
800068c8:	10 36       	cp.w	r6,r8
800068ca:	fe 9a ff ef 	brle	800068a8 <__kernel_rem_pio2+0x33c>
800068ce:	40 89       	lddsp	r9,sp[0x20]
800068d0:	fa ea 00 04 	ld.d	r10,sp[4]
800068d4:	2f f5       	sub	r5,-1
800068d6:	b3 2a       	st.d	r9++,r10
800068d8:	2f c3       	sub	r3,-4
800068da:	50 89       	stdsp	sp[0x20],r9
800068dc:	2f 82       	sub	r2,-8
800068de:	2f f1       	sub	r1,-1
800068e0:	40 d8       	lddsp	r8,sp[0x34]
800068e2:	10 35       	cp.w	r5,r8
800068e4:	fe 9a ff d2 	brle	80006888 <__kernel_rem_pio2+0x31c>
800068e8:	08 96       	mov	r6,r4
800068ea:	10 97       	mov	r7,r8
800068ec:	cb 5a       	rjmp	80006656 <__kernel_rem_pio2+0xea>
800068ee:	50 50       	stdsp	sp[0x14],r0
800068f0:	08 95       	mov	r5,r4
800068f2:	40 e4       	lddsp	r4,sp[0x38]
800068f4:	58 0c       	cp.w	r12,0
800068f6:	c1 30       	breq	8000691c <__kernel_rem_pio2+0x3b0>
800068f8:	c0 48       	rjmp	80006900 <__kernel_rem_pio2+0x394>
800068fa:	08 95       	mov	r5,r4
800068fc:	50 50       	stdsp	sp[0x14],r0
800068fe:	40 e4       	lddsp	r4,sp[0x38]
80006900:	20 17       	sub	r7,1
80006902:	fa c8 fd e0 	sub	r8,sp,-544
80006906:	21 86       	sub	r6,24
80006908:	f0 07 00 28 	add	r8,r8,r7<<0x2
8000690c:	c0 38       	rjmp	80006912 <__kernel_rem_pio2+0x3a6>
8000690e:	20 17       	sub	r7,1
80006910:	21 86       	sub	r6,24
80006912:	70 09       	ld.w	r9,r8[0x0]
80006914:	20 48       	sub	r8,4
80006916:	58 09       	cp.w	r9,0
80006918:	cf b0       	breq	8000690e <__kernel_rem_pio2+0x3a2>
8000691a:	c4 48       	rjmp	800069a2 <__kernel_rem_pio2+0x436>
8000691c:	fa ea 00 04 	ld.d	r10,sp[4]
80006920:	ec 0c 11 00 	rsub	r12,r6,0
80006924:	e0 a0 02 f6 	rcall	80006f10 <scalbn>
80006928:	30 08       	mov	r8,0
8000692a:	14 90       	mov	r0,r10
8000692c:	16 91       	mov	r1,r11
8000692e:	fc 19 41 70 	movh	r9,0x4170
80006932:	ee 03 15 02 	lsl	r3,r7,0x2
80006936:	e0 a0 06 45 	rcall	800075c0 <__avr32_f64_cmp_ge>
8000693a:	c2 a0       	breq	8000698e <__kernel_rem_pio2+0x422>
8000693c:	30 08       	mov	r8,0
8000693e:	fc 19 3e 70 	movh	r9,0x3e70
80006942:	00 9a       	mov	r10,r0
80006944:	02 9b       	mov	r11,r1
80006946:	e0 a0 03 5f 	rcall	80007004 <__avr32_f64_mul>
8000694a:	e0 a0 05 a1 	rcall	8000748c <__avr32_f64_to_s32>
8000694e:	e0 a0 05 b6 	rcall	800074ba <__avr32_s32_to_f64>
80006952:	30 08       	mov	r8,0
80006954:	fc 19 c1 70 	movh	r9,0xc170
80006958:	fa eb 00 04 	st.d	sp[4],r10
8000695c:	e0 a0 03 54 	rcall	80007004 <__avr32_f64_mul>
80006960:	16 99       	mov	r9,r11
80006962:	14 98       	mov	r8,r10
80006964:	02 9b       	mov	r11,r1
80006966:	00 9a       	mov	r10,r0
80006968:	e0 a0 05 08 	rcall	80007378 <__avr32_f64_add>
8000696c:	e0 a0 05 90 	rcall	8000748c <__avr32_f64_to_s32>
80006970:	fa cb fd 90 	sub	r11,sp,-624
80006974:	f6 03 00 03 	add	r3,r11,r3
80006978:	2f f7       	sub	r7,-1
8000697a:	e7 4c ff b0 	st.w	r3[-80],r12
8000697e:	fa c9 fd 90 	sub	r9,sp,-624
80006982:	fa ea 00 04 	ld.d	r10,sp[4]
80006986:	2e 86       	sub	r6,-24
80006988:	f2 07 00 23 	add	r3,r9,r7<<0x2
8000698c:	c0 78       	rjmp	8000699a <__kernel_rem_pio2+0x42e>
8000698e:	fa c8 fd 90 	sub	r8,sp,-624
80006992:	00 9a       	mov	r10,r0
80006994:	f0 03 00 03 	add	r3,r8,r3
80006998:	02 9b       	mov	r11,r1
8000699a:	e0 a0 05 79 	rcall	8000748c <__avr32_f64_to_s32>
8000699e:	e7 4c ff b0 	st.w	r3[-80],r12
800069a2:	0c 9c       	mov	r12,r6
800069a4:	30 0a       	mov	r10,0
800069a6:	fc 1b 3f f0 	movh	r11,0x3ff0
800069aa:	fa c3 fd e0 	sub	r3,sp,-544
800069ae:	e0 a0 02 b1 	rcall	80006f10 <scalbn>
800069b2:	fa c2 ff c0 	sub	r2,sp,-64
800069b6:	0e 96       	mov	r6,r7
800069b8:	14 90       	mov	r0,r10
800069ba:	16 91       	mov	r1,r11
800069bc:	e6 07 00 23 	add	r3,r3,r7<<0x2
800069c0:	e4 07 00 32 	add	r2,r2,r7<<0x3
800069c4:	c1 88       	rjmp	800069f4 <__kernel_rem_pio2+0x488>
800069c6:	66 0c       	ld.w	r12,r3[0x0]
800069c8:	e0 a0 05 79 	rcall	800074ba <__avr32_s32_to_f64>
800069cc:	14 98       	mov	r8,r10
800069ce:	16 99       	mov	r9,r11
800069d0:	00 9a       	mov	r10,r0
800069d2:	02 9b       	mov	r11,r1
800069d4:	e0 a0 03 18 	rcall	80007004 <__avr32_f64_mul>
800069d8:	30 08       	mov	r8,0
800069da:	e4 eb 00 00 	st.d	r2[0],r10
800069de:	fc 19 3e 70 	movh	r9,0x3e70
800069e2:	00 9a       	mov	r10,r0
800069e4:	02 9b       	mov	r11,r1
800069e6:	20 16       	sub	r6,1
800069e8:	e0 a0 03 0e 	rcall	80007004 <__avr32_f64_mul>
800069ec:	20 43       	sub	r3,4
800069ee:	20 82       	sub	r2,8
800069f0:	14 90       	mov	r0,r10
800069f2:	16 91       	mov	r1,r11
800069f4:	58 06       	cp.w	r6,0
800069f6:	ce 84       	brge	800069c6 <__kernel_rem_pio2+0x45a>
800069f8:	fa cc ff 20 	sub	r12,sp,-224
800069fc:	0a 91       	mov	r1,r5
800069fe:	0e 93       	mov	r3,r7
80006a00:	30 02       	mov	r2,0
80006a02:	18 96       	mov	r6,r12
80006a04:	0e 95       	mov	r5,r7
80006a06:	c1 c8       	rjmp	80006a3e <__kernel_rem_pio2+0x4d2>
80006a08:	ad 09       	ld.d	r8,r6++
80006a0a:	2f f7       	sub	r7,-1
80006a0c:	a1 0b       	ld.d	r10,r0++
80006a0e:	e0 a0 02 fb 	rcall	80007004 <__avr32_f64_mul>
80006a12:	14 98       	mov	r8,r10
80006a14:	16 99       	mov	r9,r11
80006a16:	fa ea 00 04 	ld.d	r10,sp[4]
80006a1a:	e0 a0 04 af 	rcall	80007378 <__avr32_f64_add>
80006a1e:	fa eb 00 04 	st.d	sp[4],r10
80006a22:	40 3b       	lddsp	r11,sp[0xc]
80006a24:	16 37       	cp.w	r7,r11
80006a26:	e0 89 00 05 	brgt	80006a30 <__kernel_rem_pio2+0x4c4>
80006a2a:	04 37       	cp.w	r7,r2
80006a2c:	fe 9a ff ee 	brle	80006a08 <__kernel_rem_pio2+0x49c>
80006a30:	06 96       	mov	r6,r3
80006a32:	fa e8 00 04 	ld.d	r8,sp[4]
80006a36:	40 73       	lddsp	r3,sp[0x1c]
80006a38:	ad 28       	st.d	r6++,r8
80006a3a:	20 13       	sub	r3,1
80006a3c:	2f f2       	sub	r2,-1
80006a3e:	58 03       	cp.w	r3,0
80006a40:	c0 f5       	brlt	80006a5e <__kernel_rem_pio2+0x4f2>
80006a42:	fa c8 ff c0 	sub	r8,sp,-64
80006a46:	30 0a       	mov	r10,0
80006a48:	f0 03 00 3c 	add	r12,r8,r3<<0x3
80006a4c:	30 0b       	mov	r11,0
80006a4e:	50 73       	stdsp	sp[0x1c],r3
80006a50:	4d 00       	lddpc	r0,80006b90 <__kernel_rem_pio2+0x624>
80006a52:	0c 93       	mov	r3,r6
80006a54:	fa eb 00 04 	st.d	sp[4],r10
80006a58:	30 07       	mov	r7,0
80006a5a:	18 96       	mov	r6,r12
80006a5c:	ce 3b       	rjmp	80006a22 <__kernel_rem_pio2+0x4b6>
80006a5e:	0a 97       	mov	r7,r5
80006a60:	40 6a       	lddsp	r10,sp[0x18]
80006a62:	02 95       	mov	r5,r1
80006a64:	58 2a       	cp.w	r10,2
80006a66:	e0 89 00 07 	brgt	80006a74 <__kernel_rem_pio2+0x508>
80006a6a:	58 1a       	cp.w	r10,1
80006a6c:	c1 14       	brge	80006a8e <__kernel_rem_pio2+0x522>
80006a6e:	58 0a       	cp.w	r10,0
80006a70:	c1 70       	breq	80006a9e <__kernel_rem_pio2+0x532>
80006a72:	ce 68       	rjmp	80006c3e <__kernel_rem_pio2+0x6d2>
80006a74:	40 69       	lddsp	r9,sp[0x18]
80006a76:	58 39       	cp.w	r9,3
80006a78:	e0 81 00 e3 	brne	80006c3e <__kernel_rem_pio2+0x6d2>
80006a7c:	ee c6 00 01 	sub	r6,r7,1
80006a80:	fa c8 ff 20 	sub	r8,sp,-224
80006a84:	0e 92       	mov	r2,r7
80006a86:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006a8a:	0c 93       	mov	r3,r6
80006a8c:	c7 d8       	rjmp	80006b86 <__kernel_rem_pio2+0x61a>
80006a8e:	fa c6 ff 20 	sub	r6,sp,-224
80006a92:	30 0c       	mov	r12,0
80006a94:	ec 07 00 36 	add	r6,r6,r7<<0x3
80006a98:	0e 93       	mov	r3,r7
80006a9a:	18 9a       	mov	r10,r12
80006a9c:	c2 98       	rjmp	80006aee <__kernel_rem_pio2+0x582>
80006a9e:	40 6c       	lddsp	r12,sp[0x18]
80006aa0:	0e 96       	mov	r6,r7
80006aa2:	fa c8 ff 20 	sub	r8,sp,-224
80006aa6:	18 9a       	mov	r10,r12
80006aa8:	f0 07 00 37 	add	r7,r8,r7<<0x3
80006aac:	c0 a8       	rjmp	80006ac0 <__kernel_rem_pio2+0x554>
80006aae:	ee e8 00 00 	ld.d	r8,r7[0]
80006ab2:	18 9b       	mov	r11,r12
80006ab4:	20 87       	sub	r7,8
80006ab6:	06 9a       	mov	r10,r3
80006ab8:	20 16       	sub	r6,1
80006aba:	e0 a0 04 5f 	rcall	80007378 <__avr32_f64_add>
80006abe:	16 9c       	mov	r12,r11
80006ac0:	14 93       	mov	r3,r10
80006ac2:	58 06       	cp.w	r6,0
80006ac4:	cf 54       	brge	80006aae <__kernel_rem_pio2+0x542>
80006ac6:	18 98       	mov	r8,r12
80006ac8:	ee 18 80 00 	eorh	r8,0x8000
80006acc:	58 05       	cp.w	r5,0
80006ace:	f0 0c 17 10 	movne	r12,r8
80006ad2:	14 98       	mov	r8,r10
80006ad4:	18 99       	mov	r9,r12
80006ad6:	e8 e9 00 00 	st.d	r4[0],r8
80006ada:	cb 28       	rjmp	80006c3e <__kernel_rem_pio2+0x6d2>
80006adc:	ec e8 00 00 	ld.d	r8,r6[0]
80006ae0:	18 9b       	mov	r11,r12
80006ae2:	04 9a       	mov	r10,r2
80006ae4:	20 13       	sub	r3,1
80006ae6:	e0 a0 04 49 	rcall	80007378 <__avr32_f64_add>
80006aea:	20 86       	sub	r6,8
80006aec:	16 9c       	mov	r12,r11
80006aee:	14 92       	mov	r2,r10
80006af0:	58 03       	cp.w	r3,0
80006af2:	cf 54       	brge	80006adc <__kernel_rem_pio2+0x570>
80006af4:	18 9b       	mov	r11,r12
80006af6:	18 98       	mov	r8,r12
80006af8:	ee 18 80 00 	eorh	r8,0x8000
80006afc:	58 05       	cp.w	r5,0
80006afe:	f0 0c 17 10 	movne	r12,r8
80006b02:	18 93       	mov	r3,r12
80006b04:	14 92       	mov	r2,r10
80006b06:	16 99       	mov	r9,r11
80006b08:	e8 e3 00 00 	st.d	r4[0],r2
80006b0c:	14 98       	mov	r8,r10
80006b0e:	fa c3 ff 18 	sub	r3,sp,-232
80006b12:	fa ea 00 e0 	ld.d	r10,sp[224]
80006b16:	30 16       	mov	r6,1
80006b18:	e0 a0 03 62 	rcall	800071dc <__avr32_f64_sub>
80006b1c:	c0 78       	rjmp	80006b2a <__kernel_rem_pio2+0x5be>
80006b1e:	2f f6       	sub	r6,-1
80006b20:	a7 09       	ld.d	r8,r3++
80006b22:	18 9b       	mov	r11,r12
80006b24:	04 9a       	mov	r10,r2
80006b26:	e0 a0 04 29 	rcall	80007378 <__avr32_f64_add>
80006b2a:	16 9c       	mov	r12,r11
80006b2c:	14 92       	mov	r2,r10
80006b2e:	0e 36       	cp.w	r6,r7
80006b30:	fe 9a ff f7 	brle	80006b1e <__kernel_rem_pio2+0x5b2>
80006b34:	16 98       	mov	r8,r11
80006b36:	ee 18 80 00 	eorh	r8,0x8000
80006b3a:	58 05       	cp.w	r5,0
80006b3c:	f0 0c 17 10 	movne	r12,r8
80006b40:	14 98       	mov	r8,r10
80006b42:	18 99       	mov	r9,r12
80006b44:	e8 e9 00 08 	st.d	r4[8],r8
80006b48:	c7 b8       	rjmp	80006c3e <__kernel_rem_pio2+0x6d2>
80006b4a:	e6 e0 00 00 	ld.d	r0,r3[0]
80006b4e:	e6 e8 00 08 	ld.d	r8,r3[8]
80006b52:	00 9a       	mov	r10,r0
80006b54:	02 9b       	mov	r11,r1
80006b56:	e0 a0 04 11 	rcall	80007378 <__avr32_f64_add>
80006b5a:	fa eb 00 0c 	st.d	sp[12],r10
80006b5e:	14 98       	mov	r8,r10
80006b60:	16 99       	mov	r9,r11
80006b62:	00 9a       	mov	r10,r0
80006b64:	02 9b       	mov	r11,r1
80006b66:	e0 a0 03 3b 	rcall	800071dc <__avr32_f64_sub>
80006b6a:	14 98       	mov	r8,r10
80006b6c:	16 99       	mov	r9,r11
80006b6e:	e6 ea 00 08 	ld.d	r10,r3[8]
80006b72:	e0 a0 04 03 	rcall	80007378 <__avr32_f64_add>
80006b76:	fa e8 00 0c 	ld.d	r8,sp[12]
80006b7a:	e6 eb 00 08 	st.d	r3[8],r10
80006b7e:	e6 e9 00 00 	st.d	r3[0],r8
80006b82:	20 12       	sub	r2,1
80006b84:	20 83       	sub	r3,8
80006b86:	58 02       	cp.w	r2,0
80006b88:	fe 99 ff e1 	brgt	80006b4a <__kernel_rem_pio2+0x5de>
80006b8c:	0e 93       	mov	r3,r7
80006b8e:	c2 18       	rjmp	80006bd0 <__kernel_rem_pio2+0x664>
80006b90:	80 02       	ld.sh	r2,r0[0x0]
80006b92:	ea 30 ec e0 	sub	r0,781536
80006b96:	00 00       	add	r0,r0
80006b98:	ec e8 00 08 	ld.d	r8,r6[8]
80006b9c:	00 9a       	mov	r10,r0
80006b9e:	02 9b       	mov	r11,r1
80006ba0:	e0 a0 03 ec 	rcall	80007378 <__avr32_f64_add>
80006ba4:	fa eb 00 0c 	st.d	sp[12],r10
80006ba8:	14 98       	mov	r8,r10
80006baa:	16 99       	mov	r9,r11
80006bac:	00 9a       	mov	r10,r0
80006bae:	02 9b       	mov	r11,r1
80006bb0:	e0 a0 03 16 	rcall	800071dc <__avr32_f64_sub>
80006bb4:	14 98       	mov	r8,r10
80006bb6:	16 99       	mov	r9,r11
80006bb8:	ec ea 00 08 	ld.d	r10,r6[8]
80006bbc:	e0 a0 03 de 	rcall	80007378 <__avr32_f64_add>
80006bc0:	fa e8 00 0c 	ld.d	r8,sp[12]
80006bc4:	ec eb 00 08 	st.d	r6[8],r10
80006bc8:	ec e9 00 00 	st.d	r6[0],r8
80006bcc:	20 13       	sub	r3,1
80006bce:	20 86       	sub	r6,8
80006bd0:	58 13       	cp.w	r3,1
80006bd2:	fe 99 ff e1 	brgt	80006b94 <__kernel_rem_pio2+0x628>
80006bd6:	0e 96       	mov	r6,r7
80006bd8:	fa c8 ff 20 	sub	r8,sp,-224
80006bdc:	30 0c       	mov	r12,0
80006bde:	f0 07 00 37 	add	r7,r8,r7<<0x3
80006be2:	18 9a       	mov	r10,r12
80006be4:	c0 a8       	rjmp	80006bf8 <__kernel_rem_pio2+0x68c>
80006be6:	ee e8 00 00 	ld.d	r8,r7[0]
80006bea:	18 9b       	mov	r11,r12
80006bec:	20 87       	sub	r7,8
80006bee:	06 9a       	mov	r10,r3
80006bf0:	20 16       	sub	r6,1
80006bf2:	e0 a0 03 c3 	rcall	80007378 <__avr32_f64_add>
80006bf6:	16 9c       	mov	r12,r11
80006bf8:	14 93       	mov	r3,r10
80006bfa:	58 16       	cp.w	r6,1
80006bfc:	fe 99 ff f5 	brgt	80006be6 <__kernel_rem_pio2+0x67a>
80006c00:	58 05       	cp.w	r5,0
80006c02:	c0 e1       	brne	80006c1e <__kernel_rem_pio2+0x6b2>
80006c04:	fa e8 00 e0 	ld.d	r8,sp[224]
80006c08:	e8 e9 00 00 	st.d	r4[0],r8
80006c0c:	fa e8 00 e8 	ld.d	r8,sp[232]
80006c10:	e8 e9 00 08 	st.d	r4[8],r8
80006c14:	18 99       	mov	r9,r12
80006c16:	14 98       	mov	r8,r10
80006c18:	e8 e9 00 10 	st.d	r4[16],r8
80006c1c:	c1 18       	rjmp	80006c3e <__kernel_rem_pio2+0x6d2>
80006c1e:	89 5a       	st.w	r4[0x14],r10
80006c20:	ee 1c 80 00 	eorh	r12,0x8000
80006c24:	89 4c       	st.w	r4[0x10],r12
80006c26:	43 88       	lddsp	r8,sp[0xe0]
80006c28:	ee 18 80 00 	eorh	r8,0x8000
80006c2c:	89 08       	st.w	r4[0x0],r8
80006c2e:	43 98       	lddsp	r8,sp[0xe4]
80006c30:	89 18       	st.w	r4[0x4],r8
80006c32:	43 a8       	lddsp	r8,sp[0xe8]
80006c34:	ee 18 80 00 	eorh	r8,0x8000
80006c38:	89 28       	st.w	r4[0x8],r8
80006c3a:	43 b8       	lddsp	r8,sp[0xec]
80006c3c:	89 38       	st.w	r4[0xc],r8
80006c3e:	40 58       	lddsp	r8,sp[0x14]
80006c40:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80006c44:	fe 3d fd 90 	sub	sp,-624
80006c48:	d8 32       	popm	r0-r7,pc
80006c4a:	d7 03       	nop

80006c4c <__kernel_sin>:
80006c4c:	d4 31       	pushm	r0-r7,lr
80006c4e:	20 4d       	sub	sp,16
80006c50:	fa e9 00 08 	st.d	sp[8],r8
80006c54:	50 0c       	stdsp	sp[0x0],r12
80006c56:	14 96       	mov	r6,r10
80006c58:	16 97       	mov	r7,r11
80006c5a:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
80006c5e:	e0 69 ff ff 	mov	r9,65535
80006c62:	ea 19 3e 3f 	orh	r9,0x3e3f
80006c66:	12 38       	cp.w	r8,r9
80006c68:	e0 89 00 06 	brgt	80006c74 <__kernel_sin+0x28>
80006c6c:	e0 a0 04 10 	rcall	8000748c <__avr32_f64_to_s32>
80006c70:	e0 80 00 a7 	breq	80006dbe <__kernel_sin+0x172>
80006c74:	0c 98       	mov	r8,r6
80006c76:	0e 99       	mov	r9,r7
80006c78:	0c 9a       	mov	r10,r6
80006c7a:	0e 9b       	mov	r11,r7
80006c7c:	cc 4d       	rcall	80007004 <__avr32_f64_mul>
80006c7e:	0c 98       	mov	r8,r6
80006c80:	14 94       	mov	r4,r10
80006c82:	16 95       	mov	r5,r11
80006c84:	0e 99       	mov	r9,r7
80006c86:	cb fd       	rcall	80007004 <__avr32_f64_mul>
80006c88:	e0 68 d5 7c 	mov	r8,54652
80006c8c:	ea 18 5a cf 	orh	r8,0x5acf
80006c90:	e0 69 d9 3a 	mov	r9,55610
80006c94:	ea 19 3d e5 	orh	r9,0x3de5
80006c98:	14 90       	mov	r0,r10
80006c9a:	16 91       	mov	r1,r11
80006c9c:	08 9a       	mov	r10,r4
80006c9e:	0a 9b       	mov	r11,r5
80006ca0:	cb 2d       	rcall	80007004 <__avr32_f64_mul>
80006ca2:	e0 68 9c eb 	mov	r8,40171
80006ca6:	ea 18 8a 2b 	orh	r8,0x8a2b
80006caa:	e0 69 e5 e6 	mov	r9,58854
80006cae:	ea 19 3e 5a 	orh	r9,0x3e5a
80006cb2:	e0 a0 02 95 	rcall	800071dc <__avr32_f64_sub>
80006cb6:	14 98       	mov	r8,r10
80006cb8:	16 99       	mov	r9,r11
80006cba:	08 9a       	mov	r10,r4
80006cbc:	0a 9b       	mov	r11,r5
80006cbe:	ca 3d       	rcall	80007004 <__avr32_f64_mul>
80006cc0:	e0 68 fe 7d 	mov	r8,65149
80006cc4:	ea 18 57 b1 	orh	r8,0x57b1
80006cc8:	e0 69 1d e3 	mov	r9,7651
80006ccc:	ea 19 3e c7 	orh	r9,0x3ec7
80006cd0:	e0 a0 03 54 	rcall	80007378 <__avr32_f64_add>
80006cd4:	14 98       	mov	r8,r10
80006cd6:	16 99       	mov	r9,r11
80006cd8:	08 9a       	mov	r10,r4
80006cda:	0a 9b       	mov	r11,r5
80006cdc:	c9 4d       	rcall	80007004 <__avr32_f64_mul>
80006cde:	e0 68 61 d5 	mov	r8,25045
80006ce2:	ea 18 19 c1 	orh	r8,0x19c1
80006ce6:	e0 69 01 a0 	mov	r9,416
80006cea:	ea 19 3f 2a 	orh	r9,0x3f2a
80006cee:	e0 a0 02 77 	rcall	800071dc <__avr32_f64_sub>
80006cf2:	14 98       	mov	r8,r10
80006cf4:	16 99       	mov	r9,r11
80006cf6:	08 9a       	mov	r10,r4
80006cf8:	0a 9b       	mov	r11,r5
80006cfa:	c8 5d       	rcall	80007004 <__avr32_f64_mul>
80006cfc:	e0 68 f8 a6 	mov	r8,63654
80006d00:	ea 18 11 10 	orh	r8,0x1110
80006d04:	e0 69 11 11 	mov	r9,4369
80006d08:	ea 19 3f 81 	orh	r9,0x3f81
80006d0c:	e0 a0 03 36 	rcall	80007378 <__avr32_f64_add>
80006d10:	40 08       	lddsp	r8,sp[0x0]
80006d12:	14 92       	mov	r2,r10
80006d14:	16 93       	mov	r3,r11
80006d16:	58 08       	cp.w	r8,0
80006d18:	c1 c1       	brne	80006d50 <__kernel_sin+0x104>
80006d1a:	14 98       	mov	r8,r10
80006d1c:	06 99       	mov	r9,r3
80006d1e:	08 9a       	mov	r10,r4
80006d20:	0a 9b       	mov	r11,r5
80006d22:	c7 1d       	rcall	80007004 <__avr32_f64_mul>
80006d24:	e0 68 55 49 	mov	r8,21833
80006d28:	ea 18 55 55 	orh	r8,0x5555
80006d2c:	e0 69 55 55 	mov	r9,21845
80006d30:	ea 19 3f c5 	orh	r9,0x3fc5
80006d34:	e0 a0 02 54 	rcall	800071dc <__avr32_f64_sub>
80006d38:	14 98       	mov	r8,r10
80006d3a:	16 99       	mov	r9,r11
80006d3c:	00 9a       	mov	r10,r0
80006d3e:	02 9b       	mov	r11,r1
80006d40:	c6 2d       	rcall	80007004 <__avr32_f64_mul>
80006d42:	14 98       	mov	r8,r10
80006d44:	16 99       	mov	r9,r11
80006d46:	0c 9a       	mov	r10,r6
80006d48:	0e 9b       	mov	r11,r7
80006d4a:	e0 a0 03 17 	rcall	80007378 <__avr32_f64_add>
80006d4e:	c3 68       	rjmp	80006dba <__kernel_sin+0x16e>
80006d50:	30 08       	mov	r8,0
80006d52:	fc 19 3f e0 	movh	r9,0x3fe0
80006d56:	fa ea 00 08 	ld.d	r10,sp[8]
80006d5a:	c5 5d       	rcall	80007004 <__avr32_f64_mul>
80006d5c:	04 98       	mov	r8,r2
80006d5e:	fa eb 00 00 	st.d	sp[0],r10
80006d62:	06 99       	mov	r9,r3
80006d64:	00 9a       	mov	r10,r0
80006d66:	02 9b       	mov	r11,r1
80006d68:	c4 ed       	rcall	80007004 <__avr32_f64_mul>
80006d6a:	14 98       	mov	r8,r10
80006d6c:	16 99       	mov	r9,r11
80006d6e:	fa ea 00 00 	ld.d	r10,sp[0]
80006d72:	e0 a0 02 35 	rcall	800071dc <__avr32_f64_sub>
80006d76:	14 98       	mov	r8,r10
80006d78:	16 99       	mov	r9,r11
80006d7a:	08 9a       	mov	r10,r4
80006d7c:	0a 9b       	mov	r11,r5
80006d7e:	c4 3d       	rcall	80007004 <__avr32_f64_mul>
80006d80:	fa e8 00 08 	ld.d	r8,sp[8]
80006d84:	e0 a0 02 2c 	rcall	800071dc <__avr32_f64_sub>
80006d88:	e0 68 55 49 	mov	r8,21833
80006d8c:	ea 18 55 55 	orh	r8,0x5555
80006d90:	14 94       	mov	r4,r10
80006d92:	16 95       	mov	r5,r11
80006d94:	e0 69 55 55 	mov	r9,21845
80006d98:	ea 19 3f c5 	orh	r9,0x3fc5
80006d9c:	00 9a       	mov	r10,r0
80006d9e:	02 9b       	mov	r11,r1
80006da0:	c3 2d       	rcall	80007004 <__avr32_f64_mul>
80006da2:	14 98       	mov	r8,r10
80006da4:	16 99       	mov	r9,r11
80006da6:	08 9a       	mov	r10,r4
80006da8:	0a 9b       	mov	r11,r5
80006daa:	e0 a0 02 e7 	rcall	80007378 <__avr32_f64_add>
80006dae:	14 98       	mov	r8,r10
80006db0:	16 99       	mov	r9,r11
80006db2:	0c 9a       	mov	r10,r6
80006db4:	0e 9b       	mov	r11,r7
80006db6:	e0 a0 02 13 	rcall	800071dc <__avr32_f64_sub>
80006dba:	14 96       	mov	r6,r10
80006dbc:	16 97       	mov	r7,r11
80006dbe:	0c 9a       	mov	r10,r6
80006dc0:	0e 9b       	mov	r11,r7
80006dc2:	2f cd       	sub	sp,-16
80006dc4:	d8 32       	popm	r0-r7,pc
80006dc6:	d7 03       	nop

80006dc8 <fabs>:
80006dc8:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80006dcc:	12 9b       	mov	r11,r9
80006dce:	5e fc       	retal	r12

80006dd0 <floor>:
80006dd0:	d4 31       	pushm	r0-r7,lr
80006dd2:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
80006dd6:	14 98       	mov	r8,r10
80006dd8:	16 99       	mov	r9,r11
80006dda:	14 92       	mov	r2,r10
80006ddc:	16 93       	mov	r3,r11
80006dde:	16 97       	mov	r7,r11
80006de0:	14 91       	mov	r1,r10
80006de2:	14 96       	mov	r6,r10
80006de4:	e8 c5 03 ff 	sub	r5,r4,1023
80006de8:	59 35       	cp.w	r5,19
80006dea:	e0 89 00 48 	brgt	80006e7a <floor+0xaa>
80006dee:	58 05       	cp.w	r5,0
80006df0:	c2 04       	brge	80006e30 <floor+0x60>
80006df2:	e0 68 75 9c 	mov	r8,30108
80006df6:	ea 18 88 00 	orh	r8,0x8800
80006dfa:	e0 69 e4 3c 	mov	r9,58428
80006dfe:	ea 19 7e 37 	orh	r9,0x7e37
80006e02:	e0 a0 02 bb 	rcall	80007378 <__avr32_f64_add>
80006e06:	14 98       	mov	r8,r10
80006e08:	16 99       	mov	r9,r11
80006e0a:	30 0a       	mov	r10,0
80006e0c:	30 0b       	mov	r11,0
80006e0e:	e0 a0 04 0d 	rcall	80007628 <__avr32_f64_cmp_lt>
80006e12:	c6 a0       	breq	80006ee6 <floor+0x116>
80006e14:	58 03       	cp.w	r3,0
80006e16:	c0 45       	brlt	80006e1e <floor+0x4e>
80006e18:	30 06       	mov	r6,0
80006e1a:	0c 97       	mov	r7,r6
80006e1c:	c6 58       	rjmp	80006ee6 <floor+0x116>
80006e1e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80006e22:	f1 e2 10 06 	or	r6,r8,r2
80006e26:	fc 18 bf f0 	movh	r8,0xbff0
80006e2a:	f0 07 17 10 	movne	r7,r8
80006e2e:	c2 48       	rjmp	80006e76 <floor+0xa6>
80006e30:	ee 74 ff ff 	mov	r4,1048575
80006e34:	e8 05 08 44 	asr	r4,r4,r5
80006e38:	e9 eb 00 0c 	and	r12,r4,r11
80006e3c:	f9 ea 10 01 	or	r1,r12,r10
80006e40:	c5 50       	breq	80006eea <floor+0x11a>
80006e42:	e0 68 75 9c 	mov	r8,30108
80006e46:	ea 18 88 00 	orh	r8,0x8800
80006e4a:	e0 69 e4 3c 	mov	r9,58428
80006e4e:	ea 19 7e 37 	orh	r9,0x7e37
80006e52:	e0 a0 02 93 	rcall	80007378 <__avr32_f64_add>
80006e56:	14 98       	mov	r8,r10
80006e58:	16 99       	mov	r9,r11
80006e5a:	30 0a       	mov	r10,0
80006e5c:	30 0b       	mov	r11,0
80006e5e:	e0 a0 03 e5 	rcall	80007628 <__avr32_f64_cmp_lt>
80006e62:	c4 20       	breq	80006ee6 <floor+0x116>
80006e64:	58 03       	cp.w	r3,0
80006e66:	c0 64       	brge	80006e72 <floor+0xa2>
80006e68:	fc 18 00 10 	movh	r8,0x10
80006e6c:	f0 05 08 45 	asr	r5,r8,r5
80006e70:	0a 07       	add	r7,r5
80006e72:	5c d4       	com	r4
80006e74:	08 67       	and	r7,r4
80006e76:	30 06       	mov	r6,0
80006e78:	c3 78       	rjmp	80006ee6 <floor+0x116>
80006e7a:	e0 45 00 33 	cp.w	r5,51
80006e7e:	e0 8a 00 0a 	brle	80006e92 <floor+0xc2>
80006e82:	e0 45 04 00 	cp.w	r5,1024
80006e86:	c3 21       	brne	80006eea <floor+0x11a>
80006e88:	e0 a0 02 78 	rcall	80007378 <__avr32_f64_add>
80006e8c:	14 98       	mov	r8,r10
80006e8e:	16 99       	mov	r9,r11
80006e90:	c2 d8       	rjmp	80006eea <floor+0x11a>
80006e92:	3f fc       	mov	r12,-1
80006e94:	e8 c4 04 13 	sub	r4,r4,1043
80006e98:	f8 04 0a 44 	lsr	r4,r12,r4
80006e9c:	e9 ea 00 0c 	and	r12,r4,r10
80006ea0:	c2 50       	breq	80006eea <floor+0x11a>
80006ea2:	e0 68 75 9c 	mov	r8,30108
80006ea6:	ea 18 88 00 	orh	r8,0x8800
80006eaa:	e0 69 e4 3c 	mov	r9,58428
80006eae:	ea 19 7e 37 	orh	r9,0x7e37
80006eb2:	e0 a0 02 63 	rcall	80007378 <__avr32_f64_add>
80006eb6:	14 98       	mov	r8,r10
80006eb8:	16 99       	mov	r9,r11
80006eba:	30 0a       	mov	r10,0
80006ebc:	30 0b       	mov	r11,0
80006ebe:	e0 a0 03 b5 	rcall	80007628 <__avr32_f64_cmp_lt>
80006ec2:	c1 20       	breq	80006ee6 <floor+0x116>
80006ec4:	58 03       	cp.w	r3,0
80006ec6:	c0 e4       	brge	80006ee2 <floor+0x112>
80006ec8:	59 45       	cp.w	r5,20
80006eca:	c0 31       	brne	80006ed0 <floor+0x100>
80006ecc:	2f f7       	sub	r7,-1
80006ece:	c0 a8       	rjmp	80006ee2 <floor+0x112>
80006ed0:	30 18       	mov	r8,1
80006ed2:	ea 05 11 34 	rsub	r5,r5,52
80006ed6:	f0 05 09 45 	lsl	r5,r8,r5
80006eda:	0a 06       	add	r6,r5
80006edc:	04 36       	cp.w	r6,r2
80006ede:	e7 d8 e3 07 	addcs	r7,r3,r8
80006ee2:	5c d4       	com	r4
80006ee4:	08 66       	and	r6,r4
80006ee6:	0e 99       	mov	r9,r7
80006ee8:	0c 98       	mov	r8,r6
80006eea:	10 9a       	mov	r10,r8
80006eec:	12 9b       	mov	r11,r9
80006eee:	d8 32       	popm	r0-r7,pc

80006ef0 <__isnand>:
80006ef0:	14 98       	mov	r8,r10
80006ef2:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80006ef6:	f0 0c 11 00 	rsub	r12,r8,0
80006efa:	10 4c       	or	r12,r8
80006efc:	fc 18 7f f0 	movh	r8,0x7ff0
80006f00:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80006f04:	f0 0c 01 0c 	sub	r12,r8,r12
80006f08:	bf 9c       	lsr	r12,0x1f
80006f0a:	5e fc       	retal	r12

80006f0c <matherr>:
80006f0c:	5e fd       	retal	0
80006f0e:	d7 03       	nop

80006f10 <scalbn>:
80006f10:	d4 21       	pushm	r4-r7,lr
80006f12:	18 97       	mov	r7,r12
80006f14:	14 98       	mov	r8,r10
80006f16:	16 99       	mov	r9,r11
80006f18:	14 94       	mov	r4,r10
80006f1a:	16 95       	mov	r5,r11
80006f1c:	14 96       	mov	r6,r10
80006f1e:	16 9c       	mov	r12,r11
80006f20:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
80006f24:	c1 11       	brne	80006f46 <scalbn+0x36>
80006f26:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80006f2a:	14 4c       	or	r12,r10
80006f2c:	c5 c0       	breq	80006fe4 <scalbn+0xd4>
80006f2e:	30 08       	mov	r8,0
80006f30:	fc 19 43 50 	movh	r9,0x4350
80006f34:	c6 8c       	rcall	80007004 <__avr32_f64_mul>
80006f36:	16 99       	mov	r9,r11
80006f38:	14 98       	mov	r8,r10
80006f3a:	14 94       	mov	r4,r10
80006f3c:	12 95       	mov	r5,r9
80006f3e:	fe 57 3c b0 	cp.w	r7,-50000
80006f42:	c0 84       	brge	80006f52 <scalbn+0x42>
80006f44:	c3 a8       	rjmp	80006fb8 <scalbn+0xa8>
80006f46:	e0 4e 07 ff 	cp.w	lr,2047
80006f4a:	c0 81       	brne	80006f5a <scalbn+0x4a>
80006f4c:	e0 a0 02 16 	rcall	80007378 <__avr32_f64_add>
80006f50:	c4 88       	rjmp	80006fe0 <scalbn+0xd0>
80006f52:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
80006f56:	12 9c       	mov	r12,r9
80006f58:	23 6e       	sub	lr,54
80006f5a:	0e 0e       	add	lr,r7
80006f5c:	e0 4e 07 fe 	cp.w	lr,2046
80006f60:	e0 89 00 11 	brgt	80006f82 <scalbn+0x72>
80006f64:	58 0e       	cp.w	lr,0
80006f66:	e0 8a 00 07 	brle	80006f74 <scalbn+0x64>
80006f6a:	e4 1c 80 0f 	andh	r12,0x800f
80006f6e:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80006f72:	c3 98       	rjmp	80006fe4 <scalbn+0xd4>
80006f74:	fe 5e ff cb 	cp.w	lr,-53
80006f78:	c2 94       	brge	80006fca <scalbn+0xba>
80006f7a:	e0 47 c3 50 	cp.w	r7,50000
80006f7e:	e0 8a 00 14 	brle	80006fa6 <scalbn+0x96>
80006f82:	e0 6a 75 9c 	mov	r10,30108
80006f86:	ea 1a 88 00 	orh	r10,0x8800
80006f8a:	e0 6b e4 3c 	mov	r11,58428
80006f8e:	ea 1b 7e 37 	orh	r11,0x7e37
80006f92:	c2 dc       	rcall	80006fec <copysign>
80006f94:	e0 68 75 9c 	mov	r8,30108
80006f98:	ea 18 88 00 	orh	r8,0x8800
80006f9c:	e0 69 e4 3c 	mov	r9,58428
80006fa0:	ea 19 7e 37 	orh	r9,0x7e37
80006fa4:	c1 d8       	rjmp	80006fde <scalbn+0xce>
80006fa6:	e0 6a f3 59 	mov	r10,62297
80006faa:	ea 1a c2 f8 	orh	r10,0xc2f8
80006fae:	e0 6b 6e 1f 	mov	r11,28191
80006fb2:	ea 1b 01 a5 	orh	r11,0x1a5
80006fb6:	c1 bc       	rcall	80006fec <copysign>
80006fb8:	e0 68 f3 59 	mov	r8,62297
80006fbc:	ea 18 c2 f8 	orh	r8,0xc2f8
80006fc0:	e0 69 6e 1f 	mov	r9,28191
80006fc4:	ea 19 01 a5 	orh	r9,0x1a5
80006fc8:	c0 b8       	rjmp	80006fde <scalbn+0xce>
80006fca:	2c ae       	sub	lr,-54
80006fcc:	e4 1c 80 0f 	andh	r12,0x800f
80006fd0:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80006fd4:	10 9a       	mov	r10,r8
80006fd6:	12 9b       	mov	r11,r9
80006fd8:	30 08       	mov	r8,0
80006fda:	fc 19 3c 90 	movh	r9,0x3c90
80006fde:	c1 3c       	rcall	80007004 <__avr32_f64_mul>
80006fe0:	14 98       	mov	r8,r10
80006fe2:	16 99       	mov	r9,r11
80006fe4:	10 9a       	mov	r10,r8
80006fe6:	12 9b       	mov	r11,r9
80006fe8:	d8 22       	popm	r4-r7,pc
80006fea:	d7 03       	nop

80006fec <copysign>:
80006fec:	d4 21       	pushm	r4-r7,lr
80006fee:	e6 19 80 00 	andh	r9,0x8000,COH
80006ff2:	16 95       	mov	r5,r11
80006ff4:	14 94       	mov	r4,r10
80006ff6:	14 96       	mov	r6,r10
80006ff8:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80006ffc:	f3 eb 10 0b 	or	r11,r9,r11
80007000:	16 97       	mov	r7,r11
80007002:	d8 22       	popm	r4-r7,pc

80007004 <__avr32_f64_mul>:
80007004:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80007008:	e0 80 00 dc 	breq	800071c0 <__avr32_f64_mul_op1_zero>
8000700c:	d4 21       	pushm	r4-r7,lr
8000700e:	f7 e9 20 0e 	eor	lr,r11,r9
80007012:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80007016:	30 15       	mov	r5,1
80007018:	c4 30       	breq	8000709e <__avr32_f64_mul_op1_subnormal>
8000701a:	ab 6b       	lsl	r11,0xa
8000701c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80007020:	ab 6a       	lsl	r10,0xa
80007022:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80007026:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000702a:	c5 c0       	breq	800070e2 <__avr32_f64_mul_op2_subnormal>
8000702c:	a1 78       	lsl	r8,0x1
8000702e:	5c f9       	rol	r9
80007030:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80007034:	e0 47 07 ff 	cp.w	r7,2047
80007038:	c7 70       	breq	80007126 <__avr32_f64_mul_op_nan_or_inf>
8000703a:	e0 46 07 ff 	cp.w	r6,2047
8000703e:	c7 40       	breq	80007126 <__avr32_f64_mul_op_nan_or_inf>
80007040:	ee 06 00 0c 	add	r12,r7,r6
80007044:	e0 2c 03 fe 	sub	r12,1022
80007048:	f6 08 06 44 	mulu.d	r4,r11,r8
8000704c:	f4 09 07 44 	macu.d	r4,r10,r9
80007050:	f4 08 06 46 	mulu.d	r6,r10,r8
80007054:	f6 09 06 4a 	mulu.d	r10,r11,r9
80007058:	08 07       	add	r7,r4
8000705a:	f4 05 00 4a 	adc	r10,r10,r5
8000705e:	5c 0b       	acr	r11
80007060:	ed bb 00 14 	bld	r11,0x14
80007064:	c0 50       	breq	8000706e <__avr32_f64_mul+0x6a>
80007066:	a1 77       	lsl	r7,0x1
80007068:	5c fa       	rol	r10
8000706a:	5c fb       	rol	r11
8000706c:	20 1c       	sub	r12,1
8000706e:	58 0c       	cp.w	r12,0
80007070:	e0 8a 00 6f 	brle	8000714e <__avr32_f64_mul_res_subnormal>
80007074:	e0 4c 07 ff 	cp.w	r12,2047
80007078:	e0 84 00 9c 	brge	800071b0 <__avr32_f64_mul_res_inf>
8000707c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80007080:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80007084:	ef e6 12 17 	or	r7,r7,r6>>0x1
80007088:	ee 17 80 00 	eorh	r7,0x8000
8000708c:	f1 b7 04 20 	satu	r7,0x1
80007090:	0e 0a       	add	r10,r7
80007092:	5c 0b       	acr	r11
80007094:	ed be 00 1f 	bld	lr,0x1f
80007098:	ef bb 00 1f 	bst	r11,0x1f
8000709c:	d8 22       	popm	r4-r7,pc

8000709e <__avr32_f64_mul_op1_subnormal>:
8000709e:	e4 1b 00 0f 	andh	r11,0xf
800070a2:	f4 0c 12 00 	clz	r12,r10
800070a6:	f6 06 12 00 	clz	r6,r11
800070aa:	f7 bc 03 e1 	sublo	r12,-31
800070ae:	f8 06 17 30 	movlo	r6,r12
800070b2:	f7 b6 02 01 	subhs	r6,1
800070b6:	e0 46 00 20 	cp.w	r6,32
800070ba:	c0 d4       	brge	800070d4 <__avr32_f64_mul_op1_subnormal+0x36>
800070bc:	ec 0c 11 20 	rsub	r12,r6,32
800070c0:	f6 06 09 4b 	lsl	r11,r11,r6
800070c4:	f4 0c 0a 4c 	lsr	r12,r10,r12
800070c8:	18 4b       	or	r11,r12
800070ca:	f4 06 09 4a 	lsl	r10,r10,r6
800070ce:	20 b6       	sub	r6,11
800070d0:	0c 17       	sub	r7,r6
800070d2:	ca ab       	rjmp	80007026 <__avr32_f64_mul+0x22>
800070d4:	f4 06 09 4b 	lsl	r11,r10,r6
800070d8:	c6 40       	breq	800071a0 <__avr32_f64_mul_res_zero>
800070da:	30 0a       	mov	r10,0
800070dc:	20 b6       	sub	r6,11
800070de:	0c 17       	sub	r7,r6
800070e0:	ca 3b       	rjmp	80007026 <__avr32_f64_mul+0x22>

800070e2 <__avr32_f64_mul_op2_subnormal>:
800070e2:	e4 19 00 0f 	andh	r9,0xf
800070e6:	f0 0c 12 00 	clz	r12,r8
800070ea:	f2 05 12 00 	clz	r5,r9
800070ee:	f7 bc 03 ea 	sublo	r12,-22
800070f2:	f8 05 17 30 	movlo	r5,r12
800070f6:	f7 b5 02 0a 	subhs	r5,10
800070fa:	e0 45 00 20 	cp.w	r5,32
800070fe:	c0 d4       	brge	80007118 <__avr32_f64_mul_op2_subnormal+0x36>
80007100:	ea 0c 11 20 	rsub	r12,r5,32
80007104:	f2 05 09 49 	lsl	r9,r9,r5
80007108:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000710c:	18 49       	or	r9,r12
8000710e:	f0 05 09 48 	lsl	r8,r8,r5
80007112:	20 25       	sub	r5,2
80007114:	0a 16       	sub	r6,r5
80007116:	c8 fb       	rjmp	80007034 <__avr32_f64_mul+0x30>
80007118:	f0 05 09 49 	lsl	r9,r8,r5
8000711c:	c4 20       	breq	800071a0 <__avr32_f64_mul_res_zero>
8000711e:	30 08       	mov	r8,0
80007120:	20 25       	sub	r5,2
80007122:	0a 16       	sub	r6,r5
80007124:	c8 8b       	rjmp	80007034 <__avr32_f64_mul+0x30>

80007126 <__avr32_f64_mul_op_nan_or_inf>:
80007126:	e4 19 00 0f 	andh	r9,0xf
8000712a:	e4 1b 00 0f 	andh	r11,0xf
8000712e:	14 4b       	or	r11,r10
80007130:	10 49       	or	r9,r8
80007132:	e0 47 07 ff 	cp.w	r7,2047
80007136:	c0 91       	brne	80007148 <__avr32_f64_mul_op1_not_naninf>
80007138:	58 0b       	cp.w	r11,0
8000713a:	c3 81       	brne	800071aa <__avr32_f64_mul_res_nan>
8000713c:	e0 46 07 ff 	cp.w	r6,2047
80007140:	c3 81       	brne	800071b0 <__avr32_f64_mul_res_inf>
80007142:	58 09       	cp.w	r9,0
80007144:	c3 60       	breq	800071b0 <__avr32_f64_mul_res_inf>
80007146:	c3 28       	rjmp	800071aa <__avr32_f64_mul_res_nan>

80007148 <__avr32_f64_mul_op1_not_naninf>:
80007148:	58 09       	cp.w	r9,0
8000714a:	c3 30       	breq	800071b0 <__avr32_f64_mul_res_inf>
8000714c:	c2 f8       	rjmp	800071aa <__avr32_f64_mul_res_nan>

8000714e <__avr32_f64_mul_res_subnormal>:
8000714e:	5c 3c       	neg	r12
80007150:	2f fc       	sub	r12,-1
80007152:	f1 bc 04 c0 	satu	r12,0x6
80007156:	e0 4c 00 20 	cp.w	r12,32
8000715a:	c1 14       	brge	8000717c <__avr32_f64_mul_res_subnormal+0x2e>
8000715c:	f8 08 11 20 	rsub	r8,r12,32
80007160:	0e 46       	or	r6,r7
80007162:	ee 0c 0a 47 	lsr	r7,r7,r12
80007166:	f4 08 09 49 	lsl	r9,r10,r8
8000716a:	12 47       	or	r7,r9
8000716c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007170:	f6 08 09 49 	lsl	r9,r11,r8
80007174:	12 4a       	or	r10,r9
80007176:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000717a:	c8 3b       	rjmp	80007080 <__avr32_f64_mul+0x7c>
8000717c:	f8 08 11 20 	rsub	r8,r12,32
80007180:	f9 b9 00 00 	moveq	r9,0
80007184:	c0 30       	breq	8000718a <__avr32_f64_mul_res_subnormal+0x3c>
80007186:	f6 08 09 49 	lsl	r9,r11,r8
8000718a:	0e 46       	or	r6,r7
8000718c:	ed ea 10 16 	or	r6,r6,r10<<0x1
80007190:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007194:	f3 ea 10 07 	or	r7,r9,r10
80007198:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000719c:	30 0b       	mov	r11,0
8000719e:	c7 1b       	rjmp	80007080 <__avr32_f64_mul+0x7c>

800071a0 <__avr32_f64_mul_res_zero>:
800071a0:	1c 9b       	mov	r11,lr
800071a2:	e6 1b 80 00 	andh	r11,0x8000,COH
800071a6:	30 0a       	mov	r10,0
800071a8:	d8 22       	popm	r4-r7,pc

800071aa <__avr32_f64_mul_res_nan>:
800071aa:	3f fb       	mov	r11,-1
800071ac:	3f fa       	mov	r10,-1
800071ae:	d8 22       	popm	r4-r7,pc

800071b0 <__avr32_f64_mul_res_inf>:
800071b0:	f0 6b 00 00 	mov	r11,-1048576
800071b4:	ed be 00 1f 	bld	lr,0x1f
800071b8:	ef bb 00 1f 	bst	r11,0x1f
800071bc:	30 0a       	mov	r10,0
800071be:	d8 22       	popm	r4-r7,pc

800071c0 <__avr32_f64_mul_op1_zero>:
800071c0:	f7 e9 20 0b 	eor	r11,r11,r9
800071c4:	e6 1b 80 00 	andh	r11,0x8000,COH
800071c8:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800071cc:	e0 4c 07 ff 	cp.w	r12,2047
800071d0:	5e 1c       	retne	r12
800071d2:	3f fa       	mov	r10,-1
800071d4:	3f fb       	mov	r11,-1
800071d6:	5e fc       	retal	r12

800071d8 <__avr32_f64_sub_from_add>:
800071d8:	ee 19 80 00 	eorh	r9,0x8000

800071dc <__avr32_f64_sub>:
800071dc:	f7 e9 20 0c 	eor	r12,r11,r9
800071e0:	e0 86 00 ca 	brmi	80007374 <__avr32_f64_add_from_sub>
800071e4:	eb cd 40 e0 	pushm	r5-r7,lr
800071e8:	16 9c       	mov	r12,r11
800071ea:	e6 1c 80 00 	andh	r12,0x8000,COH
800071ee:	bf db       	cbr	r11,0x1f
800071f0:	bf d9       	cbr	r9,0x1f
800071f2:	10 3a       	cp.w	r10,r8
800071f4:	f2 0b 13 00 	cpc	r11,r9
800071f8:	c0 92       	brcc	8000720a <__avr32_f64_sub+0x2e>
800071fa:	16 97       	mov	r7,r11
800071fc:	12 9b       	mov	r11,r9
800071fe:	0e 99       	mov	r9,r7
80007200:	14 97       	mov	r7,r10
80007202:	10 9a       	mov	r10,r8
80007204:	0e 98       	mov	r8,r7
80007206:	ee 1c 80 00 	eorh	r12,0x8000
8000720a:	f6 07 16 14 	lsr	r7,r11,0x14
8000720e:	ab 7b       	lsl	r11,0xb
80007210:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80007214:	ab 7a       	lsl	r10,0xb
80007216:	bf bb       	sbr	r11,0x1f
80007218:	f2 06 16 14 	lsr	r6,r9,0x14
8000721c:	c4 40       	breq	800072a4 <__avr32_f64_sub_opL_subnormal>
8000721e:	ab 79       	lsl	r9,0xb
80007220:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80007224:	ab 78       	lsl	r8,0xb
80007226:	bf b9       	sbr	r9,0x1f

80007228 <__avr32_f64_sub_opL_subnormal_done>:
80007228:	e0 47 07 ff 	cp.w	r7,2047
8000722c:	c4 f0       	breq	800072ca <__avr32_f64_sub_opH_nan_or_inf>
8000722e:	0e 26       	rsub	r6,r7
80007230:	c1 20       	breq	80007254 <__avr32_f64_sub_shift_done>
80007232:	ec 05 11 20 	rsub	r5,r6,32
80007236:	e0 46 00 20 	cp.w	r6,32
8000723a:	c7 c2       	brcc	80007332 <__avr32_f64_sub_longshift>
8000723c:	f0 05 09 4e 	lsl	lr,r8,r5
80007240:	f2 05 09 45 	lsl	r5,r9,r5
80007244:	f0 06 0a 48 	lsr	r8,r8,r6
80007248:	f2 06 0a 49 	lsr	r9,r9,r6
8000724c:	0a 48       	or	r8,r5
8000724e:	58 0e       	cp.w	lr,0
80007250:	5f 1e       	srne	lr
80007252:	1c 48       	or	r8,lr

80007254 <__avr32_f64_sub_shift_done>:
80007254:	10 1a       	sub	r10,r8
80007256:	f6 09 01 4b 	sbc	r11,r11,r9
8000725a:	f6 06 12 00 	clz	r6,r11
8000725e:	c0 e0       	breq	8000727a <__avr32_f64_sub_longnormalize_done>
80007260:	c7 83       	brcs	80007350 <__avr32_f64_sub_longnormalize>
80007262:	ec 0e 11 20 	rsub	lr,r6,32
80007266:	f6 06 09 4b 	lsl	r11,r11,r6
8000726a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000726e:	1c 4b       	or	r11,lr
80007270:	f4 06 09 4a 	lsl	r10,r10,r6
80007274:	0c 17       	sub	r7,r6
80007276:	e0 8a 00 39 	brle	800072e8 <__avr32_f64_sub_subnormal_result>

8000727a <__avr32_f64_sub_longnormalize_done>:
8000727a:	f4 09 15 15 	lsl	r9,r10,0x15
8000727e:	ab 9a       	lsr	r10,0xb
80007280:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80007284:	ab 9b       	lsr	r11,0xb
80007286:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000728a:	18 4b       	or	r11,r12

8000728c <__avr32_f64_sub_round>:
8000728c:	fc 17 80 00 	movh	r7,0x8000
80007290:	ed ba 00 00 	bld	r10,0x0
80007294:	f7 b7 01 ff 	subne	r7,-1
80007298:	0e 39       	cp.w	r9,r7
8000729a:	5f 29       	srhs	r9
8000729c:	12 0a       	add	r10,r9
8000729e:	5c 0b       	acr	r11
800072a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800072a4 <__avr32_f64_sub_opL_subnormal>:
800072a4:	ab 79       	lsl	r9,0xb
800072a6:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800072aa:	ab 78       	lsl	r8,0xb
800072ac:	f3 e8 10 0e 	or	lr,r9,r8
800072b0:	f9 b6 01 01 	movne	r6,1
800072b4:	ee 0e 11 00 	rsub	lr,r7,0
800072b8:	f9 b7 00 01 	moveq	r7,1
800072bc:	ef bb 00 1f 	bst	r11,0x1f
800072c0:	f7 ea 10 0e 	or	lr,r11,r10
800072c4:	f9 b7 00 00 	moveq	r7,0
800072c8:	cb 0b       	rjmp	80007228 <__avr32_f64_sub_opL_subnormal_done>

800072ca <__avr32_f64_sub_opH_nan_or_inf>:
800072ca:	bf db       	cbr	r11,0x1f
800072cc:	f7 ea 10 0e 	or	lr,r11,r10
800072d0:	c0 81       	brne	800072e0 <__avr32_f64_sub_return_nan>
800072d2:	e0 46 07 ff 	cp.w	r6,2047
800072d6:	c0 50       	breq	800072e0 <__avr32_f64_sub_return_nan>
800072d8:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800072dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800072e0 <__avr32_f64_sub_return_nan>:
800072e0:	3f fa       	mov	r10,-1
800072e2:	3f fb       	mov	r11,-1
800072e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800072e8 <__avr32_f64_sub_subnormal_result>:
800072e8:	5c 37       	neg	r7
800072ea:	2f f7       	sub	r7,-1
800072ec:	f1 b7 04 c0 	satu	r7,0x6
800072f0:	e0 47 00 20 	cp.w	r7,32
800072f4:	c1 14       	brge	80007316 <__avr32_f64_sub_subnormal_result+0x2e>
800072f6:	ee 08 11 20 	rsub	r8,r7,32
800072fa:	f4 08 09 49 	lsl	r9,r10,r8
800072fe:	5f 16       	srne	r6
80007300:	f4 07 0a 4a 	lsr	r10,r10,r7
80007304:	0c 4a       	or	r10,r6
80007306:	f6 08 09 49 	lsl	r9,r11,r8
8000730a:	f5 e9 10 0a 	or	r10,r10,r9
8000730e:	f4 07 0a 4b 	lsr	r11,r10,r7
80007312:	30 07       	mov	r7,0
80007314:	cb 3b       	rjmp	8000727a <__avr32_f64_sub_longnormalize_done>
80007316:	ee 08 11 40 	rsub	r8,r7,64
8000731a:	f6 08 09 49 	lsl	r9,r11,r8
8000731e:	14 49       	or	r9,r10
80007320:	5f 16       	srne	r6
80007322:	f6 07 0a 4a 	lsr	r10,r11,r7
80007326:	0c 4a       	or	r10,r6
80007328:	30 0b       	mov	r11,0
8000732a:	30 07       	mov	r7,0
8000732c:	ca 7b       	rjmp	8000727a <__avr32_f64_sub_longnormalize_done>
8000732e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80007332 <__avr32_f64_sub_longshift>:
80007332:	f1 b6 04 c0 	satu	r6,0x6
80007336:	f0 0e 17 00 	moveq	lr,r8
8000733a:	c0 40       	breq	80007342 <__avr32_f64_sub_longshift+0x10>
8000733c:	f2 05 09 4e 	lsl	lr,r9,r5
80007340:	10 4e       	or	lr,r8
80007342:	f2 06 0a 48 	lsr	r8,r9,r6
80007346:	30 09       	mov	r9,0
80007348:	58 0e       	cp.w	lr,0
8000734a:	5f 1e       	srne	lr
8000734c:	1c 48       	or	r8,lr
8000734e:	c8 3b       	rjmp	80007254 <__avr32_f64_sub_shift_done>

80007350 <__avr32_f64_sub_longnormalize>:
80007350:	f4 06 12 00 	clz	r6,r10
80007354:	f9 b7 03 00 	movlo	r7,0
80007358:	f9 b6 03 00 	movlo	r6,0
8000735c:	f9 bc 03 00 	movlo	r12,0
80007360:	f7 b6 02 e0 	subhs	r6,-32
80007364:	f4 06 09 4b 	lsl	r11,r10,r6
80007368:	30 0a       	mov	r10,0
8000736a:	0c 17       	sub	r7,r6
8000736c:	fe 9a ff be 	brle	800072e8 <__avr32_f64_sub_subnormal_result>
80007370:	c8 5b       	rjmp	8000727a <__avr32_f64_sub_longnormalize_done>
80007372:	d7 03       	nop

80007374 <__avr32_f64_add_from_sub>:
80007374:	ee 19 80 00 	eorh	r9,0x8000

80007378 <__avr32_f64_add>:
80007378:	f7 e9 20 0c 	eor	r12,r11,r9
8000737c:	fe 96 ff 2e 	brmi	800071d8 <__avr32_f64_sub_from_add>
80007380:	eb cd 40 e0 	pushm	r5-r7,lr
80007384:	16 9c       	mov	r12,r11
80007386:	e6 1c 80 00 	andh	r12,0x8000,COH
8000738a:	bf db       	cbr	r11,0x1f
8000738c:	bf d9       	cbr	r9,0x1f
8000738e:	12 3b       	cp.w	r11,r9
80007390:	c0 72       	brcc	8000739e <__avr32_f64_add+0x26>
80007392:	16 97       	mov	r7,r11
80007394:	12 9b       	mov	r11,r9
80007396:	0e 99       	mov	r9,r7
80007398:	14 97       	mov	r7,r10
8000739a:	10 9a       	mov	r10,r8
8000739c:	0e 98       	mov	r8,r7
8000739e:	30 0e       	mov	lr,0
800073a0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800073a4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800073a8:	b5 ab       	sbr	r11,0x14
800073aa:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800073ae:	c6 20       	breq	80007472 <__avr32_f64_add_op2_subnormal>
800073b0:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800073b4:	b5 a9       	sbr	r9,0x14
800073b6:	e0 47 07 ff 	cp.w	r7,2047
800073ba:	c2 80       	breq	8000740a <__avr32_f64_add_opH_nan_or_inf>
800073bc:	0e 26       	rsub	r6,r7
800073be:	c1 20       	breq	800073e2 <__avr32_f64_add_shift_done>
800073c0:	e0 46 00 36 	cp.w	r6,54
800073c4:	c1 52       	brcc	800073ee <__avr32_f64_add_res_of_done>
800073c6:	ec 05 11 20 	rsub	r5,r6,32
800073ca:	e0 46 00 20 	cp.w	r6,32
800073ce:	c3 52       	brcc	80007438 <__avr32_f64_add_longshift>
800073d0:	f0 05 09 4e 	lsl	lr,r8,r5
800073d4:	f2 05 09 45 	lsl	r5,r9,r5
800073d8:	f0 06 0a 48 	lsr	r8,r8,r6
800073dc:	f2 06 0a 49 	lsr	r9,r9,r6
800073e0:	0a 48       	or	r8,r5

800073e2 <__avr32_f64_add_shift_done>:
800073e2:	10 0a       	add	r10,r8
800073e4:	f6 09 00 4b 	adc	r11,r11,r9
800073e8:	ed bb 00 15 	bld	r11,0x15
800073ec:	c3 40       	breq	80007454 <__avr32_f64_add_res_of>

800073ee <__avr32_f64_add_res_of_done>:
800073ee:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800073f2:	18 4b       	or	r11,r12

800073f4 <__avr32_f64_add_round>:
800073f4:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800073f8:	18 4e       	or	lr,r12
800073fa:	ee 1e 80 00 	eorh	lr,0x8000
800073fe:	f1 be 04 20 	satu	lr,0x1
80007402:	1c 0a       	add	r10,lr
80007404:	5c 0b       	acr	r11
80007406:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000740a <__avr32_f64_add_opH_nan_or_inf>:
8000740a:	b5 cb       	cbr	r11,0x14
8000740c:	f7 ea 10 0e 	or	lr,r11,r10
80007410:	c1 01       	brne	80007430 <__avr32_f64_add_return_nan>
80007412:	e0 46 07 ff 	cp.w	r6,2047
80007416:	c0 30       	breq	8000741c <__avr32_f64_add_opL_nan_or_inf>
80007418:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000741c <__avr32_f64_add_opL_nan_or_inf>:
8000741c:	b5 c9       	cbr	r9,0x14
8000741e:	f3 e8 10 0e 	or	lr,r9,r8
80007422:	c0 71       	brne	80007430 <__avr32_f64_add_return_nan>
80007424:	30 0a       	mov	r10,0
80007426:	fc 1b 7f f0 	movh	r11,0x7ff0
8000742a:	18 4b       	or	r11,r12
8000742c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80007430 <__avr32_f64_add_return_nan>:
80007430:	3f fa       	mov	r10,-1
80007432:	3f fb       	mov	r11,-1
80007434:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80007438 <__avr32_f64_add_longshift>:
80007438:	f1 b6 04 c0 	satu	r6,0x6
8000743c:	f0 0e 17 00 	moveq	lr,r8
80007440:	c0 60       	breq	8000744c <__avr32_f64_add_longshift+0x14>
80007442:	f2 05 09 4e 	lsl	lr,r9,r5
80007446:	58 08       	cp.w	r8,0
80007448:	5f 18       	srne	r8
8000744a:	10 4e       	or	lr,r8
8000744c:	f2 06 0a 48 	lsr	r8,r9,r6
80007450:	30 09       	mov	r9,0
80007452:	cc 8b       	rjmp	800073e2 <__avr32_f64_add_shift_done>

80007454 <__avr32_f64_add_res_of>:
80007454:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80007458:	a1 9b       	lsr	r11,0x1
8000745a:	5d 0a       	ror	r10
8000745c:	5d 0e       	ror	lr
8000745e:	2f f7       	sub	r7,-1
80007460:	e0 47 07 ff 	cp.w	r7,2047
80007464:	f9 ba 00 00 	moveq	r10,0
80007468:	f9 bb 00 00 	moveq	r11,0
8000746c:	f9 be 00 00 	moveq	lr,0
80007470:	cb fb       	rjmp	800073ee <__avr32_f64_add_res_of_done>

80007472 <__avr32_f64_add_op2_subnormal>:
80007472:	30 16       	mov	r6,1
80007474:	58 07       	cp.w	r7,0
80007476:	ca 01       	brne	800073b6 <__avr32_f64_add+0x3e>
80007478:	b5 cb       	cbr	r11,0x14
8000747a:	10 0a       	add	r10,r8
8000747c:	f6 09 00 4b 	adc	r11,r11,r9
80007480:	18 4b       	or	r11,r12
80007482:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007486:	d7 03       	nop

80007488 <__avr32_f64_to_u32>:
80007488:	58 0b       	cp.w	r11,0
8000748a:	5e 6d       	retmi	0

8000748c <__avr32_f64_to_s32>:
8000748c:	f6 0c 15 01 	lsl	r12,r11,0x1
80007490:	b5 9c       	lsr	r12,0x15
80007492:	e0 2c 03 ff 	sub	r12,1023
80007496:	5e 3d       	retlo	0
80007498:	f8 0c 11 1f 	rsub	r12,r12,31
8000749c:	16 99       	mov	r9,r11
8000749e:	ab 7b       	lsl	r11,0xb
800074a0:	bf bb       	sbr	r11,0x1f
800074a2:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800074a6:	f6 0c 0a 4b 	lsr	r11,r11,r12
800074aa:	a1 79       	lsl	r9,0x1
800074ac:	5e 2b       	reths	r11
800074ae:	5c 3b       	neg	r11
800074b0:	5e fb       	retal	r11

800074b2 <__avr32_u32_to_f64>:
800074b2:	f8 cb 00 00 	sub	r11,r12,0
800074b6:	30 0c       	mov	r12,0
800074b8:	c0 38       	rjmp	800074be <__avr32_s32_to_f64+0x4>

800074ba <__avr32_s32_to_f64>:
800074ba:	18 9b       	mov	r11,r12
800074bc:	5c 4b       	abs	r11
800074be:	30 0a       	mov	r10,0
800074c0:	5e 0b       	reteq	r11
800074c2:	d4 01       	pushm	lr
800074c4:	e0 69 04 1e 	mov	r9,1054
800074c8:	f6 08 12 00 	clz	r8,r11
800074cc:	c1 70       	breq	800074fa <__avr32_s32_to_f64+0x40>
800074ce:	c0 c3       	brcs	800074e6 <__avr32_s32_to_f64+0x2c>
800074d0:	f0 0e 11 20 	rsub	lr,r8,32
800074d4:	f6 08 09 4b 	lsl	r11,r11,r8
800074d8:	f4 0e 0a 4e 	lsr	lr,r10,lr
800074dc:	1c 4b       	or	r11,lr
800074de:	f4 08 09 4a 	lsl	r10,r10,r8
800074e2:	10 19       	sub	r9,r8
800074e4:	c0 b8       	rjmp	800074fa <__avr32_s32_to_f64+0x40>
800074e6:	f4 08 12 00 	clz	r8,r10
800074ea:	f9 b8 03 00 	movlo	r8,0
800074ee:	f7 b8 02 e0 	subhs	r8,-32
800074f2:	f4 08 09 4b 	lsl	r11,r10,r8
800074f6:	30 0a       	mov	r10,0
800074f8:	10 19       	sub	r9,r8
800074fa:	58 09       	cp.w	r9,0
800074fc:	e0 89 00 30 	brgt	8000755c <__avr32_s32_to_f64+0xa2>
80007500:	5c 39       	neg	r9
80007502:	2f f9       	sub	r9,-1
80007504:	e0 49 00 36 	cp.w	r9,54
80007508:	c0 43       	brcs	80007510 <__avr32_s32_to_f64+0x56>
8000750a:	30 0b       	mov	r11,0
8000750c:	30 0a       	mov	r10,0
8000750e:	c2 68       	rjmp	8000755a <__avr32_s32_to_f64+0xa0>
80007510:	2f 69       	sub	r9,-10
80007512:	f2 08 11 20 	rsub	r8,r9,32
80007516:	e0 49 00 20 	cp.w	r9,32
8000751a:	c0 b2       	brcc	80007530 <__avr32_s32_to_f64+0x76>
8000751c:	f4 08 09 4e 	lsl	lr,r10,r8
80007520:	f6 08 09 48 	lsl	r8,r11,r8
80007524:	f4 09 0a 4a 	lsr	r10,r10,r9
80007528:	f6 09 0a 4b 	lsr	r11,r11,r9
8000752c:	10 4b       	or	r11,r8
8000752e:	c0 88       	rjmp	8000753e <__avr32_s32_to_f64+0x84>
80007530:	f6 08 09 4e 	lsl	lr,r11,r8
80007534:	14 4e       	or	lr,r10
80007536:	16 9a       	mov	r10,r11
80007538:	30 0b       	mov	r11,0
8000753a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000753e:	ed ba 00 00 	bld	r10,0x0
80007542:	c0 92       	brcc	80007554 <__avr32_s32_to_f64+0x9a>
80007544:	1c 7e       	tst	lr,lr
80007546:	c0 41       	brne	8000754e <__avr32_s32_to_f64+0x94>
80007548:	ed ba 00 01 	bld	r10,0x1
8000754c:	c0 42       	brcc	80007554 <__avr32_s32_to_f64+0x9a>
8000754e:	2f fa       	sub	r10,-1
80007550:	f7 bb 02 ff 	subhs	r11,-1
80007554:	5c fc       	rol	r12
80007556:	5d 0b       	ror	r11
80007558:	5d 0a       	ror	r10
8000755a:	d8 02       	popm	pc
8000755c:	e0 68 03 ff 	mov	r8,1023
80007560:	ed ba 00 0b 	bld	r10,0xb
80007564:	f7 b8 00 ff 	subeq	r8,-1
80007568:	10 0a       	add	r10,r8
8000756a:	5c 0b       	acr	r11
8000756c:	f7 b9 03 fe 	sublo	r9,-2
80007570:	e0 49 07 ff 	cp.w	r9,2047
80007574:	c0 55       	brlt	8000757e <__avr32_s32_to_f64+0xc4>
80007576:	30 0a       	mov	r10,0
80007578:	fc 1b ff e0 	movh	r11,0xffe0
8000757c:	c0 c8       	rjmp	80007594 <__floatsidf_return_op1>
8000757e:	ed bb 00 1f 	bld	r11,0x1f
80007582:	f7 b9 01 01 	subne	r9,1
80007586:	ab 9a       	lsr	r10,0xb
80007588:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000758c:	a1 7b       	lsl	r11,0x1
8000758e:	ab 9b       	lsr	r11,0xb
80007590:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80007594 <__floatsidf_return_op1>:
80007594:	a1 7c       	lsl	r12,0x1
80007596:	5d 0b       	ror	r11
80007598:	d8 02       	popm	pc

8000759a <__avr32_f64_cmp_eq>:
8000759a:	10 3a       	cp.w	r10,r8
8000759c:	f2 0b 13 00 	cpc	r11,r9
800075a0:	c0 80       	breq	800075b0 <__avr32_f64_cmp_eq+0x16>
800075a2:	a1 7b       	lsl	r11,0x1
800075a4:	a1 79       	lsl	r9,0x1
800075a6:	14 4b       	or	r11,r10
800075a8:	12 4b       	or	r11,r9
800075aa:	10 4b       	or	r11,r8
800075ac:	5e 0f       	reteq	1
800075ae:	5e fd       	retal	0
800075b0:	a1 7b       	lsl	r11,0x1
800075b2:	fc 1c ff e0 	movh	r12,0xffe0
800075b6:	58 0a       	cp.w	r10,0
800075b8:	f8 0b 13 00 	cpc	r11,r12
800075bc:	5e 8f       	retls	1
800075be:	5e fd       	retal	0

800075c0 <__avr32_f64_cmp_ge>:
800075c0:	1a de       	st.w	--sp,lr
800075c2:	1a d7       	st.w	--sp,r7
800075c4:	a1 7b       	lsl	r11,0x1
800075c6:	5f 3c       	srlo	r12
800075c8:	a1 79       	lsl	r9,0x1
800075ca:	5f 37       	srlo	r7
800075cc:	5c fc       	rol	r12
800075ce:	fc 1e ff e0 	movh	lr,0xffe0
800075d2:	58 0a       	cp.w	r10,0
800075d4:	fc 0b 13 00 	cpc	r11,lr
800075d8:	e0 8b 00 1d 	brhi	80007612 <__avr32_f64_cmp_ge+0x52>
800075dc:	58 08       	cp.w	r8,0
800075de:	fc 09 13 00 	cpc	r9,lr
800075e2:	e0 8b 00 18 	brhi	80007612 <__avr32_f64_cmp_ge+0x52>
800075e6:	58 0b       	cp.w	r11,0
800075e8:	f5 ba 00 00 	subfeq	r10,0
800075ec:	c1 50       	breq	80007616 <__avr32_f64_cmp_ge+0x56>
800075ee:	1b 07       	ld.w	r7,sp++
800075f0:	1b 0e       	ld.w	lr,sp++
800075f2:	58 3c       	cp.w	r12,3
800075f4:	c0 a0       	breq	80007608 <__avr32_f64_cmp_ge+0x48>
800075f6:	58 1c       	cp.w	r12,1
800075f8:	c0 33       	brcs	800075fe <__avr32_f64_cmp_ge+0x3e>
800075fa:	5e 0f       	reteq	1
800075fc:	5e 1d       	retne	0
800075fe:	10 3a       	cp.w	r10,r8
80007600:	f2 0b 13 00 	cpc	r11,r9
80007604:	5e 2f       	reths	1
80007606:	5e 3d       	retlo	0
80007608:	14 38       	cp.w	r8,r10
8000760a:	f6 09 13 00 	cpc	r9,r11
8000760e:	5e 2f       	reths	1
80007610:	5e 3d       	retlo	0
80007612:	1b 07       	ld.w	r7,sp++
80007614:	d8 0a       	popm	pc,r12=0
80007616:	58 17       	cp.w	r7,1
80007618:	5f 0c       	sreq	r12
8000761a:	58 09       	cp.w	r9,0
8000761c:	f5 b8 00 00 	subfeq	r8,0
80007620:	1b 07       	ld.w	r7,sp++
80007622:	1b 0e       	ld.w	lr,sp++
80007624:	5e 0f       	reteq	1
80007626:	5e fc       	retal	r12

80007628 <__avr32_f64_cmp_lt>:
80007628:	1a de       	st.w	--sp,lr
8000762a:	1a d7       	st.w	--sp,r7
8000762c:	a1 7b       	lsl	r11,0x1
8000762e:	5f 3c       	srlo	r12
80007630:	a1 79       	lsl	r9,0x1
80007632:	5f 37       	srlo	r7
80007634:	5c fc       	rol	r12
80007636:	fc 1e ff e0 	movh	lr,0xffe0
8000763a:	58 0a       	cp.w	r10,0
8000763c:	fc 0b 13 00 	cpc	r11,lr
80007640:	e0 8b 00 1d 	brhi	8000767a <__avr32_f64_cmp_lt+0x52>
80007644:	58 08       	cp.w	r8,0
80007646:	fc 09 13 00 	cpc	r9,lr
8000764a:	e0 8b 00 18 	brhi	8000767a <__avr32_f64_cmp_lt+0x52>
8000764e:	58 0b       	cp.w	r11,0
80007650:	f5 ba 00 00 	subfeq	r10,0
80007654:	c1 50       	breq	8000767e <__avr32_f64_cmp_lt+0x56>
80007656:	1b 07       	ld.w	r7,sp++
80007658:	1b 0e       	ld.w	lr,sp++
8000765a:	58 3c       	cp.w	r12,3
8000765c:	c0 a0       	breq	80007670 <__avr32_f64_cmp_lt+0x48>
8000765e:	58 1c       	cp.w	r12,1
80007660:	c0 33       	brcs	80007666 <__avr32_f64_cmp_lt+0x3e>
80007662:	5e 0d       	reteq	0
80007664:	5e 1f       	retne	1
80007666:	10 3a       	cp.w	r10,r8
80007668:	f2 0b 13 00 	cpc	r11,r9
8000766c:	5e 2d       	reths	0
8000766e:	5e 3f       	retlo	1
80007670:	14 38       	cp.w	r8,r10
80007672:	f6 09 13 00 	cpc	r9,r11
80007676:	5e 2d       	reths	0
80007678:	5e 3f       	retlo	1
8000767a:	1b 07       	ld.w	r7,sp++
8000767c:	d8 0a       	popm	pc,r12=0
8000767e:	58 17       	cp.w	r7,1
80007680:	5f 1c       	srne	r12
80007682:	58 09       	cp.w	r9,0
80007684:	f5 b8 00 00 	subfeq	r8,0
80007688:	1b 07       	ld.w	r7,sp++
8000768a:	1b 0e       	ld.w	lr,sp++
8000768c:	5e 0d       	reteq	0
8000768e:	5e fc       	retal	r12

80007690 <__avr32_f32_cmp_ge>:
80007690:	f8 0a 15 01 	lsl	r10,r12,0x1
80007694:	f6 09 15 01 	lsl	r9,r11,0x1
80007698:	f5 ba 00 00 	subfeq	r10,0
8000769c:	5e 0f       	reteq	1
8000769e:	fc 18 ff 00 	movh	r8,0xff00
800076a2:	10 3a       	cp.w	r10,r8
800076a4:	5e bd       	rethi	0
800076a6:	10 39       	cp.w	r9,r8
800076a8:	5e bd       	rethi	0
800076aa:	f7 ec 20 08 	eor	r8,r11,r12
800076ae:	ed bc 00 1f 	bld	r12,0x1f
800076b2:	5f 28       	srhs	r8
800076b4:	5e 68       	retmi	r8
800076b6:	c0 43       	brcs	800076be <__avr32_f32_cmp_ge+0x2e>
800076b8:	16 3c       	cp.w	r12,r11
800076ba:	5e 2f       	reths	1
800076bc:	5e 3d       	retlo	0
800076be:	18 3b       	cp.w	r11,r12
800076c0:	5e 2f       	reths	1
800076c2:	5e 3d       	retlo	0

800076c4 <__avr32_f32_cmp_lt>:
800076c4:	f8 0a 15 01 	lsl	r10,r12,0x1
800076c8:	f6 09 15 01 	lsl	r9,r11,0x1
800076cc:	f5 ba 00 00 	subfeq	r10,0
800076d0:	5e 0d       	reteq	0
800076d2:	fc 18 ff 00 	movh	r8,0xff00
800076d6:	10 3a       	cp.w	r10,r8
800076d8:	5e bd       	rethi	0
800076da:	10 39       	cp.w	r9,r8
800076dc:	5e bd       	rethi	0
800076de:	f7 ec 20 08 	eor	r8,r11,r12
800076e2:	ed bc 00 1f 	bld	r12,0x1f
800076e6:	5f 38       	srlo	r8
800076e8:	5e 68       	retmi	r8
800076ea:	c0 43       	brcs	800076f2 <__avr32_f32_cmp_lt+0x2e>
800076ec:	16 3c       	cp.w	r12,r11
800076ee:	5e 2d       	reths	0
800076f0:	5e 3f       	retlo	1
800076f2:	18 3b       	cp.w	r11,r12
800076f4:	5e 2d       	reths	0
800076f6:	5e 3f       	retlo	1

800076f8 <__avr32_f64_div>:
800076f8:	eb cd 40 ff 	pushm	r0-r7,lr
800076fc:	f7 e9 20 0e 	eor	lr,r11,r9
80007700:	f6 07 16 14 	lsr	r7,r11,0x14
80007704:	a9 7b       	lsl	r11,0x9
80007706:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000770a:	a9 7a       	lsl	r10,0x9
8000770c:	bd bb       	sbr	r11,0x1d
8000770e:	e4 1b 3f ff 	andh	r11,0x3fff
80007712:	ab d7       	cbr	r7,0xb
80007714:	e0 80 00 cc 	breq	800078ac <__avr32_f64_div_round_subnormal+0x54>
80007718:	e0 47 07 ff 	cp.w	r7,2047
8000771c:	e0 84 00 b5 	brge	80007886 <__avr32_f64_div_round_subnormal+0x2e>
80007720:	f2 06 16 14 	lsr	r6,r9,0x14
80007724:	a9 79       	lsl	r9,0x9
80007726:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000772a:	a9 78       	lsl	r8,0x9
8000772c:	bd b9       	sbr	r9,0x1d
8000772e:	e4 19 3f ff 	andh	r9,0x3fff
80007732:	ab d6       	cbr	r6,0xb
80007734:	e0 80 00 e2 	breq	800078f8 <__avr32_f64_div_round_subnormal+0xa0>
80007738:	e0 46 07 ff 	cp.w	r6,2047
8000773c:	e0 84 00 b2 	brge	800078a0 <__avr32_f64_div_round_subnormal+0x48>
80007740:	0c 17       	sub	r7,r6
80007742:	fe 37 fc 01 	sub	r7,-1023
80007746:	fc 1c 80 00 	movh	r12,0x8000
8000774a:	f8 03 16 01 	lsr	r3,r12,0x1
8000774e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80007752:	5c d4       	com	r4
80007754:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80007758:	e6 09 06 44 	mulu.d	r4,r3,r9
8000775c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80007760:	e6 05 06 44 	mulu.d	r4,r3,r5
80007764:	ea 03 15 02 	lsl	r3,r5,0x2
80007768:	e6 09 06 44 	mulu.d	r4,r3,r9
8000776c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80007770:	e6 05 06 44 	mulu.d	r4,r3,r5
80007774:	ea 03 15 02 	lsl	r3,r5,0x2
80007778:	e6 09 06 44 	mulu.d	r4,r3,r9
8000777c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80007780:	e6 05 06 44 	mulu.d	r4,r3,r5
80007784:	ea 03 15 02 	lsl	r3,r5,0x2
80007788:	e6 08 06 40 	mulu.d	r0,r3,r8
8000778c:	e4 09 07 40 	macu.d	r0,r2,r9
80007790:	e6 09 06 44 	mulu.d	r4,r3,r9
80007794:	02 04       	add	r4,r1
80007796:	5c 05       	acr	r5
80007798:	a3 65       	lsl	r5,0x2
8000779a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000779e:	a3 64       	lsl	r4,0x2
800077a0:	5c 34       	neg	r4
800077a2:	f8 05 01 45 	sbc	r5,r12,r5
800077a6:	e6 04 06 40 	mulu.d	r0,r3,r4
800077aa:	e4 05 07 40 	macu.d	r0,r2,r5
800077ae:	e6 05 06 44 	mulu.d	r4,r3,r5
800077b2:	02 04       	add	r4,r1
800077b4:	5c 05       	acr	r5
800077b6:	ea 03 15 02 	lsl	r3,r5,0x2
800077ba:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800077be:	e8 02 15 02 	lsl	r2,r4,0x2
800077c2:	e6 08 06 40 	mulu.d	r0,r3,r8
800077c6:	e4 09 07 40 	macu.d	r0,r2,r9
800077ca:	e6 09 06 44 	mulu.d	r4,r3,r9
800077ce:	02 04       	add	r4,r1
800077d0:	5c 05       	acr	r5
800077d2:	a3 65       	lsl	r5,0x2
800077d4:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800077d8:	a3 64       	lsl	r4,0x2
800077da:	5c 34       	neg	r4
800077dc:	f8 05 01 45 	sbc	r5,r12,r5
800077e0:	e6 04 06 40 	mulu.d	r0,r3,r4
800077e4:	e4 05 07 40 	macu.d	r0,r2,r5
800077e8:	e6 05 06 44 	mulu.d	r4,r3,r5
800077ec:	02 04       	add	r4,r1
800077ee:	5c 05       	acr	r5
800077f0:	ea 03 15 02 	lsl	r3,r5,0x2
800077f4:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800077f8:	e8 02 15 02 	lsl	r2,r4,0x2
800077fc:	e6 0a 06 40 	mulu.d	r0,r3,r10
80007800:	e4 0b 07 40 	macu.d	r0,r2,r11
80007804:	e6 0b 06 42 	mulu.d	r2,r3,r11
80007808:	02 02       	add	r2,r1
8000780a:	5c 03       	acr	r3
8000780c:	ed b3 00 1c 	bld	r3,0x1c
80007810:	c0 90       	breq	80007822 <__avr32_f64_div+0x12a>
80007812:	a1 72       	lsl	r2,0x1
80007814:	5c f3       	rol	r3
80007816:	20 17       	sub	r7,1
80007818:	a3 9a       	lsr	r10,0x3
8000781a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000781e:	a3 9b       	lsr	r11,0x3
80007820:	c0 58       	rjmp	8000782a <__avr32_f64_div+0x132>
80007822:	a5 8a       	lsr	r10,0x4
80007824:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80007828:	a5 8b       	lsr	r11,0x4
8000782a:	58 07       	cp.w	r7,0
8000782c:	e0 8a 00 8b 	brle	80007942 <__avr32_f64_div_res_subnormal>
80007830:	e0 12 ff 00 	andl	r2,0xff00
80007834:	e8 12 00 80 	orl	r2,0x80
80007838:	e6 08 06 40 	mulu.d	r0,r3,r8
8000783c:	e4 09 07 40 	macu.d	r0,r2,r9
80007840:	e4 08 06 44 	mulu.d	r4,r2,r8
80007844:	e6 09 06 48 	mulu.d	r8,r3,r9
80007848:	00 05       	add	r5,r0
8000784a:	f0 01 00 48 	adc	r8,r8,r1
8000784e:	5c 09       	acr	r9
80007850:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80007854:	58 04       	cp.w	r4,0
80007856:	5c 25       	cpc	r5

80007858 <__avr32_f64_div_round_subnormal>:
80007858:	f4 08 13 00 	cpc	r8,r10
8000785c:	f6 09 13 00 	cpc	r9,r11
80007860:	5f 36       	srlo	r6
80007862:	f8 06 17 00 	moveq	r6,r12
80007866:	e4 0a 16 08 	lsr	r10,r2,0x8
8000786a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000786e:	e6 0b 16 08 	lsr	r11,r3,0x8
80007872:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80007876:	ed be 00 1f 	bld	lr,0x1f
8000787a:	ef bb 00 1f 	bst	r11,0x1f
8000787e:	0c 0a       	add	r10,r6
80007880:	5c 0b       	acr	r11
80007882:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80007886:	e4 1b 00 0f 	andh	r11,0xf
8000788a:	14 4b       	or	r11,r10
8000788c:	e0 81 00 a7 	brne	800079da <__avr32_f64_div_res_subnormal+0x98>
80007890:	f2 06 16 14 	lsr	r6,r9,0x14
80007894:	ab d6       	cbr	r6,0xb
80007896:	e0 46 07 ff 	cp.w	r6,2047
8000789a:	e0 81 00 a4 	brne	800079e2 <__avr32_f64_div_res_subnormal+0xa0>
8000789e:	c9 e8       	rjmp	800079da <__avr32_f64_div_res_subnormal+0x98>
800078a0:	e4 19 00 0f 	andh	r9,0xf
800078a4:	10 49       	or	r9,r8
800078a6:	e0 81 00 9a 	brne	800079da <__avr32_f64_div_res_subnormal+0x98>
800078aa:	c9 28       	rjmp	800079ce <__avr32_f64_div_res_subnormal+0x8c>
800078ac:	a3 7b       	lsl	r11,0x3
800078ae:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800078b2:	a3 7a       	lsl	r10,0x3
800078b4:	f5 eb 10 04 	or	r4,r10,r11
800078b8:	e0 80 00 a0 	breq	800079f8 <__avr32_f64_div_op1_zero>
800078bc:	f6 04 12 00 	clz	r4,r11
800078c0:	c1 70       	breq	800078ee <__avr32_f64_div_round_subnormal+0x96>
800078c2:	c0 c3       	brcs	800078da <__avr32_f64_div_round_subnormal+0x82>
800078c4:	e8 05 11 20 	rsub	r5,r4,32
800078c8:	f6 04 09 4b 	lsl	r11,r11,r4
800078cc:	f4 05 0a 45 	lsr	r5,r10,r5
800078d0:	0a 4b       	or	r11,r5
800078d2:	f4 04 09 4a 	lsl	r10,r10,r4
800078d6:	08 17       	sub	r7,r4
800078d8:	c0 b8       	rjmp	800078ee <__avr32_f64_div_round_subnormal+0x96>
800078da:	f4 04 12 00 	clz	r4,r10
800078de:	f9 b4 03 00 	movlo	r4,0
800078e2:	f7 b4 02 e0 	subhs	r4,-32
800078e6:	f4 04 09 4b 	lsl	r11,r10,r4
800078ea:	30 0a       	mov	r10,0
800078ec:	08 17       	sub	r7,r4
800078ee:	a3 8a       	lsr	r10,0x2
800078f0:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800078f4:	a3 8b       	lsr	r11,0x2
800078f6:	c1 1b       	rjmp	80007718 <__avr32_f64_div+0x20>
800078f8:	a3 79       	lsl	r9,0x3
800078fa:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800078fe:	a3 78       	lsl	r8,0x3
80007900:	f3 e8 10 04 	or	r4,r9,r8
80007904:	c6 f0       	breq	800079e2 <__avr32_f64_div_res_subnormal+0xa0>
80007906:	f2 04 12 00 	clz	r4,r9
8000790a:	c1 70       	breq	80007938 <__avr32_f64_div_round_subnormal+0xe0>
8000790c:	c0 c3       	brcs	80007924 <__avr32_f64_div_round_subnormal+0xcc>
8000790e:	e8 05 11 20 	rsub	r5,r4,32
80007912:	f2 04 09 49 	lsl	r9,r9,r4
80007916:	f0 05 0a 45 	lsr	r5,r8,r5
8000791a:	0a 49       	or	r9,r5
8000791c:	f0 04 09 48 	lsl	r8,r8,r4
80007920:	08 16       	sub	r6,r4
80007922:	c0 b8       	rjmp	80007938 <__avr32_f64_div_round_subnormal+0xe0>
80007924:	f0 04 12 00 	clz	r4,r8
80007928:	f9 b4 03 00 	movlo	r4,0
8000792c:	f7 b4 02 e0 	subhs	r4,-32
80007930:	f0 04 09 49 	lsl	r9,r8,r4
80007934:	30 08       	mov	r8,0
80007936:	08 16       	sub	r6,r4
80007938:	a3 88       	lsr	r8,0x2
8000793a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000793e:	a3 89       	lsr	r9,0x2
80007940:	cf ca       	rjmp	80007738 <__avr32_f64_div+0x40>

80007942 <__avr32_f64_div_res_subnormal>:
80007942:	5c 37       	neg	r7
80007944:	2f f7       	sub	r7,-1
80007946:	f1 b7 04 c0 	satu	r7,0x6
8000794a:	e0 47 00 20 	cp.w	r7,32
8000794e:	c1 54       	brge	80007978 <__avr32_f64_div_res_subnormal+0x36>
80007950:	ee 06 11 20 	rsub	r6,r7,32
80007954:	e4 07 0a 42 	lsr	r2,r2,r7
80007958:	e6 06 09 4c 	lsl	r12,r3,r6
8000795c:	18 42       	or	r2,r12
8000795e:	e6 07 0a 43 	lsr	r3,r3,r7
80007962:	f4 06 09 41 	lsl	r1,r10,r6
80007966:	f4 07 0a 4a 	lsr	r10,r10,r7
8000796a:	f6 06 09 4c 	lsl	r12,r11,r6
8000796e:	18 4a       	or	r10,r12
80007970:	f6 07 0a 4b 	lsr	r11,r11,r7
80007974:	30 00       	mov	r0,0
80007976:	c1 58       	rjmp	800079a0 <__avr32_f64_div_res_subnormal+0x5e>
80007978:	ee 06 11 20 	rsub	r6,r7,32
8000797c:	f9 b0 00 00 	moveq	r0,0
80007980:	f9 bc 00 00 	moveq	r12,0
80007984:	c0 50       	breq	8000798e <__avr32_f64_div_res_subnormal+0x4c>
80007986:	f4 06 09 40 	lsl	r0,r10,r6
8000798a:	f6 06 09 4c 	lsl	r12,r11,r6
8000798e:	e6 07 0a 42 	lsr	r2,r3,r7
80007992:	30 03       	mov	r3,0
80007994:	f4 07 0a 41 	lsr	r1,r10,r7
80007998:	18 41       	or	r1,r12
8000799a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000799e:	30 0b       	mov	r11,0
800079a0:	e0 12 ff 00 	andl	r2,0xff00
800079a4:	e8 12 00 80 	orl	r2,0x80
800079a8:	e6 08 06 46 	mulu.d	r6,r3,r8
800079ac:	e4 09 07 46 	macu.d	r6,r2,r9
800079b0:	e4 08 06 44 	mulu.d	r4,r2,r8
800079b4:	e6 09 06 48 	mulu.d	r8,r3,r9
800079b8:	0c 05       	add	r5,r6
800079ba:	f0 07 00 48 	adc	r8,r8,r7
800079be:	5c 09       	acr	r9
800079c0:	30 07       	mov	r7,0
800079c2:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800079c6:	00 34       	cp.w	r4,r0
800079c8:	e2 05 13 00 	cpc	r5,r1
800079cc:	c4 6b       	rjmp	80007858 <__avr32_f64_div_round_subnormal>
800079ce:	1c 9b       	mov	r11,lr
800079d0:	e6 1b 80 00 	andh	r11,0x8000,COH
800079d4:	30 0a       	mov	r10,0
800079d6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800079da:	3f fb       	mov	r11,-1
800079dc:	30 0a       	mov	r10,0
800079de:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800079e2:	f5 eb 10 04 	or	r4,r10,r11
800079e6:	c0 90       	breq	800079f8 <__avr32_f64_div_op1_zero>
800079e8:	1c 9b       	mov	r11,lr
800079ea:	e6 1b 80 00 	andh	r11,0x8000,COH
800079ee:	ea 1b 7f f0 	orh	r11,0x7ff0
800079f2:	30 0a       	mov	r10,0
800079f4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800079f8 <__avr32_f64_div_op1_zero>:
800079f8:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800079fc:	ce f0       	breq	800079da <__avr32_f64_div_res_subnormal+0x98>
800079fe:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80007a02:	e0 44 07 ff 	cp.w	r4,2047
80007a06:	ce 41       	brne	800079ce <__avr32_f64_div_res_subnormal+0x8c>
80007a08:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80007a0c:	ce 10       	breq	800079ce <__avr32_f64_div_res_subnormal+0x8c>
80007a0e:	ce 6b       	rjmp	800079da <__avr32_f64_div_res_subnormal+0x98>

80007a10 <__avr32_f32_sub_from_add>:
80007a10:	ee 1b 80 00 	eorh	r11,0x8000

80007a14 <__avr32_f32_sub>:
80007a14:	f7 ec 20 08 	eor	r8,r11,r12
80007a18:	c6 46       	brmi	80007ae0 <__avr32_f32_add_from_sub>
80007a1a:	18 98       	mov	r8,r12
80007a1c:	e6 1c 80 00 	andh	r12,0x8000,COH
80007a20:	bf db       	cbr	r11,0x1f
80007a22:	bf d8       	cbr	r8,0x1f
80007a24:	f0 0b 0c 4a 	max	r10,r8,r11
80007a28:	f0 0b 0d 49 	min	r9,r8,r11
80007a2c:	10 3a       	cp.w	r10,r8
80007a2e:	f7 bc 01 01 	subne	r12,1
80007a32:	e6 1c 80 00 	andh	r12,0x8000,COH
80007a36:	f4 08 15 08 	lsl	r8,r10,0x8
80007a3a:	bf b8       	sbr	r8,0x1f
80007a3c:	b7 9a       	lsr	r10,0x17
80007a3e:	e0 4a 00 ff 	cp.w	r10,255
80007a42:	c3 80       	breq	80007ab2 <__avr32_f32_sub_op1_nan_or_inf>
80007a44:	f2 0b 15 08 	lsl	r11,r9,0x8
80007a48:	bf bb       	sbr	r11,0x1f
80007a4a:	b7 99       	lsr	r9,0x17
80007a4c:	1a dc       	st.w	--sp,r12
80007a4e:	c2 90       	breq	80007aa0 <__avr32_f32_sub_op2_subnormal>
80007a50:	f4 09 01 0c 	sub	r12,r10,r9
80007a54:	c0 c0       	breq	80007a6c <__avr32_f32_sub_shift_done>
80007a56:	f1 bc 04 a0 	satu	r12,0x5
80007a5a:	f8 09 11 20 	rsub	r9,r12,32
80007a5e:	f6 09 09 49 	lsl	r9,r11,r9
80007a62:	f7 b8 01 01 	subne	r8,1
80007a66:	5f 19       	srne	r9
80007a68:	f6 0c 0a 4b 	lsr	r11,r11,r12

80007a6c <__avr32_f32_sub_shift_done>:
80007a6c:	16 18       	sub	r8,r11
80007a6e:	1b 0c       	ld.w	r12,sp++
80007a70:	f0 0b 12 00 	clz	r11,r8
80007a74:	5e 3d       	retlo	0
80007a76:	f0 0b 09 48 	lsl	r8,r8,r11
80007a7a:	16 1a       	sub	r10,r11
80007a7c:	e0 8a 00 26 	brle	80007ac8 <__avr32_f32_sub_subnormal_result>
80007a80:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80007a84:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80007a88:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

80007a8c <__avr32_f32_sub_round>:
80007a8c:	fc 1a 80 00 	movh	r10,0x8000
80007a90:	ed bc 00 00 	bld	r12,0x0
80007a94:	f7 ba 01 ff 	subne	r10,-1
80007a98:	14 39       	cp.w	r9,r10
80007a9a:	f7 bc 02 ff 	subhs	r12,-1
80007a9e:	5e fc       	retal	r12

80007aa0 <__avr32_f32_sub_op2_subnormal>:
80007aa0:	bf db       	cbr	r11,0x1f
80007aa2:	f9 b9 01 01 	movne	r9,1
80007aa6:	58 0a       	cp.w	r10,0
80007aa8:	cd 41       	brne	80007a50 <__avr32_f32_sub+0x3c>
80007aaa:	bf d8       	cbr	r8,0x1f
80007aac:	f9 ba 01 01 	movne	r10,1
80007ab0:	cd 0b       	rjmp	80007a50 <__avr32_f32_sub+0x3c>

80007ab2 <__avr32_f32_sub_op1_nan_or_inf>:
80007ab2:	f0 0b 15 01 	lsl	r11,r8,0x1
80007ab6:	5e 1e       	retne	-1
80007ab8:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80007abc:	f2 0b 16 17 	lsr	r11,r9,0x17
80007ac0:	e0 4b 00 ff 	cp.w	r11,255
80007ac4:	5e 1c       	retne	r12
80007ac6:	5e fe       	retal	-1

80007ac8 <__avr32_f32_sub_subnormal_result>:
80007ac8:	f4 0a 11 09 	rsub	r10,r10,9
80007acc:	f4 0b 11 20 	rsub	r11,r10,32
80007ad0:	5e 3d       	retlo	0
80007ad2:	f0 0a 0a 4a 	lsr	r10,r8,r10
80007ad6:	14 4c       	or	r12,r10
80007ad8:	f0 0b 09 48 	lsl	r8,r8,r11
80007adc:	10 49       	or	r9,r8
80007ade:	cd 7b       	rjmp	80007a8c <__avr32_f32_sub_round>

80007ae0 <__avr32_f32_add_from_sub>:
80007ae0:	ee 1b 80 00 	eorh	r11,0x8000

80007ae4 <__avr32_f32_add>:
80007ae4:	f7 ec 20 08 	eor	r8,r11,r12
80007ae8:	c9 46       	brmi	80007a10 <__avr32_f32_sub_from_add>
80007aea:	18 98       	mov	r8,r12
80007aec:	e6 1c 80 00 	andh	r12,0x8000,COH
80007af0:	bf db       	cbr	r11,0x1f
80007af2:	bf d8       	cbr	r8,0x1f
80007af4:	f0 0b 0c 4a 	max	r10,r8,r11
80007af8:	f0 0b 0d 49 	min	r9,r8,r11
80007afc:	f4 08 15 08 	lsl	r8,r10,0x8
80007b00:	bf b8       	sbr	r8,0x1f
80007b02:	b7 9a       	lsr	r10,0x17
80007b04:	e0 4a 00 ff 	cp.w	r10,255
80007b08:	c2 d0       	breq	80007b62 <__avr32_f32_add_op1_nan_or_inf>
80007b0a:	f2 0b 15 08 	lsl	r11,r9,0x8
80007b0e:	bf bb       	sbr	r11,0x1f
80007b10:	b7 99       	lsr	r9,0x17
80007b12:	c1 e0       	breq	80007b4e <__avr32_f32_add_op2_subnormal>
80007b14:	1a dc       	st.w	--sp,r12
80007b16:	14 29       	rsub	r9,r10
80007b18:	f1 b9 04 a0 	satu	r9,0x5
80007b1c:	f6 09 0a 4c 	lsr	r12,r11,r9
80007b20:	f2 09 11 18 	rsub	r9,r9,24
80007b24:	f6 09 09 4b 	lsl	r11,r11,r9
80007b28:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
80007b2c:	18 08       	add	r8,r12
80007b2e:	1b 0c       	ld.w	r12,sp++
80007b30:	c2 63       	brcs	80007b7c <__avr32_f32_add_res_of>
80007b32:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80007b36:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80007b3a:	fc 1a 80 00 	movh	r10,0x8000
80007b3e:	ed bc 00 00 	bld	r12,0x0
80007b42:	f7 ba 01 ff 	subne	r10,-1
80007b46:	14 3b       	cp.w	r11,r10
80007b48:	f7 bc 02 ff 	subhs	r12,-1
80007b4c:	5e fc       	retal	r12

80007b4e <__avr32_f32_add_op2_subnormal>:
80007b4e:	bf db       	cbr	r11,0x1f
80007b50:	f9 b9 01 01 	movne	r9,1
80007b54:	58 0a       	cp.w	r10,0
80007b56:	cd f1       	brne	80007b14 <__avr32_f32_add+0x30>
80007b58:	bf d8       	cbr	r8,0x1f
80007b5a:	10 0b       	add	r11,r8
80007b5c:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80007b60:	5e fc       	retal	r12

80007b62 <__avr32_f32_add_op1_nan_or_inf>:
80007b62:	f0 0b 15 01 	lsl	r11,r8,0x1
80007b66:	5e 1e       	retne	-1
80007b68:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80007b6c:	f2 0b 16 17 	lsr	r11,r9,0x17
80007b70:	e0 4b 00 ff 	cp.w	r11,255
80007b74:	5e 1c       	retne	r12
80007b76:	a9 79       	lsl	r9,0x9
80007b78:	5e 0c       	reteq	r12
80007b7a:	5e fe       	retal	-1

80007b7c <__avr32_f32_add_res_of>:
80007b7c:	a1 98       	lsr	r8,0x1
80007b7e:	2f fa       	sub	r10,-1
80007b80:	e0 4a 00 ff 	cp.w	r10,255
80007b84:	f9 b8 00 00 	moveq	r8,0
80007b88:	f9 bb 00 00 	moveq	r11,0
80007b8c:	cd 3b       	rjmp	80007b32 <__avr32_f32_add+0x4e>
80007b8e:	d7 03       	nop

80007b90 <__avr32_f32_mul>:
80007b90:	18 98       	mov	r8,r12
80007b92:	16 5c       	eor	r12,r11
80007b94:	e6 1c 80 00 	andh	r12,0x8000,COH
80007b98:	bf d8       	cbr	r8,0x1f
80007b9a:	c6 60       	breq	80007c66 <__avr32_f32_mul_op1_zero>
80007b9c:	bf db       	cbr	r11,0x1f
80007b9e:	f0 0b 0c 4a 	max	r10,r8,r11
80007ba2:	f0 0b 0d 49 	min	r9,r8,r11
80007ba6:	f4 08 15 08 	lsl	r8,r10,0x8
80007baa:	bf b8       	sbr	r8,0x1f
80007bac:	b7 9a       	lsr	r10,0x17
80007bae:	e0 4a 00 ff 	cp.w	r10,255
80007bb2:	c3 d0       	breq	80007c2c <__avr32_f32_mul_op1_nan_or_inf>
80007bb4:	f2 0b 15 08 	lsl	r11,r9,0x8
80007bb8:	bf bb       	sbr	r11,0x1f
80007bba:	b7 99       	lsr	r9,0x17
80007bbc:	c2 40       	breq	80007c04 <__avr32_f32_mul_op2_subnormal>
80007bbe:	14 09       	add	r9,r10
80007bc0:	f0 0b 06 4a 	mulu.d	r10,r8,r11
80007bc4:	f6 08 15 01 	lsl	r8,r11,0x1
80007bc8:	f0 0b 17 20 	movhs	r11,r8
80007bcc:	f7 b9 02 01 	subhs	r9,1
80007bd0:	a9 8a       	lsr	r10,0x8
80007bd2:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
80007bd6:	27 e9       	sub	r9,126
80007bd8:	e0 8a 00 39 	brle	80007c4a <__avr32_f32_mul_res_subnormal>
80007bdc:	e0 49 00 ff 	cp.w	r9,255
80007be0:	c0 f4       	brge	80007bfe <__avr32_f32_mul_round+0x14>
80007be2:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80007be6:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80007bea <__avr32_f32_mul_round>:
80007bea:	fc 18 80 00 	movh	r8,0x8000
80007bee:	ed bc 00 00 	bld	r12,0x0
80007bf2:	f7 b8 01 ff 	subne	r8,-1
80007bf6:	10 3a       	cp.w	r10,r8
80007bf8:	f7 bc 02 ff 	subhs	r12,-1
80007bfc:	5e fc       	retal	r12
80007bfe:	ea 1c 7f 80 	orh	r12,0x7f80
80007c02:	5e fc       	retal	r12

80007c04 <__avr32_f32_mul_op2_subnormal>:
80007c04:	bf db       	cbr	r11,0x1f
80007c06:	f6 09 12 00 	clz	r9,r11
80007c0a:	5e 3d       	retlo	0
80007c0c:	20 89       	sub	r9,8
80007c0e:	f6 09 09 4b 	lsl	r11,r11,r9
80007c12:	f2 09 11 01 	rsub	r9,r9,1
80007c16:	14 7a       	tst	r10,r10
80007c18:	cd 31       	brne	80007bbe <__avr32_f32_mul+0x2e>
80007c1a:	bf d8       	cbr	r8,0x1f
80007c1c:	f6 0a 12 00 	clz	r10,r11
80007c20:	5e 3d       	retlo	0
80007c22:	f0 0a 09 48 	lsl	r8,r8,r10
80007c26:	f4 0a 11 01 	rsub	r10,r10,1
80007c2a:	cc ab       	rjmp	80007bbe <__avr32_f32_mul+0x2e>

80007c2c <__avr32_f32_mul_op1_nan_or_inf>:
80007c2c:	f0 0b 15 01 	lsl	r11,r8,0x1
80007c30:	5e 1e       	retne	-1
80007c32:	12 79       	tst	r9,r9
80007c34:	5e 0e       	reteq	-1
80007c36:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80007c3a:	f2 0b 16 17 	lsr	r11,r9,0x17
80007c3e:	e0 4b 00 ff 	cp.w	r11,255
80007c42:	5e 1c       	retne	r12
80007c44:	a9 79       	lsl	r9,0x9
80007c46:	5e 0c       	reteq	r12
80007c48:	5e fe       	retal	-1

80007c4a <__avr32_f32_mul_res_subnormal>:
80007c4a:	f2 09 11 09 	rsub	r9,r9,9
80007c4e:	f2 08 11 20 	rsub	r8,r9,32
80007c52:	5e 3d       	retlo	0
80007c54:	f6 09 0a 49 	lsr	r9,r11,r9
80007c58:	12 4c       	or	r12,r9
80007c5a:	f6 08 09 4b 	lsl	r11,r11,r8
80007c5e:	e4 1a 00 ff 	andh	r10,0xff
80007c62:	16 4a       	or	r10,r11
80007c64:	cc 3b       	rjmp	80007bea <__avr32_f32_mul_round>

80007c66 <__avr32_f32_mul_op1_zero>:
80007c66:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80007c6a:	e0 4a 00 ff 	cp.w	r10,255
80007c6e:	5e 1c       	retne	r12
80007c70:	5e 0e       	reteq	-1

80007c72 <__avr32_s32_to_f32>:
80007c72:	58 0c       	cp.w	r12,0
80007c74:	5e 0c       	reteq	r12
80007c76:	18 9b       	mov	r11,r12
80007c78:	5c 4c       	abs	r12
80007c7a:	e0 6a 00 9e 	mov	r10,158
80007c7e:	f8 09 12 00 	clz	r9,r12
80007c82:	12 1a       	sub	r10,r9
80007c84:	f8 09 09 4c 	lsl	r12,r12,r9
80007c88:	58 0a       	cp.w	r10,0
80007c8a:	e0 8a 00 15 	brle	80007cb4 <__avr32_s32_to_f32_subnormal>
80007c8e:	37 f9       	mov	r9,127
80007c90:	ed bc 00 08 	bld	r12,0x8
80007c94:	f7 b9 00 ff 	subeq	r9,-1
80007c98:	12 0c       	add	r12,r9
80007c9a:	f7 ba 03 fe 	sublo	r10,-2
80007c9e:	ed bc 00 1f 	bld	r12,0x1f
80007ca2:	f7 ba 01 01 	subne	r10,1
80007ca6:	f8 0c 16 07 	lsr	r12,r12,0x7
80007caa:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80007cae:	a1 7b       	lsl	r11,0x1
80007cb0:	5d 0c       	ror	r12
80007cb2:	5e fc       	retal	r12

80007cb4 <__avr32_s32_to_f32_subnormal>:
80007cb4:	f4 0a 11 01 	rsub	r10,r10,1
80007cb8:	59 9a       	cp.w	r10,25
80007cba:	f9 bc 02 00 	movhs	r12,0
80007cbe:	c1 32       	brcc	80007ce4 <__avr32_s32_to_f32_subnormal+0x30>
80007cc0:	f4 09 11 20 	rsub	r9,r10,32
80007cc4:	f8 09 09 49 	lsl	r9,r12,r9
80007cc8:	5f 19       	srne	r9
80007cca:	f8 0a 0a 4c 	lsr	r12,r12,r10
80007cce:	12 4c       	or	r12,r9
80007cd0:	37 f9       	mov	r9,127
80007cd2:	ed bc 00 08 	bld	r12,0x8
80007cd6:	f7 b9 00 ff 	subeq	r9,-1
80007cda:	12 0c       	add	r12,r9
80007cdc:	f8 0c 16 07 	lsr	r12,r12,0x7
80007ce0:	a1 7b       	lsl	r11,0x1
80007ce2:	5d 0c       	ror	r12
80007ce4:	5e fc       	retal	r12

80007ce6 <__avr32_f32_to_u32>:
80007ce6:	58 0c       	cp.w	r12,0
80007ce8:	5e 6d       	retmi	0
80007cea:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80007cee:	27 fb       	sub	r11,127
80007cf0:	5e 3d       	retlo	0
80007cf2:	f6 0b 11 1f 	rsub	r11,r11,31
80007cf6:	a9 6c       	lsl	r12,0x8
80007cf8:	bf bc       	sbr	r12,0x1f
80007cfa:	f8 0b 0a 4c 	lsr	r12,r12,r11
80007cfe:	5e fc       	retal	r12

80007d00 <__avr32_f32_to_f64>:
80007d00:	f8 0b 15 01 	lsl	r11,r12,0x1
80007d04:	f9 ba 00 00 	moveq	r10,0
80007d08:	5e 0b       	reteq	r11
80007d0a:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80007d0e:	e0 49 00 ff 	cp.w	r9,255
80007d12:	c1 e0       	breq	80007d4e <__extendsfdf_return_op1+0x6>
80007d14:	a7 7b       	lsl	r11,0x7
80007d16:	30 0a       	mov	r10,0
80007d18:	58 09       	cp.w	r9,0
80007d1a:	f7 b9 00 ff 	subeq	r9,-1
80007d1e:	5f 18       	srne	r8
80007d20:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80007d24:	fe 39 fc 80 	sub	r9,-896
80007d28:	f6 08 12 00 	clz	r8,r11
80007d2c:	10 19       	sub	r9,r8
80007d2e:	f6 08 09 4b 	lsl	r11,r11,r8
80007d32:	ed bb 00 1f 	bld	r11,0x1f
80007d36:	f7 b9 01 01 	subne	r9,1
80007d3a:	ab 9a       	lsr	r10,0xb
80007d3c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80007d40:	a1 7b       	lsl	r11,0x1
80007d42:	ab 9b       	lsr	r11,0xb
80007d44:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80007d48 <__extendsfdf_return_op1>:
80007d48:	a1 7c       	lsl	r12,0x1
80007d4a:	5d 0b       	ror	r11
80007d4c:	5e fb       	retal	r11
80007d4e:	fc 1a ff e0 	movh	r10,0xffe0
80007d52:	a9 6b       	lsl	r11,0x8
80007d54:	f9 bb 01 ff 	movne	r11,-1
80007d58:	f4 0b 17 00 	moveq	r11,r10
80007d5c:	30 0a       	mov	r10,0
80007d5e:	cf 5b       	rjmp	80007d48 <__extendsfdf_return_op1>

80007d60 <__avr32_f64_to_f32>:
80007d60:	f6 09 15 01 	lsl	r9,r11,0x1
80007d64:	b5 99       	lsr	r9,0x15
80007d66:	5e 0d       	reteq	0
80007d68:	f6 08 15 0a 	lsl	r8,r11,0xa
80007d6c:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80007d70:	ab 6a       	lsl	r10,0xa
80007d72:	5c 3a       	neg	r10
80007d74:	5c fc       	rol	r12
80007d76:	e0 49 07 ff 	cp.w	r9,2047
80007d7a:	c1 a0       	breq	80007dae <__truncdfsf_return_op1+0x6>
80007d7c:	e0 29 03 80 	sub	r9,896
80007d80:	bf bc       	sbr	r12,0x1f
80007d82:	58 09       	cp.w	r9,0
80007d84:	e0 8a 00 1a 	brle	80007db8 <__truncdfsf_return_op1+0x10>
80007d88:	37 fa       	mov	r10,127
80007d8a:	ed bc 00 08 	bld	r12,0x8
80007d8e:	f7 ba 00 ff 	subeq	r10,-1
80007d92:	14 0c       	add	r12,r10
80007d94:	f7 b9 03 fe 	sublo	r9,-2
80007d98:	ed bc 00 1f 	bld	r12,0x1f
80007d9c:	f7 b9 01 01 	subne	r9,1
80007da0:	f8 0c 16 07 	lsr	r12,r12,0x7
80007da4:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80007da8 <__truncdfsf_return_op1>:
80007da8:	a1 7b       	lsl	r11,0x1
80007daa:	5d 0c       	ror	r12
80007dac:	5e fc       	retal	r12
80007dae:	bf dc       	cbr	r12,0x1f
80007db0:	5e 1e       	retne	-1
80007db2:	fc 1c 7f 80 	movh	r12,0x7f80
80007db6:	5e fc       	retal	r12
80007db8:	f2 09 11 01 	rsub	r9,r9,1
80007dbc:	59 99       	cp.w	r9,25
80007dbe:	f9 bc 02 00 	movhs	r12,0
80007dc2:	c1 32       	brcc	80007de8 <__truncdfsf_return_op1+0x40>
80007dc4:	f2 0a 11 20 	rsub	r10,r9,32
80007dc8:	f8 0a 09 4a 	lsl	r10,r12,r10
80007dcc:	5f 1a       	srne	r10
80007dce:	f8 09 0a 4c 	lsr	r12,r12,r9
80007dd2:	14 4c       	or	r12,r10
80007dd4:	37 fa       	mov	r10,127
80007dd6:	ed bc 00 08 	bld	r12,0x8
80007dda:	f7 ba 00 ff 	subeq	r10,-1
80007dde:	14 0c       	add	r12,r10
80007de0:	f8 0c 16 07 	lsr	r12,r12,0x7
80007de4:	a1 7b       	lsl	r11,0x1
80007de6:	5d 0c       	ror	r12
80007de8:	5e fc       	retal	r12

80007dea <__avr32_udiv64>:
80007dea:	d4 31       	pushm	r0-r7,lr
80007dec:	1a 97       	mov	r7,sp
80007dee:	20 3d       	sub	sp,12
80007df0:	10 9c       	mov	r12,r8
80007df2:	12 9e       	mov	lr,r9
80007df4:	14 93       	mov	r3,r10
80007df6:	58 09       	cp.w	r9,0
80007df8:	e0 81 00 bd 	brne	80007f72 <__avr32_udiv64+0x188>
80007dfc:	16 38       	cp.w	r8,r11
80007dfe:	e0 88 00 40 	brls	80007e7e <__avr32_udiv64+0x94>
80007e02:	f0 08 12 00 	clz	r8,r8
80007e06:	c0 d0       	breq	80007e20 <__avr32_udiv64+0x36>
80007e08:	f6 08 09 4b 	lsl	r11,r11,r8
80007e0c:	f0 09 11 20 	rsub	r9,r8,32
80007e10:	f8 08 09 4c 	lsl	r12,r12,r8
80007e14:	f4 09 0a 49 	lsr	r9,r10,r9
80007e18:	f4 08 09 43 	lsl	r3,r10,r8
80007e1c:	f3 eb 10 0b 	or	r11,r9,r11
80007e20:	f8 0e 16 10 	lsr	lr,r12,0x10
80007e24:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007e28:	f6 0e 0d 00 	divu	r0,r11,lr
80007e2c:	e6 0b 16 10 	lsr	r11,r3,0x10
80007e30:	00 99       	mov	r9,r0
80007e32:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80007e36:	e0 0a 02 48 	mul	r8,r0,r10
80007e3a:	10 3b       	cp.w	r11,r8
80007e3c:	c0 a2       	brcc	80007e50 <__avr32_udiv64+0x66>
80007e3e:	20 19       	sub	r9,1
80007e40:	18 0b       	add	r11,r12
80007e42:	18 3b       	cp.w	r11,r12
80007e44:	c0 63       	brcs	80007e50 <__avr32_udiv64+0x66>
80007e46:	10 3b       	cp.w	r11,r8
80007e48:	f7 b9 03 01 	sublo	r9,1
80007e4c:	f7 dc e3 0b 	addcs	r11,r11,r12
80007e50:	f6 08 01 01 	sub	r1,r11,r8
80007e54:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80007e58:	e2 0e 0d 00 	divu	r0,r1,lr
80007e5c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80007e60:	00 98       	mov	r8,r0
80007e62:	e0 0a 02 4a 	mul	r10,r0,r10
80007e66:	14 33       	cp.w	r3,r10
80007e68:	c0 82       	brcc	80007e78 <__avr32_udiv64+0x8e>
80007e6a:	20 18       	sub	r8,1
80007e6c:	18 03       	add	r3,r12
80007e6e:	18 33       	cp.w	r3,r12
80007e70:	c0 43       	brcs	80007e78 <__avr32_udiv64+0x8e>
80007e72:	14 33       	cp.w	r3,r10
80007e74:	f7 b8 03 01 	sublo	r8,1
80007e78:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80007e7c:	cd f8       	rjmp	8000803a <__avr32_udiv64+0x250>
80007e7e:	58 08       	cp.w	r8,0
80007e80:	c0 51       	brne	80007e8a <__avr32_udiv64+0xa0>
80007e82:	30 19       	mov	r9,1
80007e84:	f2 08 0d 08 	divu	r8,r9,r8
80007e88:	10 9c       	mov	r12,r8
80007e8a:	f8 06 12 00 	clz	r6,r12
80007e8e:	c0 41       	brne	80007e96 <__avr32_udiv64+0xac>
80007e90:	18 1b       	sub	r11,r12
80007e92:	30 19       	mov	r9,1
80007e94:	c4 08       	rjmp	80007f14 <__avr32_udiv64+0x12a>
80007e96:	ec 01 11 20 	rsub	r1,r6,32
80007e9a:	f4 01 0a 49 	lsr	r9,r10,r1
80007e9e:	f8 06 09 4c 	lsl	r12,r12,r6
80007ea2:	f6 06 09 48 	lsl	r8,r11,r6
80007ea6:	f6 01 0a 41 	lsr	r1,r11,r1
80007eaa:	f3 e8 10 08 	or	r8,r9,r8
80007eae:	f8 03 16 10 	lsr	r3,r12,0x10
80007eb2:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80007eb6:	e2 03 0d 00 	divu	r0,r1,r3
80007eba:	f0 0b 16 10 	lsr	r11,r8,0x10
80007ebe:	00 9e       	mov	lr,r0
80007ec0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80007ec4:	e0 05 02 49 	mul	r9,r0,r5
80007ec8:	12 3b       	cp.w	r11,r9
80007eca:	c0 a2       	brcc	80007ede <__avr32_udiv64+0xf4>
80007ecc:	20 1e       	sub	lr,1
80007ece:	18 0b       	add	r11,r12
80007ed0:	18 3b       	cp.w	r11,r12
80007ed2:	c0 63       	brcs	80007ede <__avr32_udiv64+0xf4>
80007ed4:	12 3b       	cp.w	r11,r9
80007ed6:	f7 be 03 01 	sublo	lr,1
80007eda:	f7 dc e3 0b 	addcs	r11,r11,r12
80007ede:	12 1b       	sub	r11,r9
80007ee0:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80007ee4:	f6 03 0d 02 	divu	r2,r11,r3
80007ee8:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80007eec:	04 99       	mov	r9,r2
80007eee:	e4 05 02 4b 	mul	r11,r2,r5
80007ef2:	16 38       	cp.w	r8,r11
80007ef4:	c0 a2       	brcc	80007f08 <__avr32_udiv64+0x11e>
80007ef6:	20 19       	sub	r9,1
80007ef8:	18 08       	add	r8,r12
80007efa:	18 38       	cp.w	r8,r12
80007efc:	c0 63       	brcs	80007f08 <__avr32_udiv64+0x11e>
80007efe:	16 38       	cp.w	r8,r11
80007f00:	f7 b9 03 01 	sublo	r9,1
80007f04:	f1 dc e3 08 	addcs	r8,r8,r12
80007f08:	f4 06 09 43 	lsl	r3,r10,r6
80007f0c:	f0 0b 01 0b 	sub	r11,r8,r11
80007f10:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80007f14:	f8 06 16 10 	lsr	r6,r12,0x10
80007f18:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80007f1c:	f6 06 0d 00 	divu	r0,r11,r6
80007f20:	e6 0b 16 10 	lsr	r11,r3,0x10
80007f24:	00 9a       	mov	r10,r0
80007f26:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80007f2a:	e0 0e 02 48 	mul	r8,r0,lr
80007f2e:	10 3b       	cp.w	r11,r8
80007f30:	c0 a2       	brcc	80007f44 <__avr32_udiv64+0x15a>
80007f32:	20 1a       	sub	r10,1
80007f34:	18 0b       	add	r11,r12
80007f36:	18 3b       	cp.w	r11,r12
80007f38:	c0 63       	brcs	80007f44 <__avr32_udiv64+0x15a>
80007f3a:	10 3b       	cp.w	r11,r8
80007f3c:	f7 ba 03 01 	sublo	r10,1
80007f40:	f7 dc e3 0b 	addcs	r11,r11,r12
80007f44:	f6 08 01 01 	sub	r1,r11,r8
80007f48:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80007f4c:	e2 06 0d 00 	divu	r0,r1,r6
80007f50:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80007f54:	00 98       	mov	r8,r0
80007f56:	e0 0e 02 4b 	mul	r11,r0,lr
80007f5a:	16 33       	cp.w	r3,r11
80007f5c:	c0 82       	brcc	80007f6c <__avr32_udiv64+0x182>
80007f5e:	20 18       	sub	r8,1
80007f60:	18 03       	add	r3,r12
80007f62:	18 33       	cp.w	r3,r12
80007f64:	c0 43       	brcs	80007f6c <__avr32_udiv64+0x182>
80007f66:	16 33       	cp.w	r3,r11
80007f68:	f7 b8 03 01 	sublo	r8,1
80007f6c:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80007f70:	c6 98       	rjmp	80008042 <__avr32_udiv64+0x258>
80007f72:	16 39       	cp.w	r9,r11
80007f74:	e0 8b 00 65 	brhi	8000803e <__avr32_udiv64+0x254>
80007f78:	f2 09 12 00 	clz	r9,r9
80007f7c:	c0 b1       	brne	80007f92 <__avr32_udiv64+0x1a8>
80007f7e:	10 3a       	cp.w	r10,r8
80007f80:	5f 2a       	srhs	r10
80007f82:	1c 3b       	cp.w	r11,lr
80007f84:	5f b8       	srhi	r8
80007f86:	10 4a       	or	r10,r8
80007f88:	f2 0a 18 00 	cp.b	r10,r9
80007f8c:	c5 90       	breq	8000803e <__avr32_udiv64+0x254>
80007f8e:	30 18       	mov	r8,1
80007f90:	c5 98       	rjmp	80008042 <__avr32_udiv64+0x258>
80007f92:	f0 09 09 46 	lsl	r6,r8,r9
80007f96:	f2 03 11 20 	rsub	r3,r9,32
80007f9a:	fc 09 09 4e 	lsl	lr,lr,r9
80007f9e:	f0 03 0a 48 	lsr	r8,r8,r3
80007fa2:	f6 09 09 4c 	lsl	r12,r11,r9
80007fa6:	f4 03 0a 42 	lsr	r2,r10,r3
80007faa:	ef 46 ff f4 	st.w	r7[-12],r6
80007fae:	f6 03 0a 43 	lsr	r3,r11,r3
80007fb2:	18 42       	or	r2,r12
80007fb4:	f1 ee 10 0c 	or	r12,r8,lr
80007fb8:	f8 01 16 10 	lsr	r1,r12,0x10
80007fbc:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80007fc0:	e6 01 0d 04 	divu	r4,r3,r1
80007fc4:	e4 03 16 10 	lsr	r3,r2,0x10
80007fc8:	08 9e       	mov	lr,r4
80007fca:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80007fce:	e8 06 02 48 	mul	r8,r4,r6
80007fd2:	10 33       	cp.w	r3,r8
80007fd4:	c0 a2       	brcc	80007fe8 <__avr32_udiv64+0x1fe>
80007fd6:	20 1e       	sub	lr,1
80007fd8:	18 03       	add	r3,r12
80007fda:	18 33       	cp.w	r3,r12
80007fdc:	c0 63       	brcs	80007fe8 <__avr32_udiv64+0x1fe>
80007fde:	10 33       	cp.w	r3,r8
80007fe0:	f7 be 03 01 	sublo	lr,1
80007fe4:	e7 dc e3 03 	addcs	r3,r3,r12
80007fe8:	10 13       	sub	r3,r8
80007fea:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80007fee:	e6 01 0d 00 	divu	r0,r3,r1
80007ff2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80007ff6:	00 98       	mov	r8,r0
80007ff8:	e0 06 02 46 	mul	r6,r0,r6
80007ffc:	0c 3b       	cp.w	r11,r6
80007ffe:	c0 a2       	brcc	80008012 <__avr32_udiv64+0x228>
80008000:	20 18       	sub	r8,1
80008002:	18 0b       	add	r11,r12
80008004:	18 3b       	cp.w	r11,r12
80008006:	c0 63       	brcs	80008012 <__avr32_udiv64+0x228>
80008008:	0c 3b       	cp.w	r11,r6
8000800a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000800e:	f7 b8 03 01 	sublo	r8,1
80008012:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008016:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000801a:	0c 1b       	sub	r11,r6
8000801c:	f0 04 06 42 	mulu.d	r2,r8,r4
80008020:	06 95       	mov	r5,r3
80008022:	16 35       	cp.w	r5,r11
80008024:	e0 8b 00 0a 	brhi	80008038 <__avr32_udiv64+0x24e>
80008028:	5f 0b       	sreq	r11
8000802a:	f4 09 09 49 	lsl	r9,r10,r9
8000802e:	12 32       	cp.w	r2,r9
80008030:	5f b9       	srhi	r9
80008032:	f7 e9 00 09 	and	r9,r11,r9
80008036:	c0 60       	breq	80008042 <__avr32_udiv64+0x258>
80008038:	20 18       	sub	r8,1
8000803a:	30 09       	mov	r9,0
8000803c:	c0 38       	rjmp	80008042 <__avr32_udiv64+0x258>
8000803e:	30 09       	mov	r9,0
80008040:	12 98       	mov	r8,r9
80008042:	10 9a       	mov	r10,r8
80008044:	12 93       	mov	r3,r9
80008046:	10 92       	mov	r2,r8
80008048:	12 9b       	mov	r11,r9
8000804a:	2f dd       	sub	sp,-12
8000804c:	d8 32       	popm	r0-r7,pc
8000804e:	d7 03       	nop

80008050 <__errno>:
80008050:	e0 68 01 24 	mov	r8,292
80008054:	70 0c       	ld.w	r12,r8[0x0]
80008056:	2f 4c       	sub	r12,-12
80008058:	5e fc       	retal	r12
8000805a:	d7 03       	nop

8000805c <free>:
8000805c:	d4 01       	pushm	lr
8000805e:	e0 68 01 24 	mov	r8,292
80008062:	18 9b       	mov	r11,r12
80008064:	70 0c       	ld.w	r12,r8[0x0]
80008066:	e0 a0 03 77 	rcall	80008754 <_free_r>
8000806a:	d8 02       	popm	pc

8000806c <malloc>:
8000806c:	d4 01       	pushm	lr
8000806e:	e0 68 01 24 	mov	r8,292
80008072:	18 9b       	mov	r11,r12
80008074:	70 0c       	ld.w	r12,r8[0x0]
80008076:	c0 3c       	rcall	8000807c <_malloc_r>
80008078:	d8 02       	popm	pc
8000807a:	d7 03       	nop

8000807c <_malloc_r>:
8000807c:	d4 31       	pushm	r0-r7,lr
8000807e:	f6 c8 ff f5 	sub	r8,r11,-11
80008082:	18 95       	mov	r5,r12
80008084:	10 97       	mov	r7,r8
80008086:	e0 17 ff f8 	andl	r7,0xfff8
8000808a:	59 68       	cp.w	r8,22
8000808c:	f9 b7 08 10 	movls	r7,16
80008090:	16 37       	cp.w	r7,r11
80008092:	5f 38       	srlo	r8
80008094:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80008098:	c0 50       	breq	800080a2 <_malloc_r+0x26>
8000809a:	30 c8       	mov	r8,12
8000809c:	99 38       	st.w	r12[0xc],r8
8000809e:	e0 8f 01 f4 	bral	80008486 <_malloc_r+0x40a>
800080a2:	e0 a0 02 a5 	rcall	800085ec <__malloc_lock>
800080a6:	e0 47 01 f7 	cp.w	r7,503
800080aa:	e0 8b 00 1d 	brhi	800080e4 <_malloc_r+0x68>
800080ae:	ee 03 16 03 	lsr	r3,r7,0x3
800080b2:	e0 68 01 28 	mov	r8,296
800080b6:	f0 03 00 38 	add	r8,r8,r3<<0x3
800080ba:	70 36       	ld.w	r6,r8[0xc]
800080bc:	10 36       	cp.w	r6,r8
800080be:	c0 61       	brne	800080ca <_malloc_r+0x4e>
800080c0:	ec c8 ff f8 	sub	r8,r6,-8
800080c4:	70 36       	ld.w	r6,r8[0xc]
800080c6:	10 36       	cp.w	r6,r8
800080c8:	c0 c0       	breq	800080e0 <_malloc_r+0x64>
800080ca:	6c 18       	ld.w	r8,r6[0x4]
800080cc:	e0 18 ff fc 	andl	r8,0xfffc
800080d0:	6c 3a       	ld.w	r10,r6[0xc]
800080d2:	ec 08 00 09 	add	r9,r6,r8
800080d6:	0a 9c       	mov	r12,r5
800080d8:	6c 28       	ld.w	r8,r6[0x8]
800080da:	95 28       	st.w	r10[0x8],r8
800080dc:	91 3a       	st.w	r8[0xc],r10
800080de:	c4 78       	rjmp	8000816c <_malloc_r+0xf0>
800080e0:	2f e3       	sub	r3,-2
800080e2:	c4 d8       	rjmp	8000817c <_malloc_r+0x100>
800080e4:	ee 03 16 09 	lsr	r3,r7,0x9
800080e8:	c0 41       	brne	800080f0 <_malloc_r+0x74>
800080ea:	ee 03 16 03 	lsr	r3,r7,0x3
800080ee:	c2 68       	rjmp	8000813a <_malloc_r+0xbe>
800080f0:	58 43       	cp.w	r3,4
800080f2:	e0 8b 00 06 	brhi	800080fe <_malloc_r+0x82>
800080f6:	ee 03 16 06 	lsr	r3,r7,0x6
800080fa:	2c 83       	sub	r3,-56
800080fc:	c1 f8       	rjmp	8000813a <_malloc_r+0xbe>
800080fe:	59 43       	cp.w	r3,20
80008100:	e0 8b 00 04 	brhi	80008108 <_malloc_r+0x8c>
80008104:	2a 53       	sub	r3,-91
80008106:	c1 a8       	rjmp	8000813a <_malloc_r+0xbe>
80008108:	e0 43 00 54 	cp.w	r3,84
8000810c:	e0 8b 00 06 	brhi	80008118 <_malloc_r+0x9c>
80008110:	ee 03 16 0c 	lsr	r3,r7,0xc
80008114:	29 23       	sub	r3,-110
80008116:	c1 28       	rjmp	8000813a <_malloc_r+0xbe>
80008118:	e0 43 01 54 	cp.w	r3,340
8000811c:	e0 8b 00 06 	brhi	80008128 <_malloc_r+0xac>
80008120:	ee 03 16 0f 	lsr	r3,r7,0xf
80008124:	28 93       	sub	r3,-119
80008126:	c0 a8       	rjmp	8000813a <_malloc_r+0xbe>
80008128:	e0 43 05 54 	cp.w	r3,1364
8000812c:	e0 88 00 04 	brls	80008134 <_malloc_r+0xb8>
80008130:	37 e3       	mov	r3,126
80008132:	c0 48       	rjmp	8000813a <_malloc_r+0xbe>
80008134:	ee 03 16 12 	lsr	r3,r7,0x12
80008138:	28 43       	sub	r3,-124
8000813a:	e0 6a 01 28 	mov	r10,296
8000813e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80008142:	74 36       	ld.w	r6,r10[0xc]
80008144:	c1 98       	rjmp	80008176 <_malloc_r+0xfa>
80008146:	6c 19       	ld.w	r9,r6[0x4]
80008148:	e0 19 ff fc 	andl	r9,0xfffc
8000814c:	f2 07 01 0b 	sub	r11,r9,r7
80008150:	58 fb       	cp.w	r11,15
80008152:	e0 8a 00 04 	brle	8000815a <_malloc_r+0xde>
80008156:	20 13       	sub	r3,1
80008158:	c1 18       	rjmp	8000817a <_malloc_r+0xfe>
8000815a:	6c 38       	ld.w	r8,r6[0xc]
8000815c:	58 0b       	cp.w	r11,0
8000815e:	c0 b5       	brlt	80008174 <_malloc_r+0xf8>
80008160:	6c 2a       	ld.w	r10,r6[0x8]
80008162:	ec 09 00 09 	add	r9,r6,r9
80008166:	0a 9c       	mov	r12,r5
80008168:	91 2a       	st.w	r8[0x8],r10
8000816a:	95 38       	st.w	r10[0xc],r8
8000816c:	72 18       	ld.w	r8,r9[0x4]
8000816e:	a1 a8       	sbr	r8,0x0
80008170:	93 18       	st.w	r9[0x4],r8
80008172:	cb c8       	rjmp	800082ea <_malloc_r+0x26e>
80008174:	10 96       	mov	r6,r8
80008176:	14 36       	cp.w	r6,r10
80008178:	ce 71       	brne	80008146 <_malloc_r+0xca>
8000817a:	2f f3       	sub	r3,-1
8000817c:	e0 6a 01 28 	mov	r10,296
80008180:	f4 cc ff f8 	sub	r12,r10,-8
80008184:	78 26       	ld.w	r6,r12[0x8]
80008186:	18 36       	cp.w	r6,r12
80008188:	c6 c0       	breq	80008260 <_malloc_r+0x1e4>
8000818a:	6c 19       	ld.w	r9,r6[0x4]
8000818c:	e0 19 ff fc 	andl	r9,0xfffc
80008190:	f2 07 01 08 	sub	r8,r9,r7
80008194:	58 f8       	cp.w	r8,15
80008196:	e0 89 00 8f 	brgt	800082b4 <_malloc_r+0x238>
8000819a:	99 3c       	st.w	r12[0xc],r12
8000819c:	99 2c       	st.w	r12[0x8],r12
8000819e:	58 08       	cp.w	r8,0
800081a0:	c0 55       	brlt	800081aa <_malloc_r+0x12e>
800081a2:	ec 09 00 09 	add	r9,r6,r9
800081a6:	0a 9c       	mov	r12,r5
800081a8:	ce 2b       	rjmp	8000816c <_malloc_r+0xf0>
800081aa:	e0 49 01 ff 	cp.w	r9,511
800081ae:	e0 8b 00 13 	brhi	800081d4 <_malloc_r+0x158>
800081b2:	a3 99       	lsr	r9,0x3
800081b4:	f4 09 00 38 	add	r8,r10,r9<<0x3
800081b8:	70 2b       	ld.w	r11,r8[0x8]
800081ba:	8d 38       	st.w	r6[0xc],r8
800081bc:	8d 2b       	st.w	r6[0x8],r11
800081be:	97 36       	st.w	r11[0xc],r6
800081c0:	91 26       	st.w	r8[0x8],r6
800081c2:	a3 49       	asr	r9,0x2
800081c4:	74 18       	ld.w	r8,r10[0x4]
800081c6:	30 1b       	mov	r11,1
800081c8:	f6 09 09 49 	lsl	r9,r11,r9
800081cc:	f1 e9 10 09 	or	r9,r8,r9
800081d0:	95 19       	st.w	r10[0x4],r9
800081d2:	c4 78       	rjmp	80008260 <_malloc_r+0x1e4>
800081d4:	f2 0a 16 09 	lsr	r10,r9,0x9
800081d8:	58 4a       	cp.w	r10,4
800081da:	e0 8b 00 07 	brhi	800081e8 <_malloc_r+0x16c>
800081de:	f2 0a 16 06 	lsr	r10,r9,0x6
800081e2:	2c 8a       	sub	r10,-56
800081e4:	c2 08       	rjmp	80008224 <_malloc_r+0x1a8>
800081e6:	d7 03       	nop
800081e8:	59 4a       	cp.w	r10,20
800081ea:	e0 8b 00 04 	brhi	800081f2 <_malloc_r+0x176>
800081ee:	2a 5a       	sub	r10,-91
800081f0:	c1 a8       	rjmp	80008224 <_malloc_r+0x1a8>
800081f2:	e0 4a 00 54 	cp.w	r10,84
800081f6:	e0 8b 00 06 	brhi	80008202 <_malloc_r+0x186>
800081fa:	f2 0a 16 0c 	lsr	r10,r9,0xc
800081fe:	29 2a       	sub	r10,-110
80008200:	c1 28       	rjmp	80008224 <_malloc_r+0x1a8>
80008202:	e0 4a 01 54 	cp.w	r10,340
80008206:	e0 8b 00 06 	brhi	80008212 <_malloc_r+0x196>
8000820a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000820e:	28 9a       	sub	r10,-119
80008210:	c0 a8       	rjmp	80008224 <_malloc_r+0x1a8>
80008212:	e0 4a 05 54 	cp.w	r10,1364
80008216:	e0 88 00 04 	brls	8000821e <_malloc_r+0x1a2>
8000821a:	37 ea       	mov	r10,126
8000821c:	c0 48       	rjmp	80008224 <_malloc_r+0x1a8>
8000821e:	f2 0a 16 12 	lsr	r10,r9,0x12
80008222:	28 4a       	sub	r10,-124
80008224:	e0 6b 01 28 	mov	r11,296
80008228:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000822c:	68 28       	ld.w	r8,r4[0x8]
8000822e:	08 38       	cp.w	r8,r4
80008230:	c0 e1       	brne	8000824c <_malloc_r+0x1d0>
80008232:	76 19       	ld.w	r9,r11[0x4]
80008234:	a3 4a       	asr	r10,0x2
80008236:	30 1e       	mov	lr,1
80008238:	fc 0a 09 4a 	lsl	r10,lr,r10
8000823c:	f3 ea 10 0a 	or	r10,r9,r10
80008240:	10 99       	mov	r9,r8
80008242:	97 1a       	st.w	r11[0x4],r10
80008244:	c0 a8       	rjmp	80008258 <_malloc_r+0x1dc>
80008246:	70 28       	ld.w	r8,r8[0x8]
80008248:	08 38       	cp.w	r8,r4
8000824a:	c0 60       	breq	80008256 <_malloc_r+0x1da>
8000824c:	70 1a       	ld.w	r10,r8[0x4]
8000824e:	e0 1a ff fc 	andl	r10,0xfffc
80008252:	14 39       	cp.w	r9,r10
80008254:	cf 93       	brcs	80008246 <_malloc_r+0x1ca>
80008256:	70 39       	ld.w	r9,r8[0xc]
80008258:	8d 39       	st.w	r6[0xc],r9
8000825a:	8d 28       	st.w	r6[0x8],r8
8000825c:	91 36       	st.w	r8[0xc],r6
8000825e:	93 26       	st.w	r9[0x8],r6
80008260:	e6 08 14 02 	asr	r8,r3,0x2
80008264:	30 1b       	mov	r11,1
80008266:	e0 64 01 28 	mov	r4,296
8000826a:	f6 08 09 4b 	lsl	r11,r11,r8
8000826e:	68 18       	ld.w	r8,r4[0x4]
80008270:	10 3b       	cp.w	r11,r8
80008272:	e0 8b 00 69 	brhi	80008344 <_malloc_r+0x2c8>
80008276:	f7 e8 00 09 	and	r9,r11,r8
8000827a:	c0 b1       	brne	80008290 <_malloc_r+0x214>
8000827c:	e0 13 ff fc 	andl	r3,0xfffc
80008280:	a1 7b       	lsl	r11,0x1
80008282:	2f c3       	sub	r3,-4
80008284:	c0 38       	rjmp	8000828a <_malloc_r+0x20e>
80008286:	2f c3       	sub	r3,-4
80008288:	a1 7b       	lsl	r11,0x1
8000828a:	f7 e8 00 09 	and	r9,r11,r8
8000828e:	cf c0       	breq	80008286 <_malloc_r+0x20a>
80008290:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80008294:	06 92       	mov	r2,r3
80008296:	1c 91       	mov	r1,lr
80008298:	62 36       	ld.w	r6,r1[0xc]
8000829a:	c2 d8       	rjmp	800082f4 <_malloc_r+0x278>
8000829c:	6c 1a       	ld.w	r10,r6[0x4]
8000829e:	e0 1a ff fc 	andl	r10,0xfffc
800082a2:	f4 07 01 08 	sub	r8,r10,r7
800082a6:	58 f8       	cp.w	r8,15
800082a8:	e0 8a 00 15 	brle	800082d2 <_malloc_r+0x256>
800082ac:	6c 3a       	ld.w	r10,r6[0xc]
800082ae:	6c 29       	ld.w	r9,r6[0x8]
800082b0:	95 29       	st.w	r10[0x8],r9
800082b2:	93 3a       	st.w	r9[0xc],r10
800082b4:	0e 99       	mov	r9,r7
800082b6:	ec 07 00 07 	add	r7,r6,r7
800082ba:	a1 a9       	sbr	r9,0x0
800082bc:	99 37       	st.w	r12[0xc],r7
800082be:	99 27       	st.w	r12[0x8],r7
800082c0:	8d 19       	st.w	r6[0x4],r9
800082c2:	ee 08 09 08 	st.w	r7[r8],r8
800082c6:	8f 2c       	st.w	r7[0x8],r12
800082c8:	8f 3c       	st.w	r7[0xc],r12
800082ca:	a1 a8       	sbr	r8,0x0
800082cc:	0a 9c       	mov	r12,r5
800082ce:	8f 18       	st.w	r7[0x4],r8
800082d0:	c0 d8       	rjmp	800082ea <_malloc_r+0x26e>
800082d2:	6c 39       	ld.w	r9,r6[0xc]
800082d4:	58 08       	cp.w	r8,0
800082d6:	c0 e5       	brlt	800082f2 <_malloc_r+0x276>
800082d8:	ec 0a 00 0a 	add	r10,r6,r10
800082dc:	74 18       	ld.w	r8,r10[0x4]
800082de:	a1 a8       	sbr	r8,0x0
800082e0:	0a 9c       	mov	r12,r5
800082e2:	95 18       	st.w	r10[0x4],r8
800082e4:	6c 28       	ld.w	r8,r6[0x8]
800082e6:	93 28       	st.w	r9[0x8],r8
800082e8:	91 39       	st.w	r8[0xc],r9
800082ea:	c8 2d       	rcall	800085ee <__malloc_unlock>
800082ec:	ec cc ff f8 	sub	r12,r6,-8
800082f0:	d8 32       	popm	r0-r7,pc
800082f2:	12 96       	mov	r6,r9
800082f4:	02 36       	cp.w	r6,r1
800082f6:	cd 31       	brne	8000829c <_malloc_r+0x220>
800082f8:	2f f2       	sub	r2,-1
800082fa:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800082fe:	c0 30       	breq	80008304 <_malloc_r+0x288>
80008300:	2f 81       	sub	r1,-8
80008302:	cc bb       	rjmp	80008298 <_malloc_r+0x21c>
80008304:	1c 98       	mov	r8,lr
80008306:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000830a:	c0 81       	brne	8000831a <_malloc_r+0x29e>
8000830c:	68 19       	ld.w	r9,r4[0x4]
8000830e:	f6 08 11 ff 	rsub	r8,r11,-1
80008312:	f3 e8 00 08 	and	r8,r9,r8
80008316:	89 18       	st.w	r4[0x4],r8
80008318:	c0 78       	rjmp	80008326 <_malloc_r+0x2aa>
8000831a:	f0 c9 00 08 	sub	r9,r8,8
8000831e:	20 13       	sub	r3,1
80008320:	70 08       	ld.w	r8,r8[0x0]
80008322:	12 38       	cp.w	r8,r9
80008324:	cf 10       	breq	80008306 <_malloc_r+0x28a>
80008326:	a1 7b       	lsl	r11,0x1
80008328:	68 18       	ld.w	r8,r4[0x4]
8000832a:	10 3b       	cp.w	r11,r8
8000832c:	e0 8b 00 0c 	brhi	80008344 <_malloc_r+0x2c8>
80008330:	58 0b       	cp.w	r11,0
80008332:	c0 90       	breq	80008344 <_malloc_r+0x2c8>
80008334:	04 93       	mov	r3,r2
80008336:	c0 38       	rjmp	8000833c <_malloc_r+0x2c0>
80008338:	2f c3       	sub	r3,-4
8000833a:	a1 7b       	lsl	r11,0x1
8000833c:	f7 e8 00 09 	and	r9,r11,r8
80008340:	ca 81       	brne	80008290 <_malloc_r+0x214>
80008342:	cf bb       	rjmp	80008338 <_malloc_r+0x2bc>
80008344:	68 23       	ld.w	r3,r4[0x8]
80008346:	66 12       	ld.w	r2,r3[0x4]
80008348:	e0 12 ff fc 	andl	r2,0xfffc
8000834c:	0e 32       	cp.w	r2,r7
8000834e:	5f 39       	srlo	r9
80008350:	e4 07 01 08 	sub	r8,r2,r7
80008354:	58 f8       	cp.w	r8,15
80008356:	5f aa       	srle	r10
80008358:	f5 e9 10 09 	or	r9,r10,r9
8000835c:	e0 80 00 96 	breq	80008488 <_malloc_r+0x40c>
80008360:	e0 68 06 40 	mov	r8,1600
80008364:	70 01       	ld.w	r1,r8[0x0]
80008366:	e0 68 05 34 	mov	r8,1332
8000836a:	2f 01       	sub	r1,-16
8000836c:	70 08       	ld.w	r8,r8[0x0]
8000836e:	0e 01       	add	r1,r7
80008370:	5b f8       	cp.w	r8,-1
80008372:	c0 40       	breq	8000837a <_malloc_r+0x2fe>
80008374:	28 11       	sub	r1,-127
80008376:	e0 11 ff 80 	andl	r1,0xff80
8000837a:	02 9b       	mov	r11,r1
8000837c:	0a 9c       	mov	r12,r5
8000837e:	c7 9d       	rcall	80008670 <_sbrk_r>
80008380:	18 96       	mov	r6,r12
80008382:	5b fc       	cp.w	r12,-1
80008384:	c7 30       	breq	8000846a <_malloc_r+0x3ee>
80008386:	e6 02 00 08 	add	r8,r3,r2
8000838a:	10 3c       	cp.w	r12,r8
8000838c:	c0 32       	brcc	80008392 <_malloc_r+0x316>
8000838e:	08 33       	cp.w	r3,r4
80008390:	c6 d1       	brne	8000846a <_malloc_r+0x3ee>
80008392:	e0 6a 06 44 	mov	r10,1604
80008396:	74 09       	ld.w	r9,r10[0x0]
80008398:	e2 09 00 09 	add	r9,r1,r9
8000839c:	95 09       	st.w	r10[0x0],r9
8000839e:	10 36       	cp.w	r6,r8
800083a0:	c0 a1       	brne	800083b4 <_malloc_r+0x338>
800083a2:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800083a6:	c0 71       	brne	800083b4 <_malloc_r+0x338>
800083a8:	e2 02 00 02 	add	r2,r1,r2
800083ac:	68 28       	ld.w	r8,r4[0x8]
800083ae:	a1 a2       	sbr	r2,0x0
800083b0:	91 12       	st.w	r8[0x4],r2
800083b2:	c4 d8       	rjmp	8000844c <_malloc_r+0x3d0>
800083b4:	e0 6a 05 34 	mov	r10,1332
800083b8:	74 0b       	ld.w	r11,r10[0x0]
800083ba:	5b fb       	cp.w	r11,-1
800083bc:	c0 31       	brne	800083c2 <_malloc_r+0x346>
800083be:	95 06       	st.w	r10[0x0],r6
800083c0:	c0 78       	rjmp	800083ce <_malloc_r+0x352>
800083c2:	ec 09 00 09 	add	r9,r6,r9
800083c6:	e0 6a 06 44 	mov	r10,1604
800083ca:	10 19       	sub	r9,r8
800083cc:	95 09       	st.w	r10[0x0],r9
800083ce:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800083d2:	f0 09 11 08 	rsub	r9,r8,8
800083d6:	58 08       	cp.w	r8,0
800083d8:	f2 08 17 10 	movne	r8,r9
800083dc:	ed d8 e1 06 	addne	r6,r6,r8
800083e0:	28 08       	sub	r8,-128
800083e2:	ec 01 00 01 	add	r1,r6,r1
800083e6:	0a 9c       	mov	r12,r5
800083e8:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800083ec:	f0 01 01 01 	sub	r1,r8,r1
800083f0:	02 9b       	mov	r11,r1
800083f2:	c3 fd       	rcall	80008670 <_sbrk_r>
800083f4:	e0 68 06 44 	mov	r8,1604
800083f8:	5b fc       	cp.w	r12,-1
800083fa:	ec 0c 17 00 	moveq	r12,r6
800083fe:	f9 b1 00 00 	moveq	r1,0
80008402:	70 09       	ld.w	r9,r8[0x0]
80008404:	0c 1c       	sub	r12,r6
80008406:	89 26       	st.w	r4[0x8],r6
80008408:	02 0c       	add	r12,r1
8000840a:	12 01       	add	r1,r9
8000840c:	a1 ac       	sbr	r12,0x0
8000840e:	91 01       	st.w	r8[0x0],r1
80008410:	8d 1c       	st.w	r6[0x4],r12
80008412:	08 33       	cp.w	r3,r4
80008414:	c1 c0       	breq	8000844c <_malloc_r+0x3d0>
80008416:	58 f2       	cp.w	r2,15
80008418:	e0 8b 00 05 	brhi	80008422 <_malloc_r+0x3a6>
8000841c:	30 18       	mov	r8,1
8000841e:	8d 18       	st.w	r6[0x4],r8
80008420:	c2 58       	rjmp	8000846a <_malloc_r+0x3ee>
80008422:	30 59       	mov	r9,5
80008424:	20 c2       	sub	r2,12
80008426:	e0 12 ff f8 	andl	r2,0xfff8
8000842a:	e6 02 00 08 	add	r8,r3,r2
8000842e:	91 29       	st.w	r8[0x8],r9
80008430:	91 19       	st.w	r8[0x4],r9
80008432:	66 18       	ld.w	r8,r3[0x4]
80008434:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008438:	e5 e8 10 08 	or	r8,r2,r8
8000843c:	87 18       	st.w	r3[0x4],r8
8000843e:	58 f2       	cp.w	r2,15
80008440:	e0 88 00 06 	brls	8000844c <_malloc_r+0x3d0>
80008444:	e6 cb ff f8 	sub	r11,r3,-8
80008448:	0a 9c       	mov	r12,r5
8000844a:	c8 5d       	rcall	80008754 <_free_r>
8000844c:	e0 69 06 3c 	mov	r9,1596
80008450:	72 0a       	ld.w	r10,r9[0x0]
80008452:	e0 68 06 44 	mov	r8,1604
80008456:	70 08       	ld.w	r8,r8[0x0]
80008458:	14 38       	cp.w	r8,r10
8000845a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000845e:	e0 69 06 38 	mov	r9,1592
80008462:	72 0a       	ld.w	r10,r9[0x0]
80008464:	14 38       	cp.w	r8,r10
80008466:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000846a:	68 28       	ld.w	r8,r4[0x8]
8000846c:	70 18       	ld.w	r8,r8[0x4]
8000846e:	e0 18 ff fc 	andl	r8,0xfffc
80008472:	0e 38       	cp.w	r8,r7
80008474:	5f 39       	srlo	r9
80008476:	0e 18       	sub	r8,r7
80008478:	58 f8       	cp.w	r8,15
8000847a:	5f aa       	srle	r10
8000847c:	f5 e9 10 09 	or	r9,r10,r9
80008480:	c0 40       	breq	80008488 <_malloc_r+0x40c>
80008482:	0a 9c       	mov	r12,r5
80008484:	cb 5c       	rcall	800085ee <__malloc_unlock>
80008486:	d8 3a       	popm	r0-r7,pc,r12=0
80008488:	68 26       	ld.w	r6,r4[0x8]
8000848a:	a1 a8       	sbr	r8,0x0
8000848c:	0e 99       	mov	r9,r7
8000848e:	a1 a9       	sbr	r9,0x0
80008490:	8d 19       	st.w	r6[0x4],r9
80008492:	ec 07 00 07 	add	r7,r6,r7
80008496:	0a 9c       	mov	r12,r5
80008498:	89 27       	st.w	r4[0x8],r7
8000849a:	8f 18       	st.w	r7[0x4],r8
8000849c:	ca 9c       	rcall	800085ee <__malloc_unlock>
8000849e:	ec cc ff f8 	sub	r12,r6,-8
800084a2:	d8 32       	popm	r0-r7,pc

800084a4 <memcpy>:
800084a4:	58 8a       	cp.w	r10,8
800084a6:	c2 f5       	brlt	80008504 <memcpy+0x60>
800084a8:	f9 eb 10 09 	or	r9,r12,r11
800084ac:	e2 19 00 03 	andl	r9,0x3,COH
800084b0:	e0 81 00 97 	brne	800085de <memcpy+0x13a>
800084b4:	e0 4a 00 20 	cp.w	r10,32
800084b8:	c3 b4       	brge	8000852e <memcpy+0x8a>
800084ba:	f4 08 14 02 	asr	r8,r10,0x2
800084be:	f0 09 11 08 	rsub	r9,r8,8
800084c2:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800084c6:	76 69       	ld.w	r9,r11[0x18]
800084c8:	99 69       	st.w	r12[0x18],r9
800084ca:	76 59       	ld.w	r9,r11[0x14]
800084cc:	99 59       	st.w	r12[0x14],r9
800084ce:	76 49       	ld.w	r9,r11[0x10]
800084d0:	99 49       	st.w	r12[0x10],r9
800084d2:	76 39       	ld.w	r9,r11[0xc]
800084d4:	99 39       	st.w	r12[0xc],r9
800084d6:	76 29       	ld.w	r9,r11[0x8]
800084d8:	99 29       	st.w	r12[0x8],r9
800084da:	76 19       	ld.w	r9,r11[0x4]
800084dc:	99 19       	st.w	r12[0x4],r9
800084de:	76 09       	ld.w	r9,r11[0x0]
800084e0:	99 09       	st.w	r12[0x0],r9
800084e2:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800084e6:	f8 08 00 28 	add	r8,r12,r8<<0x2
800084ea:	e0 1a 00 03 	andl	r10,0x3
800084ee:	f4 0a 11 04 	rsub	r10,r10,4
800084f2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800084f6:	17 a9       	ld.ub	r9,r11[0x2]
800084f8:	b0 a9       	st.b	r8[0x2],r9
800084fa:	17 99       	ld.ub	r9,r11[0x1]
800084fc:	b0 99       	st.b	r8[0x1],r9
800084fe:	17 89       	ld.ub	r9,r11[0x0]
80008500:	b0 89       	st.b	r8[0x0],r9
80008502:	5e fc       	retal	r12
80008504:	f4 0a 11 09 	rsub	r10,r10,9
80008508:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000850c:	17 f9       	ld.ub	r9,r11[0x7]
8000850e:	b8 f9       	st.b	r12[0x7],r9
80008510:	17 e9       	ld.ub	r9,r11[0x6]
80008512:	b8 e9       	st.b	r12[0x6],r9
80008514:	17 d9       	ld.ub	r9,r11[0x5]
80008516:	b8 d9       	st.b	r12[0x5],r9
80008518:	17 c9       	ld.ub	r9,r11[0x4]
8000851a:	b8 c9       	st.b	r12[0x4],r9
8000851c:	17 b9       	ld.ub	r9,r11[0x3]
8000851e:	b8 b9       	st.b	r12[0x3],r9
80008520:	17 a9       	ld.ub	r9,r11[0x2]
80008522:	b8 a9       	st.b	r12[0x2],r9
80008524:	17 99       	ld.ub	r9,r11[0x1]
80008526:	b8 99       	st.b	r12[0x1],r9
80008528:	17 89       	ld.ub	r9,r11[0x0]
8000852a:	b8 89       	st.b	r12[0x0],r9
8000852c:	5e fc       	retal	r12
8000852e:	eb cd 40 c0 	pushm	r6-r7,lr
80008532:	18 99       	mov	r9,r12
80008534:	22 0a       	sub	r10,32
80008536:	b7 07       	ld.d	r6,r11++
80008538:	b3 26       	st.d	r9++,r6
8000853a:	b7 07       	ld.d	r6,r11++
8000853c:	b3 26       	st.d	r9++,r6
8000853e:	b7 07       	ld.d	r6,r11++
80008540:	b3 26       	st.d	r9++,r6
80008542:	b7 07       	ld.d	r6,r11++
80008544:	b3 26       	st.d	r9++,r6
80008546:	22 0a       	sub	r10,32
80008548:	cf 74       	brge	80008536 <memcpy+0x92>
8000854a:	2f 0a       	sub	r10,-16
8000854c:	c0 65       	brlt	80008558 <memcpy+0xb4>
8000854e:	b7 07       	ld.d	r6,r11++
80008550:	b3 26       	st.d	r9++,r6
80008552:	b7 07       	ld.d	r6,r11++
80008554:	b3 26       	st.d	r9++,r6
80008556:	21 0a       	sub	r10,16
80008558:	5c 3a       	neg	r10
8000855a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000855e:	d7 03       	nop
80008560:	d7 03       	nop
80008562:	f7 36 00 0e 	ld.ub	r6,r11[14]
80008566:	f3 66 00 0e 	st.b	r9[14],r6
8000856a:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000856e:	f3 66 00 0d 	st.b	r9[13],r6
80008572:	f7 36 00 0c 	ld.ub	r6,r11[12]
80008576:	f3 66 00 0c 	st.b	r9[12],r6
8000857a:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000857e:	f3 66 00 0b 	st.b	r9[11],r6
80008582:	f7 36 00 0a 	ld.ub	r6,r11[10]
80008586:	f3 66 00 0a 	st.b	r9[10],r6
8000858a:	f7 36 00 09 	ld.ub	r6,r11[9]
8000858e:	f3 66 00 09 	st.b	r9[9],r6
80008592:	f7 36 00 08 	ld.ub	r6,r11[8]
80008596:	f3 66 00 08 	st.b	r9[8],r6
8000859a:	f7 36 00 07 	ld.ub	r6,r11[7]
8000859e:	f3 66 00 07 	st.b	r9[7],r6
800085a2:	f7 36 00 06 	ld.ub	r6,r11[6]
800085a6:	f3 66 00 06 	st.b	r9[6],r6
800085aa:	f7 36 00 05 	ld.ub	r6,r11[5]
800085ae:	f3 66 00 05 	st.b	r9[5],r6
800085b2:	f7 36 00 04 	ld.ub	r6,r11[4]
800085b6:	f3 66 00 04 	st.b	r9[4],r6
800085ba:	f7 36 00 03 	ld.ub	r6,r11[3]
800085be:	f3 66 00 03 	st.b	r9[3],r6
800085c2:	f7 36 00 02 	ld.ub	r6,r11[2]
800085c6:	f3 66 00 02 	st.b	r9[2],r6
800085ca:	f7 36 00 01 	ld.ub	r6,r11[1]
800085ce:	f3 66 00 01 	st.b	r9[1],r6
800085d2:	f7 36 00 00 	ld.ub	r6,r11[0]
800085d6:	f3 66 00 00 	st.b	r9[0],r6
800085da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800085de:	20 1a       	sub	r10,1
800085e0:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800085e4:	f8 0a 0b 09 	st.b	r12[r10],r9
800085e8:	cf b1       	brne	800085de <memcpy+0x13a>
800085ea:	5e fc       	retal	r12

800085ec <__malloc_lock>:
800085ec:	5e fc       	retal	r12

800085ee <__malloc_unlock>:
800085ee:	5e fc       	retal	r12

800085f0 <rand>:
800085f0:	d4 21       	pushm	r4-r7,lr
800085f2:	e0 67 01 24 	mov	r7,292
800085f6:	6e 06       	ld.w	r6,r7[0x0]
800085f8:	6c e8       	ld.w	r8,r6[0x38]
800085fa:	58 08       	cp.w	r8,0
800085fc:	c1 a1       	brne	80008630 <rand+0x40>
800085fe:	31 8c       	mov	r12,24
80008600:	fe b0 fd 36 	rcall	8000806c <malloc>
80008604:	e0 69 33 0e 	mov	r9,13070
80008608:	8d ec       	st.w	r6[0x38],r12
8000860a:	6e 08       	ld.w	r8,r7[0x0]
8000860c:	70 e8       	ld.w	r8,r8[0x38]
8000860e:	b0 09       	st.h	r8[0x0],r9
80008610:	fe 79 ab cd 	mov	r9,-21555
80008614:	b0 19       	st.h	r8[0x2],r9
80008616:	e0 69 12 34 	mov	r9,4660
8000861a:	b0 29       	st.h	r8[0x4],r9
8000861c:	fe 79 e6 6d 	mov	r9,-6547
80008620:	b0 39       	st.h	r8[0x6],r9
80008622:	fe 79 de ec 	mov	r9,-8468
80008626:	b0 49       	st.h	r8[0x8],r9
80008628:	30 59       	mov	r9,5
8000862a:	b0 59       	st.h	r8[0xa],r9
8000862c:	30 b9       	mov	r9,11
8000862e:	b0 69       	st.h	r8[0xc],r9
80008630:	e0 68 01 24 	mov	r8,292
80008634:	70 08       	ld.w	r8,r8[0x0]
80008636:	70 e8       	ld.w	r8,r8[0x38]
80008638:	70 47       	ld.w	r7,r8[0x10]
8000863a:	70 5c       	ld.w	r12,r8[0x14]
8000863c:	e0 69 7f 2d 	mov	r9,32557
80008640:	ea 19 4c 95 	orh	r9,0x4c95
80008644:	f8 09 06 4a 	mulu.d	r10,r12,r9
80008648:	ee 09 02 49 	mul	r9,r7,r9
8000864c:	e0 67 f4 2d 	mov	r7,62509
80008650:	ea 17 58 51 	orh	r7,0x5851
80008654:	30 16       	mov	r6,1
80008656:	f8 07 03 49 	mac	r9,r12,r7
8000865a:	30 07       	mov	r7,0
8000865c:	f2 0b 00 0b 	add	r11,r9,r11
80008660:	0c 0a       	add	r10,r6
80008662:	f6 07 00 4b 	adc	r11,r11,r7
80008666:	f0 eb 00 10 	st.d	r8[16],r10
8000866a:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8000866e:	d8 22       	popm	r4-r7,pc

80008670 <_sbrk_r>:
80008670:	d4 21       	pushm	r4-r7,lr
80008672:	30 08       	mov	r8,0
80008674:	18 97       	mov	r7,r12
80008676:	e0 66 06 70 	mov	r6,1648
8000867a:	16 9c       	mov	r12,r11
8000867c:	8d 08       	st.w	r6[0x0],r8
8000867e:	c0 9c       	rcall	80008690 <_sbrk>
80008680:	5b fc       	cp.w	r12,-1
80008682:	c0 51       	brne	8000868c <_sbrk_r+0x1c>
80008684:	6c 08       	ld.w	r8,r6[0x0]
80008686:	58 08       	cp.w	r8,0
80008688:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000868c:	d8 22       	popm	r4-r7,pc
8000868e:	d7 03       	nop

80008690 <_sbrk>:
80008690:	d4 01       	pushm	lr
80008692:	e0 68 06 6c 	mov	r8,1644
80008696:	70 09       	ld.w	r9,r8[0x0]
80008698:	58 09       	cp.w	r9,0
8000869a:	c0 41       	brne	800086a2 <_sbrk+0x12>
8000869c:	e0 69 06 78 	mov	r9,1656
800086a0:	91 09       	st.w	r8[0x0],r9
800086a2:	e0 69 06 6c 	mov	r9,1644
800086a6:	e0 6a f0 00 	mov	r10,61440
800086aa:	72 08       	ld.w	r8,r9[0x0]
800086ac:	f0 0c 00 0c 	add	r12,r8,r12
800086b0:	14 3c       	cp.w	r12,r10
800086b2:	e0 8b 00 04 	brhi	800086ba <_sbrk+0x2a>
800086b6:	93 0c       	st.w	r9[0x0],r12
800086b8:	c0 68       	rjmp	800086c4 <_sbrk+0x34>
800086ba:	fe b0 fc cb 	rcall	80008050 <__errno>
800086be:	30 c8       	mov	r8,12
800086c0:	99 08       	st.w	r12[0x0],r8
800086c2:	3f f8       	mov	r8,-1
800086c4:	10 9c       	mov	r12,r8
800086c6:	d8 02       	popm	pc

800086c8 <_malloc_trim_r>:
800086c8:	d4 21       	pushm	r4-r7,lr
800086ca:	16 95       	mov	r5,r11
800086cc:	18 97       	mov	r7,r12
800086ce:	c8 ff       	rcall	800085ec <__malloc_lock>
800086d0:	e0 64 01 28 	mov	r4,296
800086d4:	68 28       	ld.w	r8,r4[0x8]
800086d6:	70 16       	ld.w	r6,r8[0x4]
800086d8:	e0 16 ff fc 	andl	r6,0xfffc
800086dc:	ec c8 ff 91 	sub	r8,r6,-111
800086e0:	f0 05 01 05 	sub	r5,r8,r5
800086e4:	e0 15 ff 80 	andl	r5,0xff80
800086e8:	ea c5 00 80 	sub	r5,r5,128
800086ec:	e0 45 00 7f 	cp.w	r5,127
800086f0:	e0 8a 00 22 	brle	80008734 <_malloc_trim_r+0x6c>
800086f4:	30 0b       	mov	r11,0
800086f6:	0e 9c       	mov	r12,r7
800086f8:	cb cf       	rcall	80008670 <_sbrk_r>
800086fa:	68 28       	ld.w	r8,r4[0x8]
800086fc:	0c 08       	add	r8,r6
800086fe:	10 3c       	cp.w	r12,r8
80008700:	c1 a1       	brne	80008734 <_malloc_trim_r+0x6c>
80008702:	ea 0b 11 00 	rsub	r11,r5,0
80008706:	0e 9c       	mov	r12,r7
80008708:	cb 4f       	rcall	80008670 <_sbrk_r>
8000870a:	5b fc       	cp.w	r12,-1
8000870c:	c1 71       	brne	8000873a <_malloc_trim_r+0x72>
8000870e:	30 0b       	mov	r11,0
80008710:	0e 9c       	mov	r12,r7
80008712:	ca ff       	rcall	80008670 <_sbrk_r>
80008714:	68 28       	ld.w	r8,r4[0x8]
80008716:	f8 08 01 09 	sub	r9,r12,r8
8000871a:	58 f9       	cp.w	r9,15
8000871c:	e0 8a 00 0c 	brle	80008734 <_malloc_trim_r+0x6c>
80008720:	a1 a9       	sbr	r9,0x0
80008722:	91 19       	st.w	r8[0x4],r9
80008724:	e0 68 05 34 	mov	r8,1332
80008728:	70 09       	ld.w	r9,r8[0x0]
8000872a:	e0 68 06 44 	mov	r8,1604
8000872e:	f8 09 01 09 	sub	r9,r12,r9
80008732:	91 09       	st.w	r8[0x0],r9
80008734:	0e 9c       	mov	r12,r7
80008736:	c5 cf       	rcall	800085ee <__malloc_unlock>
80008738:	d8 2a       	popm	r4-r7,pc,r12=0
8000873a:	68 28       	ld.w	r8,r4[0x8]
8000873c:	0a 16       	sub	r6,r5
8000873e:	a1 a6       	sbr	r6,0x0
80008740:	91 16       	st.w	r8[0x4],r6
80008742:	e0 68 06 44 	mov	r8,1604
80008746:	70 09       	ld.w	r9,r8[0x0]
80008748:	0a 19       	sub	r9,r5
8000874a:	0e 9c       	mov	r12,r7
8000874c:	91 09       	st.w	r8[0x0],r9
8000874e:	c5 0f       	rcall	800085ee <__malloc_unlock>
80008750:	da 2a       	popm	r4-r7,pc,r12=1
80008752:	d7 03       	nop

80008754 <_free_r>:
80008754:	d4 21       	pushm	r4-r7,lr
80008756:	16 96       	mov	r6,r11
80008758:	18 97       	mov	r7,r12
8000875a:	58 0b       	cp.w	r11,0
8000875c:	e0 80 00 bd 	breq	800088d6 <_free_r+0x182>
80008760:	c4 6f       	rcall	800085ec <__malloc_lock>
80008762:	20 86       	sub	r6,8
80008764:	e0 6a 01 28 	mov	r10,296
80008768:	6c 18       	ld.w	r8,r6[0x4]
8000876a:	74 2e       	ld.w	lr,r10[0x8]
8000876c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80008770:	a1 c8       	cbr	r8,0x0
80008772:	ec 08 00 09 	add	r9,r6,r8
80008776:	72 1b       	ld.w	r11,r9[0x4]
80008778:	e0 1b ff fc 	andl	r11,0xfffc
8000877c:	1c 39       	cp.w	r9,lr
8000877e:	c1 d1       	brne	800087b8 <_free_r+0x64>
80008780:	f6 08 00 08 	add	r8,r11,r8
80008784:	58 0c       	cp.w	r12,0
80008786:	c0 81       	brne	80008796 <_free_r+0x42>
80008788:	6c 09       	ld.w	r9,r6[0x0]
8000878a:	12 16       	sub	r6,r9
8000878c:	12 08       	add	r8,r9
8000878e:	6c 3b       	ld.w	r11,r6[0xc]
80008790:	6c 29       	ld.w	r9,r6[0x8]
80008792:	97 29       	st.w	r11[0x8],r9
80008794:	93 3b       	st.w	r9[0xc],r11
80008796:	10 99       	mov	r9,r8
80008798:	95 26       	st.w	r10[0x8],r6
8000879a:	a1 a9       	sbr	r9,0x0
8000879c:	8d 19       	st.w	r6[0x4],r9
8000879e:	e0 69 05 30 	mov	r9,1328
800087a2:	72 09       	ld.w	r9,r9[0x0]
800087a4:	12 38       	cp.w	r8,r9
800087a6:	c0 63       	brcs	800087b2 <_free_r+0x5e>
800087a8:	e0 68 06 40 	mov	r8,1600
800087ac:	0e 9c       	mov	r12,r7
800087ae:	70 0b       	ld.w	r11,r8[0x0]
800087b0:	c8 cf       	rcall	800086c8 <_malloc_trim_r>
800087b2:	0e 9c       	mov	r12,r7
800087b4:	c1 df       	rcall	800085ee <__malloc_unlock>
800087b6:	d8 22       	popm	r4-r7,pc
800087b8:	93 1b       	st.w	r9[0x4],r11
800087ba:	58 0c       	cp.w	r12,0
800087bc:	c0 30       	breq	800087c2 <_free_r+0x6e>
800087be:	30 0c       	mov	r12,0
800087c0:	c1 08       	rjmp	800087e0 <_free_r+0x8c>
800087c2:	6c 0e       	ld.w	lr,r6[0x0]
800087c4:	f4 c5 ff f8 	sub	r5,r10,-8
800087c8:	1c 16       	sub	r6,lr
800087ca:	1c 08       	add	r8,lr
800087cc:	6c 2e       	ld.w	lr,r6[0x8]
800087ce:	0a 3e       	cp.w	lr,r5
800087d0:	f9 bc 00 01 	moveq	r12,1
800087d4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800087d8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800087dc:	fd f5 1a 03 	st.wne	lr[0xc],r5
800087e0:	f2 0b 00 0e 	add	lr,r9,r11
800087e4:	7c 1e       	ld.w	lr,lr[0x4]
800087e6:	ed be 00 00 	bld	lr,0x0
800087ea:	c1 40       	breq	80008812 <_free_r+0xbe>
800087ec:	16 08       	add	r8,r11
800087ee:	58 0c       	cp.w	r12,0
800087f0:	c0 d1       	brne	8000880a <_free_r+0xb6>
800087f2:	e0 6e 01 28 	mov	lr,296
800087f6:	72 2b       	ld.w	r11,r9[0x8]
800087f8:	2f 8e       	sub	lr,-8
800087fa:	1c 3b       	cp.w	r11,lr
800087fc:	c0 71       	brne	8000880a <_free_r+0xb6>
800087fe:	97 36       	st.w	r11[0xc],r6
80008800:	97 26       	st.w	r11[0x8],r6
80008802:	8d 2b       	st.w	r6[0x8],r11
80008804:	8d 3b       	st.w	r6[0xc],r11
80008806:	30 1c       	mov	r12,1
80008808:	c0 58       	rjmp	80008812 <_free_r+0xbe>
8000880a:	72 2b       	ld.w	r11,r9[0x8]
8000880c:	72 39       	ld.w	r9,r9[0xc]
8000880e:	93 2b       	st.w	r9[0x8],r11
80008810:	97 39       	st.w	r11[0xc],r9
80008812:	10 99       	mov	r9,r8
80008814:	ec 08 09 08 	st.w	r6[r8],r8
80008818:	a1 a9       	sbr	r9,0x0
8000881a:	8d 19       	st.w	r6[0x4],r9
8000881c:	58 0c       	cp.w	r12,0
8000881e:	c5 a1       	brne	800088d2 <_free_r+0x17e>
80008820:	e0 48 01 ff 	cp.w	r8,511
80008824:	e0 8b 00 13 	brhi	8000884a <_free_r+0xf6>
80008828:	a3 98       	lsr	r8,0x3
8000882a:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000882e:	72 2b       	ld.w	r11,r9[0x8]
80008830:	8d 39       	st.w	r6[0xc],r9
80008832:	8d 2b       	st.w	r6[0x8],r11
80008834:	97 36       	st.w	r11[0xc],r6
80008836:	93 26       	st.w	r9[0x8],r6
80008838:	a3 48       	asr	r8,0x2
8000883a:	74 19       	ld.w	r9,r10[0x4]
8000883c:	30 1b       	mov	r11,1
8000883e:	f6 08 09 48 	lsl	r8,r11,r8
80008842:	f3 e8 10 08 	or	r8,r9,r8
80008846:	95 18       	st.w	r10[0x4],r8
80008848:	c4 58       	rjmp	800088d2 <_free_r+0x17e>
8000884a:	f0 0b 16 09 	lsr	r11,r8,0x9
8000884e:	58 4b       	cp.w	r11,4
80008850:	e0 8b 00 06 	brhi	8000885c <_free_r+0x108>
80008854:	f0 0b 16 06 	lsr	r11,r8,0x6
80008858:	2c 8b       	sub	r11,-56
8000885a:	c2 08       	rjmp	8000889a <_free_r+0x146>
8000885c:	59 4b       	cp.w	r11,20
8000885e:	e0 8b 00 04 	brhi	80008866 <_free_r+0x112>
80008862:	2a 5b       	sub	r11,-91
80008864:	c1 b8       	rjmp	8000889a <_free_r+0x146>
80008866:	e0 4b 00 54 	cp.w	r11,84
8000886a:	e0 8b 00 06 	brhi	80008876 <_free_r+0x122>
8000886e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80008872:	29 2b       	sub	r11,-110
80008874:	c1 38       	rjmp	8000889a <_free_r+0x146>
80008876:	e0 4b 01 54 	cp.w	r11,340
8000887a:	e0 8b 00 06 	brhi	80008886 <_free_r+0x132>
8000887e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80008882:	28 9b       	sub	r11,-119
80008884:	c0 b8       	rjmp	8000889a <_free_r+0x146>
80008886:	e0 4b 05 54 	cp.w	r11,1364
8000888a:	e0 88 00 05 	brls	80008894 <_free_r+0x140>
8000888e:	37 eb       	mov	r11,126
80008890:	c0 58       	rjmp	8000889a <_free_r+0x146>
80008892:	d7 03       	nop
80008894:	f0 0b 16 12 	lsr	r11,r8,0x12
80008898:	28 4b       	sub	r11,-124
8000889a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000889e:	78 29       	ld.w	r9,r12[0x8]
800088a0:	18 39       	cp.w	r9,r12
800088a2:	c0 e1       	brne	800088be <_free_r+0x16a>
800088a4:	74 18       	ld.w	r8,r10[0x4]
800088a6:	a3 4b       	asr	r11,0x2
800088a8:	30 1c       	mov	r12,1
800088aa:	f8 0b 09 4b 	lsl	r11,r12,r11
800088ae:	f1 eb 10 0b 	or	r11,r8,r11
800088b2:	12 98       	mov	r8,r9
800088b4:	95 1b       	st.w	r10[0x4],r11
800088b6:	c0 a8       	rjmp	800088ca <_free_r+0x176>
800088b8:	72 29       	ld.w	r9,r9[0x8]
800088ba:	18 39       	cp.w	r9,r12
800088bc:	c0 60       	breq	800088c8 <_free_r+0x174>
800088be:	72 1a       	ld.w	r10,r9[0x4]
800088c0:	e0 1a ff fc 	andl	r10,0xfffc
800088c4:	14 38       	cp.w	r8,r10
800088c6:	cf 93       	brcs	800088b8 <_free_r+0x164>
800088c8:	72 38       	ld.w	r8,r9[0xc]
800088ca:	8d 38       	st.w	r6[0xc],r8
800088cc:	8d 29       	st.w	r6[0x8],r9
800088ce:	93 36       	st.w	r9[0xc],r6
800088d0:	91 26       	st.w	r8[0x8],r6
800088d2:	0e 9c       	mov	r12,r7
800088d4:	c8 de       	rcall	800085ee <__malloc_unlock>
800088d6:	d8 22       	popm	r4-r7,pc

Disassembly of section .exception:

80008a00 <_evba>:
80008a00:	c0 08       	rjmp	80008a00 <_evba>
	...

80008a04 <_handle_TLB_Multiple_Hit>:
80008a04:	c0 08       	rjmp	80008a04 <_handle_TLB_Multiple_Hit>
	...

80008a08 <_handle_Bus_Error_Data_Fetch>:
80008a08:	c0 08       	rjmp	80008a08 <_handle_Bus_Error_Data_Fetch>
	...

80008a0c <_handle_Bus_Error_Instruction_Fetch>:
80008a0c:	c0 08       	rjmp	80008a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008a10 <_handle_NMI>:
80008a10:	c0 08       	rjmp	80008a10 <_handle_NMI>
	...

80008a14 <_handle_Instruction_Address>:
80008a14:	c0 08       	rjmp	80008a14 <_handle_Instruction_Address>
	...

80008a18 <_handle_ITLB_Protection>:
80008a18:	c0 08       	rjmp	80008a18 <_handle_ITLB_Protection>
	...

80008a1c <_handle_Breakpoint>:
80008a1c:	c0 08       	rjmp	80008a1c <_handle_Breakpoint>
	...

80008a20 <_handle_Illegal_Opcode>:
80008a20:	c0 08       	rjmp	80008a20 <_handle_Illegal_Opcode>
	...

80008a24 <_handle_Unimplemented_Instruction>:
80008a24:	c0 08       	rjmp	80008a24 <_handle_Unimplemented_Instruction>
	...

80008a28 <_handle_Privilege_Violation>:
80008a28:	c0 08       	rjmp	80008a28 <_handle_Privilege_Violation>
	...

80008a2c <_handle_Floating_Point>:
80008a2c:	c0 08       	rjmp	80008a2c <_handle_Floating_Point>
	...

80008a30 <_handle_Coprocessor_Absent>:
80008a30:	c0 08       	rjmp	80008a30 <_handle_Coprocessor_Absent>
	...

80008a34 <_handle_Data_Address_Read>:
80008a34:	c0 08       	rjmp	80008a34 <_handle_Data_Address_Read>
	...

80008a38 <_handle_Data_Address_Write>:
80008a38:	c0 08       	rjmp	80008a38 <_handle_Data_Address_Write>
	...

80008a3c <_handle_DTLB_Protection_Read>:
80008a3c:	c0 08       	rjmp	80008a3c <_handle_DTLB_Protection_Read>
	...

80008a40 <_handle_DTLB_Protection_Write>:
80008a40:	c0 08       	rjmp	80008a40 <_handle_DTLB_Protection_Write>
	...

80008a44 <_handle_DTLB_Modified>:
80008a44:	c0 08       	rjmp	80008a44 <_handle_DTLB_Modified>
	...

80008a50 <_handle_ITLB_Miss>:
80008a50:	c0 08       	rjmp	80008a50 <_handle_ITLB_Miss>
	...

80008a60 <_handle_DTLB_Miss_Read>:
80008a60:	c0 08       	rjmp	80008a60 <_handle_DTLB_Miss_Read>
	...

80008a70 <_handle_DTLB_Miss_Write>:
80008a70:	c0 08       	rjmp	80008a70 <_handle_DTLB_Miss_Write>
	...

80008b00 <_handle_Supervisor_Call>:
80008b00:	c0 08       	rjmp	80008b00 <_handle_Supervisor_Call>
80008b02:	d7 03       	nop

80008b04 <_int0>:
80008b04:	30 0c       	mov	r12,0
80008b06:	fe b0 d2 69 	rcall	80002fd8 <_get_interrupt_handler>
80008b0a:	58 0c       	cp.w	r12,0
80008b0c:	f8 0f 17 10 	movne	pc,r12
80008b10:	d6 03       	rete

80008b12 <_int1>:
80008b12:	30 1c       	mov	r12,1
80008b14:	fe b0 d2 62 	rcall	80002fd8 <_get_interrupt_handler>
80008b18:	58 0c       	cp.w	r12,0
80008b1a:	f8 0f 17 10 	movne	pc,r12
80008b1e:	d6 03       	rete

80008b20 <_int2>:
80008b20:	30 2c       	mov	r12,2
80008b22:	fe b0 d2 5b 	rcall	80002fd8 <_get_interrupt_handler>
80008b26:	58 0c       	cp.w	r12,0
80008b28:	f8 0f 17 10 	movne	pc,r12
80008b2c:	d6 03       	rete

80008b2e <_int3>:
80008b2e:	30 3c       	mov	r12,3
80008b30:	fe b0 d2 54 	rcall	80002fd8 <_get_interrupt_handler>
80008b34:	58 0c       	cp.w	r12,0
80008b36:	f8 0f 17 10 	movne	pc,r12
80008b3a:	d6 03       	rete
80008b3c:	d7 03       	nop
80008b3e:	d7 03       	nop
80008b40:	d7 03       	nop
80008b42:	d7 03       	nop
80008b44:	d7 03       	nop
80008b46:	d7 03       	nop
80008b48:	d7 03       	nop
80008b4a:	d7 03       	nop
80008b4c:	d7 03       	nop
80008b4e:	d7 03       	nop
80008b50:	d7 03       	nop
80008b52:	d7 03       	nop
80008b54:	d7 03       	nop
80008b56:	d7 03       	nop
80008b58:	d7 03       	nop
80008b5a:	d7 03       	nop
80008b5c:	d7 03       	nop
80008b5e:	d7 03       	nop
80008b60:	d7 03       	nop
80008b62:	d7 03       	nop
80008b64:	d7 03       	nop
80008b66:	d7 03       	nop
80008b68:	d7 03       	nop
80008b6a:	d7 03       	nop
80008b6c:	d7 03       	nop
80008b6e:	d7 03       	nop
80008b70:	d7 03       	nop
80008b72:	d7 03       	nop
80008b74:	d7 03       	nop
80008b76:	d7 03       	nop
80008b78:	d7 03       	nop
80008b7a:	d7 03       	nop
80008b7c:	d7 03       	nop
80008b7e:	d7 03       	nop
80008b80:	d7 03       	nop
80008b82:	d7 03       	nop
80008b84:	d7 03       	nop
80008b86:	d7 03       	nop
80008b88:	d7 03       	nop
80008b8a:	d7 03       	nop
80008b8c:	d7 03       	nop
80008b8e:	d7 03       	nop
80008b90:	d7 03       	nop
80008b92:	d7 03       	nop
80008b94:	d7 03       	nop
80008b96:	d7 03       	nop
80008b98:	d7 03       	nop
80008b9a:	d7 03       	nop
80008b9c:	d7 03       	nop
80008b9e:	d7 03       	nop
80008ba0:	d7 03       	nop
80008ba2:	d7 03       	nop
80008ba4:	d7 03       	nop
80008ba6:	d7 03       	nop
80008ba8:	d7 03       	nop
80008baa:	d7 03       	nop
80008bac:	d7 03       	nop
80008bae:	d7 03       	nop
80008bb0:	d7 03       	nop
80008bb2:	d7 03       	nop
80008bb4:	d7 03       	nop
80008bb6:	d7 03       	nop
80008bb8:	d7 03       	nop
80008bba:	d7 03       	nop
80008bbc:	d7 03       	nop
80008bbe:	d7 03       	nop
80008bc0:	d7 03       	nop
80008bc2:	d7 03       	nop
80008bc4:	d7 03       	nop
80008bc6:	d7 03       	nop
80008bc8:	d7 03       	nop
80008bca:	d7 03       	nop
80008bcc:	d7 03       	nop
80008bce:	d7 03       	nop
80008bd0:	d7 03       	nop
80008bd2:	d7 03       	nop
80008bd4:	d7 03       	nop
80008bd6:	d7 03       	nop
80008bd8:	d7 03       	nop
80008bda:	d7 03       	nop
80008bdc:	d7 03       	nop
80008bde:	d7 03       	nop
80008be0:	d7 03       	nop
80008be2:	d7 03       	nop
80008be4:	d7 03       	nop
80008be6:	d7 03       	nop
80008be8:	d7 03       	nop
80008bea:	d7 03       	nop
80008bec:	d7 03       	nop
80008bee:	d7 03       	nop
80008bf0:	d7 03       	nop
80008bf2:	d7 03       	nop
80008bf4:	d7 03       	nop
80008bf6:	d7 03       	nop
80008bf8:	d7 03       	nop
80008bfa:	d7 03       	nop
80008bfc:	d7 03       	nop
80008bfe:	d7 03       	nop
