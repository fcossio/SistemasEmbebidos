
DisplayPractice.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000015d4  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003600  80003600  00003a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000468  80003800  80003800  00003c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000020  00000008  80003c68  00004408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  00000028  00000028  00000000  2**2
                  ALLOC
  8 .heap         0000eed8  00000128  00000128  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000548  00000000  00000000  00004458  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00000c63  00000000  00000000  000049a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000079b3  00000000  00000000  00005603  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013e9  00000000  00000000  0000cfb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004991  00000000  00000000  0000e39f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000c54  00000000  00000000  00012d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001ce8  00000000  00000000  00013984  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00002de2  00000000  00000000  0001566c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 0076ed97  00000000  00000000  0001844e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000760  00000000  00000000  007871e8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d2 88 	sub	pc,pc,-11640

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f2 8c 	sub	pc,pc,-3444

Disassembly of section .text:

80002008 <et024006_SetLimits>:
80002008:	eb cd 40 80 	pushm	r7,lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000200c:	fc 1e c0 00 	movh	lr,0xc000
80002010:	30 28       	mov	r8,2
80002012:	bc 08       	st.h	lr[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002014:	ef dc c1 08 	bfextu	r7,r12,0x8,0x8
80002018:	fc 18 c0 20 	movh	r8,0xc020
8000201c:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000201e:	30 37       	mov	r7,3
80002020:	bc 07       	st.h	lr[0x0],r7
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002022:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002024:	30 4c       	mov	r12,4
80002026:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002028:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000202c:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000202e:	30 5c       	mov	r12,5
80002030:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002032:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002034:	30 6a       	mov	r10,6
80002036:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002038:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
8000203c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000203e:	30 7a       	mov	r10,7
80002040:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002042:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002044:	30 8a       	mov	r10,8
80002046:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002048:	f5 d9 c1 08 	bfextu	r10,r9,0x8,0x8
8000204c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000204e:	30 9a       	mov	r10,9
80002050:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002052:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80002054:	e3 cd 80 80 	ldm	sp++,r7,pc

80002058 <et024006_SetQuickLimits>:

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002058:	fc 19 c0 00 	movh	r9,0xc000
8000205c:	30 28       	mov	r8,2
8000205e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002060:	f5 dc c1 08 	bfextu	r10,r12,0x8,0x8
80002064:	fc 18 c0 20 	movh	r8,0xc020
80002068:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000206a:	30 3a       	mov	r10,3
8000206c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000206e:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002070:	30 6a       	mov	r10,6
80002072:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002074:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
80002078:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000207a:	30 7a       	mov	r10,7
8000207c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000207e:	b0 0b       	st.h	r8[0x0],r11
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
}
80002080:	5e fc       	retal	r12
80002082:	d7 03       	nop

80002084 <et024006_DrawQuickPixel>:
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y & 0xff) );
}


void et024006_DrawQuickPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
80002084:	eb cd 40 80 	pushm	r7,lr
80002088:	14 97       	mov	r7,r10
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetQuickLimits( x, y );
8000208a:	5c 7b       	castu.h	r11
8000208c:	5c 7c       	castu.h	r12
8000208e:	f0 1f 00 06 	mcall	800020a4 <et024006_DrawQuickPixel+0x20>
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002092:	32 29       	mov	r9,34
80002094:	fc 18 c0 00 	movh	r8,0xc000
80002098:	b0 09       	st.h	r8[0x0],r9
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  *ET024006_PARAM_ADDR = color;
8000209a:	fc 18 c0 20 	movh	r8,0xc020
8000209e:	b0 07       	st.h	r8[0x0],r7
#endif

}
800020a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	20 58       	sub	r8,5

800020a8 <et024006_PrintString>:
void et024006_PrintString(char *lcd_string, const unsigned char *font_style,
                          uint16_t x,
                          uint16_t y,
                          uint16_t fcolor,
                          int bcolor)
{
800020a8:	d4 31       	pushm	r0-r7,lr
800020aa:	20 dd       	sub	sp,52
800020ac:	18 97       	mov	r7,r12
800020ae:	50 6b       	stdsp	sp[0x18],r11
800020b0:	50 8a       	stdsp	sp[0x20],r10
800020b2:	50 29       	stdsp	sp[0x8],r9
800020b4:	10 94       	mov	r4,r8
800020b6:	41 63       	lddsp	r3,sp[0x58]
  unsigned char mask = 0, xfont, yfont, font_size;
  const unsigned char *data;
  uint16_t saved_x = x;

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
800020b8:	19 89       	ld.ub	r9,r12[0x0]
800020ba:	30 08       	mov	r8,0
800020bc:	f0 09 18 00 	cp.b	r9,r8
800020c0:	e0 80 01 0c 	breq	800022d8 <et024006_PrintString+0x230>
    return;

  data = font_style;  // point to the start of the font table
  xfont = *data;  // get font x width
800020c4:	16 98       	mov	r8,r11
800020c6:	11 3a       	ld.ub	r10,r8++
800020c8:	50 4a       	stdsp	sp[0x10],r10
  data++;
  yfont = *data;  // get font y length
800020ca:	11 89       	ld.ub	r9,r8[0x0]
800020cc:	50 39       	stdsp	sp[0xc],r9
  data++;
  font_size = *data;  // get data bytes per font
800020ce:	11 98       	ld.ub	r8,r8[0x1]
800020d0:	50 58       	stdsp	sp[0x14],r8

  // If transparent mode
  if(bcolor == -1)
800020d2:	5b f3       	cp.w	r3,-1
800020d4:	e0 81 00 8d 	brne	800021ee <et024006_PrintString+0x146>
  {
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
800020d8:	e0 69 00 ef 	mov	r9,239
800020dc:	e0 6a 01 3f 	mov	r10,319
800020e0:	30 0b       	mov	r11,0
800020e2:	16 9c       	mov	r12,r11
800020e4:	f0 1f 00 7e 	mcall	800022dc <et024006_PrintString+0x234>
        data =  (font_style + font_size) +  // header offset
          (font_size * (int)(*lcd_string - 32)); // character select
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;
800020e8:	40 58       	lddsp	r8,sp[0x14]
800020ea:	50 c8       	stdsp	sp[0x30],r8
800020ec:	f0 08 00 18 	add	r8,r8,r8<<0x1
800020f0:	a5 78       	lsl	r8,0x5
800020f2:	40 69       	lddsp	r9,sp[0x18]
800020f4:	10 09       	add	r9,r8
800020f6:	50 b9       	stdsp	sp[0x2c],r9
800020f8:	ee c8 ff ff 	sub	r8,r7,-1
800020fc:	50 98       	stdsp	sp[0x24],r8
800020fe:	40 8a       	lddsp	r10,sp[0x20]
80002100:	5c 8a       	casts.h	r10
80002102:	50 aa       	stdsp	sp[0x28],r10
      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
        {
          if (*data & mask) // if pixel data then put dot
80002104:	30 03       	mov	r3,0
          {
            et024006_DrawQuickPixel( col, row, fcolor );
80002106:	08 90       	mov	r0,r4
80002108:	5c 70       	castu.h	r0
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );

    do
    {
      if(*lcd_string =='\n') {
8000210a:	40 99       	lddsp	r9,sp[0x24]
8000210c:	f3 38 ff ff 	ld.ub	r8,r9[-1]
80002110:	30 aa       	mov	r10,10
80002112:	f4 08 18 00 	cp.b	r8,r10
80002116:	c0 b1       	brne	8000212c <et024006_PrintString+0x84>
        x = saved_x;
        y += yfont;
80002118:	40 28       	lddsp	r8,sp[0x8]
8000211a:	40 39       	lddsp	r9,sp[0xc]
8000211c:	12 08       	add	r8,r9
8000211e:	5c 88       	casts.h	r8
80002120:	50 28       	stdsp	sp[0x8],r8
80002122:	40 98       	lddsp	r8,sp[0x24]
80002124:	40 8a       	lddsp	r10,sp[0x20]
80002126:	5c 8a       	casts.h	r10
80002128:	50 aa       	stdsp	sp[0x28],r10
        lcd_string++;  // next character in string
        continue;
8000212a:	c5 a8       	rjmp	800021de <et024006_PrintString+0x136>
      } else if(*lcd_string =='\t') {
8000212c:	30 99       	mov	r9,9
8000212e:	f2 08 18 00 	cp.b	r8,r9
80002132:	c0 81       	brne	80002142 <et024006_PrintString+0x9a>
        x += xfont;
80002134:	40 a8       	lddsp	r8,sp[0x28]
80002136:	40 49       	lddsp	r9,sp[0x10]
80002138:	12 08       	add	r8,r9
8000213a:	5c 88       	casts.h	r8
8000213c:	50 a8       	stdsp	sp[0x28],r8
8000213e:	40 98       	lddsp	r8,sp[0x24]
        lcd_string++;  // next character in string
        continue;
80002140:	c4 f8       	rjmp	800021de <et024006_PrintString+0x136>
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
80002142:	f0 ca 00 20 	sub	r10,r8,32
80002146:	35 f9       	mov	r9,95
80002148:	f2 0a 18 00 	cp.b	r10,r9
8000214c:	e0 88 00 04 	brls	80002154 <et024006_PrintString+0xac>
80002150:	40 b5       	lddsp	r5,sp[0x2c]
80002152:	c0 a8       	rjmp	80002166 <et024006_PrintString+0xbe>
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
80002154:	22 08       	sub	r8,32
80002156:	40 ca       	lddsp	r10,sp[0x30]
80002158:	f0 0a 02 45 	mul	r5,r8,r10
8000215c:	40 59       	lddsp	r9,sp[0x14]
8000215e:	12 05       	add	r5,r9
80002160:	40 68       	lddsp	r8,sp[0x18]
80002162:	f0 05 00 05 	add	r5,r8,r5
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
80002166:	40 22       	lddsp	r2,sp[0x8]
80002168:	5c 72       	castu.h	r2
8000216a:	40 3a       	lddsp	r10,sp[0xc]
8000216c:	e4 0a 00 0a 	add	r10,r2,r10
80002170:	50 1a       	stdsp	sp[0x4],r10
80002172:	04 3a       	cp.w	r10,r2
80002174:	e0 8a 00 2f 	brle	800021d2 <et024006_PrintString+0x12a>
80002178:	40 21       	lddsp	r1,sp[0x8]
8000217a:	5c 81       	casts.h	r1
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
8000217c:	40 a9       	lddsp	r9,sp[0x28]
8000217e:	5c 79       	castu.h	r9
80002180:	50 09       	stdsp	sp[0x0],r9
80002182:	12 94       	mov	r4,r9
80002184:	40 48       	lddsp	r8,sp[0x10]
80002186:	10 04       	add	r4,r8
80002188:	40 aa       	lddsp	r10,sp[0x28]
8000218a:	5c 8a       	casts.h	r10
8000218c:	50 7a       	stdsp	sp[0x1c],r10
8000218e:	c1 b8       	rjmp	800021c4 <et024006_PrintString+0x11c>
        {
          if (*data & mask) // if pixel data then put dot
          {
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
80002190:	a1 96       	lsr	r6,0x1
      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
        {
          if (*data & mask) // if pixel data then put dot
80002192:	0b 88       	ld.ub	r8,r5[0x0]
80002194:	ed e8 00 08 	and	r8,r6,r8
80002198:	e6 08 18 00 	cp.b	r8,r3
8000219c:	c0 50       	breq	800021a6 <et024006_PrintString+0xfe>
          {
            et024006_DrawQuickPixel( col, row, fcolor );
8000219e:	00 9a       	mov	r10,r0
800021a0:	04 9b       	mov	r11,r2
800021a2:	f0 1f 00 50 	mcall	800022e0 <et024006_PrintString+0x238>
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
800021a6:	2f f7       	sub	r7,-1
800021a8:	5c 87       	casts.h	r7
800021aa:	0e 9c       	mov	r12,r7
800021ac:	5c 7c       	castu.h	r12
800021ae:	08 3c       	cp.w	r12,r4
800021b0:	cf 05       	brlt	80002190 <et024006_PrintString+0xe8>
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
800021b2:	2f f1       	sub	r1,-1
800021b4:	5c 81       	casts.h	r1
800021b6:	e5 d1 c0 10 	bfextu	r2,r1,0x0,0x10
800021ba:	40 19       	lddsp	r9,sp[0x4]
800021bc:	04 39       	cp.w	r9,r2
800021be:	e0 8a 00 0a 	brle	800021d2 <et024006_PrintString+0x12a>
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
        }
        // Next row data
        data++;
800021c2:	2f f5       	sub	r5,-1
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
800021c4:	40 0c       	lddsp	r12,sp[0x0]
800021c6:	08 3c       	cp.w	r12,r4
800021c8:	cf 54       	brge	800021b2 <et024006_PrintString+0x10a>
800021ca:	40 77       	lddsp	r7,sp[0x1c]
800021cc:	e0 66 00 80 	mov	r6,128
800021d0:	ce 1b       	rjmp	80002192 <et024006_PrintString+0xea>
        }
        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
800021d2:	40 a8       	lddsp	r8,sp[0x28]
800021d4:	40 4a       	lddsp	r10,sp[0x10]
800021d6:	14 08       	add	r8,r10
800021d8:	5c 88       	casts.h	r8
800021da:	50 a8       	stdsp	sp[0x28],r8
800021dc:	40 98       	lddsp	r8,sp[0x24]
800021de:	40 99       	lddsp	r9,sp[0x24]
800021e0:	2f f9       	sub	r9,-1
800021e2:	50 99       	stdsp	sp[0x24],r9
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800021e4:	11 88       	ld.ub	r8,r8[0x0]
800021e6:	e6 08 18 00 	cp.b	r8,r3
800021ea:	c9 01       	brne	8000210a <et024006_PrintString+0x62>
800021ec:	c7 68       	rjmp	800022d8 <et024006_PrintString+0x230>
800021ee:	f8 c8 ff ff 	sub	r8,r12,-1
800021f2:	50 08       	stdsp	sp[0x0],r8
800021f4:	40 8c       	lddsp	r12,sp[0x20]
800021f6:	5c 8c       	casts.h	r12
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
800021f8:	30 06       	mov	r6,0
          {
            *ET024006_PARAM_ADDR = fcolor;
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
800021fa:	5c 83       	casts.h	r3
800021fc:	fc 15 c0 20 	movh	r5,0xc020
  }
  else
  {
    do
    {
      if(*lcd_string =='\n') {
80002200:	40 0a       	lddsp	r10,sp[0x0]
80002202:	f5 31 ff ff 	ld.ub	r1,r10[-1]
80002206:	30 a8       	mov	r8,10
80002208:	f0 01 18 00 	cp.b	r1,r8
8000220c:	c0 b1       	brne	80002222 <et024006_PrintString+0x17a>
        x = saved_x;
        y += yfont;
8000220e:	40 28       	lddsp	r8,sp[0x8]
80002210:	40 39       	lddsp	r9,sp[0xc]
80002212:	12 08       	add	r8,r9
80002214:	5c 88       	casts.h	r8
80002216:	50 28       	stdsp	sp[0x8],r8
80002218:	14 98       	mov	r8,r10
8000221a:	40 8a       	lddsp	r10,sp[0x20]
8000221c:	5c 8a       	casts.h	r10
8000221e:	50 1a       	stdsp	sp[0x4],r10
        lcd_string++;  // next character in string
        continue;
80002220:	c5 28       	rjmp	800022c4 <et024006_PrintString+0x21c>
      } else if(*lcd_string =='\t') {
80002222:	30 98       	mov	r8,9
80002224:	f0 01 18 00 	cp.b	r1,r8
80002228:	c0 71       	brne	80002236 <et024006_PrintString+0x18e>
        x += xfont;
8000222a:	40 49       	lddsp	r9,sp[0x10]
8000222c:	12 0c       	add	r12,r9
8000222e:	5c 8c       	casts.h	r12
80002230:	50 1c       	stdsp	sp[0x4],r12
80002232:	40 08       	lddsp	r8,sp[0x0]
        lcd_string++;  // next character in string
        continue;
80002234:	c4 88       	rjmp	800022c4 <et024006_PrintString+0x21c>
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
        (font_size * (int)(*lcd_string - 32)); // character select

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
80002236:	40 32       	lddsp	r2,sp[0xc]
80002238:	40 47       	lddsp	r7,sp[0x10]
8000223a:	f8 07 00 08 	add	r8,r12,r7
8000223e:	5c 88       	casts.h	r8
80002240:	50 18       	stdsp	sp[0x4],r8
80002242:	04 99       	mov	r9,r2
80002244:	20 19       	sub	r9,1
80002246:	40 28       	lddsp	r8,sp[0x8]
80002248:	10 09       	add	r9,r8
8000224a:	40 1a       	lddsp	r10,sp[0x4]
8000224c:	20 1a       	sub	r10,1
8000224e:	5c 79       	castu.h	r9
80002250:	5c 7a       	castu.h	r10
80002252:	10 9b       	mov	r11,r8
80002254:	5c 7b       	castu.h	r11
80002256:	5c 7c       	castu.h	r12
80002258:	f0 1f 00 21 	mcall	800022dc <et024006_PrintString+0x234>
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000225c:	32 29       	mov	r9,34
8000225e:	fc 18 c0 00 	movh	r8,0xc000
80002262:	b0 09       	st.h	r8[0x0],r9

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
80002264:	40 3a       	lddsp	r10,sp[0xc]
80002266:	58 0a       	cp.w	r10,0
80002268:	c2 d0       	breq	800022c2 <et024006_PrintString+0x21a>
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
8000226a:	e2 ce 00 20 	sub	lr,r1,32
8000226e:	40 59       	lddsp	r9,sp[0x14]
80002270:	f2 0e 02 4e 	mul	lr,r9,lr
80002274:	12 0e       	add	lr,r9
80002276:	40 68       	lddsp	r8,sp[0x18]
80002278:	f0 0e 00 0e 	add	lr,r8,lr
8000227c:	30 0c       	mov	r12,0
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
8000227e:	e0 60 00 80 	mov	r0,128
80002282:	18 91       	mov	r1,r12
80002284:	c1 98       	rjmp	800022b6 <et024006_PrintString+0x20e>
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
          }
          mask >>= 1;
80002286:	a1 99       	lsr	r9,0x1
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
80002288:	f3 eb 00 0a 	and	r10,r9,r11
          {
            *ET024006_PARAM_ADDR = fcolor;
8000228c:	ec 0a 18 00 	cp.b	r10,r6
80002290:	e8 0a 17 10 	movne	r10,r4
80002294:	eb fa 1c 00 	st.hne	r5[0x0],r10
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
80002298:	eb f3 0c 00 	st.heq	r5[0x0],r3
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
8000229c:	2f f8       	sub	r8,-1
8000229e:	5c 88       	casts.h	r8
800022a0:	f0 07 19 00 	cp.h	r7,r8
800022a4:	fe 9b ff f1 	brhi	80002286 <et024006_PrintString+0x1de>

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
800022a8:	2f fc       	sub	r12,-1
800022aa:	5c 8c       	casts.h	r12
800022ac:	f8 02 19 00 	cp.h	r2,r12
800022b0:	e0 88 00 09 	brls	800022c2 <et024006_PrintString+0x21a>
          }
          mask >>= 1;
        }

        // Next row data
        data++;
800022b4:	2f fe       	sub	lr,-1
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
800022b6:	58 07       	cp.w	r7,0
800022b8:	cf 80       	breq	800022a8 <et024006_PrintString+0x200>
        {
          if (*data & mask) // if pixel data then put dot
800022ba:	1d 8b       	ld.ub	r11,lr[0x0]
800022bc:	00 99       	mov	r9,r0
800022be:	02 98       	mov	r8,r1
800022c0:	ce 4b       	rjmp	80002288 <et024006_PrintString+0x1e0>
800022c2:	40 08       	lddsp	r8,sp[0x0]
800022c4:	40 09       	lddsp	r9,sp[0x0]
800022c6:	2f f9       	sub	r9,-1
800022c8:	50 09       	stdsp	sp[0x0],r9
      }
      // move to next character start pixel
      x += xfont;
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800022ca:	11 88       	ld.ub	r8,r8[0x0]
800022cc:	ec 08 18 00 	cp.b	r8,r6
800022d0:	c0 40       	breq	800022d8 <et024006_PrintString+0x230>
800022d2:	40 1c       	lddsp	r12,sp[0x4]
800022d4:	5c 8c       	casts.h	r12
800022d6:	c9 5b       	rjmp	80002200 <et024006_PrintString+0x158>
  }
}
800022d8:	2f 3d       	sub	sp,-52
800022da:	d8 32       	popm	r0-r7,pc
800022dc:	80 00       	ld.sh	r0,r0[0x0]
800022de:	20 08       	sub	r8,0
800022e0:	80 00       	ld.sh	r0,r0[0x0]
800022e2:	20 84       	sub	r4,8

800022e4 <et024006_DrawLine>:
  et024006_DrawFilledRect( x, y, 1, length, color );
}


void et024006_DrawLine( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, et024006_color_t color )
{
800022e4:	d4 31       	pushm	r0-r7,lr
800022e6:	20 3d       	sub	sp,12
800022e8:	18 95       	mov	r5,r12
800022ea:	16 94       	mov	r4,r11
800022ec:	14 93       	mov	r3,r10
800022ee:	12 92       	mov	r2,r9
800022f0:	10 91       	mov	r1,r8
  et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
800022f2:	e0 69 00 ef 	mov	r9,239
800022f6:	e0 6a 01 3f 	mov	r10,319
800022fa:	30 0b       	mov	r11,0
800022fc:	16 9c       	mov	r12,r11
800022fe:	f0 1f 00 3e 	mcall	800023f4 <et024006_DrawLine+0x110>
  Assert( y2 < ET024006_HEIGHT );

  // Compute deltas, ie. "width" and "height" of line, then
  // compute x and y direction, and make deltas positive for later use.
  int16_t xinc = 1; // Start off assuming direction is positive, ie. right.
  int16_t dx = x2 - x1;
80002302:	0a 13       	sub	r3,r5
80002304:	5c 83       	casts.h	r3
  if (dx < 0){
80002306:	30 08       	mov	r8,0
80002308:	f0 03 19 00 	cp.h	r3,r8
8000230c:	c0 35       	brlt	80002312 <et024006_DrawLine+0x2e>
8000230e:	30 10       	mov	r0,1
80002310:	c0 48       	rjmp	80002318 <et024006_DrawLine+0x34>
    xinc = -1;
    dx = -dx;
80002312:	5c 33       	neg	r3
80002314:	5c 83       	casts.h	r3
80002316:	3f f0       	mov	r0,-1
  }
  int16_t yinc = 1; // Start off assuming direction is positive, ie. down.
  int16_t dy = y2 - y1;
80002318:	08 12       	sub	r2,r4
8000231a:	5c 82       	casts.h	r2
  if (dy < 0){
8000231c:	30 08       	mov	r8,0
8000231e:	f0 02 19 00 	cp.h	r2,r8
80002322:	c0 45       	brlt	8000232a <et024006_DrawLine+0x46>
80002324:	30 18       	mov	r8,1
80002326:	50 18       	stdsp	sp[0x4],r8
80002328:	c0 58       	rjmp	80002332 <et024006_DrawLine+0x4e>
    yinc = -1;
    dy = -dy;
8000232a:	5c 32       	neg	r2
8000232c:	5c 82       	casts.h	r2
8000232e:	3f f9       	mov	r9,-1
80002330:	50 19       	stdsp	sp[0x4],r9
  // Set up current point.
  uint16_t x = x1;
  uint16_t y = y1;
  uint16_t i;
  // A "flat" line (dx>dy) is handled differently from a "steep" line (dx<dy).
  if (dx > dy) {
80002332:	e4 03 19 00 	cp.h	r3,r2
80002336:	e0 8a 00 2e 	brle	80002392 <et024006_DrawLine+0xae>
    // Walk along X, draw pixel, and step Y when required.
    int16_t e = dx >> 1;
    for ( i = 0; i <= dx; ++i) {
8000233a:	50 03       	stdsp	sp[0x0],r3
8000233c:	58 03       	cp.w	r3,0
8000233e:	c5 85       	brlt	800023ee <et024006_DrawLine+0x10a>
  uint16_t y = y1;
  uint16_t i;
  // A "flat" line (dx>dy) is handled differently from a "steep" line (dx<dy).
  if (dx > dy) {
    // Walk along X, draw pixel, and step Y when required.
    int16_t e = dx >> 1;
80002340:	e6 07 14 01 	asr	r7,r3,0x1
80002344:	5c 84       	casts.h	r4
80002346:	5c 85       	casts.h	r5
80002348:	30 06       	mov	r6,0
    for ( i = 0; i <= dx; ++i) {
      et024006_DrawQuickPixel(x,y,color);
8000234a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
      // Sub-pixel "error" overflowed, so we step Y and reset the "error".
      if (e <= 0){
8000234e:	30 01       	mov	r1,0
80002350:	50 23       	stdsp	sp[0x8],r3
80002352:	1c 93       	mov	r3,lr
  // A "flat" line (dx>dy) is handled differently from a "steep" line (dx<dy).
  if (dx > dy) {
    // Walk along X, draw pixel, and step Y when required.
    int16_t e = dx >> 1;
    for ( i = 0; i <= dx; ++i) {
      et024006_DrawQuickPixel(x,y,color);
80002354:	06 9a       	mov	r10,r3
80002356:	08 9b       	mov	r11,r4
80002358:	5c 7b       	castu.h	r11
8000235a:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
8000235e:	f0 1f 00 27 	mcall	800023f8 <et024006_DrawLine+0x114>
      // Sub-pixel "error" overflowed, so we step Y and reset the "error".
      if (e <= 0){
80002362:	e2 07 19 00 	cp.h	r7,r1
80002366:	e0 89 00 08 	brgt	80002376 <et024006_DrawLine+0x92>
        e += dx;
8000236a:	40 29       	lddsp	r9,sp[0x8]
8000236c:	12 07       	add	r7,r9
8000236e:	5c 87       	casts.h	r7
        y += yinc;
80002370:	40 18       	lddsp	r8,sp[0x4]
80002372:	10 04       	add	r4,r8
80002374:	5c 84       	casts.h	r4
  uint16_t i;
  // A "flat" line (dx>dy) is handled differently from a "steep" line (dx<dy).
  if (dx > dy) {
    // Walk along X, draw pixel, and step Y when required.
    int16_t e = dx >> 1;
    for ( i = 0; i <= dx; ++i) {
80002376:	2f f6       	sub	r6,-1
80002378:	5c 86       	casts.h	r6
8000237a:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
8000237e:	40 09       	lddsp	r9,sp[0x0]
80002380:	12 38       	cp.w	r8,r9
80002382:	e0 89 00 36 	brgt	800023ee <et024006_DrawLine+0x10a>
      if (e <= 0){
        e += dx;
        y += yinc;
      }
      // Walk one step along X.
      e -= dy;
80002386:	04 17       	sub	r7,r2
80002388:	5c 87       	casts.h	r7
8000238a:	e0 05 00 05 	add	r5,r0,r5
8000238e:	5c 85       	casts.h	r5
80002390:	ce 2b       	rjmp	80002354 <et024006_DrawLine+0x70>
      x += xinc;
    }
  } else {
    // Walk along Y, draw pixel, and step X when required.
    int16_t e = dy >> 1;
    for (i = 0; i <= dy; ++i) {
80002392:	50 02       	stdsp	sp[0x0],r2
80002394:	58 02       	cp.w	r2,0
80002396:	c2 c5       	brlt	800023ee <et024006_DrawLine+0x10a>
      e -= dy;
      x += xinc;
    }
  } else {
    // Walk along Y, draw pixel, and step X when required.
    int16_t e = dy >> 1;
80002398:	e4 07 14 01 	asr	r7,r2,0x1
8000239c:	5c 84       	casts.h	r4
8000239e:	5c 85       	casts.h	r5
800023a0:	30 06       	mov	r6,0
    for (i = 0; i <= dy; ++i) {
      et024006_DrawQuickPixel(x,y,color);
800023a2:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
      // Sub-pixel "error" overflowed, so we step X and reset the "error".
      if (e <= 0){
800023a6:	30 01       	mov	r1,0
800023a8:	50 22       	stdsp	sp[0x8],r2
800023aa:	40 12       	lddsp	r2,sp[0x4]
800023ac:	50 10       	stdsp	sp[0x4],r0
800023ae:	1c 90       	mov	r0,lr
    }
  } else {
    // Walk along Y, draw pixel, and step X when required.
    int16_t e = dy >> 1;
    for (i = 0; i <= dy; ++i) {
      et024006_DrawQuickPixel(x,y,color);
800023b0:	00 9a       	mov	r10,r0
800023b2:	08 9b       	mov	r11,r4
800023b4:	5c 7b       	castu.h	r11
800023b6:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
800023ba:	f0 1f 00 10 	mcall	800023f8 <et024006_DrawLine+0x114>
      // Sub-pixel "error" overflowed, so we step X and reset the "error".
      if (e <= 0){
800023be:	e2 07 19 00 	cp.h	r7,r1
800023c2:	e0 89 00 08 	brgt	800023d2 <et024006_DrawLine+0xee>
        e += dy;
800023c6:	40 29       	lddsp	r9,sp[0x8]
800023c8:	12 07       	add	r7,r9
800023ca:	5c 87       	casts.h	r7
        x += xinc;
800023cc:	40 18       	lddsp	r8,sp[0x4]
800023ce:	10 05       	add	r5,r8
800023d0:	5c 85       	casts.h	r5
      x += xinc;
    }
  } else {
    // Walk along Y, draw pixel, and step X when required.
    int16_t e = dy >> 1;
    for (i = 0; i <= dy; ++i) {
800023d2:	2f f6       	sub	r6,-1
800023d4:	5c 86       	casts.h	r6
800023d6:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
800023da:	40 09       	lddsp	r9,sp[0x0]
800023dc:	12 38       	cp.w	r8,r9
800023de:	e0 89 00 08 	brgt	800023ee <et024006_DrawLine+0x10a>
      if (e <= 0){
        e += dy;
        x += xinc;
      }
      // Walk one step along Y.
      e -= dx;
800023e2:	06 17       	sub	r7,r3
800023e4:	5c 87       	casts.h	r7
800023e6:	e4 04 00 04 	add	r4,r2,r4
800023ea:	5c 84       	casts.h	r4
800023ec:	ce 2b       	rjmp	800023b0 <et024006_DrawLine+0xcc>
      y += yinc;
    }
  }
}
800023ee:	2f dd       	sub	sp,-12
800023f0:	d8 32       	popm	r0-r7,pc
800023f2:	00 00       	add	r0,r0
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	20 08       	sub	r8,0
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	20 84       	sub	r4,8

800023fc <et024006_DuplicatePixel>:
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023fc:	32 29       	mov	r9,34
800023fe:	fc 18 c0 00 	movh	r8,0xc000
80002402:	b0 09       	st.h	r8[0x0],r9
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80002404:	58 7b       	cp.w	r11,7
80002406:	e0 88 00 13 	brls	8000242c <et024006_DuplicatePixel+0x30>
8000240a:	16 99       	mov	r9,r11
    *ET024006_PARAM_ADDR = color;
8000240c:	fc 18 c0 20 	movh	r8,0xc020
80002410:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002412:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002414:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002416:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002418:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
8000241a:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
8000241c:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
8000241e:	b0 0c       	st.h	r8[0x0],r12
    count-=8;
80002420:	20 89       	sub	r9,8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80002422:	58 79       	cp.w	r9,7
80002424:	fe 9b ff f6 	brhi	80002410 <et024006_DuplicatePixel+0x14>



/* --- Pixel block operations --- */

void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
80002428:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
8000242c:	58 0b       	cp.w	r11,0
8000242e:	5e 0c       	reteq	r12
    *ET024006_PARAM_ADDR = color;
80002430:	fc 18 c0 20 	movh	r8,0xc020
80002434:	b0 0c       	st.h	r8[0x0],r12
    --count;
80002436:	20 1b       	sub	r11,1
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80002438:	cf e1       	brne	80002434 <et024006_DuplicatePixel+0x38>
8000243a:	5e fc       	retal	r12

8000243c <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
8000243c:	eb cd 40 e0 	pushm	r5-r7,lr
80002440:	14 97       	mov	r7,r10
80002442:	12 96       	mov	r6,r9
80002444:	10 95       	mov	r5,r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
80002446:	f6 c9 00 01 	sub	r9,r11,1
8000244a:	0c 09       	add	r9,r6
8000244c:	f8 ca 00 01 	sub	r10,r12,1
80002450:	0e 0a       	add	r10,r7
80002452:	5c 79       	castu.h	r9
80002454:	5c 7a       	castu.h	r10
80002456:	5c 7b       	castu.h	r11
80002458:	5c 7c       	castu.h	r12
8000245a:	f0 1f 00 07 	mcall	80002474 <et024006_DrawFilledRect+0x38>
  uint32_t count = (uint32_t) width * height;
  et024006_DuplicatePixel( color, count );
8000245e:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
80002462:	5c 77       	castu.h	r7
80002464:	af 3b       	mul	r11,r7
80002466:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
8000246a:	f0 1f 00 04 	mcall	80002478 <et024006_DrawFilledRect+0x3c>
}
8000246e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002472:	00 00       	add	r0,r0
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	20 08       	sub	r8,0
80002478:	80 00       	ld.sh	r0,r0[0x0]
8000247a:	23 fc       	sub	r12,63

8000247c <et024006_DrawVertLine>:
  et024006_DrawFilledRect( x, y, length, 1, color );
}


void et024006_DrawVertLine( uint16_t x, uint16_t y, uint16_t length, et024006_color_t color )
{
8000247c:	d4 01       	pushm	lr
  et024006_DrawFilledRect( x, y, 1, length, color );
8000247e:	f1 d9 c0 10 	bfextu	r8,r9,0x0,0x10
80002482:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002486:	30 1a       	mov	r10,1
80002488:	5c 7b       	castu.h	r11
8000248a:	5c 7c       	castu.h	r12
8000248c:	f0 1f 00 02 	mcall	80002494 <et024006_DrawVertLine+0x18>
}
80002490:	d8 02       	popm	pc
80002492:	00 00       	add	r0,r0
80002494:	80 00       	ld.sh	r0,r0[0x0]
80002496:	24 3c       	sub	r12,67

80002498 <et024006_DrawHorizLine>:
  return color;
}


void et024006_DrawHorizLine( uint16_t x, uint16_t y, uint16_t length, et024006_color_t color )
{
80002498:	d4 01       	pushm	lr
  et024006_DrawFilledRect( x, y, length, 1, color );
8000249a:	f1 d9 c0 10 	bfextu	r8,r9,0x0,0x10
8000249e:	30 19       	mov	r9,1
800024a0:	5c 7a       	castu.h	r10
800024a2:	5c 7b       	castu.h	r11
800024a4:	5c 7c       	castu.h	r12
800024a6:	f0 1f 00 02 	mcall	800024ac <et024006_DrawHorizLine+0x14>
}
800024aa:	d8 02       	popm	pc
800024ac:	80 00       	ld.sh	r0,r0[0x0]
800024ae:	24 3c       	sub	r12,67

800024b0 <et024006_AdjustGamma>:

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024b0:	fc 19 c0 00 	movh	r9,0xc000
800024b4:	34 6a       	mov	r10,70
800024b6:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024b8:	fc 18 c0 20 	movh	r8,0xc020
800024bc:	e0 6b 00 94 	mov	r11,148
800024c0:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024c2:	34 7b       	mov	r11,71
800024c4:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024c6:	34 1b       	mov	r11,65
800024c8:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024ca:	34 8b       	mov	r11,72
800024cc:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024ce:	30 0b       	mov	r11,0
800024d0:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024d2:	34 9b       	mov	r11,73
800024d4:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024d6:	33 3b       	mov	r11,51
800024d8:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024da:	34 ab       	mov	r11,74
800024dc:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024de:	32 5b       	mov	r11,37
800024e0:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024e2:	34 bb       	mov	r11,75
800024e4:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024e6:	34 5b       	mov	r11,69
800024e8:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024ea:	34 cb       	mov	r11,76
800024ec:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024ee:	34 4b       	mov	r11,68
800024f0:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024f2:	34 db       	mov	r11,77
800024f4:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024f6:	37 7b       	mov	r11,119
800024f8:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024fa:	34 eb       	mov	r11,78
800024fc:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024fe:	31 2b       	mov	r11,18
80002500:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002502:	34 fb       	mov	r11,79
80002504:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002506:	e0 6b 00 cc 	mov	r11,204
8000250a:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000250c:	35 0b       	mov	r11,80
8000250e:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002510:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002512:	35 1a       	mov	r10,81
80002514:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002516:	e0 69 00 82 	mov	r9,130
8000251a:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
8000251c:	5e fc       	retal	r12
8000251e:	d7 03       	nop

80002520 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
80002520:	eb cd 40 c0 	pushm	r6-r7,lr
  tft_data.cpu_hz = cpu_hz;
80002524:	fe f7 04 80 	ld.w	r7,pc[1152]
80002528:	8f 0c       	st.w	r7[0x0],r12
  tft_data.hsb_hz = hsb_hz;
8000252a:	8f 1b       	st.w	r7[0x4],r11

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
8000252c:	16 9c       	mov	r12,r11
8000252e:	f0 1f 01 1f 	mcall	800029a8 <et024006_Init+0x488>
static void et024006_SetupInterface( void )
{

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
80002532:	35 5c       	mov	r12,85
80002534:	f0 1f 01 1e 	mcall	800029ac <et024006_Init+0x48c>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
80002538:	30 2b       	mov	r11,2
8000253a:	33 2c       	mov	r12,50
8000253c:	f0 1f 01 1d 	mcall	800029b0 <et024006_Init+0x490>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80002540:	35 2c       	mov	r12,82
80002542:	f0 1f 01 1d 	mcall	800029b4 <et024006_Init+0x494>
/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
80002546:	35 2c       	mov	r12,82
80002548:	f0 1f 01 1c 	mcall	800029b8 <et024006_Init+0x498>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000254c:	6e 07       	ld.w	r7,r7[0x0]
8000254e:	33 28       	mov	r8,50
80002550:	ee 08 06 46 	mulu.d	r6,r7,r8
80002554:	ee 78 42 40 	mov	r8,1000000
80002558:	30 09       	mov	r9,0
8000255a:	ee 7a 42 3f 	mov	r10,999999
8000255e:	30 0b       	mov	r11,0
80002560:	ec 0a 00 0a 	add	r10,r6,r10
80002564:	ee 0b 00 4b 	adc	r11,r7,r11
80002568:	f0 1f 01 15 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000256c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002570:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002574:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002578:	14 38       	cp.w	r8,r10
8000257a:	e0 88 00 09 	brls	8000258c <et024006_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000257e:	12 38       	cp.w	r8,r9
80002580:	fe 98 ff fa 	brls	80002574 <et024006_Init+0x54>
80002584:	12 3a       	cp.w	r10,r9
80002586:	e0 83 00 a2 	brlo	800026ca <et024006_Init+0x1aa>
8000258a:	cf 5b       	rjmp	80002574 <et024006_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000258c:	12 38       	cp.w	r8,r9
8000258e:	e0 8b 00 9e 	brhi	800026ca <et024006_Init+0x1aa>
80002592:	12 3a       	cp.w	r10,r9
80002594:	e0 83 00 9b 	brlo	800026ca <et024006_Init+0x1aa>
80002598:	ce eb       	rjmp	80002574 <et024006_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000259a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000259e:	14 38       	cp.w	r8,r10
800025a0:	e0 88 00 09 	brls	800025b2 <et024006_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025a4:	12 38       	cp.w	r8,r9
800025a6:	fe 98 ff fa 	brls	8000259a <et024006_Init+0x7a>
800025aa:	12 3a       	cp.w	r10,r9
800025ac:	e0 83 00 a9 	brlo	800026fe <et024006_Init+0x1de>
800025b0:	cf 5b       	rjmp	8000259a <et024006_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025b2:	12 38       	cp.w	r8,r9
800025b4:	e0 8b 00 a5 	brhi	800026fe <et024006_Init+0x1de>
800025b8:	12 3a       	cp.w	r10,r9
800025ba:	e0 83 00 a2 	brlo	800026fe <et024006_Init+0x1de>
800025be:	ce eb       	rjmp	8000259a <et024006_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025c0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025c4:	14 38       	cp.w	r8,r10
800025c6:	e0 88 00 09 	brls	800025d8 <et024006_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025ca:	12 38       	cp.w	r8,r9
800025cc:	fe 98 ff fa 	brls	800025c0 <et024006_Init+0xa0>
800025d0:	12 3a       	cp.w	r10,r9
800025d2:	e0 83 01 1e 	brlo	8000280e <et024006_Init+0x2ee>
800025d6:	cf 5b       	rjmp	800025c0 <et024006_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025d8:	12 38       	cp.w	r8,r9
800025da:	e0 8b 01 1a 	brhi	8000280e <et024006_Init+0x2ee>
800025de:	12 3a       	cp.w	r10,r9
800025e0:	e0 83 01 17 	brlo	8000280e <et024006_Init+0x2ee>
800025e4:	ce eb       	rjmp	800025c0 <et024006_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025e6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025ea:	14 38       	cp.w	r8,r10
800025ec:	e0 88 00 09 	brls	800025fe <et024006_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025f0:	12 38       	cp.w	r8,r9
800025f2:	fe 98 ff fa 	brls	800025e6 <et024006_Init+0xc6>
800025f6:	12 3a       	cp.w	r10,r9
800025f8:	e0 83 01 29 	brlo	8000284a <et024006_Init+0x32a>
800025fc:	cf 5b       	rjmp	800025e6 <et024006_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025fe:	12 38       	cp.w	r8,r9
80002600:	e0 8b 01 25 	brhi	8000284a <et024006_Init+0x32a>
80002604:	12 3a       	cp.w	r10,r9
80002606:	e0 83 01 22 	brlo	8000284a <et024006_Init+0x32a>
8000260a:	ce eb       	rjmp	800025e6 <et024006_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000260c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002610:	14 38       	cp.w	r8,r10
80002612:	e0 88 00 09 	brls	80002624 <et024006_Init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002616:	12 38       	cp.w	r8,r9
80002618:	fe 98 ff fa 	brls	8000260c <et024006_Init+0xec>
8000261c:	12 3a       	cp.w	r10,r9
8000261e:	e0 83 01 35 	brlo	80002888 <et024006_Init+0x368>
80002622:	cf 5b       	rjmp	8000260c <et024006_Init+0xec>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002624:	12 38       	cp.w	r8,r9
80002626:	e0 8b 01 31 	brhi	80002888 <et024006_Init+0x368>
8000262a:	12 3a       	cp.w	r10,r9
8000262c:	e0 83 01 2e 	brlo	80002888 <et024006_Init+0x368>
80002630:	ce eb       	rjmp	8000260c <et024006_Init+0xec>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002632:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002636:	14 38       	cp.w	r8,r10
80002638:	e0 88 00 09 	brls	8000264a <et024006_Init+0x12a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000263c:	12 38       	cp.w	r8,r9
8000263e:	fe 98 ff fa 	brls	80002632 <et024006_Init+0x112>
80002642:	12 3a       	cp.w	r10,r9
80002644:	e0 83 01 40 	brlo	800028c4 <et024006_Init+0x3a4>
80002648:	cf 5b       	rjmp	80002632 <et024006_Init+0x112>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000264a:	12 38       	cp.w	r8,r9
8000264c:	e0 8b 01 3c 	brhi	800028c4 <et024006_Init+0x3a4>
80002650:	12 3a       	cp.w	r10,r9
80002652:	e0 83 01 39 	brlo	800028c4 <et024006_Init+0x3a4>
80002656:	ce eb       	rjmp	80002632 <et024006_Init+0x112>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002658:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000265c:	14 38       	cp.w	r8,r10
8000265e:	e0 88 00 09 	brls	80002670 <et024006_Init+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002662:	12 38       	cp.w	r8,r9
80002664:	fe 98 ff fa 	brls	80002658 <et024006_Init+0x138>
80002668:	12 3a       	cp.w	r10,r9
8000266a:	e0 83 01 4b 	brlo	80002900 <et024006_Init+0x3e0>
8000266e:	cf 5b       	rjmp	80002658 <et024006_Init+0x138>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002670:	12 38       	cp.w	r8,r9
80002672:	e0 8b 01 47 	brhi	80002900 <et024006_Init+0x3e0>
80002676:	12 3a       	cp.w	r10,r9
80002678:	e0 83 01 44 	brlo	80002900 <et024006_Init+0x3e0>
8000267c:	ce eb       	rjmp	80002658 <et024006_Init+0x138>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000267e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002682:	14 38       	cp.w	r8,r10
80002684:	e0 88 00 09 	brls	80002696 <et024006_Init+0x176>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002688:	12 38       	cp.w	r8,r9
8000268a:	fe 98 ff fa 	brls	8000267e <et024006_Init+0x15e>
8000268e:	12 3a       	cp.w	r10,r9
80002690:	e0 83 01 56 	brlo	8000293c <et024006_Init+0x41c>
80002694:	cf 5b       	rjmp	8000267e <et024006_Init+0x15e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002696:	12 38       	cp.w	r8,r9
80002698:	e0 8b 01 52 	brhi	8000293c <et024006_Init+0x41c>
8000269c:	12 3a       	cp.w	r10,r9
8000269e:	e0 83 01 4f 	brlo	8000293c <et024006_Init+0x41c>
800026a2:	ce eb       	rjmp	8000267e <et024006_Init+0x15e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026a4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800026a8:	14 38       	cp.w	r8,r10
800026aa:	e0 88 00 09 	brls	800026bc <et024006_Init+0x19c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800026ae:	12 38       	cp.w	r8,r9
800026b0:	fe 98 ff fa 	brls	800026a4 <et024006_Init+0x184>
800026b4:	12 3a       	cp.w	r10,r9
800026b6:	e0 83 01 64 	brlo	8000297e <et024006_Init+0x45e>
800026ba:	cf 5b       	rjmp	800026a4 <et024006_Init+0x184>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800026bc:	12 38       	cp.w	r8,r9
800026be:	e0 8b 01 60 	brhi	8000297e <et024006_Init+0x45e>
800026c2:	12 3a       	cp.w	r10,r9
800026c4:	e0 83 01 5d 	brlo	8000297e <et024006_Init+0x45e>
800026c8:	ce eb       	rjmp	800026a4 <et024006_Init+0x184>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
800026ca:	35 2c       	mov	r12,82
800026cc:	f0 1f 00 ba 	mcall	800029b4 <et024006_Init+0x494>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800026d0:	fe f8 02 d4 	ld.w	r8,pc[724]
800026d4:	70 07       	ld.w	r7,r8[0x0]
800026d6:	30 58       	mov	r8,5
800026d8:	ee 08 06 46 	mulu.d	r6,r7,r8
800026dc:	e0 68 03 e8 	mov	r8,1000
800026e0:	30 09       	mov	r9,0
800026e2:	e0 6a 03 e7 	mov	r10,999
800026e6:	30 0b       	mov	r11,0
800026e8:	ec 0a 00 0a 	add	r10,r6,r10
800026ec:	ee 0b 00 4b 	adc	r11,r7,r11
800026f0:	f0 1f 00 b3 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026f4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026f8:	f0 0a 00 0a 	add	r10,r8,r10
800026fc:	c4 fb       	rjmp	8000259a <et024006_Init+0x7a>
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
#endif
  et024006_SetupInterface();
  et024006_ResetDisplay();
  et024006_AdjustGamma();
800026fe:	f0 1f 00 b1 	mcall	800029c0 <et024006_Init+0x4a0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002702:	fc 19 c0 00 	movh	r9,0xc000
80002706:	30 1a       	mov	r10,1
80002708:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000270a:	fc 18 c0 20 	movh	r8,0xc020
8000270e:	30 6b       	mov	r11,6
80002710:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002712:	33 ab       	mov	r11,58
80002714:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002716:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002718:	33 bb       	mov	r11,59
8000271a:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000271c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000271e:	33 ca       	mov	r10,60
80002720:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002722:	e0 6a 00 f0 	mov	r10,240
80002726:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002728:	33 db       	mov	r11,61
8000272a:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000272c:	30 07       	mov	r7,0
8000272e:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002730:	33 eb       	mov	r11,62
80002732:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002734:	33 8b       	mov	r11,56
80002736:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002738:	34 0c       	mov	r12,64
8000273a:	b2 0c       	st.h	r9[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000273c:	30 fe       	mov	lr,15
8000273e:	b0 0e       	st.h	r8[0x0],lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002740:	34 1e       	mov	lr,65
80002742:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002744:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002746:	32 7a       	mov	r10,39
80002748:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000274a:	30 2a       	mov	r10,2
8000274c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000274e:	32 8e       	mov	lr,40
80002750:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002752:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002754:	32 9e       	mov	lr,41
80002756:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002758:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000275a:	32 ae       	mov	lr,42
8000275c:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000275e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002760:	32 ce       	mov	lr,44
80002762:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002764:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002766:	32 de       	mov	lr,45
80002768:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000276a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000276c:	31 9a       	mov	r10,25
8000276e:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002770:	34 9a       	mov	r10,73
80002772:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002774:	e0 6a 00 93 	mov	r10,147
80002778:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000277a:	30 8a       	mov	r10,8
8000277c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000277e:	31 6a       	mov	r10,22
80002780:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002782:	36 8a       	mov	r10,104
80002784:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002786:	32 3a       	mov	r10,35
80002788:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000278a:	e0 6a 00 95 	mov	r10,149
8000278e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002790:	32 4e       	mov	lr,36
80002792:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002794:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002796:	32 5a       	mov	r10,37
80002798:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000279a:	e0 6a 00 ff 	mov	r10,255
8000279e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027a0:	e0 6a 00 90 	mov	r10,144
800027a4:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027a6:	37 fa       	mov	r10,127
800027a8:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027aa:	33 5a       	mov	r10,53
800027ac:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027ae:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027b0:	33 6a       	mov	r10,54
800027b2:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027b4:	37 8a       	mov	r10,120
800027b6:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027b8:	31 da       	mov	r10,29
800027ba:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027bc:	30 7a       	mov	r10,7
800027be:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027c0:	31 ea       	mov	r10,30
800027c2:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027c4:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027c6:	31 fa       	mov	r10,31
800027c8:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027ca:	30 4a       	mov	r10,4
800027cc:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027ce:	32 0a       	mov	r10,32
800027d0:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027d2:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027d4:	34 4a       	mov	r10,68
800027d6:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027d8:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027da:	34 5a       	mov	r10,69
800027dc:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027de:	31 29       	mov	r9,18
800027e0:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800027e2:	4f 18       	lddpc	r8,800029a4 <et024006_Init+0x484>
800027e4:	70 07       	ld.w	r7,r8[0x0]
800027e6:	30 a8       	mov	r8,10
800027e8:	ee 08 06 46 	mulu.d	r6,r7,r8
800027ec:	e0 68 03 e8 	mov	r8,1000
800027f0:	30 09       	mov	r9,0
800027f2:	e0 6a 03 e7 	mov	r10,999
800027f6:	30 0b       	mov	r11,0
800027f8:	ec 0a 00 0a 	add	r10,r6,r10
800027fc:	ee 0b 00 4b 	adc	r11,r7,r11
80002800:	f0 1f 00 6f 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002804:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002808:	f0 0a 00 0a 	add	r10,r8,r10
8000280c:	cd aa       	rjmp	800025c0 <et024006_Init+0xa0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000280e:	31 c9       	mov	r9,28
80002810:	fc 18 c0 00 	movh	r8,0xc000
80002814:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002816:	30 49       	mov	r9,4
80002818:	fc 18 c0 20 	movh	r8,0xc020
8000281c:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000281e:	4e 28       	lddpc	r8,800029a4 <et024006_Init+0x484>
80002820:	70 07       	ld.w	r7,r8[0x0]
80002822:	31 48       	mov	r8,20
80002824:	ee 08 06 46 	mulu.d	r6,r7,r8
80002828:	e0 68 03 e8 	mov	r8,1000
8000282c:	30 09       	mov	r9,0
8000282e:	e0 6a 03 e7 	mov	r10,999
80002832:	30 0b       	mov	r11,0
80002834:	ec 0a 00 0a 	add	r10,r6,r10
80002838:	ee 0b 00 4b 	adc	r11,r7,r11
8000283c:	f0 1f 00 60 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002840:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002844:	f0 0a 00 0a 	add	r10,r8,r10
80002848:	cc fa       	rjmp	800025e6 <et024006_Init+0xc6>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000284a:	34 39       	mov	r9,67
8000284c:	fc 18 c0 00 	movh	r8,0xc000
80002850:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002852:	e0 69 00 80 	mov	r9,128
80002856:	fc 18 c0 20 	movh	r8,0xc020
8000285a:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000285c:	4d 28       	lddpc	r8,800029a4 <et024006_Init+0x484>
8000285e:	70 07       	ld.w	r7,r8[0x0]
80002860:	30 58       	mov	r8,5
80002862:	ee 08 06 46 	mulu.d	r6,r7,r8
80002866:	e0 68 03 e8 	mov	r8,1000
8000286a:	30 09       	mov	r9,0
8000286c:	e0 6a 03 e7 	mov	r10,999
80002870:	30 0b       	mov	r11,0
80002872:	ec 0a 00 0a 	add	r10,r6,r10
80002876:	ee 0b 00 4b 	adc	r11,r7,r11
8000287a:	f0 1f 00 51 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000287e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002882:	f0 0a 00 0a 	add	r10,r8,r10
80002886:	cc 3a       	rjmp	8000260c <et024006_Init+0xec>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002888:	31 b9       	mov	r9,27
8000288a:	fc 18 c0 00 	movh	r8,0xc000
8000288e:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002890:	30 89       	mov	r9,8
80002892:	fc 18 c0 20 	movh	r8,0xc020
80002896:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002898:	4c 38       	lddpc	r8,800029a4 <et024006_Init+0x484>
8000289a:	70 07       	ld.w	r7,r8[0x0]
8000289c:	32 88       	mov	r8,40
8000289e:	ee 08 06 46 	mulu.d	r6,r7,r8
800028a2:	e0 68 03 e8 	mov	r8,1000
800028a6:	30 09       	mov	r9,0
800028a8:	e0 6a 03 e7 	mov	r10,999
800028ac:	30 0b       	mov	r11,0
800028ae:	ec 0a 00 0a 	add	r10,r6,r10
800028b2:	ee 0b 00 4b 	adc	r11,r7,r11
800028b6:	f0 1f 00 42 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028ba:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028be:	f0 0a 00 0a 	add	r10,r8,r10
800028c2:	cb 8a       	rjmp	80002632 <et024006_Init+0x112>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800028c4:	31 b9       	mov	r9,27
800028c6:	fc 18 c0 00 	movh	r8,0xc000
800028ca:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800028cc:	31 09       	mov	r9,16
800028ce:	fc 18 c0 20 	movh	r8,0xc020
800028d2:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800028d4:	4b 48       	lddpc	r8,800029a4 <et024006_Init+0x484>
800028d6:	70 07       	ld.w	r7,r8[0x0]
800028d8:	32 88       	mov	r8,40
800028da:	ee 08 06 46 	mulu.d	r6,r7,r8
800028de:	e0 68 03 e8 	mov	r8,1000
800028e2:	30 09       	mov	r9,0
800028e4:	e0 6a 03 e7 	mov	r10,999
800028e8:	30 0b       	mov	r11,0
800028ea:	ec 0a 00 0a 	add	r10,r6,r10
800028ee:	ee 0b 00 4b 	adc	r11,r7,r11
800028f2:	f0 1f 00 33 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028f6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028fa:	f0 0a 00 0a 	add	r10,r8,r10
800028fe:	ca da       	rjmp	80002658 <et024006_Init+0x138>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002900:	32 69       	mov	r9,38
80002902:	fc 18 c0 00 	movh	r8,0xc000
80002906:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002908:	30 49       	mov	r9,4
8000290a:	fc 18 c0 20 	movh	r8,0xc020
8000290e:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002910:	4a 58       	lddpc	r8,800029a4 <et024006_Init+0x484>
80002912:	70 07       	ld.w	r7,r8[0x0]
80002914:	32 88       	mov	r8,40
80002916:	ee 08 06 46 	mulu.d	r6,r7,r8
8000291a:	e0 68 03 e8 	mov	r8,1000
8000291e:	30 09       	mov	r9,0
80002920:	e0 6a 03 e7 	mov	r10,999
80002924:	30 0b       	mov	r11,0
80002926:	ec 0a 00 0a 	add	r10,r6,r10
8000292a:	ee 0b 00 4b 	adc	r11,r7,r11
8000292e:	f0 1f 00 24 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002932:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002936:	f0 0a 00 0a 	add	r10,r8,r10
8000293a:	ca 2a       	rjmp	8000267e <et024006_Init+0x15e>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000293c:	fc 19 c0 00 	movh	r9,0xc000
80002940:	32 6a       	mov	r10,38
80002942:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002944:	fc 18 c0 20 	movh	r8,0xc020
80002948:	32 4b       	mov	r11,36
8000294a:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000294c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000294e:	32 c9       	mov	r9,44
80002950:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002952:	49 58       	lddpc	r8,800029a4 <et024006_Init+0x484>
80002954:	70 07       	ld.w	r7,r8[0x0]
80002956:	32 88       	mov	r8,40
80002958:	ee 08 06 46 	mulu.d	r6,r7,r8
8000295c:	e0 68 03 e8 	mov	r8,1000
80002960:	30 09       	mov	r9,0
80002962:	e0 6a 03 e7 	mov	r10,999
80002966:	30 0b       	mov	r11,0
80002968:	ec 0a 00 0a 	add	r10,r6,r10
8000296c:	ee 0b 00 4b 	adc	r11,r7,r11
80002970:	f0 1f 00 13 	mcall	800029bc <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002974:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002978:	f0 0a 00 0a 	add	r10,r8,r10
8000297c:	c9 4a       	rjmp	800026a4 <et024006_Init+0x184>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000297e:	fc 19 c0 00 	movh	r9,0xc000
80002982:	32 68       	mov	r8,38
80002984:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002986:	fc 18 c0 20 	movh	r8,0xc020
8000298a:	33 ca       	mov	r10,60
8000298c:	b0 0a       	st.h	r8[0x0],r10
}

__always_inline static uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000298e:	37 0a       	mov	r10,112
80002990:	b2 0a       	st.h	r9[0x0],r10
  return *ET024006_PARAM_ADDR;
80002992:	90 0b       	ld.sh	r11,r8[0x0]
80002994:	5c 5b       	castu.b	r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002996:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002998:	16 99       	mov	r9,r11
8000299a:	a3 b9       	sbr	r9,0x3
8000299c:	b0 09       	st.h	r8[0x0],r9
  et024006_GeneralSettings();
  et024006_InterfaceSettings();
  et024006_PowerSettings();
  et024006_PowerUp();
  et024006_PowerOn();
}
8000299e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800029a2:	00 00       	add	r0,r0
800029a4:	00 00       	add	r0,r0
800029a6:	00 28       	rsub	r8,r0
800029a8:	80 00       	ld.sh	r0,r0[0x0]
800029aa:	29 c4       	sub	r4,-100
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	2b 64       	sub	r4,-74
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	2a e0       	sub	r0,-82
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	2b 7c       	sub	r12,-73
800029b8:	80 00       	ld.sh	r0,r0[0x0]
800029ba:	2b 98       	sub	r8,-71
800029bc:	80 00       	ld.sh	r0,r0[0x0]
800029be:	33 78       	mov	r8,55
800029c0:	80 00       	ld.sh	r0,r0[0x0]
800029c2:	24 b0       	sub	r0,75

800029c4 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
800029c4:	eb cd 40 fc 	pushm	r2-r7,lr
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
800029c8:	ee 78 42 3f 	mov	r8,999999
800029cc:	f8 08 00 09 	add	r9,r12,r8
800029d0:	e0 68 de 83 	mov	r8,56963
800029d4:	ea 18 43 1b 	orh	r8,0x431b
800029d8:	f2 08 06 48 	mulu.d	r8,r9,r8
800029dc:	f2 08 16 12 	lsr	r8,r9,0x12
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
800029e0:	f0 08 00 25 	add	r5,r8,r8<<0x2
800029e4:	a3 65       	lsl	r5,0x2
800029e6:	ea c5 fc 19 	sub	r5,r5,-999
800029ea:	e0 69 4d d3 	mov	r9,19923
800029ee:	ea 19 10 62 	orh	r9,0x1062
800029f2:	ea 09 06 44 	mulu.d	r4,r5,r9
800029f6:	a7 85       	lsr	r5,0x6
800029f8:	f0 0a 15 04 	lsl	r10,r8,0x4
800029fc:	f4 08 01 07 	sub	r7,r10,r8
80002a00:	a1 77       	lsl	r7,0x1
80002a02:	ee c7 fc 19 	sub	r7,r7,-999
80002a06:	ee 09 06 46 	mulu.d	r6,r7,r9
80002a0a:	0e 94       	mov	r4,r7
80002a0c:	a7 84       	lsr	r4,0x6
80002a0e:	f4 08 01 07 	sub	r7,r10,r8
80002a12:	a3 67       	lsl	r7,0x2
80002a14:	ee c7 fc 19 	sub	r7,r7,-999
80002a18:	ee 09 06 46 	mulu.d	r6,r7,r9
80002a1c:	a7 87       	lsr	r7,0x6
80002a1e:	f0 03 10 5a 	mul	r3,r8,90
80002a22:	e6 c3 fc 19 	sub	r3,r3,-999
80002a26:	e6 09 06 42 	mulu.d	r2,r3,r9
80002a2a:	e6 0c 16 06 	lsr	r12,r3,0x6
80002a2e:	e0 63 00 d2 	mov	r3,210
80002a32:	f0 03 02 43 	mul	r3,r8,r3
80002a36:	e6 c3 fc 19 	sub	r3,r3,-999
80002a3a:	e6 09 06 42 	mulu.d	r2,r3,r9
80002a3e:	e6 06 16 06 	lsr	r6,r3,0x6
80002a42:	f4 08 01 0b 	sub	r11,r10,r8
80002a46:	a5 6b       	lsl	r11,0x4
80002a48:	f6 cb fc 19 	sub	r11,r11,-999
80002a4c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002a50:	f6 0e 16 06 	lsr	lr,r11,0x6
80002a54:	f0 03 10 64 	mul	r3,r8,100
80002a58:	e6 c3 fc 19 	sub	r3,r3,-999
80002a5c:	e6 09 06 42 	mulu.d	r2,r3,r9
80002a60:	a7 83       	lsr	r3,0x6
80002a62:	e0 6a 01 0e 	mov	r10,270
80002a66:	b5 38       	mul	r8,r10
80002a68:	f0 c8 fc 19 	sub	r8,r8,-999
80002a6c:	f0 09 06 48 	mulu.d	r8,r8,r9
80002a70:	a7 89       	lsr	r9,0x6
80002a72:	ec 04 00 0a 	add	r10,r6,r4
80002a76:	1c 3a       	cp.w	r10,lr
80002a78:	f4 0e 17 20 	movhs	lr,r10
80002a7c:	ee 05 00 0b 	add	r11,r7,r5
80002a80:	18 3b       	cp.w	r11,r12
80002a82:	f6 0c 17 20 	movhs	r12,r11
80002a86:	06 3b       	cp.w	r11,r3
80002a88:	e6 0b 17 30 	movlo	r11,r3
80002a8c:	12 3a       	cp.w	r10,r9
80002a8e:	f4 09 17 20 	movhs	r9,r10
80002a92:	eb e4 11 05 	or	r5,r5,r4<<0x10
80002a96:	fe 6a 1c 00 	mov	r10,-123904
80002a9a:	95 05       	st.w	r10[0x0],r5
80002a9c:	ef e6 11 07 	or	r7,r7,r6<<0x10
80002aa0:	ef ec 10 87 	or	r7,r7,r12<<0x8
80002aa4:	ef ee 11 87 	or	r7,r7,lr<<0x18
80002aa8:	95 17       	st.w	r10[0x4],r7
80002aaa:	1c 39       	cp.w	r9,lr
80002aac:	f2 0e 17 20 	movhs	lr,r9
80002ab0:	18 3b       	cp.w	r11,r12
80002ab2:	f8 0b 17 30 	movlo	r11,r12
80002ab6:	f7 ee 11 0b 	or	r11,r11,lr<<0x10
80002aba:	95 2b       	st.w	r10[0x8],r11
80002abc:	e0 68 10 03 	mov	r8,4099
80002ac0:	95 38       	st.w	r10[0xc],r8
80002ac2:	30 19       	mov	r9,1
80002ac4:	48 48       	lddpc	r8,80002ad4 <smc_init+0x110>
80002ac6:	b0 89       	st.b	r8[0x0],r9
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
80002ac8:	31 4b       	mov	r11,20
80002aca:	48 4c       	lddpc	r12,80002ad8 <smc_init+0x114>
80002acc:	f0 1f 00 04 	mcall	80002adc <smc_init+0x118>
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
}
80002ad0:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002ad4:	00 00       	add	r0,r0
80002ad6:	00 30       	cp.w	r0,r0
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	3b 08       	mov	r8,-80
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	2b 34       	sub	r4,-77

80002ae0 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002ae0:	f8 08 16 05 	lsr	r8,r12,0x5
80002ae4:	a9 68       	lsl	r8,0x8
80002ae6:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002aea:	58 1b       	cp.w	r11,1
80002aec:	c0 d0       	breq	80002b06 <gpio_enable_module_pin+0x26>
80002aee:	c0 63       	brcs	80002afa <gpio_enable_module_pin+0x1a>
80002af0:	58 2b       	cp.w	r11,2
80002af2:	c1 00       	breq	80002b12 <gpio_enable_module_pin+0x32>
80002af4:	58 3b       	cp.w	r11,3
80002af6:	c1 40       	breq	80002b1e <gpio_enable_module_pin+0x3e>
80002af8:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002afa:	30 19       	mov	r9,1
80002afc:	f2 0c 09 49 	lsl	r9,r9,r12
80002b00:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002b02:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002b04:	c1 28       	rjmp	80002b28 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002b06:	30 19       	mov	r9,1
80002b08:	f2 0c 09 49 	lsl	r9,r9,r12
80002b0c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002b0e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002b10:	c0 c8       	rjmp	80002b28 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002b12:	30 19       	mov	r9,1
80002b14:	f2 0c 09 49 	lsl	r9,r9,r12
80002b18:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002b1a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002b1c:	c0 68       	rjmp	80002b28 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002b1e:	30 19       	mov	r9,1
80002b20:	f2 0c 09 49 	lsl	r9,r9,r12
80002b24:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002b26:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002b28:	30 19       	mov	r9,1
80002b2a:	f2 0c 09 4c 	lsl	r12,r9,r12
80002b2e:	91 2c       	st.w	r8[0x8],r12
80002b30:	5e fd       	retal	0
80002b32:	d7 03       	nop

80002b34 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002b34:	d4 21       	pushm	r4-r7,lr
80002b36:	18 97       	mov	r7,r12
80002b38:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002b3a:	58 0b       	cp.w	r11,0
80002b3c:	c0 31       	brne	80002b42 <gpio_enable_module+0xe>
80002b3e:	30 05       	mov	r5,0
80002b40:	c0 d8       	rjmp	80002b5a <gpio_enable_module+0x26>
80002b42:	30 06       	mov	r6,0
80002b44:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002b46:	6e 1b       	ld.w	r11,r7[0x4]
80002b48:	6e 0c       	ld.w	r12,r7[0x0]
80002b4a:	f0 1f 00 06 	mcall	80002b60 <gpio_enable_module+0x2c>
80002b4e:	18 45       	or	r5,r12
		gpiomap++;
80002b50:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002b52:	2f f6       	sub	r6,-1
80002b54:	0c 34       	cp.w	r4,r6
80002b56:	fe 9b ff f8 	brhi	80002b46 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002b5a:	0a 9c       	mov	r12,r5
80002b5c:	d8 22       	popm	r4-r7,pc
80002b5e:	00 00       	add	r0,r0
80002b60:	80 00       	ld.sh	r0,r0[0x0]
80002b62:	2a e0       	sub	r0,-82

80002b64 <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002b64:	f8 08 16 05 	lsr	r8,r12,0x5
80002b68:	a9 68       	lsl	r8,0x8
80002b6a:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002b6e:	30 19       	mov	r9,1
80002b70:	f2 0c 09 4c 	lsl	r12,r9,r12
80002b74:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
80002b78:	91 1c       	st.w	r8[0x4],r12
}
80002b7a:	5e fc       	retal	r12

80002b7c <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002b7c:	f8 08 16 05 	lsr	r8,r12,0x5
80002b80:	a9 68       	lsl	r8,0x8
80002b82:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002b86:	30 19       	mov	r9,1
80002b88:	f2 0c 09 4c 	lsl	r12,r9,r12
80002b8c:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002b90:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002b94:	91 1c       	st.w	r8[0x4],r12
}
80002b96:	5e fc       	retal	r12

80002b98 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002b98:	f8 08 16 05 	lsr	r8,r12,0x5
80002b9c:	a9 68       	lsl	r8,0x8
80002b9e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002ba2:	30 19       	mov	r9,1
80002ba4:	f2 0c 09 4c 	lsl	r12,r9,r12
80002ba8:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002bac:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002bb0:	91 1c       	st.w	r8[0x4],r12
}
80002bb2:	5e fc       	retal	r12

80002bb4 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002bb4:	fe 78 08 00 	mov	r8,-63488
80002bb8:	e0 69 00 83 	mov	r9,131
80002bbc:	f2 0c 01 0c 	sub	r12,r9,r12
80002bc0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002bc4:	f2 ca ff c0 	sub	r10,r9,-64
80002bc8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002bcc:	58 08       	cp.w	r8,0
80002bce:	c0 21       	brne	80002bd2 <_get_interrupt_handler+0x1e>
80002bd0:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002bd2:	f0 08 12 00 	clz	r8,r8
80002bd6:	48 5a       	lddpc	r10,80002be8 <_get_interrupt_handler+0x34>
80002bd8:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002bdc:	f0 08 11 1f 	rsub	r8,r8,31
80002be0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002be2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002be6:	5e fc       	retal	r12
80002be8:	80 00       	ld.sh	r0,r0[0x0]
80002bea:	3b a8       	mov	r8,-70

80002bec <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002bec:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002bee:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002bf2:	99 a8       	st.w	r12[0x28],r8
}
80002bf4:	5e fc       	retal	r12
80002bf6:	d7 03       	nop

80002bf8 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002bf8:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002bfa:	ec 5b bb 9f 	cp.w	r11,899999
80002bfe:	e0 8b 00 04 	brhi	80002c06 <pm_enable_osc0_crystal+0xe>
80002c02:	30 4b       	mov	r11,4
80002c04:	c1 38       	rjmp	80002c2a <pm_enable_osc0_crystal+0x32>
80002c06:	e0 68 c6 bf 	mov	r8,50879
80002c0a:	ea 18 00 2d 	orh	r8,0x2d
80002c0e:	10 3b       	cp.w	r11,r8
80002c10:	e0 8b 00 04 	brhi	80002c18 <pm_enable_osc0_crystal+0x20>
80002c14:	30 5b       	mov	r11,5
80002c16:	c0 a8       	rjmp	80002c2a <pm_enable_osc0_crystal+0x32>
80002c18:	e0 68 12 00 	mov	r8,4608
80002c1c:	ea 18 00 7a 	orh	r8,0x7a
80002c20:	10 3b       	cp.w	r11,r8
80002c22:	f9 bb 03 06 	movlo	r11,6
80002c26:	f9 bb 02 07 	movhs	r11,7
80002c2a:	f0 1f 00 02 	mcall	80002c30 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002c2e:	d8 02       	popm	pc
80002c30:	80 00       	ld.sh	r0,r0[0x0]
80002c32:	2b ec       	sub	r12,-66

80002c34 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002c34:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002c36:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002c3a:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002c3c:	78 08       	ld.w	r8,r12[0x0]
80002c3e:	a3 a8       	sbr	r8,0x2
80002c40:	99 08       	st.w	r12[0x0],r8
}
80002c42:	5e fc       	retal	r12

80002c44 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002c44:	79 58       	ld.w	r8,r12[0x54]
80002c46:	e2 18 00 80 	andl	r8,0x80,COH
80002c4a:	cf d0       	breq	80002c44 <pm_wait_for_clk0_ready>
}
80002c4c:	5e fc       	retal	r12
80002c4e:	d7 03       	nop

80002c50 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002c50:	eb cd 40 80 	pushm	r7,lr
80002c54:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002c56:	f0 1f 00 04 	mcall	80002c64 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002c5a:	0e 9c       	mov	r12,r7
80002c5c:	f0 1f 00 03 	mcall	80002c68 <pm_enable_clk0+0x18>
}
80002c60:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c64:	80 00       	ld.sh	r0,r0[0x0]
80002c66:	2c 34       	sub	r4,-61
80002c68:	80 00       	ld.sh	r0,r0[0x0]
80002c6a:	2c 44       	sub	r4,-60

80002c6c <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002c6c:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002c6e:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002c72:	99 08       	st.w	r12[0x0],r8
}
80002c74:	5e fc       	retal	r12
80002c76:	d7 03       	nop

80002c78 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002c78:	eb cd 40 c0 	pushm	r6-r7,lr
80002c7c:	18 97       	mov	r7,r12
80002c7e:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002c80:	f0 1f 00 06 	mcall	80002c98 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002c84:	0c 9b       	mov	r11,r6
80002c86:	0e 9c       	mov	r12,r7
80002c88:	f0 1f 00 05 	mcall	80002c9c <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002c8c:	30 1b       	mov	r11,1
80002c8e:	0e 9c       	mov	r12,r7
80002c90:	f0 1f 00 04 	mcall	80002ca0 <pm_switch_to_osc0+0x28>
}
80002c94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c98:	80 00       	ld.sh	r0,r0[0x0]
80002c9a:	2b f8       	sub	r8,-65
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	2c 50       	sub	r0,-59
80002ca0:	80 00       	ld.sh	r0,r0[0x0]
80002ca2:	2c 6c       	sub	r12,-58

80002ca4 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002ca4:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002ca6:	58 0c       	cp.w	r12,0
80002ca8:	c0 40       	breq	80002cb0 <pcl_switch_to_osc+0xc>
80002caa:	fe 7c d8 f0 	mov	r12,-10000
80002cae:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
80002cb0:	fe 7c 0c 00 	mov	r12,-62464
80002cb4:	f0 1f 00 02 	mcall	80002cbc <pcl_switch_to_osc+0x18>
80002cb8:	d8 0a       	popm	pc,r12=0
80002cba:	00 00       	add	r0,r0
80002cbc:	80 00       	ld.sh	r0,r0[0x0]
80002cbe:	2c 78       	sub	r8,-57

80002cc0 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80002cc0:	58 0b       	cp.w	r11,0
80002cc2:	c1 90       	breq	80002cf4 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002cc4:	58 6c       	cp.w	r12,6
80002cc6:	e0 8b 00 17 	brhi	80002cf4 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002cca:	76 0a       	ld.w	r10,r11[0x0]
80002ccc:	fe 78 30 00 	mov	r8,-53248
80002cd0:	f8 c9 ff f0 	sub	r9,r12,-16
80002cd4:	a5 79       	lsl	r9,0x5
80002cd6:	f0 09 00 09 	add	r9,r8,r9
80002cda:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002cdc:	76 19       	ld.w	r9,r11[0x4]
80002cde:	a5 7c       	lsl	r12,0x5
80002ce0:	f0 0c 00 0c 	add	r12,r8,r12
80002ce4:	f8 c8 fd fc 	sub	r8,r12,-516
80002ce8:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002cea:	76 28       	ld.w	r8,r11[0x8]
80002cec:	f8 cc fd f8 	sub	r12,r12,-520
80002cf0:	99 08       	st.w	r12[0x0],r8
80002cf2:	5e fd       	retal	0

  return PWM_SUCCESS;
80002cf4:	5e ff       	retal	1

80002cf6 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80002cf6:	18 98       	mov	r8,r12
80002cf8:	e0 18 ff 80 	andl	r8,0xff80
80002cfc:	c0 20       	breq	80002d00 <pwm_start_channels+0xa>
80002cfe:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002d00:	fe 78 30 00 	mov	r8,-53248
80002d04:	91 1c       	st.w	r8[0x4],r12
80002d06:	5e fd       	retal	0

80002d08 <pwm_async_update_channel>:

int pwm_async_update_channel(unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
80002d08:	58 6c       	cp.w	r12,6
80002d0a:	e0 88 00 03 	brls	80002d10 <pwm_async_update_channel+0x8>
80002d0e:	5e ff       	retal	1
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
80002d10:	76 0a       	ld.w	r10,r11[0x0]
80002d12:	fe 78 30 00 	mov	r8,-53248
80002d16:	f8 c9 ff f0 	sub	r9,r12,-16
80002d1a:	a5 79       	lsl	r9,0x5
80002d1c:	f0 09 00 09 	add	r9,r8,r9
80002d20:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
80002d22:	76 49       	ld.w	r9,r11[0x10]
80002d24:	a5 7c       	lsl	r12,0x5
80002d26:	18 08       	add	r8,r12
80002d28:	f0 c8 fd f0 	sub	r8,r8,-528
80002d2c:	91 09       	st.w	r8[0x0],r9
80002d2e:	5e fd       	retal	0

80002d30 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002d30:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002d34:	58 0c       	cp.w	r12,0
80002d36:	c0 21       	brne	80002d3a <pwm_init+0xa>
80002d38:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002d3a:	e6 18 00 01 	andh	r8,0x1,COH
80002d3e:	c0 91       	brne	80002d50 <pwm_init+0x20>
80002d40:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002d42:	fe 78 30 00 	mov	r8,-53248
80002d46:	37 f9       	mov	r9,127
80002d48:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002d4a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002d4c:	d5 03       	csrf	0x10
80002d4e:	c0 68       	rjmp	80002d5a <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002d50:	fe 78 30 00 	mov	r8,-53248
80002d54:	37 f9       	mov	r9,127
80002d56:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002d58:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80002d5a:	78 08       	ld.w	r8,r12[0x0]
80002d5c:	78 39       	ld.w	r9,r12[0xc]
80002d5e:	a9 69       	lsl	r9,0x8
80002d60:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80002d64:	78 18       	ld.w	r8,r12[0x4]
80002d66:	10 49       	or	r9,r8
80002d68:	78 28       	ld.w	r8,r12[0x8]
80002d6a:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002d6e:	fe 78 30 00 	mov	r8,-53248
80002d72:	91 09       	st.w	r8[0x0],r9
80002d74:	5e fd       	retal	0
80002d76:	d7 03       	nop

80002d78 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002d78:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002d7c:	fe c0 f7 7c 	sub	r0,pc,-2180

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002d80:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002d84:	d5 53       	csrf	0x15
  cp      r0, r1
80002d86:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002d88:	32 81       	mov	r1,40
  lda.w   r2, _data_lma
80002d8a:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002d8c:	c0 72       	brcc	80002d9a <idata_load_loop_end>
  st.d    r0++, r4
80002d8e:	fe c2 f1 26 	sub	r2,pc,-3802

80002d92 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80002d92:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002d94:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80002d96:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002d98:	cf d3       	brcs	80002d92 <idata_load_loop>

80002d9a <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002d9a:	32 80       	mov	r0,40
  mov     r2, 0
80002d9c:	e0 61 01 28 	mov	r1,296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002da0:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002da2:	c0 62       	brcc	80002dae <udata_clear_loop_end>
  brlo    udata_clear_loop
80002da4:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002da6:	30 03       	mov	r3,0

80002da8 <udata_clear_loop>:
80002da8:	a1 22       	st.d	r0++,r2
80002daa:	02 30       	cp.w	r0,r1
80002dac:	cf e3       	brcs	80002da8 <udata_clear_loop>

80002dae <udata_clear_loop_end>:
80002dae:	fe cf fb 9e 	sub	pc,pc,-1122
80002db2:	d7 03       	nop

80002db4 <color16>:
// Function names and descriptions
uint16_t color16(uint8_t r, uint8_t g, uint8_t b);
void draw_gradient_rectangle( uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color1, uint16_t color2, uint8_t vertical);

// Functions
uint16_t color16(uint8_t r, uint8_t g, uint8_t b){
80002db4:	f5 ec 10 bc 	or	r12,r10,r12<<0xb
80002db8:	f9 eb 10 5c 	or	r12,r12,r11<<0x5
  uint16_t color = (b)|((g)<<5)|((r)<<11);
  return(color);
}
80002dbc:	5c 8c       	casts.h	r12
80002dbe:	5e fc       	retal	r12

80002dc0 <draw_gradient_rectangle>:

void draw_gradient_rectangle( uint16_t x, uint16_t y, uint16_t width,
    uint16_t height, uint16_t color1, uint16_t color2, uint8_t vertical){
80002dc0:	d4 31       	pushm	r0-r7,lr
80002dc2:	20 cd       	sub	sp,48
80002dc4:	fa c4 ff ac 	sub	r4,sp,-84
80002dc8:	50 9c       	stdsp	sp[0x24],r12
80002dca:	50 bb       	stdsp	sp[0x2c],r11
80002dcc:	14 93       	mov	r3,r10
80002dce:	12 9e       	mov	lr,r9
80002dd0:	68 19       	ld.w	r9,r4[0x4]
  int r, g, b, delta_r, delta_g, delta_b;
  delta_r = ((color2&0xF800)>>11) - ((color1&0xF800)>>11);
80002dd2:	5c 78       	castu.h	r8
80002dd4:	f0 0c 16 0b 	lsr	r12,r8,0xb
80002dd8:	50 6c       	stdsp	sp[0x18],r12
80002dda:	88 9a       	ld.uh	r10,r4[0x2]
80002ddc:	f4 02 16 0b 	lsr	r2,r10,0xb
80002de0:	18 12       	sub	r2,r12
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
80002de2:	f7 d8 c0 a6 	bfextu	r11,r8,0x5,0x6
80002de6:	50 5b       	stdsp	sp[0x14],r11
80002de8:	e3 da c0 a6 	bfextu	r1,r10,0x5,0x6
80002dec:	16 11       	sub	r1,r11
  delta_b = (color2&0x1F) - (color1&0x1F);
80002dee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002df2:	50 48       	stdsp	sp[0x10],r8
80002df4:	f5 da c0 05 	bfextu	r10,r10,0x0,0x5
80002df8:	f4 08 01 00 	sub	r0,r10,r8
  if(vertical){
80002dfc:	58 09       	cp.w	r9,0
80002dfe:	c0 41       	brne	80002e06 <draw_gradient_rectangle+0x46>
      b = delta_b * i;
      b = b/height + (color1&0x1F);
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
    }
  }else{
    for (uint16_t i = 0; i < width; i++){
80002e00:	58 03       	cp.w	r3,0
80002e02:	c3 e1       	brne	80002e7e <draw_gradient_rectangle+0xbe>
80002e04:	c8 78       	rjmp	80002f12 <draw_gradient_rectangle+0x152>
  int r, g, b, delta_r, delta_g, delta_b;
  delta_r = ((color2&0xF800)>>11) - ((color1&0xF800)>>11);
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
  delta_b = (color2&0x1F) - (color1&0x1F);
  if(vertical){
    for (uint16_t i = 0; i < height; i++){
80002e06:	58 0e       	cp.w	lr,0
80002e08:	e0 80 00 85 	breq	80002f12 <draw_gradient_rectangle+0x152>
uint16_t color16(uint8_t r, uint8_t g, uint8_t b){
  uint16_t color = (b)|((g)<<5)|((r)<<11);
  return(color);
}

void draw_gradient_rectangle( uint16_t x, uint16_t y, uint16_t width,
80002e0c:	50 82       	stdsp	sp[0x20],r2
80002e0e:	50 71       	stdsp	sp[0x1c],r1
80002e10:	50 20       	stdsp	sp[0x8],r0
80002e12:	30 06       	mov	r6,0
80002e14:	0c 95       	mov	r5,r6
80002e16:	0c 94       	mov	r4,r6
80002e18:	0c 97       	mov	r7,r6
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
  delta_b = (color2&0x1F) - (color1&0x1F);
  if(vertical){
    for (uint16_t i = 0; i < height; i++){
      r = delta_r * i;
      r = r/height + (color1>>11);
80002e1a:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
      g = delta_g *  i;
      g = g/height + ((color1&0x7E0)>>5);
      b = delta_b * i;
      b = b/height + (color1&0x1F);
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
80002e1e:	5c 73       	castu.h	r3
80002e20:	50 a3       	stdsp	sp[0x28],r3
80002e22:	40 93       	lddsp	r3,sp[0x24]
80002e24:	5c 73       	castu.h	r3
80002e26:	40 b0       	lddsp	r0,sp[0x2c]
80002e28:	1c 91       	mov	r1,lr
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
  delta_b = (color2&0x1F) - (color1&0x1F);
  if(vertical){
    for (uint16_t i = 0; i < height; i++){
      r = delta_r * i;
      r = r/height + (color1>>11);
80002e2a:	e8 02 0c 08 	divs	r8,r4,r2
      g = delta_g *  i;
      g = g/height + ((color1&0x7E0)>>5);
80002e2e:	ea 02 0c 0a 	divs	r10,r5,r2
80002e32:	fa eb 00 00 	st.d	sp[0],r10
      b = delta_b * i;
      b = b/height + (color1&0x1F);
80002e36:	ec 02 0c 0a 	divs	r10,r6,r2
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
80002e3a:	40 4c       	lddsp	r12,sp[0x10]
80002e3c:	f8 0a 00 0a 	add	r10,r12,r10
80002e40:	40 5b       	lddsp	r11,sp[0x14]
80002e42:	40 1c       	lddsp	r12,sp[0x4]
80002e44:	18 0b       	add	r11,r12
80002e46:	40 6c       	lddsp	r12,sp[0x18]
80002e48:	10 0c       	add	r12,r8
80002e4a:	5c 5a       	castu.b	r10
80002e4c:	5c 5b       	castu.b	r11
80002e4e:	5c 5c       	castu.b	r12
80002e50:	f0 1f 00 32 	mcall	80002f18 <draw_gradient_rectangle+0x158>
80002e54:	0e 9b       	mov	r11,r7
80002e56:	00 0b       	add	r11,r0
80002e58:	f3 dc c0 10 	bfextu	r9,r12,0x0,0x10
80002e5c:	40 aa       	lddsp	r10,sp[0x28]
80002e5e:	5c 7b       	castu.h	r11
80002e60:	06 9c       	mov	r12,r3
80002e62:	f0 1f 00 2f 	mcall	80002f1c <draw_gradient_rectangle+0x15c>
80002e66:	2f f7       	sub	r7,-1
80002e68:	40 8b       	lddsp	r11,sp[0x20]
80002e6a:	16 04       	add	r4,r11
80002e6c:	40 7a       	lddsp	r10,sp[0x1c]
80002e6e:	14 05       	add	r5,r10
80002e70:	40 29       	lddsp	r9,sp[0x8]
80002e72:	12 06       	add	r6,r9
  int r, g, b, delta_r, delta_g, delta_b;
  delta_r = ((color2&0xF800)>>11) - ((color1&0xF800)>>11);
  delta_g = ((color2&0x7E0)>>5) - ((color1&0x7E0)>>5);
  delta_b = (color2&0x1F) - (color1&0x1F);
  if(vertical){
    for (uint16_t i = 0; i < height; i++){
80002e74:	ee 01 19 00 	cp.h	r1,r7
80002e78:	fe 9b ff d9 	brhi	80002e2a <draw_gradient_rectangle+0x6a>
80002e7c:	c4 b8       	rjmp	80002f12 <draw_gradient_rectangle+0x152>
uint16_t color16(uint8_t r, uint8_t g, uint8_t b){
  uint16_t color = (b)|((g)<<5)|((r)<<11);
  return(color);
}

void draw_gradient_rectangle( uint16_t x, uint16_t y, uint16_t width,
80002e7e:	30 06       	mov	r6,0
80002e80:	0c 95       	mov	r5,r6
80002e82:	0c 94       	mov	r4,r6
80002e84:	0c 97       	mov	r7,r6
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
    }
  }else{
    for (uint16_t i = 0; i < width; i++){
      r = delta_r * i;
      r = r/width + (color1>>11);
80002e86:	f9 d3 c0 10 	bfextu	r12,r3,0x0,0x10
80002e8a:	50 0c       	stdsp	sp[0x0],r12
      g = delta_g *  i;
      g = g/width + ((color1&0x7E0)>>5);
      b = delta_b * i;
      b = b/width + (color1&0x1F);
      et024006_DrawVertLine(x + i, y, height, color16(r,g,b));
80002e8c:	5c 7e       	castu.h	lr
80002e8e:	50 7e       	stdsp	sp[0x1c],lr
80002e90:	40 bb       	lddsp	r11,sp[0x2c]
80002e92:	5c 7b       	castu.h	r11
80002e94:	50 8b       	stdsp	sp[0x20],r11
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
    }
  }else{
    for (uint16_t i = 0; i < width; i++){
      r = delta_r * i;
      r = r/width + (color1>>11);
80002e96:	40 08       	lddsp	r8,sp[0x0]
80002e98:	e8 08 0c 08 	divs	r8,r4,r8
80002e9c:	fa e9 00 08 	st.d	sp[8],r8
      g = delta_g *  i;
      g = g/width + ((color1&0x7E0)>>5);
80002ea0:	40 0c       	lddsp	r12,sp[0x0]
80002ea2:	ea 0c 0c 08 	divs	r8,r5,r12
      b = delta_b * i;
      b = b/width + (color1&0x1F);
80002ea6:	ec 0c 0c 0a 	divs	r10,r6,r12
      et024006_DrawVertLine(x + i, y, height, color16(r,g,b));
80002eaa:	40 4c       	lddsp	r12,sp[0x10]
80002eac:	f8 0a 00 0a 	add	r10,r12,r10
80002eb0:	40 5b       	lddsp	r11,sp[0x14]
80002eb2:	10 0b       	add	r11,r8
80002eb4:	40 6c       	lddsp	r12,sp[0x18]
80002eb6:	40 39       	lddsp	r9,sp[0xc]
80002eb8:	12 0c       	add	r12,r9
80002eba:	5c 5a       	castu.b	r10
80002ebc:	5c 5b       	castu.b	r11
80002ebe:	5c 5c       	castu.b	r12
80002ec0:	f0 1f 00 16 	mcall	80002f18 <draw_gradient_rectangle+0x158>
80002ec4:	0e 98       	mov	r8,r7
80002ec6:	40 9b       	lddsp	r11,sp[0x24]
80002ec8:	16 08       	add	r8,r11
80002eca:	f3 dc c0 10 	bfextu	r9,r12,0x0,0x10
80002ece:	40 7a       	lddsp	r10,sp[0x1c]
80002ed0:	40 8b       	lddsp	r11,sp[0x20]
80002ed2:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80002ed6:	f0 1f 00 13 	mcall	80002f20 <draw_gradient_rectangle+0x160>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002eda:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ede:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ee2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ee6:	14 38       	cp.w	r8,r10
80002ee8:	e0 88 00 08 	brls	80002ef8 <draw_gradient_rectangle+0x138>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002eec:	12 38       	cp.w	r8,r9
80002eee:	fe 98 ff fa 	brls	80002ee2 <draw_gradient_rectangle+0x122>
80002ef2:	12 3a       	cp.w	r10,r9
80002ef4:	c0 73       	brcs	80002f02 <draw_gradient_rectangle+0x142>
80002ef6:	cf 6b       	rjmp	80002ee2 <draw_gradient_rectangle+0x122>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ef8:	12 38       	cp.w	r8,r9
80002efa:	e0 8b 00 04 	brhi	80002f02 <draw_gradient_rectangle+0x142>
80002efe:	12 3a       	cp.w	r10,r9
80002f00:	cf 12       	brcc	80002ee2 <draw_gradient_rectangle+0x122>
      // et024006_PrintString(g_str, (const unsigned char *)&FONT6x8, 0, 10, BLUE, -1);
      // et024006_PrintString(b_str, (const unsigned char *)&FONT6x8, 0, 20, BLUE, -1);
      delay_ms(1);
    }
  }
}
80002f02:	2f f7       	sub	r7,-1
80002f04:	04 04       	add	r4,r2
80002f06:	02 05       	add	r5,r1
80002f08:	00 06       	add	r6,r0
      b = delta_b * i;
      b = b/height + (color1&0x1F);
      et024006_DrawHorizLine(x, y + i, width, color16(r,g,b));
    }
  }else{
    for (uint16_t i = 0; i < width; i++){
80002f0a:	ee 03 19 00 	cp.h	r3,r7
80002f0e:	fe 9b ff c4 	brhi	80002e96 <draw_gradient_rectangle+0xd6>
      // et024006_PrintString(g_str, (const unsigned char *)&FONT6x8, 0, 10, BLUE, -1);
      // et024006_PrintString(b_str, (const unsigned char *)&FONT6x8, 0, 20, BLUE, -1);
      delay_ms(1);
    }
  }
}
80002f12:	2f 4d       	sub	sp,-48
80002f14:	d8 32       	popm	r0-r7,pc
80002f16:	00 00       	add	r0,r0
80002f18:	80 00       	ld.sh	r0,r0[0x0]
80002f1a:	2d b4       	sub	r4,-37
80002f1c:	80 00       	ld.sh	r0,r0[0x0]
80002f1e:	24 98       	sub	r8,73
80002f20:	80 00       	ld.sh	r0,r0[0x0]
80002f22:	24 7c       	sub	r12,71

80002f24 <act7>:
#include "et024006dhu.h"
#include "display_utils.c"

void act7(void){
80002f24:	d4 31       	pushm	r0-r7,lr
80002f26:	20 dd       	sub	sp,52
  uint16_t colors[] = {
    color16(63,000,00), //red 0
80002f28:	30 0a       	mov	r10,0
80002f2a:	14 9b       	mov	r11,r10
80002f2c:	33 fc       	mov	r12,63
80002f2e:	f0 1f 00 b6 	mcall	80003204 <act7+0x2e0>
80002f32:	5c 8c       	casts.h	r12
80002f34:	50 7c       	stdsp	sp[0x1c],r12
    color16(00,127,00), //green 1
80002f36:	30 0a       	mov	r10,0
80002f38:	37 fb       	mov	r11,127
80002f3a:	14 9c       	mov	r12,r10
80002f3c:	f0 1f 00 b2 	mcall	80003204 <act7+0x2e0>
80002f40:	5c 8c       	casts.h	r12
80002f42:	50 6c       	stdsp	sp[0x18],r12
    color16(00,000,63), //blue 2
80002f44:	33 fa       	mov	r10,63
80002f46:	30 0b       	mov	r11,0
80002f48:	16 9c       	mov	r12,r11
80002f4a:	f0 1f 00 af 	mcall	80003204 <act7+0x2e0>
80002f4e:	5c 8c       	casts.h	r12
80002f50:	50 5c       	stdsp	sp[0x14],r12
    color16(63,127,63), //white 3
80002f52:	33 fa       	mov	r10,63
80002f54:	37 fb       	mov	r11,127
80002f56:	14 9c       	mov	r12,r10
80002f58:	f0 1f 00 ab 	mcall	80003204 <act7+0x2e0>
80002f5c:	5c 8c       	casts.h	r12
80002f5e:	50 0c       	stdsp	sp[0x0],r12
    color16(63,127,00), //yellow 4
80002f60:	30 0a       	mov	r10,0
80002f62:	37 fb       	mov	r11,127
80002f64:	33 fc       	mov	r12,63
80002f66:	f0 1f 00 a8 	mcall	80003204 <act7+0x2e0>
80002f6a:	5c 8c       	casts.h	r12
80002f6c:	50 4c       	stdsp	sp[0x10],r12
    color16(00,127,63), //cyan 5
80002f6e:	33 fa       	mov	r10,63
80002f70:	37 fb       	mov	r11,127
80002f72:	30 0c       	mov	r12,0
80002f74:	f0 1f 00 a4 	mcall	80003204 <act7+0x2e0>
80002f78:	5c 8c       	casts.h	r12
80002f7a:	50 3c       	stdsp	sp[0xc],r12
    color16(63,000,63), //magenta 6
80002f7c:	33 fa       	mov	r10,63
80002f7e:	30 0b       	mov	r11,0
80002f80:	14 9c       	mov	r12,r10
80002f82:	f0 1f 00 a1 	mcall	80003204 <act7+0x2e0>
80002f86:	5c 8c       	casts.h	r12
80002f88:	50 2c       	stdsp	sp[0x8],r12
    color16(63,127,63), //white 7
    color16(00,000,00) //black 8
80002f8a:	30 0a       	mov	r10,0
80002f8c:	14 9b       	mov	r11,r10
80002f8e:	14 9c       	mov	r12,r10
80002f90:	f0 1f 00 9d 	mcall	80003204 <act7+0x2e0>
80002f94:	5c 8c       	casts.h	r12
80002f96:	50 1c       	stdsp	sp[0x4],r12
  };
80002f98:	40 79       	lddsp	r9,sp[0x1c]
80002f9a:	fb 59 00 22 	st.h	sp[34],r9
80002f9e:	40 68       	lddsp	r8,sp[0x18]
80002fa0:	fb 58 00 24 	st.h	sp[36],r8
80002fa4:	40 59       	lddsp	r9,sp[0x14]
80002fa6:	fb 59 00 26 	st.h	sp[38],r9
80002faa:	40 08       	lddsp	r8,sp[0x0]
80002fac:	fb 58 00 28 	st.h	sp[40],r8
80002fb0:	40 49       	lddsp	r9,sp[0x10]
80002fb2:	fb 59 00 2a 	st.h	sp[42],r9
80002fb6:	40 38       	lddsp	r8,sp[0xc]
80002fb8:	fb 58 00 2c 	st.h	sp[44],r8
80002fbc:	40 29       	lddsp	r9,sp[0x8]
80002fbe:	fb 59 00 2e 	st.h	sp[46],r9
80002fc2:	40 08       	lddsp	r8,sp[0x0]
80002fc4:	fb 58 00 30 	st.h	sp[48],r8
80002fc8:	fb 5c 00 32 	st.h	sp[50],r12
80002fcc:	fa c5 ff de 	sub	r5,sp,-34
80002fd0:	30 07       	mov	r7,0
80002fd2:	0e 96       	mov	r6,r7

  uint16_t position = 0;
  for( int i=0 ; i<7 ; i++ ){
    if(i%3){
80002fd4:	e0 64 55 56 	mov	r4,21846
80002fd8:	ea 14 55 55 	orh	r4,0x5555
      et024006_DrawFilledRect(position, 0, 46, 120, colors[i] );
      position += 46;
    }else{
      et024006_DrawFilledRect(position, 0, 45, 120, colors[i] );
80002fdc:	37 83       	mov	r3,120
80002fde:	32 d1       	mov	r1,45
80002fe0:	0e 92       	mov	r2,r7
  };

  uint16_t position = 0;
  for( int i=0 ; i<7 ; i++ ){
    if(i%3){
      et024006_DrawFilledRect(position, 0, 46, 120, colors[i] );
80002fe2:	32 e0       	mov	r0,46
    color16(00,000,00) //black 8
  };

  uint16_t position = 0;
  for( int i=0 ; i<7 ; i++ ){
    if(i%3){
80002fe4:	ee 04 04 4a 	muls.d	r10,r7,r4
80002fe8:	ee 08 14 1f 	asr	r8,r7,0x1f
80002fec:	10 1b       	sub	r11,r8
80002fee:	f6 0b 00 1b 	add	r11,r11,r11<<0x1
80002ff2:	ee 0b 01 0b 	sub	r11,r7,r11
80002ff6:	c0 c0       	breq	8000300e <act7+0xea>
      et024006_DrawFilledRect(position, 0, 46, 120, colors[i] );
80002ff8:	8a 88       	ld.uh	r8,r5[0x0]
80002ffa:	06 99       	mov	r9,r3
80002ffc:	00 9a       	mov	r10,r0
80002ffe:	04 9b       	mov	r11,r2
80003000:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
80003004:	f0 1f 00 81 	mcall	80003208 <act7+0x2e4>
      position += 46;
80003008:	2d 26       	sub	r6,-46
8000300a:	5c 86       	casts.h	r6
8000300c:	c0 b8       	rjmp	80003022 <act7+0xfe>
    }else{
      et024006_DrawFilledRect(position, 0, 45, 120, colors[i] );
8000300e:	8a 88       	ld.uh	r8,r5[0x0]
80003010:	06 99       	mov	r9,r3
80003012:	02 9a       	mov	r10,r1
80003014:	04 9b       	mov	r11,r2
80003016:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
8000301a:	f0 1f 00 7c 	mcall	80003208 <act7+0x2e4>
      position += 45;
8000301e:	2d 36       	sub	r6,-45
80003020:	5c 86       	casts.h	r6
    color16(63,127,63), //white 7
    color16(00,000,00) //black 8
  };

  uint16_t position = 0;
  for( int i=0 ; i<7 ; i++ ){
80003022:	2f f7       	sub	r7,-1
80003024:	2f e5       	sub	r5,-2
80003026:	58 77       	cp.w	r7,7
80003028:	cd e1       	brne	80002fe4 <act7+0xc0>
8000302a:	30 06       	mov	r6,0
8000302c:	30 27       	mov	r7,2
      et024006_DrawFilledRect(position, 0, 45, 120, colors[i] );
      position += 45;
    }
  }
  for( int i=0 ; i<8 ; i++ ){
      et024006_DrawFilledRect(40 * i, 120, 40, 40, colors[ (i+2) % 9 ] );
8000302e:	e0 65 8e 39 	mov	r5,36409
80003032:	ea 15 38 e3 	orh	r5,0x38e3
80003036:	32 84       	mov	r4,40
80003038:	37 83       	mov	r3,120
8000303a:	ee 05 04 48 	muls.d	r8,r7,r5
8000303e:	a1 59       	asr	r9,0x1
80003040:	ee 08 14 1f 	asr	r8,r7,0x1f
80003044:	f2 08 01 08 	sub	r8,r9,r8
80003048:	f0 08 00 38 	add	r8,r8,r8<<0x3
8000304c:	ee 08 01 08 	sub	r8,r7,r8
80003050:	fa c9 ff cc 	sub	r9,sp,-52
80003054:	f2 08 00 18 	add	r8,r9,r8<<0x1
80003058:	f1 18 ff ee 	ld.uh	r8,r8[-18]
8000305c:	08 99       	mov	r9,r4
8000305e:	08 9a       	mov	r10,r4
80003060:	06 9b       	mov	r11,r3
80003062:	0c 9c       	mov	r12,r6
80003064:	f0 1f 00 69 	mcall	80003208 <act7+0x2e4>
80003068:	2f f7       	sub	r7,-1
8000306a:	2d 86       	sub	r6,-40
    }else{
      et024006_DrawFilledRect(position, 0, 45, 120, colors[i] );
      position += 45;
    }
  }
  for( int i=0 ; i<8 ; i++ ){
8000306c:	58 a7       	cp.w	r7,10
8000306e:	ce 61       	brne	8000303a <act7+0x116>
      et024006_DrawFilledRect(40 * i, 120, 40, 40, colors[ (i+2) % 9 ] );
  }
  draw_gradient_rectangle( 0, 160, 320, 10, color16(63,127,63), color16(00,000,00),0);
80003070:	40 17       	lddsp	r7,sp[0x4]
80003072:	5c 77       	castu.h	r7
80003074:	40 05       	lddsp	r5,sp[0x0]
80003076:	5c 75       	castu.h	r5
80003078:	30 06       	mov	r6,0
8000307a:	1a d6       	st.w	--sp,r6
8000307c:	1a d7       	st.w	--sp,r7
8000307e:	0a 98       	mov	r8,r5
80003080:	30 a9       	mov	r9,10
80003082:	e0 6a 01 40 	mov	r10,320
80003086:	e0 6b 00 a0 	mov	r11,160
8000308a:	0c 9c       	mov	r12,r6
8000308c:	f0 1f 00 60 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 0, 170, 160, 10, color16(00,000,00), color16(63,000,00),0);
80003090:	fb 12 00 26 	ld.uh	r2,sp[38]
80003094:	1a d6       	st.w	--sp,r6
80003096:	1a d2       	st.w	--sp,r2
80003098:	0e 98       	mov	r8,r7
8000309a:	30 a9       	mov	r9,10
8000309c:	e0 6a 00 a0 	mov	r10,160
800030a0:	e0 6b 00 aa 	mov	r11,170
800030a4:	0c 9c       	mov	r12,r6
800030a6:	f0 1f 00 5a 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 160, 170, 160, 10, color16(63,000,00), color16(63,127,63),0);
800030aa:	1a d6       	st.w	--sp,r6
800030ac:	1a d5       	st.w	--sp,r5
800030ae:	04 98       	mov	r8,r2
800030b0:	30 a9       	mov	r9,10
800030b2:	e0 6a 00 a0 	mov	r10,160
800030b6:	e0 6b 00 aa 	mov	r11,170
800030ba:	14 9c       	mov	r12,r10
800030bc:	f0 1f 00 54 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 0, 180, 160, 10, color16(00,000,00), color16(00,127,00),0);
800030c0:	fb 14 00 32 	ld.uh	r4,sp[50]
800030c4:	1a d6       	st.w	--sp,r6
800030c6:	1a d4       	st.w	--sp,r4
800030c8:	0e 98       	mov	r8,r7
800030ca:	30 a9       	mov	r9,10
800030cc:	e0 6a 00 a0 	mov	r10,160
800030d0:	e0 6b 00 b4 	mov	r11,180
800030d4:	0c 9c       	mov	r12,r6
800030d6:	f0 1f 00 4e 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 160, 180, 160, 10, color16(00,127,00), color16(63,127,63),0);
800030da:	2f 8d       	sub	sp,-32
800030dc:	1a d6       	st.w	--sp,r6
800030de:	1a d5       	st.w	--sp,r5
800030e0:	08 98       	mov	r8,r4
800030e2:	30 a9       	mov	r9,10
800030e4:	e0 6a 00 a0 	mov	r10,160
800030e8:	e0 6b 00 b4 	mov	r11,180
800030ec:	14 9c       	mov	r12,r10
800030ee:	f0 1f 00 48 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 0, 190, 160, 10, color16(00,000,00), color16(00,000,63),0);
800030f2:	fb 13 00 1e 	ld.uh	r3,sp[30]
800030f6:	1a d6       	st.w	--sp,r6
800030f8:	1a d3       	st.w	--sp,r3
800030fa:	0e 98       	mov	r8,r7
800030fc:	30 a9       	mov	r9,10
800030fe:	e0 6a 00 a0 	mov	r10,160
80003102:	e0 6b 00 be 	mov	r11,190
80003106:	0c 9c       	mov	r12,r6
80003108:	f0 1f 00 41 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 160, 190, 160, 10, color16(00,000,63), color16(63,127,63),0);
8000310c:	1a d6       	st.w	--sp,r6
8000310e:	1a d5       	st.w	--sp,r5
80003110:	06 98       	mov	r8,r3
80003112:	30 a9       	mov	r9,10
80003114:	e0 6a 00 a0 	mov	r10,160
80003118:	e0 6b 00 be 	mov	r11,190
8000311c:	14 9c       	mov	r12,r10
8000311e:	f0 1f 00 3c 	mcall	8000320c <act7+0x2e8>

  draw_gradient_rectangle( 0, 200, 160, 10, color16(63,000,00), color16(63,127,00),0);
80003122:	fb 17 00 2a 	ld.uh	r7,sp[42]
80003126:	1a d6       	st.w	--sp,r6
80003128:	1a d7       	st.w	--sp,r7
8000312a:	04 98       	mov	r8,r2
8000312c:	30 a9       	mov	r9,10
8000312e:	e0 6a 00 a0 	mov	r10,160
80003132:	e0 6b 00 c8 	mov	r11,200
80003136:	0c 9c       	mov	r12,r6
80003138:	f0 1f 00 35 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 160, 200, 160, 10, color16(63,127,00), color16(00,127,00),0);
8000313c:	2f 8d       	sub	sp,-32
8000313e:	1a d6       	st.w	--sp,r6
80003140:	1a d4       	st.w	--sp,r4
80003142:	0e 98       	mov	r8,r7
80003144:	30 a9       	mov	r9,10
80003146:	e0 6a 00 a0 	mov	r10,160
8000314a:	e0 6b 00 c8 	mov	r11,200
8000314e:	14 9c       	mov	r12,r10
80003150:	f0 1f 00 2f 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 0, 210, 160, 10, color16(00,127,00), color16(00,127,63),0);
80003154:	fb 17 00 16 	ld.uh	r7,sp[22]
80003158:	1a d6       	st.w	--sp,r6
8000315a:	1a d7       	st.w	--sp,r7
8000315c:	08 98       	mov	r8,r4
8000315e:	30 a9       	mov	r9,10
80003160:	e0 6a 00 a0 	mov	r10,160
80003164:	e0 6b 00 d2 	mov	r11,210
80003168:	0c 9c       	mov	r12,r6
8000316a:	f0 1f 00 29 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 160, 210, 160, 10, color16(00,127,63), color16(00,000,63),0);
8000316e:	1a d6       	st.w	--sp,r6
80003170:	1a d3       	st.w	--sp,r3
80003172:	0e 98       	mov	r8,r7
80003174:	30 a9       	mov	r9,10
80003176:	e0 6a 00 a0 	mov	r10,160
8000317a:	e0 6b 00 d2 	mov	r11,210
8000317e:	14 9c       	mov	r12,r10
80003180:	f0 1f 00 23 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 0, 220, 160, 10, color16(00,000,63), color16(63,000,63),0);
80003184:	fb 17 00 22 	ld.uh	r7,sp[34]
80003188:	1a d6       	st.w	--sp,r6
8000318a:	1a d7       	st.w	--sp,r7
8000318c:	06 98       	mov	r8,r3
8000318e:	30 a9       	mov	r9,10
80003190:	e0 6a 00 a0 	mov	r10,160
80003194:	e0 6b 00 dc 	mov	r11,220
80003198:	0c 9c       	mov	r12,r6
8000319a:	f0 1f 00 1d 	mcall	8000320c <act7+0x2e8>
  draw_gradient_rectangle( 160, 220, 160, 10, color16(63,000,63), color16(63,000,00),0);
8000319e:	2f 8d       	sub	sp,-32
800031a0:	1a d6       	st.w	--sp,r6
800031a2:	1a d2       	st.w	--sp,r2
800031a4:	0e 98       	mov	r8,r7
800031a6:	30 a9       	mov	r9,10
800031a8:	e0 6a 00 a0 	mov	r10,160
800031ac:	e0 6b 00 dc 	mov	r11,220
800031b0:	14 9c       	mov	r12,r10
800031b2:	f0 1f 00 17 	mcall	8000320c <act7+0x2e8>
800031b6:	30 47       	mov	r7,4
800031b8:	2f ed       	sub	sp,-8
  for( int i=0 ; i<16 ; i++ ){
      et024006_DrawFilledRect(20 * i, 230, 20, 10, colors[ (i+4) % 9 ] );
800031ba:	e0 65 8e 39 	mov	r5,36409
800031be:	ea 15 38 e3 	orh	r5,0x38e3
800031c2:	30 a4       	mov	r4,10
800031c4:	31 43       	mov	r3,20
800031c6:	e0 62 00 e6 	mov	r2,230
800031ca:	ee 05 04 48 	muls.d	r8,r7,r5
800031ce:	f2 08 14 01 	asr	r8,r9,0x1
800031d2:	ee 09 14 1f 	asr	r9,r7,0x1f
800031d6:	12 18       	sub	r8,r9
800031d8:	f0 08 00 38 	add	r8,r8,r8<<0x3
800031dc:	ee 08 01 08 	sub	r8,r7,r8
800031e0:	fa c9 ff cc 	sub	r9,sp,-52
800031e4:	f2 08 00 18 	add	r8,r9,r8<<0x1
800031e8:	f1 18 ff ee 	ld.uh	r8,r8[-18]
800031ec:	08 99       	mov	r9,r4
800031ee:	06 9a       	mov	r10,r3
800031f0:	04 9b       	mov	r11,r2
800031f2:	0c 9c       	mov	r12,r6
800031f4:	f0 1f 00 05 	mcall	80003208 <act7+0x2e4>
800031f8:	2f f7       	sub	r7,-1
800031fa:	2e c6       	sub	r6,-20
  draw_gradient_rectangle( 160, 200, 160, 10, color16(63,127,00), color16(00,127,00),0);
  draw_gradient_rectangle( 0, 210, 160, 10, color16(00,127,00), color16(00,127,63),0);
  draw_gradient_rectangle( 160, 210, 160, 10, color16(00,127,63), color16(00,000,63),0);
  draw_gradient_rectangle( 0, 220, 160, 10, color16(00,000,63), color16(63,000,63),0);
  draw_gradient_rectangle( 160, 220, 160, 10, color16(63,000,63), color16(63,000,00),0);
  for( int i=0 ; i<16 ; i++ ){
800031fc:	59 47       	cp.w	r7,20
800031fe:	ce 61       	brne	800031ca <act7+0x2a6>
      et024006_DrawFilledRect(20 * i, 230, 20, 10, colors[ (i+4) % 9 ] );
  }
}
80003200:	2f 3d       	sub	sp,-52
80003202:	d8 32       	popm	r0-r7,pc
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	2d b4       	sub	r4,-37
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	24 3c       	sub	r12,67
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	2d c0       	sub	r0,-36

80003210 <main>:

}

// Main function
int main(void)
{
80003210:	eb cd 40 c0 	pushm	r6-r7,lr
80003214:	20 4d       	sub	sp,16
  U32 i;
  // Set CPU and PBA clock
  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80003216:	30 3a       	mov	r10,3
80003218:	e0 6b 1b 00 	mov	r11,6912
8000321c:	ea 1b 00 b7 	orh	r11,0xb7
80003220:	30 0c       	mov	r12,0
80003222:	f0 1f 00 46 	mcall	80003338 <main+0x128>
  gpio_enable_gpio_pin(LED0_GPIO);
80003226:	33 bc       	mov	r12,59
80003228:	f0 1f 00 45 	mcall	8000333c <main+0x12c>
  gpio_enable_gpio_pin(LED1_GPIO);
8000322c:	33 cc       	mov	r12,60
8000322e:	f0 1f 00 44 	mcall	8000333c <main+0x12c>
  gpio_enable_gpio_pin(LED2_GPIO);
80003232:	30 5c       	mov	r12,5
80003234:	f0 1f 00 42 	mcall	8000333c <main+0x12c>
  gpio_enable_gpio_pin(LED3_GPIO);
80003238:	30 6c       	mov	r12,6
8000323a:	f0 1f 00 41 	mcall	8000333c <main+0x12c>
  et024006_Init( FOSC0, FOSC0 );
8000323e:	e0 6b 1b 00 	mov	r11,6912
80003242:	ea 1b 00 b7 	orh	r11,0xb7
80003246:	16 9c       	mov	r12,r11
80003248:	f0 1f 00 3e 	mcall	80003340 <main+0x130>
  pwm_opt_t opt = {
    .diva = 0,
    .divb = 0,
    .prea = 0,
    .preb = 0
  };
8000324c:	30 08       	mov	r8,0
8000324e:	50 08       	stdsp	sp[0x0],r8
80003250:	50 18       	stdsp	sp[0x4],r8
80003252:	50 28       	stdsp	sp[0x8],r8
80003254:	50 38       	stdsp	sp[0xc],r8
   * Chosen MCK_DIV_2
   * CPRD = 12MHz / (60kHz * 2) = 100
   *
   * The duty cycle is 100% (CPRD = CDTY)
   * */
  pwm_init(&opt);
80003256:	1a 9c       	mov	r12,sp
80003258:	f0 1f 00 3b 	mcall	80003344 <main+0x134>
  pwm_channel6.CMR.calg = PWM_MODE_LEFT_ALIGNED;
8000325c:	4b bb       	lddpc	r11,80003348 <main+0x138>
8000325e:	76 08       	ld.w	r8,r11[0x0]
  pwm_channel6.CMR.cpol = PWM_POLARITY_HIGH; //PWM_POLARITY_LOW;//PWM_POLARITY_HIGH;
  pwm_channel6.CMR.cpd = PWM_UPDATE_DUTY;
80003260:	e0 18 f8 ff 	andl	r8,0xf8ff
  pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
80003264:	a9 b8       	sbr	r8,0x9
80003266:	30 19       	mov	r9,1
80003268:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
8000326c:	97 08       	st.w	r11[0x0],r8

  pwm_channel_init(6, &pwm_channel6);
8000326e:	30 6c       	mov	r12,6
80003270:	f0 1f 00 37 	mcall	8000334c <main+0x13c>
  pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
80003274:	34 0c       	mov	r12,64
80003276:	f0 1f 00 37 	mcall	80003350 <main+0x140>
  /* PWM is fed by PBA bus clock which is by default the same
   * as the CPU speed. We set a 0 duty cycle and thus keep the
   * display black*/
  tft_bl_init();
  /* Lets do a nice fade in by increasing the duty cycle */
  while(pwm_channel6.cdty < pwm_channel6.cprd)
8000327a:	4b 47       	lddpc	r7,80003348 <main+0x138>
  {
    pwm_channel6.cdty++;
    pwm_channel6.cupd = pwm_channel6.cdty;
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
8000327c:	30 66       	mov	r6,6
8000327e:	c1 c8       	rjmp	800032b6 <main+0xa6>
   * display black*/
  tft_bl_init();
  /* Lets do a nice fade in by increasing the duty cycle */
  while(pwm_channel6.cdty < pwm_channel6.cprd)
  {
    pwm_channel6.cdty++;
80003280:	2f f8       	sub	r8,-1
80003282:	8f 18       	st.w	r7[0x4],r8
    pwm_channel6.cupd = pwm_channel6.cdty;
80003284:	8f 48       	st.w	r7[0x10],r8
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
80003286:	0e 9b       	mov	r11,r7
80003288:	0c 9c       	mov	r12,r6
8000328a:	f0 1f 00 33 	mcall	80003354 <main+0x144>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000328e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003292:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003296:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000329a:	14 38       	cp.w	r8,r10
8000329c:	e0 88 00 08 	brls	800032ac <main+0x9c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800032a0:	12 38       	cp.w	r8,r9
800032a2:	fe 98 ff fa 	brls	80003296 <main+0x86>
800032a6:	12 3a       	cp.w	r10,r9
800032a8:	c0 73       	brcs	800032b6 <main+0xa6>
800032aa:	cf 6b       	rjmp	80003296 <main+0x86>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800032ac:	12 38       	cp.w	r8,r9
800032ae:	e0 8b 00 04 	brhi	800032b6 <main+0xa6>
800032b2:	12 3a       	cp.w	r10,r9
800032b4:	cf 12       	brcc	80003296 <main+0x86>
  /* PWM is fed by PBA bus clock which is by default the same
   * as the CPU speed. We set a 0 duty cycle and thus keep the
   * display black*/
  tft_bl_init();
  /* Lets do a nice fade in by increasing the duty cycle */
  while(pwm_channel6.cdty < pwm_channel6.cprd)
800032b6:	6e 18       	ld.w	r8,r7[0x4]
800032b8:	6e 29       	ld.w	r9,r7[0x8]
800032ba:	12 38       	cp.w	r8,r9
800032bc:	ce 23       	brcs	80003280 <main+0x70>
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
    delay_ms(1);
  }
  // Clear the display i.e. make it black
  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
800032be:	30 08       	mov	r8,0
800032c0:	e0 69 00 f0 	mov	r9,240
800032c4:	e0 6a 01 40 	mov	r10,320
800032c8:	10 9b       	mov	r11,r8
800032ca:	10 9c       	mov	r12,r8
800032cc:	f0 1f 00 23 	mcall	80003358 <main+0x148>
  // Draw the background AVR32 logo.
  // et024006_PutPixmap(avr32_logo, 320, 0, 0, 0, 0, 320, 240);
  // Draw a crossed square.
  et024006_DrawHorizLine(10, 50, 20, BLACK);
800032d0:	30 09       	mov	r9,0
800032d2:	31 4a       	mov	r10,20
800032d4:	33 2b       	mov	r11,50
800032d6:	30 ac       	mov	r12,10
800032d8:	f0 1f 00 21 	mcall	8000335c <main+0x14c>
  et024006_DrawVertLine(10, 50, 20, BLACK);
800032dc:	30 09       	mov	r9,0
800032de:	31 4a       	mov	r10,20
800032e0:	33 2b       	mov	r11,50
800032e2:	30 ac       	mov	r12,10
800032e4:	f0 1f 00 1f 	mcall	80003360 <main+0x150>
  et024006_DrawHorizLine(10, 70, 20, BLACK);
800032e8:	30 09       	mov	r9,0
800032ea:	31 4a       	mov	r10,20
800032ec:	34 6b       	mov	r11,70
800032ee:	30 ac       	mov	r12,10
800032f0:	f0 1f 00 1b 	mcall	8000335c <main+0x14c>
  et024006_DrawVertLine(30, 50, 20, BLACK);
800032f4:	30 09       	mov	r9,0
800032f6:	31 4a       	mov	r10,20
800032f8:	33 2b       	mov	r11,50
800032fa:	31 ec       	mov	r12,30
800032fc:	f0 1f 00 19 	mcall	80003360 <main+0x150>
  et024006_DrawLine(10, 50, 30, 70, BLACK);
80003300:	30 08       	mov	r8,0
80003302:	34 69       	mov	r9,70
80003304:	31 ea       	mov	r10,30
80003306:	33 2b       	mov	r11,50
80003308:	30 ac       	mov	r12,10
8000330a:	f0 1f 00 17 	mcall	80003364 <main+0x154>
  et024006_DrawLine(30, 50, 10, 70, BLACK);
8000330e:	30 08       	mov	r8,0
80003310:	34 69       	mov	r9,70
80003312:	30 aa       	mov	r10,10
80003314:	33 2b       	mov	r11,50
80003316:	31 ec       	mov	r12,30
80003318:	f0 1f 00 13 	mcall	80003364 <main+0x154>


  act7();
8000331c:	f0 1f 00 13 	mcall	80003368 <main+0x158>
  // Display text.
  et024006_PrintString(
80003320:	3f f8       	mov	r8,-1
80003322:	1a d8       	st.w	--sp,r8
80003324:	31 f8       	mov	r8,31
80003326:	30 09       	mov	r9,0
80003328:	12 9a       	mov	r10,r9
8000332a:	49 1b       	lddpc	r11,8000336c <main+0x15c>
8000332c:	49 1c       	lddpc	r12,80003370 <main+0x160>
8000332e:	f0 1f 00 12 	mcall	80003374 <main+0x164>
80003332:	2f fd       	sub	sp,-4
80003334:	c0 08       	rjmp	80003334 <main+0x124>
80003336:	00 00       	add	r0,r0
80003338:	80 00       	ld.sh	r0,r0[0x0]
8000333a:	2c a4       	sub	r4,-54
8000333c:	80 00       	ld.sh	r0,r0[0x0]
8000333e:	2b 64       	sub	r4,-74
80003340:	80 00       	ld.sh	r0,r0[0x0]
80003342:	25 20       	sub	r0,82
80003344:	80 00       	ld.sh	r0,r0[0x0]
80003346:	2d 30       	sub	r0,-45
80003348:	00 00       	add	r0,r0
8000334a:	00 08       	add	r8,r0
8000334c:	80 00       	ld.sh	r0,r0[0x0]
8000334e:	2c c0       	sub	r0,-52
80003350:	80 00       	ld.sh	r0,r0[0x0]
80003352:	2c f6       	sub	r6,-49
80003354:	80 00       	ld.sh	r0,r0[0x0]
80003356:	2d 08       	sub	r8,-48
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	24 3c       	sub	r12,67
8000335c:	80 00       	ld.sh	r0,r0[0x0]
8000335e:	24 98       	sub	r8,73
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	24 7c       	sub	r12,71
80003364:	80 00       	ld.sh	r0,r0[0x0]
80003366:	22 e4       	sub	r4,46
80003368:	80 00       	ld.sh	r0,r0[0x0]
8000336a:	2f 24       	sub	r4,-14
8000336c:	80 00       	ld.sh	r0,r0[0x0]
8000336e:	38 00       	mov	r0,-128
80003370:	80 00       	ld.sh	r0,r0[0x0]
80003372:	3c 48       	mov	r8,-60
80003374:	80 00       	ld.sh	r0,r0[0x0]
80003376:	20 a8       	sub	r8,10

80003378 <__avr32_udiv64>:
80003378:	d4 31       	pushm	r0-r7,lr
8000337a:	1a 97       	mov	r7,sp
8000337c:	20 3d       	sub	sp,12
8000337e:	10 9c       	mov	r12,r8
80003380:	12 9e       	mov	lr,r9
80003382:	14 93       	mov	r3,r10
80003384:	58 09       	cp.w	r9,0
80003386:	e0 81 00 bd 	brne	80003500 <__avr32_udiv64+0x188>
8000338a:	16 38       	cp.w	r8,r11
8000338c:	e0 88 00 40 	brls	8000340c <__avr32_udiv64+0x94>
80003390:	f0 08 12 00 	clz	r8,r8
80003394:	c0 d0       	breq	800033ae <__avr32_udiv64+0x36>
80003396:	f6 08 09 4b 	lsl	r11,r11,r8
8000339a:	f0 09 11 20 	rsub	r9,r8,32
8000339e:	f8 08 09 4c 	lsl	r12,r12,r8
800033a2:	f4 09 0a 49 	lsr	r9,r10,r9
800033a6:	f4 08 09 43 	lsl	r3,r10,r8
800033aa:	f3 eb 10 0b 	or	r11,r9,r11
800033ae:	f8 0e 16 10 	lsr	lr,r12,0x10
800033b2:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800033b6:	f6 0e 0d 00 	divu	r0,r11,lr
800033ba:	e6 0b 16 10 	lsr	r11,r3,0x10
800033be:	00 99       	mov	r9,r0
800033c0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800033c4:	e0 0a 02 48 	mul	r8,r0,r10
800033c8:	10 3b       	cp.w	r11,r8
800033ca:	c0 a2       	brcc	800033de <__avr32_udiv64+0x66>
800033cc:	20 19       	sub	r9,1
800033ce:	18 0b       	add	r11,r12
800033d0:	18 3b       	cp.w	r11,r12
800033d2:	c0 63       	brcs	800033de <__avr32_udiv64+0x66>
800033d4:	10 3b       	cp.w	r11,r8
800033d6:	f7 b9 03 01 	sublo	r9,1
800033da:	f7 dc e3 0b 	addcs	r11,r11,r12
800033de:	f6 08 01 01 	sub	r1,r11,r8
800033e2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800033e6:	e2 0e 0d 00 	divu	r0,r1,lr
800033ea:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800033ee:	00 98       	mov	r8,r0
800033f0:	e0 0a 02 4a 	mul	r10,r0,r10
800033f4:	14 33       	cp.w	r3,r10
800033f6:	c0 82       	brcc	80003406 <__avr32_udiv64+0x8e>
800033f8:	20 18       	sub	r8,1
800033fa:	18 03       	add	r3,r12
800033fc:	18 33       	cp.w	r3,r12
800033fe:	c0 43       	brcs	80003406 <__avr32_udiv64+0x8e>
80003400:	14 33       	cp.w	r3,r10
80003402:	f7 b8 03 01 	sublo	r8,1
80003406:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000340a:	cd f8       	rjmp	800035c8 <__avr32_udiv64+0x250>
8000340c:	58 08       	cp.w	r8,0
8000340e:	c0 51       	brne	80003418 <__avr32_udiv64+0xa0>
80003410:	30 19       	mov	r9,1
80003412:	f2 08 0d 08 	divu	r8,r9,r8
80003416:	10 9c       	mov	r12,r8
80003418:	f8 06 12 00 	clz	r6,r12
8000341c:	c0 41       	brne	80003424 <__avr32_udiv64+0xac>
8000341e:	18 1b       	sub	r11,r12
80003420:	30 19       	mov	r9,1
80003422:	c4 08       	rjmp	800034a2 <__avr32_udiv64+0x12a>
80003424:	ec 01 11 20 	rsub	r1,r6,32
80003428:	f4 01 0a 49 	lsr	r9,r10,r1
8000342c:	f8 06 09 4c 	lsl	r12,r12,r6
80003430:	f6 06 09 48 	lsl	r8,r11,r6
80003434:	f6 01 0a 41 	lsr	r1,r11,r1
80003438:	f3 e8 10 08 	or	r8,r9,r8
8000343c:	f8 03 16 10 	lsr	r3,r12,0x10
80003440:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80003444:	e2 03 0d 00 	divu	r0,r1,r3
80003448:	f0 0b 16 10 	lsr	r11,r8,0x10
8000344c:	00 9e       	mov	lr,r0
8000344e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003452:	e0 05 02 49 	mul	r9,r0,r5
80003456:	12 3b       	cp.w	r11,r9
80003458:	c0 a2       	brcc	8000346c <__avr32_udiv64+0xf4>
8000345a:	20 1e       	sub	lr,1
8000345c:	18 0b       	add	r11,r12
8000345e:	18 3b       	cp.w	r11,r12
80003460:	c0 63       	brcs	8000346c <__avr32_udiv64+0xf4>
80003462:	12 3b       	cp.w	r11,r9
80003464:	f7 be 03 01 	sublo	lr,1
80003468:	f7 dc e3 0b 	addcs	r11,r11,r12
8000346c:	12 1b       	sub	r11,r9
8000346e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003472:	f6 03 0d 02 	divu	r2,r11,r3
80003476:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000347a:	04 99       	mov	r9,r2
8000347c:	e4 05 02 4b 	mul	r11,r2,r5
80003480:	16 38       	cp.w	r8,r11
80003482:	c0 a2       	brcc	80003496 <__avr32_udiv64+0x11e>
80003484:	20 19       	sub	r9,1
80003486:	18 08       	add	r8,r12
80003488:	18 38       	cp.w	r8,r12
8000348a:	c0 63       	brcs	80003496 <__avr32_udiv64+0x11e>
8000348c:	16 38       	cp.w	r8,r11
8000348e:	f7 b9 03 01 	sublo	r9,1
80003492:	f1 dc e3 08 	addcs	r8,r8,r12
80003496:	f4 06 09 43 	lsl	r3,r10,r6
8000349a:	f0 0b 01 0b 	sub	r11,r8,r11
8000349e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800034a2:	f8 06 16 10 	lsr	r6,r12,0x10
800034a6:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800034aa:	f6 06 0d 00 	divu	r0,r11,r6
800034ae:	e6 0b 16 10 	lsr	r11,r3,0x10
800034b2:	00 9a       	mov	r10,r0
800034b4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800034b8:	e0 0e 02 48 	mul	r8,r0,lr
800034bc:	10 3b       	cp.w	r11,r8
800034be:	c0 a2       	brcc	800034d2 <__avr32_udiv64+0x15a>
800034c0:	20 1a       	sub	r10,1
800034c2:	18 0b       	add	r11,r12
800034c4:	18 3b       	cp.w	r11,r12
800034c6:	c0 63       	brcs	800034d2 <__avr32_udiv64+0x15a>
800034c8:	10 3b       	cp.w	r11,r8
800034ca:	f7 ba 03 01 	sublo	r10,1
800034ce:	f7 dc e3 0b 	addcs	r11,r11,r12
800034d2:	f6 08 01 01 	sub	r1,r11,r8
800034d6:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800034da:	e2 06 0d 00 	divu	r0,r1,r6
800034de:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800034e2:	00 98       	mov	r8,r0
800034e4:	e0 0e 02 4b 	mul	r11,r0,lr
800034e8:	16 33       	cp.w	r3,r11
800034ea:	c0 82       	brcc	800034fa <__avr32_udiv64+0x182>
800034ec:	20 18       	sub	r8,1
800034ee:	18 03       	add	r3,r12
800034f0:	18 33       	cp.w	r3,r12
800034f2:	c0 43       	brcs	800034fa <__avr32_udiv64+0x182>
800034f4:	16 33       	cp.w	r3,r11
800034f6:	f7 b8 03 01 	sublo	r8,1
800034fa:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800034fe:	c6 98       	rjmp	800035d0 <__avr32_udiv64+0x258>
80003500:	16 39       	cp.w	r9,r11
80003502:	e0 8b 00 65 	brhi	800035cc <__avr32_udiv64+0x254>
80003506:	f2 09 12 00 	clz	r9,r9
8000350a:	c0 b1       	brne	80003520 <__avr32_udiv64+0x1a8>
8000350c:	10 3a       	cp.w	r10,r8
8000350e:	5f 2a       	srhs	r10
80003510:	1c 3b       	cp.w	r11,lr
80003512:	5f b8       	srhi	r8
80003514:	10 4a       	or	r10,r8
80003516:	f2 0a 18 00 	cp.b	r10,r9
8000351a:	c5 90       	breq	800035cc <__avr32_udiv64+0x254>
8000351c:	30 18       	mov	r8,1
8000351e:	c5 98       	rjmp	800035d0 <__avr32_udiv64+0x258>
80003520:	f0 09 09 46 	lsl	r6,r8,r9
80003524:	f2 03 11 20 	rsub	r3,r9,32
80003528:	fc 09 09 4e 	lsl	lr,lr,r9
8000352c:	f0 03 0a 48 	lsr	r8,r8,r3
80003530:	f6 09 09 4c 	lsl	r12,r11,r9
80003534:	f4 03 0a 42 	lsr	r2,r10,r3
80003538:	ef 46 ff f4 	st.w	r7[-12],r6
8000353c:	f6 03 0a 43 	lsr	r3,r11,r3
80003540:	18 42       	or	r2,r12
80003542:	f1 ee 10 0c 	or	r12,r8,lr
80003546:	f8 01 16 10 	lsr	r1,r12,0x10
8000354a:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000354e:	e6 01 0d 04 	divu	r4,r3,r1
80003552:	e4 03 16 10 	lsr	r3,r2,0x10
80003556:	08 9e       	mov	lr,r4
80003558:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000355c:	e8 06 02 48 	mul	r8,r4,r6
80003560:	10 33       	cp.w	r3,r8
80003562:	c0 a2       	brcc	80003576 <__avr32_udiv64+0x1fe>
80003564:	20 1e       	sub	lr,1
80003566:	18 03       	add	r3,r12
80003568:	18 33       	cp.w	r3,r12
8000356a:	c0 63       	brcs	80003576 <__avr32_udiv64+0x1fe>
8000356c:	10 33       	cp.w	r3,r8
8000356e:	f7 be 03 01 	sublo	lr,1
80003572:	e7 dc e3 03 	addcs	r3,r3,r12
80003576:	10 13       	sub	r3,r8
80003578:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000357c:	e6 01 0d 00 	divu	r0,r3,r1
80003580:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003584:	00 98       	mov	r8,r0
80003586:	e0 06 02 46 	mul	r6,r0,r6
8000358a:	0c 3b       	cp.w	r11,r6
8000358c:	c0 a2       	brcc	800035a0 <__avr32_udiv64+0x228>
8000358e:	20 18       	sub	r8,1
80003590:	18 0b       	add	r11,r12
80003592:	18 3b       	cp.w	r11,r12
80003594:	c0 63       	brcs	800035a0 <__avr32_udiv64+0x228>
80003596:	0c 3b       	cp.w	r11,r6
80003598:	f7 dc e3 0b 	addcs	r11,r11,r12
8000359c:	f7 b8 03 01 	sublo	r8,1
800035a0:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800035a4:	ee f4 ff f4 	ld.w	r4,r7[-12]
800035a8:	0c 1b       	sub	r11,r6
800035aa:	f0 04 06 42 	mulu.d	r2,r8,r4
800035ae:	06 95       	mov	r5,r3
800035b0:	16 35       	cp.w	r5,r11
800035b2:	e0 8b 00 0a 	brhi	800035c6 <__avr32_udiv64+0x24e>
800035b6:	5f 0b       	sreq	r11
800035b8:	f4 09 09 49 	lsl	r9,r10,r9
800035bc:	12 32       	cp.w	r2,r9
800035be:	5f b9       	srhi	r9
800035c0:	f7 e9 00 09 	and	r9,r11,r9
800035c4:	c0 60       	breq	800035d0 <__avr32_udiv64+0x258>
800035c6:	20 18       	sub	r8,1
800035c8:	30 09       	mov	r9,0
800035ca:	c0 38       	rjmp	800035d0 <__avr32_udiv64+0x258>
800035cc:	30 09       	mov	r9,0
800035ce:	12 98       	mov	r8,r9
800035d0:	10 9a       	mov	r10,r8
800035d2:	12 93       	mov	r3,r9
800035d4:	10 92       	mov	r2,r8
800035d6:	12 9b       	mov	r11,r9
800035d8:	2f dd       	sub	sp,-12
800035da:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80003600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80003600:	c0 08       	rjmp	80003600 <_evba>
	...

80003604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80003604:	c0 08       	rjmp	80003604 <_handle_TLB_Multiple_Hit>
	...

80003608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80003608:	c0 08       	rjmp	80003608 <_handle_Bus_Error_Data_Fetch>
	...

8000360c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000360c:	c0 08       	rjmp	8000360c <_handle_Bus_Error_Instruction_Fetch>
	...

80003610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80003610:	c0 08       	rjmp	80003610 <_handle_NMI>
	...

80003614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80003614:	c0 08       	rjmp	80003614 <_handle_Instruction_Address>
	...

80003618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80003618:	c0 08       	rjmp	80003618 <_handle_ITLB_Protection>
	...

8000361c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000361c:	c0 08       	rjmp	8000361c <_handle_Breakpoint>
	...

80003620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80003620:	c0 08       	rjmp	80003620 <_handle_Illegal_Opcode>
	...

80003624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80003624:	c0 08       	rjmp	80003624 <_handle_Unimplemented_Instruction>
	...

80003628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80003628:	c0 08       	rjmp	80003628 <_handle_Privilege_Violation>
	...

8000362c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000362c:	c0 08       	rjmp	8000362c <_handle_Floating_Point>
	...

80003630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80003630:	c0 08       	rjmp	80003630 <_handle_Coprocessor_Absent>
	...

80003634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80003634:	c0 08       	rjmp	80003634 <_handle_Data_Address_Read>
	...

80003638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80003638:	c0 08       	rjmp	80003638 <_handle_Data_Address_Write>
	...

8000363c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000363c:	c0 08       	rjmp	8000363c <_handle_DTLB_Protection_Read>
	...

80003640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80003640:	c0 08       	rjmp	80003640 <_handle_DTLB_Protection_Write>
	...

80003644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80003644:	c0 08       	rjmp	80003644 <_handle_DTLB_Modified>
	...

80003650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80003650:	c0 08       	rjmp	80003650 <_handle_ITLB_Miss>
	...

80003660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80003660:	c0 08       	rjmp	80003660 <_handle_DTLB_Miss_Read>
	...

80003670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80003670:	c0 08       	rjmp	80003670 <_handle_DTLB_Miss_Write>
	...

80003700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80003700:	c0 08       	rjmp	80003700 <_handle_Supervisor_Call>
80003702:	d7 03       	nop

80003704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003704:	30 0c       	mov	r12,0
80003706:	fe b0 fa 57 	rcall	80002bb4 <_get_interrupt_handler>
8000370a:	58 0c       	cp.w	r12,0
8000370c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003710:	d6 03       	rete

80003712 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003712:	30 1c       	mov	r12,1
80003714:	fe b0 fa 50 	rcall	80002bb4 <_get_interrupt_handler>
80003718:	58 0c       	cp.w	r12,0
8000371a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000371e:	d6 03       	rete

80003720 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003720:	30 2c       	mov	r12,2
80003722:	fe b0 fa 49 	rcall	80002bb4 <_get_interrupt_handler>
80003726:	58 0c       	cp.w	r12,0
80003728:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000372c:	d6 03       	rete

8000372e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000372e:	30 3c       	mov	r12,3
80003730:	fe b0 fa 42 	rcall	80002bb4 <_get_interrupt_handler>
80003734:	58 0c       	cp.w	r12,0
80003736:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000373a:	d6 03       	rete
8000373c:	d7 03       	nop
8000373e:	d7 03       	nop
80003740:	d7 03       	nop
80003742:	d7 03       	nop
80003744:	d7 03       	nop
80003746:	d7 03       	nop
80003748:	d7 03       	nop
8000374a:	d7 03       	nop
8000374c:	d7 03       	nop
8000374e:	d7 03       	nop
80003750:	d7 03       	nop
80003752:	d7 03       	nop
80003754:	d7 03       	nop
80003756:	d7 03       	nop
80003758:	d7 03       	nop
8000375a:	d7 03       	nop
8000375c:	d7 03       	nop
8000375e:	d7 03       	nop
80003760:	d7 03       	nop
80003762:	d7 03       	nop
80003764:	d7 03       	nop
80003766:	d7 03       	nop
80003768:	d7 03       	nop
8000376a:	d7 03       	nop
8000376c:	d7 03       	nop
8000376e:	d7 03       	nop
80003770:	d7 03       	nop
80003772:	d7 03       	nop
80003774:	d7 03       	nop
80003776:	d7 03       	nop
80003778:	d7 03       	nop
8000377a:	d7 03       	nop
8000377c:	d7 03       	nop
8000377e:	d7 03       	nop
80003780:	d7 03       	nop
80003782:	d7 03       	nop
80003784:	d7 03       	nop
80003786:	d7 03       	nop
80003788:	d7 03       	nop
8000378a:	d7 03       	nop
8000378c:	d7 03       	nop
8000378e:	d7 03       	nop
80003790:	d7 03       	nop
80003792:	d7 03       	nop
80003794:	d7 03       	nop
80003796:	d7 03       	nop
80003798:	d7 03       	nop
8000379a:	d7 03       	nop
8000379c:	d7 03       	nop
8000379e:	d7 03       	nop
800037a0:	d7 03       	nop
800037a2:	d7 03       	nop
800037a4:	d7 03       	nop
800037a6:	d7 03       	nop
800037a8:	d7 03       	nop
800037aa:	d7 03       	nop
800037ac:	d7 03       	nop
800037ae:	d7 03       	nop
800037b0:	d7 03       	nop
800037b2:	d7 03       	nop
800037b4:	d7 03       	nop
800037b6:	d7 03       	nop
800037b8:	d7 03       	nop
800037ba:	d7 03       	nop
800037bc:	d7 03       	nop
800037be:	d7 03       	nop
800037c0:	d7 03       	nop
800037c2:	d7 03       	nop
800037c4:	d7 03       	nop
800037c6:	d7 03       	nop
800037c8:	d7 03       	nop
800037ca:	d7 03       	nop
800037cc:	d7 03       	nop
800037ce:	d7 03       	nop
800037d0:	d7 03       	nop
800037d2:	d7 03       	nop
800037d4:	d7 03       	nop
800037d6:	d7 03       	nop
800037d8:	d7 03       	nop
800037da:	d7 03       	nop
800037dc:	d7 03       	nop
800037de:	d7 03       	nop
800037e0:	d7 03       	nop
800037e2:	d7 03       	nop
800037e4:	d7 03       	nop
800037e6:	d7 03       	nop
800037e8:	d7 03       	nop
800037ea:	d7 03       	nop
800037ec:	d7 03       	nop
800037ee:	d7 03       	nop
800037f0:	d7 03       	nop
800037f2:	d7 03       	nop
800037f4:	d7 03       	nop
800037f6:	d7 03       	nop
800037f8:	d7 03       	nop
800037fa:	d7 03       	nop
800037fc:	d7 03       	nop
800037fe:	d7 03       	nop
