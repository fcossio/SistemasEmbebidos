
Sort.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021c0  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004200  80004200  00004600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000004f0  80004400  80004400  00004800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000052c  00000008  800048f0  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000534  80004e1c  00005534  2**0
                  ALLOC
  8 .bss          00000148  00000538  00000538  00000000  2**2
                  ALLOC
  9 .heap         0000e980  00000680  00000680  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00005534  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000008c8  00000000  00000000  00005568  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001344  00000000  00000000  00005e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001044c  00000000  00000000  00007174  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002980  00000000  00000000  000175c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007550  00000000  00000000  00019f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000013a8  00000000  00000000  00021490  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002f3e  00000000  00000000  00022838  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000429e  00000000  00000000  00025776  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00862023  00000000  00000000  00029a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000ae8  00000000  00000000  0088ba38  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d0 54 	sub	pc,pc,-12204

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f0 58 	sub	pc,pc,-4008

Disassembly of section .text:

80002008 <tc_init_waveform>:
80002008:	76 09       	ld.w	r9,r11[0x0]
8000200a:	58 29       	cp.w	r9,2


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000200c:	e0 88 00 03 	brls	80002012 <tc_init_waveform+0xa>
80002010:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002012:	76 18       	ld.w	r8,r11[0x4]
80002014:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002018:	af ba       	sbr	r10,0xf
8000201a:	10 9b       	mov	r11,r8
8000201c:	e6 1b c0 00 	andh	r11,0xc000,COH
80002020:	16 4a       	or	r10,r11
80002022:	10 9b       	mov	r11,r8
80002024:	e6 1b 30 00 	andh	r11,0x3000,COH
80002028:	16 4a       	or	r10,r11
8000202a:	10 9b       	mov	r11,r8
8000202c:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002030:	16 4a       	or	r10,r11
80002032:	10 9b       	mov	r11,r8
80002034:	e6 1b 03 00 	andh	r11,0x300,COH
80002038:	16 4a       	or	r10,r11
8000203a:	10 9b       	mov	r11,r8
8000203c:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002040:	16 4a       	or	r10,r11
80002042:	10 9b       	mov	r11,r8
80002044:	e6 1b 00 30 	andh	r11,0x30,COH
80002048:	16 4a       	or	r10,r11
8000204a:	10 9b       	mov	r11,r8
8000204c:	e6 1b 00 0c 	andh	r11,0xc,COH
80002050:	16 4a       	or	r10,r11
80002052:	10 9b       	mov	r11,r8
80002054:	e6 1b 00 03 	andh	r11,0x3,COH
80002058:	16 4a       	or	r10,r11
8000205a:	10 9b       	mov	r11,r8
8000205c:	e2 1b 60 00 	andl	r11,0x6000,COH
80002060:	16 4a       	or	r10,r11
80002062:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80002066:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
8000206a:	10 9b       	mov	r11,r8
8000206c:	e2 1b 0c 00 	andl	r11,0xc00,COH
80002070:	16 4a       	or	r10,r11
80002072:	10 9b       	mov	r11,r8
80002074:	e2 1b 03 00 	andl	r11,0x300,COH
80002078:	16 4a       	or	r10,r11
8000207a:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
8000207e:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
80002082:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80002086:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
8000208a:	10 9b       	mov	r11,r8
8000208c:	e2 1b 00 30 	andl	r11,0x30,COH
80002090:	16 4a       	or	r10,r11
80002092:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002096:	f5 e8 10 38 	or	r8,r10,r8<<0x3
8000209a:	a5 69       	lsl	r9,0x4
8000209c:	2f f9       	sub	r9,-1
8000209e:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800020a2:	5e fd       	retal	0

800020a4 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800020a4:	58 2b       	cp.w	r11,2
800020a6:	e0 88 00 03 	brls	800020ac <tc_start+0x8>
800020aa:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800020ac:	a7 6b       	lsl	r11,0x6
800020ae:	16 0c       	add	r12,r11
800020b0:	30 58       	mov	r8,5
800020b2:	99 08       	st.w	r12[0x0],r8
800020b4:	5e fd       	retal	0

800020b6 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800020b6:	58 2b       	cp.w	r11,2
800020b8:	e0 88 00 03 	brls	800020be <tc_read_sr+0x8>
800020bc:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
800020be:	a7 6b       	lsl	r11,0x6
800020c0:	2e 0b       	sub	r11,-32
800020c2:	16 0c       	add	r12,r11
800020c4:	78 0c       	ld.w	r12,r12[0x0]
}
800020c6:	5e fc       	retal	r12

800020c8 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800020c8:	58 2b       	cp.w	r11,2
800020ca:	e0 88 00 03 	brls	800020d0 <tc_write_rc+0x8>
800020ce:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800020d0:	f6 08 15 04 	lsl	r8,r11,0x4
800020d4:	2f f8       	sub	r8,-1
800020d6:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800020da:	e2 18 80 00 	andl	r8,0x8000,COH
800020de:	c0 c0       	breq	800020f6 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800020e0:	a7 6b       	lsl	r11,0x6
800020e2:	16 0c       	add	r12,r11
800020e4:	2e 4c       	sub	r12,-28
800020e6:	78 08       	ld.w	r8,r12[0x0]
800020e8:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
800020ec:	e0 18 00 00 	andl	r8,0x0
800020f0:	f3 e8 10 08 	or	r8,r9,r8
800020f4:	99 08       	st.w	r12[0x0],r8

  return value;
800020f6:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
800020fa:	5e fc       	retal	r12

800020fc <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800020fc:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002100:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002104:	58 2b       	cp.w	r11,2
80002106:	e0 88 00 04 	brls	8000210e <tc_configure_interrupts+0x12>
8000210a:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
8000210e:	ee 19 00 01 	eorh	r9,0x1
80002112:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002116:	74 08       	ld.w	r8,r10[0x0]
80002118:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
8000211c:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002120:	a7 6e       	lsl	lr,0x6
80002122:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002126:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
8000212a:	0e 4e       	or	lr,r7
8000212c:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002130:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002134:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002138:	fd e7 10 4e 	or	lr,lr,r7<<0x4
8000213c:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002140:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002144:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002148:	fd e7 10 2e 	or	lr,lr,r7<<0x2
8000214c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002150:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002154:	f6 0e 15 06 	lsl	lr,r11,0x6
80002158:	f8 0e 00 0e 	add	lr,r12,lr
8000215c:	2d ce       	sub	lr,-36
8000215e:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002160:	58 09       	cp.w	r9,0
80002162:	c0 20       	breq	80002166 <tc_configure_interrupts+0x6a>
80002164:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002166:	74 08       	ld.w	r8,r10[0x0]
80002168:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000216c:	e0 65 00 80 	mov	r5,128
80002170:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002174:	74 08       	ld.w	r8,r10[0x0]
80002176:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000217a:	f9 b4 00 40 	moveq	r4,64
8000217e:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002182:	74 08       	ld.w	r8,r10[0x0]
80002184:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002188:	f9 b3 00 20 	moveq	r3,32
8000218c:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002190:	74 08       	ld.w	r8,r10[0x0]
80002192:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002196:	f9 b2 00 10 	moveq	r2,16
8000219a:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000219e:	74 08       	ld.w	r8,r10[0x0]
800021a0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800021a4:	f9 b6 00 08 	moveq	r6,8
800021a8:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800021ac:	74 08       	ld.w	r8,r10[0x0]
800021ae:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800021b2:	f9 b7 00 04 	moveq	r7,4
800021b6:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800021ba:	74 08       	ld.w	r8,r10[0x0]
800021bc:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800021c0:	f9 be 00 02 	moveq	lr,2
800021c4:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800021c8:	74 08       	ld.w	r8,r10[0x0]
800021ca:	ec 18 00 01 	eorl	r8,0x1
800021ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021d2:	eb e8 10 08 	or	r8,r5,r8
800021d6:	08 48       	or	r8,r4
800021d8:	06 48       	or	r8,r3
800021da:	04 48       	or	r8,r2
800021dc:	0c 48       	or	r8,r6
800021de:	0e 48       	or	r8,r7
800021e0:	1c 48       	or	r8,lr
800021e2:	f6 0a 15 06 	lsl	r10,r11,0x6
800021e6:	f8 0a 00 0a 	add	r10,r12,r10
800021ea:	2d 8a       	sub	r10,-40
800021ec:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800021ee:	a7 6b       	lsl	r11,0x6
800021f0:	2e 0b       	sub	r11,-32
800021f2:	16 0c       	add	r12,r11
800021f4:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800021f6:	58 09       	cp.w	r9,0
800021f8:	c0 31       	brne	800021fe <tc_configure_interrupts+0x102>
800021fa:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021fe:	d5 03       	csrf	0x10
80002200:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002204 <et024006_SetLimits>:
/*! \brief Sets the display limits according to the corner coordinates.
 *  Writing to the display will result in writing to the area specified through
 *  this function.
 */
void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
80002204:	eb cd 40 80 	pushm	r7,lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002208:	fc 1e c0 00 	movh	lr,0xc000
8000220c:	30 28       	mov	r8,2
8000220e:	bc 08       	st.h	lr[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002210:	ef dc c1 08 	bfextu	r7,r12,0x8,0x8
80002214:	fc 18 c0 20 	movh	r8,0xc020
80002218:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000221a:	30 37       	mov	r7,3
8000221c:	bc 07       	st.h	lr[0x0],r7
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000221e:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002220:	30 4c       	mov	r12,4
80002222:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002224:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
80002228:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000222a:	30 5c       	mov	r12,5
8000222c:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000222e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002230:	30 6a       	mov	r10,6
80002232:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002234:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
80002238:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000223a:	30 7a       	mov	r10,7
8000223c:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000223e:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002240:	30 8a       	mov	r10,8
80002242:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002244:	f5 d9 c1 08 	bfextu	r10,r9,0x8,0x8
80002248:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000224a:	30 9a       	mov	r10,9
8000224c:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000224e:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80002250:	e3 cd 80 80 	ldm	sp++,r7,pc

80002254 <et024006_SetQuickLimits>:

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002254:	fc 19 c0 00 	movh	r9,0xc000
80002258:	30 28       	mov	r8,2
8000225a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000225c:	f5 dc c1 08 	bfextu	r10,r12,0x8,0x8
80002260:	fc 18 c0 20 	movh	r8,0xc020
80002264:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002266:	30 3a       	mov	r10,3
80002268:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000226a:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000226c:	30 6a       	mov	r10,6
8000226e:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002270:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
80002274:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002276:	30 7a       	mov	r10,7
80002278:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000227a:	b0 0b       	st.h	r8[0x0],r11
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
}
8000227c:	5e fc       	retal	r12
8000227e:	d7 03       	nop

80002280 <et024006_DrawQuickPixel>:
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y & 0xff) );
}


void et024006_DrawQuickPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
80002280:	eb cd 40 80 	pushm	r7,lr
80002284:	14 97       	mov	r7,r10
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetQuickLimits( x, y );
80002286:	5c 7b       	castu.h	r11
80002288:	5c 7c       	castu.h	r12
8000228a:	f0 1f 00 06 	mcall	800022a0 <et024006_DrawQuickPixel+0x20>
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000228e:	32 29       	mov	r9,34
80002290:	fc 18 c0 00 	movh	r8,0xc000
80002294:	b0 09       	st.h	r8[0x0],r9
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  *ET024006_PARAM_ADDR = color;
80002296:	fc 18 c0 20 	movh	r8,0xc020
8000229a:	b0 07       	st.h	r8[0x0],r7
#endif

}
8000229c:	e3 cd 80 80 	ldm	sp++,r7,pc
800022a0:	80 00       	ld.sh	r0,r0[0x0]
800022a2:	22 54       	sub	r4,37

800022a4 <et024006_PrintString>:
void et024006_PrintString(char *lcd_string, const unsigned char *font_style,
                          uint16_t x,
                          uint16_t y,
                          uint16_t fcolor,
                          int bcolor)
{
800022a4:	d4 31       	pushm	r0-r7,lr
800022a6:	20 dd       	sub	sp,52
800022a8:	18 97       	mov	r7,r12
800022aa:	50 6b       	stdsp	sp[0x18],r11
800022ac:	50 8a       	stdsp	sp[0x20],r10
800022ae:	50 29       	stdsp	sp[0x8],r9
800022b0:	10 94       	mov	r4,r8
800022b2:	41 63       	lddsp	r3,sp[0x58]
  unsigned char mask = 0, xfont, yfont, font_size;
  const unsigned char *data;
  uint16_t saved_x = x;

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
800022b4:	19 89       	ld.ub	r9,r12[0x0]
800022b6:	30 08       	mov	r8,0
800022b8:	f0 09 18 00 	cp.b	r9,r8
800022bc:	e0 80 01 0c 	breq	800024d4 <et024006_PrintString+0x230>
    return;

  data = font_style;  // point to the start of the font table
  xfont = *data;  // get font x width
800022c0:	16 98       	mov	r8,r11
800022c2:	11 3a       	ld.ub	r10,r8++
800022c4:	50 4a       	stdsp	sp[0x10],r10
  data++;
  yfont = *data;  // get font y length
800022c6:	11 89       	ld.ub	r9,r8[0x0]
800022c8:	50 39       	stdsp	sp[0xc],r9
  data++;
  font_size = *data;  // get data bytes per font
800022ca:	11 98       	ld.ub	r8,r8[0x1]
800022cc:	50 58       	stdsp	sp[0x14],r8

  // If transparent mode
  if(bcolor == -1)
800022ce:	5b f3       	cp.w	r3,-1
800022d0:	e0 81 00 8d 	brne	800023ea <et024006_PrintString+0x146>
  {
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
800022d4:	e0 69 00 ef 	mov	r9,239
800022d8:	e0 6a 01 3f 	mov	r10,319
800022dc:	30 0b       	mov	r11,0
800022de:	16 9c       	mov	r12,r11
800022e0:	f0 1f 00 7e 	mcall	800024d8 <et024006_PrintString+0x234>
        data =  (font_style + font_size) +  // header offset
          (font_size * (int)(*lcd_string - 32)); // character select
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;
800022e4:	40 58       	lddsp	r8,sp[0x14]
800022e6:	50 c8       	stdsp	sp[0x30],r8
800022e8:	f0 08 00 18 	add	r8,r8,r8<<0x1
800022ec:	a5 78       	lsl	r8,0x5
800022ee:	40 69       	lddsp	r9,sp[0x18]
800022f0:	10 09       	add	r9,r8
800022f2:	50 b9       	stdsp	sp[0x2c],r9
800022f4:	ee c8 ff ff 	sub	r8,r7,-1
800022f8:	50 98       	stdsp	sp[0x24],r8
800022fa:	40 8a       	lddsp	r10,sp[0x20]
800022fc:	5c 8a       	casts.h	r10
800022fe:	50 aa       	stdsp	sp[0x28],r10
      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
        {
          if (*data & mask) // if pixel data then put dot
80002300:	30 03       	mov	r3,0
          {
            et024006_DrawQuickPixel( col, row, fcolor );
80002302:	08 90       	mov	r0,r4
80002304:	5c 70       	castu.h	r0
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );

    do
    {
      if(*lcd_string =='\n') {
80002306:	40 99       	lddsp	r9,sp[0x24]
80002308:	f3 38 ff ff 	ld.ub	r8,r9[-1]
8000230c:	30 aa       	mov	r10,10
8000230e:	f4 08 18 00 	cp.b	r8,r10
80002312:	c0 b1       	brne	80002328 <et024006_PrintString+0x84>
        x = saved_x;
        y += yfont;
80002314:	40 28       	lddsp	r8,sp[0x8]
80002316:	40 39       	lddsp	r9,sp[0xc]
80002318:	12 08       	add	r8,r9
8000231a:	5c 88       	casts.h	r8
8000231c:	50 28       	stdsp	sp[0x8],r8
8000231e:	40 98       	lddsp	r8,sp[0x24]
80002320:	40 8a       	lddsp	r10,sp[0x20]
80002322:	5c 8a       	casts.h	r10
80002324:	50 aa       	stdsp	sp[0x28],r10
        lcd_string++;  // next character in string
        continue;
80002326:	c5 a8       	rjmp	800023da <et024006_PrintString+0x136>
      } else if(*lcd_string =='\t') {
80002328:	30 99       	mov	r9,9
8000232a:	f2 08 18 00 	cp.b	r8,r9
8000232e:	c0 81       	brne	8000233e <et024006_PrintString+0x9a>
        x += xfont;
80002330:	40 a8       	lddsp	r8,sp[0x28]
80002332:	40 49       	lddsp	r9,sp[0x10]
80002334:	12 08       	add	r8,r9
80002336:	5c 88       	casts.h	r8
80002338:	50 a8       	stdsp	sp[0x28],r8
8000233a:	40 98       	lddsp	r8,sp[0x24]
        lcd_string++;  // next character in string
        continue;
8000233c:	c4 f8       	rjmp	800023da <et024006_PrintString+0x136>
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
8000233e:	f0 ca 00 20 	sub	r10,r8,32
80002342:	35 f9       	mov	r9,95
80002344:	f2 0a 18 00 	cp.b	r10,r9
80002348:	e0 88 00 04 	brls	80002350 <et024006_PrintString+0xac>
8000234c:	40 b5       	lddsp	r5,sp[0x2c]
8000234e:	c0 a8       	rjmp	80002362 <et024006_PrintString+0xbe>
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
80002350:	22 08       	sub	r8,32
80002352:	40 ca       	lddsp	r10,sp[0x30]
80002354:	f0 0a 02 45 	mul	r5,r8,r10
80002358:	40 59       	lddsp	r9,sp[0x14]
8000235a:	12 05       	add	r5,r9
8000235c:	40 68       	lddsp	r8,sp[0x18]
8000235e:	f0 05 00 05 	add	r5,r8,r5
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
80002362:	40 22       	lddsp	r2,sp[0x8]
80002364:	5c 72       	castu.h	r2
80002366:	40 3a       	lddsp	r10,sp[0xc]
80002368:	e4 0a 00 0a 	add	r10,r2,r10
8000236c:	50 1a       	stdsp	sp[0x4],r10
8000236e:	04 3a       	cp.w	r10,r2
80002370:	e0 8a 00 2f 	brle	800023ce <et024006_PrintString+0x12a>
80002374:	40 21       	lddsp	r1,sp[0x8]
80002376:	5c 81       	casts.h	r1
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
80002378:	40 a9       	lddsp	r9,sp[0x28]
8000237a:	5c 79       	castu.h	r9
8000237c:	50 09       	stdsp	sp[0x0],r9
8000237e:	12 94       	mov	r4,r9
80002380:	40 48       	lddsp	r8,sp[0x10]
80002382:	10 04       	add	r4,r8
80002384:	40 aa       	lddsp	r10,sp[0x28]
80002386:	5c 8a       	casts.h	r10
80002388:	50 7a       	stdsp	sp[0x1c],r10
8000238a:	c1 b8       	rjmp	800023c0 <et024006_PrintString+0x11c>
        {
          if (*data & mask) // if pixel data then put dot
          {
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
8000238c:	a1 96       	lsr	r6,0x1
      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
        {
          if (*data & mask) // if pixel data then put dot
8000238e:	0b 88       	ld.ub	r8,r5[0x0]
80002390:	ed e8 00 08 	and	r8,r6,r8
80002394:	e6 08 18 00 	cp.b	r8,r3
80002398:	c0 50       	breq	800023a2 <et024006_PrintString+0xfe>
          {
            et024006_DrawQuickPixel( col, row, fcolor );
8000239a:	00 9a       	mov	r10,r0
8000239c:	04 9b       	mov	r11,r2
8000239e:	f0 1f 00 50 	mcall	800024dc <et024006_PrintString+0x238>
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
800023a2:	2f f7       	sub	r7,-1
800023a4:	5c 87       	casts.h	r7
800023a6:	0e 9c       	mov	r12,r7
800023a8:	5c 7c       	castu.h	r12
800023aa:	08 3c       	cp.w	r12,r4
800023ac:	cf 05       	brlt	8000238c <et024006_PrintString+0xe8>
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
800023ae:	2f f1       	sub	r1,-1
800023b0:	5c 81       	casts.h	r1
800023b2:	e5 d1 c0 10 	bfextu	r2,r1,0x0,0x10
800023b6:	40 19       	lddsp	r9,sp[0x4]
800023b8:	04 39       	cp.w	r9,r2
800023ba:	e0 8a 00 0a 	brle	800023ce <et024006_PrintString+0x12a>
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
        }
        // Next row data
        data++;
800023be:	2f f5       	sub	r5,-1
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
800023c0:	40 0c       	lddsp	r12,sp[0x0]
800023c2:	08 3c       	cp.w	r12,r4
800023c4:	cf 54       	brge	800023ae <et024006_PrintString+0x10a>
800023c6:	40 77       	lddsp	r7,sp[0x1c]
800023c8:	e0 66 00 80 	mov	r6,128
800023cc:	ce 1b       	rjmp	8000238e <et024006_PrintString+0xea>
        }
        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
800023ce:	40 a8       	lddsp	r8,sp[0x28]
800023d0:	40 4a       	lddsp	r10,sp[0x10]
800023d2:	14 08       	add	r8,r10
800023d4:	5c 88       	casts.h	r8
800023d6:	50 a8       	stdsp	sp[0x28],r8
800023d8:	40 98       	lddsp	r8,sp[0x24]
800023da:	40 99       	lddsp	r9,sp[0x24]
800023dc:	2f f9       	sub	r9,-1
800023de:	50 99       	stdsp	sp[0x24],r9
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800023e0:	11 88       	ld.ub	r8,r8[0x0]
800023e2:	e6 08 18 00 	cp.b	r8,r3
800023e6:	c9 01       	brne	80002306 <et024006_PrintString+0x62>
800023e8:	c7 68       	rjmp	800024d4 <et024006_PrintString+0x230>
800023ea:	f8 c8 ff ff 	sub	r8,r12,-1
800023ee:	50 08       	stdsp	sp[0x0],r8
800023f0:	40 8c       	lddsp	r12,sp[0x20]
800023f2:	5c 8c       	casts.h	r12
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
800023f4:	30 06       	mov	r6,0
          {
            *ET024006_PARAM_ADDR = fcolor;
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
800023f6:	5c 83       	casts.h	r3
800023f8:	fc 15 c0 20 	movh	r5,0xc020
  }
  else
  {
    do
    {
      if(*lcd_string =='\n') {
800023fc:	40 0a       	lddsp	r10,sp[0x0]
800023fe:	f5 31 ff ff 	ld.ub	r1,r10[-1]
80002402:	30 a8       	mov	r8,10
80002404:	f0 01 18 00 	cp.b	r1,r8
80002408:	c0 b1       	brne	8000241e <et024006_PrintString+0x17a>
        x = saved_x;
        y += yfont;
8000240a:	40 28       	lddsp	r8,sp[0x8]
8000240c:	40 39       	lddsp	r9,sp[0xc]
8000240e:	12 08       	add	r8,r9
80002410:	5c 88       	casts.h	r8
80002412:	50 28       	stdsp	sp[0x8],r8
80002414:	14 98       	mov	r8,r10
80002416:	40 8a       	lddsp	r10,sp[0x20]
80002418:	5c 8a       	casts.h	r10
8000241a:	50 1a       	stdsp	sp[0x4],r10
        lcd_string++;  // next character in string
        continue;
8000241c:	c5 28       	rjmp	800024c0 <et024006_PrintString+0x21c>
      } else if(*lcd_string =='\t') {
8000241e:	30 98       	mov	r8,9
80002420:	f0 01 18 00 	cp.b	r1,r8
80002424:	c0 71       	brne	80002432 <et024006_PrintString+0x18e>
        x += xfont;
80002426:	40 49       	lddsp	r9,sp[0x10]
80002428:	12 0c       	add	r12,r9
8000242a:	5c 8c       	casts.h	r12
8000242c:	50 1c       	stdsp	sp[0x4],r12
8000242e:	40 08       	lddsp	r8,sp[0x0]
        lcd_string++;  // next character in string
        continue;
80002430:	c4 88       	rjmp	800024c0 <et024006_PrintString+0x21c>
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
        (font_size * (int)(*lcd_string - 32)); // character select

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
80002432:	40 32       	lddsp	r2,sp[0xc]
80002434:	40 47       	lddsp	r7,sp[0x10]
80002436:	f8 07 00 08 	add	r8,r12,r7
8000243a:	5c 88       	casts.h	r8
8000243c:	50 18       	stdsp	sp[0x4],r8
8000243e:	04 99       	mov	r9,r2
80002440:	20 19       	sub	r9,1
80002442:	40 28       	lddsp	r8,sp[0x8]
80002444:	10 09       	add	r9,r8
80002446:	40 1a       	lddsp	r10,sp[0x4]
80002448:	20 1a       	sub	r10,1
8000244a:	5c 79       	castu.h	r9
8000244c:	5c 7a       	castu.h	r10
8000244e:	10 9b       	mov	r11,r8
80002450:	5c 7b       	castu.h	r11
80002452:	5c 7c       	castu.h	r12
80002454:	f0 1f 00 21 	mcall	800024d8 <et024006_PrintString+0x234>
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002458:	32 29       	mov	r9,34
8000245a:	fc 18 c0 00 	movh	r8,0xc000
8000245e:	b0 09       	st.h	r8[0x0],r9

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
80002460:	40 3a       	lddsp	r10,sp[0xc]
80002462:	58 0a       	cp.w	r10,0
80002464:	c2 d0       	breq	800024be <et024006_PrintString+0x21a>
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
80002466:	e2 ce 00 20 	sub	lr,r1,32
8000246a:	40 59       	lddsp	r9,sp[0x14]
8000246c:	f2 0e 02 4e 	mul	lr,r9,lr
80002470:	12 0e       	add	lr,r9
80002472:	40 68       	lddsp	r8,sp[0x18]
80002474:	f0 0e 00 0e 	add	lr,r8,lr
80002478:	30 0c       	mov	r12,0
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
8000247a:	e0 60 00 80 	mov	r0,128
8000247e:	18 91       	mov	r1,r12
80002480:	c1 98       	rjmp	800024b2 <et024006_PrintString+0x20e>
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
          }
          mask >>= 1;
80002482:	a1 99       	lsr	r9,0x1
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
80002484:	f3 eb 00 0a 	and	r10,r9,r11
          {
            *ET024006_PARAM_ADDR = fcolor;
80002488:	ec 0a 18 00 	cp.b	r10,r6
8000248c:	e8 0a 17 10 	movne	r10,r4
80002490:	eb fa 1c 00 	st.hne	r5[0x0],r10
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
80002494:	eb f3 0c 00 	st.heq	r5[0x0],r3
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
80002498:	2f f8       	sub	r8,-1
8000249a:	5c 88       	casts.h	r8
8000249c:	f0 07 19 00 	cp.h	r7,r8
800024a0:	fe 9b ff f1 	brhi	80002482 <et024006_PrintString+0x1de>

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
800024a4:	2f fc       	sub	r12,-1
800024a6:	5c 8c       	casts.h	r12
800024a8:	f8 02 19 00 	cp.h	r2,r12
800024ac:	e0 88 00 09 	brls	800024be <et024006_PrintString+0x21a>
          }
          mask >>= 1;
        }

        // Next row data
        data++;
800024b0:	2f fe       	sub	lr,-1
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
800024b2:	58 07       	cp.w	r7,0
800024b4:	cf 80       	breq	800024a4 <et024006_PrintString+0x200>
        {
          if (*data & mask) // if pixel data then put dot
800024b6:	1d 8b       	ld.ub	r11,lr[0x0]
800024b8:	00 99       	mov	r9,r0
800024ba:	02 98       	mov	r8,r1
800024bc:	ce 4b       	rjmp	80002484 <et024006_PrintString+0x1e0>
800024be:	40 08       	lddsp	r8,sp[0x0]
800024c0:	40 09       	lddsp	r9,sp[0x0]
800024c2:	2f f9       	sub	r9,-1
800024c4:	50 09       	stdsp	sp[0x0],r9
      }
      // move to next character start pixel
      x += xfont;
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800024c6:	11 88       	ld.ub	r8,r8[0x0]
800024c8:	ec 08 18 00 	cp.b	r8,r6
800024cc:	c0 40       	breq	800024d4 <et024006_PrintString+0x230>
800024ce:	40 1c       	lddsp	r12,sp[0x4]
800024d0:	5c 8c       	casts.h	r12
800024d2:	c9 5b       	rjmp	800023fc <et024006_PrintString+0x158>
  }
}
800024d4:	2f 3d       	sub	sp,-52
800024d6:	d8 32       	popm	r0-r7,pc
800024d8:	80 00       	ld.sh	r0,r0[0x0]
800024da:	22 04       	sub	r4,32
800024dc:	80 00       	ld.sh	r0,r0[0x0]
800024de:	22 80       	sub	r0,40

800024e0 <et024006_DuplicatePixel>:
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024e0:	32 29       	mov	r9,34
800024e2:	fc 18 c0 00 	movh	r8,0xc000
800024e6:	b0 09       	st.h	r8[0x0],r9
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
800024e8:	58 7b       	cp.w	r11,7
800024ea:	e0 88 00 13 	brls	80002510 <et024006_DuplicatePixel+0x30>
800024ee:	16 99       	mov	r9,r11
    *ET024006_PARAM_ADDR = color;
800024f0:	fc 18 c0 20 	movh	r8,0xc020
800024f4:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800024f6:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800024f8:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800024fa:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800024fc:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800024fe:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002500:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002502:	b0 0c       	st.h	r8[0x0],r12
    count-=8;
80002504:	20 89       	sub	r9,8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80002506:	58 79       	cp.w	r9,7
80002508:	fe 9b ff f6 	brhi	800024f4 <et024006_DuplicatePixel+0x14>



/* --- Pixel block operations --- */

void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
8000250c:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80002510:	58 0b       	cp.w	r11,0
80002512:	5e 0c       	reteq	r12
    *ET024006_PARAM_ADDR = color;
80002514:	fc 18 c0 20 	movh	r8,0xc020
80002518:	b0 0c       	st.h	r8[0x0],r12
    --count;
8000251a:	20 1b       	sub	r11,1
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
8000251c:	cf e1       	brne	80002518 <et024006_DuplicatePixel+0x38>
8000251e:	5e fc       	retal	r12

80002520 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80002520:	eb cd 40 e0 	pushm	r5-r7,lr
80002524:	14 97       	mov	r7,r10
80002526:	12 96       	mov	r6,r9
80002528:	10 95       	mov	r5,r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
8000252a:	f6 c9 00 01 	sub	r9,r11,1
8000252e:	0c 09       	add	r9,r6
80002530:	f8 ca 00 01 	sub	r10,r12,1
80002534:	0e 0a       	add	r10,r7
80002536:	5c 79       	castu.h	r9
80002538:	5c 7a       	castu.h	r10
8000253a:	5c 7b       	castu.h	r11
8000253c:	5c 7c       	castu.h	r12
8000253e:	f0 1f 00 07 	mcall	80002558 <et024006_DrawFilledRect+0x38>
  uint32_t count = (uint32_t) width * height;
  et024006_DuplicatePixel( color, count );
80002542:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
80002546:	5c 77       	castu.h	r7
80002548:	af 3b       	mul	r11,r7
8000254a:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
8000254e:	f0 1f 00 04 	mcall	8000255c <et024006_DrawFilledRect+0x3c>
}
80002552:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002556:	00 00       	add	r0,r0
80002558:	80 00       	ld.sh	r0,r0[0x0]
8000255a:	22 04       	sub	r4,32
8000255c:	80 00       	ld.sh	r0,r0[0x0]
8000255e:	24 e0       	sub	r0,78

80002560 <et024006_DrawVertLine>:
  et024006_DrawFilledRect( x, y, length, 1, color );
}


void et024006_DrawVertLine( uint16_t x, uint16_t y, uint16_t length, et024006_color_t color )
{
80002560:	d4 01       	pushm	lr
  et024006_DrawFilledRect( x, y, 1, length, color );
80002562:	f1 d9 c0 10 	bfextu	r8,r9,0x0,0x10
80002566:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
8000256a:	30 1a       	mov	r10,1
8000256c:	5c 7b       	castu.h	r11
8000256e:	5c 7c       	castu.h	r12
80002570:	f0 1f 00 02 	mcall	80002578 <et024006_DrawVertLine+0x18>
}
80002574:	d8 02       	popm	pc
80002576:	00 00       	add	r0,r0
80002578:	80 00       	ld.sh	r0,r0[0x0]
8000257a:	25 20       	sub	r0,82

8000257c <et024006_AdjustGamma>:

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000257c:	fc 19 c0 00 	movh	r9,0xc000
80002580:	34 6a       	mov	r10,70
80002582:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002584:	fc 18 c0 20 	movh	r8,0xc020
80002588:	e0 6b 00 94 	mov	r11,148
8000258c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000258e:	34 7b       	mov	r11,71
80002590:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002592:	34 1b       	mov	r11,65
80002594:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002596:	34 8b       	mov	r11,72
80002598:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000259a:	30 0b       	mov	r11,0
8000259c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000259e:	34 9b       	mov	r11,73
800025a0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025a2:	33 3b       	mov	r11,51
800025a4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025a6:	34 ab       	mov	r11,74
800025a8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025aa:	32 5b       	mov	r11,37
800025ac:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025ae:	34 bb       	mov	r11,75
800025b0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025b2:	34 5b       	mov	r11,69
800025b4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025b6:	34 cb       	mov	r11,76
800025b8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025ba:	34 4b       	mov	r11,68
800025bc:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025be:	34 db       	mov	r11,77
800025c0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025c2:	37 7b       	mov	r11,119
800025c4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025c6:	34 eb       	mov	r11,78
800025c8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025ca:	31 2b       	mov	r11,18
800025cc:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025ce:	34 fb       	mov	r11,79
800025d0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025d2:	e0 6b 00 cc 	mov	r11,204
800025d6:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025d8:	35 0b       	mov	r11,80
800025da:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025dc:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025de:	35 1a       	mov	r10,81
800025e0:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025e2:	e0 69 00 82 	mov	r9,130
800025e6:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
800025e8:	5e fc       	retal	r12
800025ea:	d7 03       	nop

800025ec <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
800025ec:	eb cd 40 c0 	pushm	r6-r7,lr
  tft_data.cpu_hz = cpu_hz;
800025f0:	fe f7 04 80 	ld.w	r7,pc[1152]
800025f4:	8f 0c       	st.w	r7[0x0],r12
  tft_data.hsb_hz = hsb_hz;
800025f6:	8f 1b       	st.w	r7[0x4],r11

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
800025f8:	16 9c       	mov	r12,r11
800025fa:	f0 1f 01 1f 	mcall	80002a74 <et024006_Init+0x488>
static void et024006_SetupInterface( void )
{

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
800025fe:	35 5c       	mov	r12,85
80002600:	f0 1f 01 1e 	mcall	80002a78 <et024006_Init+0x48c>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
80002604:	30 2b       	mov	r11,2
80002606:	33 2c       	mov	r12,50
80002608:	f0 1f 01 1d 	mcall	80002a7c <et024006_Init+0x490>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
8000260c:	35 2c       	mov	r12,82
8000260e:	f0 1f 01 1d 	mcall	80002a80 <et024006_Init+0x494>
/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
80002612:	35 2c       	mov	r12,82
80002614:	f0 1f 01 1c 	mcall	80002a84 <et024006_Init+0x498>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002618:	6e 07       	ld.w	r7,r7[0x0]
8000261a:	33 28       	mov	r8,50
8000261c:	ee 08 06 46 	mulu.d	r6,r7,r8
80002620:	ee 78 42 40 	mov	r8,1000000
80002624:	30 09       	mov	r9,0
80002626:	ee 7a 42 3f 	mov	r10,999999
8000262a:	30 0b       	mov	r11,0
8000262c:	ec 0a 00 0a 	add	r10,r6,r10
80002630:	ee 0b 00 4b 	adc	r11,r7,r11
80002634:	f0 1f 01 15 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002638:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000263c:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002640:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002644:	14 38       	cp.w	r8,r10
80002646:	e0 88 00 09 	brls	80002658 <et024006_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000264a:	12 38       	cp.w	r8,r9
8000264c:	fe 98 ff fa 	brls	80002640 <et024006_Init+0x54>
80002650:	12 3a       	cp.w	r10,r9
80002652:	e0 83 00 a2 	brlo	80002796 <et024006_Init+0x1aa>
80002656:	cf 5b       	rjmp	80002640 <et024006_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002658:	12 38       	cp.w	r8,r9
8000265a:	e0 8b 00 9e 	brhi	80002796 <et024006_Init+0x1aa>
8000265e:	12 3a       	cp.w	r10,r9
80002660:	e0 83 00 9b 	brlo	80002796 <et024006_Init+0x1aa>
80002664:	ce eb       	rjmp	80002640 <et024006_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002666:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000266a:	14 38       	cp.w	r8,r10
8000266c:	e0 88 00 09 	brls	8000267e <et024006_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002670:	12 38       	cp.w	r8,r9
80002672:	fe 98 ff fa 	brls	80002666 <et024006_Init+0x7a>
80002676:	12 3a       	cp.w	r10,r9
80002678:	e0 83 00 a9 	brlo	800027ca <et024006_Init+0x1de>
8000267c:	cf 5b       	rjmp	80002666 <et024006_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000267e:	12 38       	cp.w	r8,r9
80002680:	e0 8b 00 a5 	brhi	800027ca <et024006_Init+0x1de>
80002684:	12 3a       	cp.w	r10,r9
80002686:	e0 83 00 a2 	brlo	800027ca <et024006_Init+0x1de>
8000268a:	ce eb       	rjmp	80002666 <et024006_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000268c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002690:	14 38       	cp.w	r8,r10
80002692:	e0 88 00 09 	brls	800026a4 <et024006_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002696:	12 38       	cp.w	r8,r9
80002698:	fe 98 ff fa 	brls	8000268c <et024006_Init+0xa0>
8000269c:	12 3a       	cp.w	r10,r9
8000269e:	e0 83 01 1e 	brlo	800028da <et024006_Init+0x2ee>
800026a2:	cf 5b       	rjmp	8000268c <et024006_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800026a4:	12 38       	cp.w	r8,r9
800026a6:	e0 8b 01 1a 	brhi	800028da <et024006_Init+0x2ee>
800026aa:	12 3a       	cp.w	r10,r9
800026ac:	e0 83 01 17 	brlo	800028da <et024006_Init+0x2ee>
800026b0:	ce eb       	rjmp	8000268c <et024006_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026b2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800026b6:	14 38       	cp.w	r8,r10
800026b8:	e0 88 00 09 	brls	800026ca <et024006_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800026bc:	12 38       	cp.w	r8,r9
800026be:	fe 98 ff fa 	brls	800026b2 <et024006_Init+0xc6>
800026c2:	12 3a       	cp.w	r10,r9
800026c4:	e0 83 01 29 	brlo	80002916 <et024006_Init+0x32a>
800026c8:	cf 5b       	rjmp	800026b2 <et024006_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800026ca:	12 38       	cp.w	r8,r9
800026cc:	e0 8b 01 25 	brhi	80002916 <et024006_Init+0x32a>
800026d0:	12 3a       	cp.w	r10,r9
800026d2:	e0 83 01 22 	brlo	80002916 <et024006_Init+0x32a>
800026d6:	ce eb       	rjmp	800026b2 <et024006_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026d8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800026dc:	14 38       	cp.w	r8,r10
800026de:	e0 88 00 09 	brls	800026f0 <et024006_Init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800026e2:	12 38       	cp.w	r8,r9
800026e4:	fe 98 ff fa 	brls	800026d8 <et024006_Init+0xec>
800026e8:	12 3a       	cp.w	r10,r9
800026ea:	e0 83 01 35 	brlo	80002954 <et024006_Init+0x368>
800026ee:	cf 5b       	rjmp	800026d8 <et024006_Init+0xec>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800026f0:	12 38       	cp.w	r8,r9
800026f2:	e0 8b 01 31 	brhi	80002954 <et024006_Init+0x368>
800026f6:	12 3a       	cp.w	r10,r9
800026f8:	e0 83 01 2e 	brlo	80002954 <et024006_Init+0x368>
800026fc:	ce eb       	rjmp	800026d8 <et024006_Init+0xec>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026fe:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002702:	14 38       	cp.w	r8,r10
80002704:	e0 88 00 09 	brls	80002716 <et024006_Init+0x12a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002708:	12 38       	cp.w	r8,r9
8000270a:	fe 98 ff fa 	brls	800026fe <et024006_Init+0x112>
8000270e:	12 3a       	cp.w	r10,r9
80002710:	e0 83 01 40 	brlo	80002990 <et024006_Init+0x3a4>
80002714:	cf 5b       	rjmp	800026fe <et024006_Init+0x112>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002716:	12 38       	cp.w	r8,r9
80002718:	e0 8b 01 3c 	brhi	80002990 <et024006_Init+0x3a4>
8000271c:	12 3a       	cp.w	r10,r9
8000271e:	e0 83 01 39 	brlo	80002990 <et024006_Init+0x3a4>
80002722:	ce eb       	rjmp	800026fe <et024006_Init+0x112>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002724:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002728:	14 38       	cp.w	r8,r10
8000272a:	e0 88 00 09 	brls	8000273c <et024006_Init+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000272e:	12 38       	cp.w	r8,r9
80002730:	fe 98 ff fa 	brls	80002724 <et024006_Init+0x138>
80002734:	12 3a       	cp.w	r10,r9
80002736:	e0 83 01 4b 	brlo	800029cc <et024006_Init+0x3e0>
8000273a:	cf 5b       	rjmp	80002724 <et024006_Init+0x138>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000273c:	12 38       	cp.w	r8,r9
8000273e:	e0 8b 01 47 	brhi	800029cc <et024006_Init+0x3e0>
80002742:	12 3a       	cp.w	r10,r9
80002744:	e0 83 01 44 	brlo	800029cc <et024006_Init+0x3e0>
80002748:	ce eb       	rjmp	80002724 <et024006_Init+0x138>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000274a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000274e:	14 38       	cp.w	r8,r10
80002750:	e0 88 00 09 	brls	80002762 <et024006_Init+0x176>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002754:	12 38       	cp.w	r8,r9
80002756:	fe 98 ff fa 	brls	8000274a <et024006_Init+0x15e>
8000275a:	12 3a       	cp.w	r10,r9
8000275c:	e0 83 01 56 	brlo	80002a08 <et024006_Init+0x41c>
80002760:	cf 5b       	rjmp	8000274a <et024006_Init+0x15e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002762:	12 38       	cp.w	r8,r9
80002764:	e0 8b 01 52 	brhi	80002a08 <et024006_Init+0x41c>
80002768:	12 3a       	cp.w	r10,r9
8000276a:	e0 83 01 4f 	brlo	80002a08 <et024006_Init+0x41c>
8000276e:	ce eb       	rjmp	8000274a <et024006_Init+0x15e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002770:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002774:	14 38       	cp.w	r8,r10
80002776:	e0 88 00 09 	brls	80002788 <et024006_Init+0x19c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000277a:	12 38       	cp.w	r8,r9
8000277c:	fe 98 ff fa 	brls	80002770 <et024006_Init+0x184>
80002780:	12 3a       	cp.w	r10,r9
80002782:	e0 83 01 64 	brlo	80002a4a <et024006_Init+0x45e>
80002786:	cf 5b       	rjmp	80002770 <et024006_Init+0x184>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002788:	12 38       	cp.w	r8,r9
8000278a:	e0 8b 01 60 	brhi	80002a4a <et024006_Init+0x45e>
8000278e:	12 3a       	cp.w	r10,r9
80002790:	e0 83 01 5d 	brlo	80002a4a <et024006_Init+0x45e>
80002794:	ce eb       	rjmp	80002770 <et024006_Init+0x184>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80002796:	35 2c       	mov	r12,82
80002798:	f0 1f 00 ba 	mcall	80002a80 <et024006_Init+0x494>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000279c:	fe f8 02 d4 	ld.w	r8,pc[724]
800027a0:	70 07       	ld.w	r7,r8[0x0]
800027a2:	30 58       	mov	r8,5
800027a4:	ee 08 06 46 	mulu.d	r6,r7,r8
800027a8:	e0 68 03 e8 	mov	r8,1000
800027ac:	30 09       	mov	r9,0
800027ae:	e0 6a 03 e7 	mov	r10,999
800027b2:	30 0b       	mov	r11,0
800027b4:	ec 0a 00 0a 	add	r10,r6,r10
800027b8:	ee 0b 00 4b 	adc	r11,r7,r11
800027bc:	f0 1f 00 b3 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800027c0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800027c4:	f0 0a 00 0a 	add	r10,r8,r10
800027c8:	c4 fb       	rjmp	80002666 <et024006_Init+0x7a>
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
#endif
  et024006_SetupInterface();
  et024006_ResetDisplay();
  et024006_AdjustGamma();
800027ca:	f0 1f 00 b1 	mcall	80002a8c <et024006_Init+0x4a0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027ce:	fc 19 c0 00 	movh	r9,0xc000
800027d2:	30 1a       	mov	r10,1
800027d4:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027d6:	fc 18 c0 20 	movh	r8,0xc020
800027da:	30 6b       	mov	r11,6
800027dc:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027de:	33 ab       	mov	r11,58
800027e0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027e2:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027e4:	33 bb       	mov	r11,59
800027e6:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027e8:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027ea:	33 ca       	mov	r10,60
800027ec:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027ee:	e0 6a 00 f0 	mov	r10,240
800027f2:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027f4:	33 db       	mov	r11,61
800027f6:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027f8:	30 07       	mov	r7,0
800027fa:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027fc:	33 eb       	mov	r11,62
800027fe:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002800:	33 8b       	mov	r11,56
80002802:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002804:	34 0c       	mov	r12,64
80002806:	b2 0c       	st.h	r9[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002808:	30 fe       	mov	lr,15
8000280a:	b0 0e       	st.h	r8[0x0],lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000280c:	34 1e       	mov	lr,65
8000280e:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002810:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002812:	32 7a       	mov	r10,39
80002814:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002816:	30 2a       	mov	r10,2
80002818:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000281a:	32 8e       	mov	lr,40
8000281c:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000281e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002820:	32 9e       	mov	lr,41
80002822:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002824:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002826:	32 ae       	mov	lr,42
80002828:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000282a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000282c:	32 ce       	mov	lr,44
8000282e:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002830:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002832:	32 de       	mov	lr,45
80002834:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002836:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002838:	31 9a       	mov	r10,25
8000283a:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000283c:	34 9a       	mov	r10,73
8000283e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002840:	e0 6a 00 93 	mov	r10,147
80002844:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002846:	30 8a       	mov	r10,8
80002848:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000284a:	31 6a       	mov	r10,22
8000284c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000284e:	36 8a       	mov	r10,104
80002850:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002852:	32 3a       	mov	r10,35
80002854:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002856:	e0 6a 00 95 	mov	r10,149
8000285a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000285c:	32 4e       	mov	lr,36
8000285e:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002860:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002862:	32 5a       	mov	r10,37
80002864:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002866:	e0 6a 00 ff 	mov	r10,255
8000286a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000286c:	e0 6a 00 90 	mov	r10,144
80002870:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002872:	37 fa       	mov	r10,127
80002874:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002876:	33 5a       	mov	r10,53
80002878:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000287a:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000287c:	33 6a       	mov	r10,54
8000287e:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002880:	37 8a       	mov	r10,120
80002882:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002884:	31 da       	mov	r10,29
80002886:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002888:	30 7a       	mov	r10,7
8000288a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000288c:	31 ea       	mov	r10,30
8000288e:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002890:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002892:	31 fa       	mov	r10,31
80002894:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002896:	30 4a       	mov	r10,4
80002898:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000289a:	32 0a       	mov	r10,32
8000289c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000289e:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800028a0:	34 4a       	mov	r10,68
800028a2:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800028a4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800028a6:	34 5a       	mov	r10,69
800028a8:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800028aa:	31 29       	mov	r9,18
800028ac:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800028ae:	4f 18       	lddpc	r8,80002a70 <et024006_Init+0x484>
800028b0:	70 07       	ld.w	r7,r8[0x0]
800028b2:	30 a8       	mov	r8,10
800028b4:	ee 08 06 46 	mulu.d	r6,r7,r8
800028b8:	e0 68 03 e8 	mov	r8,1000
800028bc:	30 09       	mov	r9,0
800028be:	e0 6a 03 e7 	mov	r10,999
800028c2:	30 0b       	mov	r11,0
800028c4:	ec 0a 00 0a 	add	r10,r6,r10
800028c8:	ee 0b 00 4b 	adc	r11,r7,r11
800028cc:	f0 1f 00 6f 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028d0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028d4:	f0 0a 00 0a 	add	r10,r8,r10
800028d8:	cd aa       	rjmp	8000268c <et024006_Init+0xa0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800028da:	31 c9       	mov	r9,28
800028dc:	fc 18 c0 00 	movh	r8,0xc000
800028e0:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800028e2:	30 49       	mov	r9,4
800028e4:	fc 18 c0 20 	movh	r8,0xc020
800028e8:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800028ea:	4e 28       	lddpc	r8,80002a70 <et024006_Init+0x484>
800028ec:	70 07       	ld.w	r7,r8[0x0]
800028ee:	31 48       	mov	r8,20
800028f0:	ee 08 06 46 	mulu.d	r6,r7,r8
800028f4:	e0 68 03 e8 	mov	r8,1000
800028f8:	30 09       	mov	r9,0
800028fa:	e0 6a 03 e7 	mov	r10,999
800028fe:	30 0b       	mov	r11,0
80002900:	ec 0a 00 0a 	add	r10,r6,r10
80002904:	ee 0b 00 4b 	adc	r11,r7,r11
80002908:	f0 1f 00 60 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000290c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002910:	f0 0a 00 0a 	add	r10,r8,r10
80002914:	cc fa       	rjmp	800026b2 <et024006_Init+0xc6>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002916:	34 39       	mov	r9,67
80002918:	fc 18 c0 00 	movh	r8,0xc000
8000291c:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000291e:	e0 69 00 80 	mov	r9,128
80002922:	fc 18 c0 20 	movh	r8,0xc020
80002926:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002928:	4d 28       	lddpc	r8,80002a70 <et024006_Init+0x484>
8000292a:	70 07       	ld.w	r7,r8[0x0]
8000292c:	30 58       	mov	r8,5
8000292e:	ee 08 06 46 	mulu.d	r6,r7,r8
80002932:	e0 68 03 e8 	mov	r8,1000
80002936:	30 09       	mov	r9,0
80002938:	e0 6a 03 e7 	mov	r10,999
8000293c:	30 0b       	mov	r11,0
8000293e:	ec 0a 00 0a 	add	r10,r6,r10
80002942:	ee 0b 00 4b 	adc	r11,r7,r11
80002946:	f0 1f 00 51 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000294a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000294e:	f0 0a 00 0a 	add	r10,r8,r10
80002952:	cc 3a       	rjmp	800026d8 <et024006_Init+0xec>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002954:	31 b9       	mov	r9,27
80002956:	fc 18 c0 00 	movh	r8,0xc000
8000295a:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000295c:	30 89       	mov	r9,8
8000295e:	fc 18 c0 20 	movh	r8,0xc020
80002962:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002964:	4c 38       	lddpc	r8,80002a70 <et024006_Init+0x484>
80002966:	70 07       	ld.w	r7,r8[0x0]
80002968:	32 88       	mov	r8,40
8000296a:	ee 08 06 46 	mulu.d	r6,r7,r8
8000296e:	e0 68 03 e8 	mov	r8,1000
80002972:	30 09       	mov	r9,0
80002974:	e0 6a 03 e7 	mov	r10,999
80002978:	30 0b       	mov	r11,0
8000297a:	ec 0a 00 0a 	add	r10,r6,r10
8000297e:	ee 0b 00 4b 	adc	r11,r7,r11
80002982:	f0 1f 00 42 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002986:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000298a:	f0 0a 00 0a 	add	r10,r8,r10
8000298e:	cb 8a       	rjmp	800026fe <et024006_Init+0x112>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002990:	31 b9       	mov	r9,27
80002992:	fc 18 c0 00 	movh	r8,0xc000
80002996:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002998:	31 09       	mov	r9,16
8000299a:	fc 18 c0 20 	movh	r8,0xc020
8000299e:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800029a0:	4b 48       	lddpc	r8,80002a70 <et024006_Init+0x484>
800029a2:	70 07       	ld.w	r7,r8[0x0]
800029a4:	32 88       	mov	r8,40
800029a6:	ee 08 06 46 	mulu.d	r6,r7,r8
800029aa:	e0 68 03 e8 	mov	r8,1000
800029ae:	30 09       	mov	r9,0
800029b0:	e0 6a 03 e7 	mov	r10,999
800029b4:	30 0b       	mov	r11,0
800029b6:	ec 0a 00 0a 	add	r10,r6,r10
800029ba:	ee 0b 00 4b 	adc	r11,r7,r11
800029be:	f0 1f 00 33 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029c2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029c6:	f0 0a 00 0a 	add	r10,r8,r10
800029ca:	ca da       	rjmp	80002724 <et024006_Init+0x138>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800029cc:	32 69       	mov	r9,38
800029ce:	fc 18 c0 00 	movh	r8,0xc000
800029d2:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800029d4:	30 49       	mov	r9,4
800029d6:	fc 18 c0 20 	movh	r8,0xc020
800029da:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800029dc:	4a 58       	lddpc	r8,80002a70 <et024006_Init+0x484>
800029de:	70 07       	ld.w	r7,r8[0x0]
800029e0:	32 88       	mov	r8,40
800029e2:	ee 08 06 46 	mulu.d	r6,r7,r8
800029e6:	e0 68 03 e8 	mov	r8,1000
800029ea:	30 09       	mov	r9,0
800029ec:	e0 6a 03 e7 	mov	r10,999
800029f0:	30 0b       	mov	r11,0
800029f2:	ec 0a 00 0a 	add	r10,r6,r10
800029f6:	ee 0b 00 4b 	adc	r11,r7,r11
800029fa:	f0 1f 00 24 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029fe:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a02:	f0 0a 00 0a 	add	r10,r8,r10
80002a06:	ca 2a       	rjmp	8000274a <et024006_Init+0x15e>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002a08:	fc 19 c0 00 	movh	r9,0xc000
80002a0c:	32 6a       	mov	r10,38
80002a0e:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002a10:	fc 18 c0 20 	movh	r8,0xc020
80002a14:	32 4b       	mov	r11,36
80002a16:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002a18:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002a1a:	32 c9       	mov	r9,44
80002a1c:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002a1e:	49 58       	lddpc	r8,80002a70 <et024006_Init+0x484>
80002a20:	70 07       	ld.w	r7,r8[0x0]
80002a22:	32 88       	mov	r8,40
80002a24:	ee 08 06 46 	mulu.d	r6,r7,r8
80002a28:	e0 68 03 e8 	mov	r8,1000
80002a2c:	30 09       	mov	r9,0
80002a2e:	e0 6a 03 e7 	mov	r10,999
80002a32:	30 0b       	mov	r11,0
80002a34:	ec 0a 00 0a 	add	r10,r6,r10
80002a38:	ee 0b 00 4b 	adc	r11,r7,r11
80002a3c:	f0 1f 00 13 	mcall	80002a88 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a40:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a44:	f0 0a 00 0a 	add	r10,r8,r10
80002a48:	c9 4a       	rjmp	80002770 <et024006_Init+0x184>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002a4a:	fc 19 c0 00 	movh	r9,0xc000
80002a4e:	32 68       	mov	r8,38
80002a50:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002a52:	fc 18 c0 20 	movh	r8,0xc020
80002a56:	33 ca       	mov	r10,60
80002a58:	b0 0a       	st.h	r8[0x0],r10
}

__always_inline static uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002a5a:	37 0a       	mov	r10,112
80002a5c:	b2 0a       	st.h	r9[0x0],r10
  return *ET024006_PARAM_ADDR;
80002a5e:	90 0b       	ld.sh	r11,r8[0x0]
80002a60:	5c 5b       	castu.b	r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002a62:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002a64:	16 99       	mov	r9,r11
80002a66:	a3 b9       	sbr	r9,0x3
80002a68:	b0 09       	st.h	r8[0x0],r9
  et024006_GeneralSettings();
  et024006_InterfaceSettings();
  et024006_PowerSettings();
  et024006_PowerUp();
  et024006_PowerOn();
}
80002a6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002a6e:	00 00       	add	r0,r0
80002a70:	00 00       	add	r0,r0
80002a72:	05 38       	ld.ub	r8,r2++
80002a74:	80 00       	ld.sh	r0,r0[0x0]
80002a76:	2a 90       	sub	r0,-87
80002a78:	80 00       	ld.sh	r0,r0[0x0]
80002a7a:	2c 30       	sub	r0,-61
80002a7c:	80 00       	ld.sh	r0,r0[0x0]
80002a7e:	2b ac       	sub	r12,-70
80002a80:	80 00       	ld.sh	r0,r0[0x0]
80002a82:	2c 48       	sub	r8,-60
80002a84:	80 00       	ld.sh	r0,r0[0x0]
80002a86:	2c 64       	sub	r4,-58
80002a88:	80 00       	ld.sh	r0,r0[0x0]
80002a8a:	38 34       	mov	r4,-125
80002a8c:	80 00       	ld.sh	r0,r0[0x0]
80002a8e:	25 7c       	sub	r12,87

80002a90 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80002a90:	eb cd 40 fc 	pushm	r2-r7,lr
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002a94:	ee 78 42 3f 	mov	r8,999999
80002a98:	f8 08 00 09 	add	r9,r12,r8
80002a9c:	e0 68 de 83 	mov	r8,56963
80002aa0:	ea 18 43 1b 	orh	r8,0x431b
80002aa4:	f2 08 06 48 	mulu.d	r8,r9,r8
80002aa8:	f2 08 16 12 	lsr	r8,r9,0x12
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
80002aac:	f0 08 00 25 	add	r5,r8,r8<<0x2
80002ab0:	a3 65       	lsl	r5,0x2
80002ab2:	ea c5 fc 19 	sub	r5,r5,-999
80002ab6:	e0 69 4d d3 	mov	r9,19923
80002aba:	ea 19 10 62 	orh	r9,0x1062
80002abe:	ea 09 06 44 	mulu.d	r4,r5,r9
80002ac2:	a7 85       	lsr	r5,0x6
80002ac4:	f0 0a 15 04 	lsl	r10,r8,0x4
80002ac8:	f4 08 01 07 	sub	r7,r10,r8
80002acc:	a1 77       	lsl	r7,0x1
80002ace:	ee c7 fc 19 	sub	r7,r7,-999
80002ad2:	ee 09 06 46 	mulu.d	r6,r7,r9
80002ad6:	0e 94       	mov	r4,r7
80002ad8:	a7 84       	lsr	r4,0x6
80002ada:	f4 08 01 07 	sub	r7,r10,r8
80002ade:	a3 67       	lsl	r7,0x2
80002ae0:	ee c7 fc 19 	sub	r7,r7,-999
80002ae4:	ee 09 06 46 	mulu.d	r6,r7,r9
80002ae8:	a7 87       	lsr	r7,0x6
80002aea:	f0 03 10 5a 	mul	r3,r8,90
80002aee:	e6 c3 fc 19 	sub	r3,r3,-999
80002af2:	e6 09 06 42 	mulu.d	r2,r3,r9
80002af6:	e6 0c 16 06 	lsr	r12,r3,0x6
80002afa:	e0 63 00 d2 	mov	r3,210
80002afe:	f0 03 02 43 	mul	r3,r8,r3
80002b02:	e6 c3 fc 19 	sub	r3,r3,-999
80002b06:	e6 09 06 42 	mulu.d	r2,r3,r9
80002b0a:	e6 06 16 06 	lsr	r6,r3,0x6
80002b0e:	f4 08 01 0b 	sub	r11,r10,r8
80002b12:	a5 6b       	lsl	r11,0x4
80002b14:	f6 cb fc 19 	sub	r11,r11,-999
80002b18:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002b1c:	f6 0e 16 06 	lsr	lr,r11,0x6
80002b20:	f0 03 10 64 	mul	r3,r8,100
80002b24:	e6 c3 fc 19 	sub	r3,r3,-999
80002b28:	e6 09 06 42 	mulu.d	r2,r3,r9
80002b2c:	a7 83       	lsr	r3,0x6
80002b2e:	e0 6a 01 0e 	mov	r10,270
80002b32:	b5 38       	mul	r8,r10
80002b34:	f0 c8 fc 19 	sub	r8,r8,-999
80002b38:	f0 09 06 48 	mulu.d	r8,r8,r9
80002b3c:	a7 89       	lsr	r9,0x6
80002b3e:	ec 04 00 0a 	add	r10,r6,r4
80002b42:	1c 3a       	cp.w	r10,lr
80002b44:	f4 0e 17 20 	movhs	lr,r10
80002b48:	ee 05 00 0b 	add	r11,r7,r5
80002b4c:	18 3b       	cp.w	r11,r12
80002b4e:	f6 0c 17 20 	movhs	r12,r11
80002b52:	06 3b       	cp.w	r11,r3
80002b54:	e6 0b 17 30 	movlo	r11,r3
80002b58:	12 3a       	cp.w	r10,r9
80002b5a:	f4 09 17 20 	movhs	r9,r10
80002b5e:	eb e4 11 05 	or	r5,r5,r4<<0x10
80002b62:	fe 6a 1c 00 	mov	r10,-123904
80002b66:	95 05       	st.w	r10[0x0],r5
80002b68:	ef e6 11 07 	or	r7,r7,r6<<0x10
80002b6c:	ef ec 10 87 	or	r7,r7,r12<<0x8
80002b70:	ef ee 11 87 	or	r7,r7,lr<<0x18
80002b74:	95 17       	st.w	r10[0x4],r7
80002b76:	1c 39       	cp.w	r9,lr
80002b78:	f2 0e 17 20 	movhs	lr,r9
80002b7c:	18 3b       	cp.w	r11,r12
80002b7e:	f8 0b 17 30 	movlo	r11,r12
80002b82:	f7 ee 11 0b 	or	r11,r11,lr<<0x10
80002b86:	95 2b       	st.w	r10[0x8],r11
80002b88:	e0 68 10 03 	mov	r8,4099
80002b8c:	95 38       	st.w	r10[0xc],r8
80002b8e:	30 19       	mov	r9,1
80002b90:	48 48       	lddpc	r8,80002ba0 <smc_init+0x110>
80002b92:	b0 89       	st.b	r8[0x0],r9
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
80002b94:	31 4b       	mov	r11,20
80002b96:	48 4c       	lddpc	r12,80002ba4 <smc_init+0x114>
80002b98:	f0 1f 00 04 	mcall	80002ba8 <smc_init+0x118>
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
}
80002b9c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002ba0:	00 00       	add	r0,r0
80002ba2:	05 40       	ld.w	r0,--r2
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	47 08       	lddsp	r8,sp[0x1c0]
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	2c 00       	sub	r0,-64

80002bac <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002bac:	f8 08 16 05 	lsr	r8,r12,0x5
80002bb0:	a9 68       	lsl	r8,0x8
80002bb2:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002bb6:	58 1b       	cp.w	r11,1
80002bb8:	c0 d0       	breq	80002bd2 <gpio_enable_module_pin+0x26>
80002bba:	c0 63       	brcs	80002bc6 <gpio_enable_module_pin+0x1a>
80002bbc:	58 2b       	cp.w	r11,2
80002bbe:	c1 00       	breq	80002bde <gpio_enable_module_pin+0x32>
80002bc0:	58 3b       	cp.w	r11,3
80002bc2:	c1 40       	breq	80002bea <gpio_enable_module_pin+0x3e>
80002bc4:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002bc6:	30 19       	mov	r9,1
80002bc8:	f2 0c 09 49 	lsl	r9,r9,r12
80002bcc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002bce:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002bd0:	c1 28       	rjmp	80002bf4 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002bd2:	30 19       	mov	r9,1
80002bd4:	f2 0c 09 49 	lsl	r9,r9,r12
80002bd8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002bda:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002bdc:	c0 c8       	rjmp	80002bf4 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002bde:	30 19       	mov	r9,1
80002be0:	f2 0c 09 49 	lsl	r9,r9,r12
80002be4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002be6:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002be8:	c0 68       	rjmp	80002bf4 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002bea:	30 19       	mov	r9,1
80002bec:	f2 0c 09 49 	lsl	r9,r9,r12
80002bf0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002bf2:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002bf4:	30 19       	mov	r9,1
80002bf6:	f2 0c 09 4c 	lsl	r12,r9,r12
80002bfa:	91 2c       	st.w	r8[0x8],r12
80002bfc:	5e fd       	retal	0
80002bfe:	d7 03       	nop

80002c00 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002c00:	d4 21       	pushm	r4-r7,lr
80002c02:	18 97       	mov	r7,r12
80002c04:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002c06:	58 0b       	cp.w	r11,0
80002c08:	c0 31       	brne	80002c0e <gpio_enable_module+0xe>
80002c0a:	30 05       	mov	r5,0
80002c0c:	c0 d8       	rjmp	80002c26 <gpio_enable_module+0x26>
80002c0e:	30 06       	mov	r6,0
80002c10:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002c12:	6e 1b       	ld.w	r11,r7[0x4]
80002c14:	6e 0c       	ld.w	r12,r7[0x0]
80002c16:	f0 1f 00 06 	mcall	80002c2c <gpio_enable_module+0x2c>
80002c1a:	18 45       	or	r5,r12
		gpiomap++;
80002c1c:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002c1e:	2f f6       	sub	r6,-1
80002c20:	0c 34       	cp.w	r4,r6
80002c22:	fe 9b ff f8 	brhi	80002c12 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002c26:	0a 9c       	mov	r12,r5
80002c28:	d8 22       	popm	r4-r7,pc
80002c2a:	00 00       	add	r0,r0
80002c2c:	80 00       	ld.sh	r0,r0[0x0]
80002c2e:	2b ac       	sub	r12,-70

80002c30 <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c30:	f8 08 16 05 	lsr	r8,r12,0x5
80002c34:	a9 68       	lsl	r8,0x8
80002c36:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002c3a:	30 19       	mov	r9,1
80002c3c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c40:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
80002c44:	91 1c       	st.w	r8[0x4],r12
}
80002c46:	5e fc       	retal	r12

80002c48 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c48:	f8 08 16 05 	lsr	r8,r12,0x5
80002c4c:	a9 68       	lsl	r8,0x8
80002c4e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002c52:	30 19       	mov	r9,1
80002c54:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c58:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002c5c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002c60:	91 1c       	st.w	r8[0x4],r12
}
80002c62:	5e fc       	retal	r12

80002c64 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c64:	f8 08 16 05 	lsr	r8,r12,0x5
80002c68:	a9 68       	lsl	r8,0x8
80002c6a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002c6e:	30 19       	mov	r9,1
80002c70:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c74:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002c78:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002c7c:	91 1c       	st.w	r8[0x4],r12
}
80002c7e:	5e fc       	retal	r12

80002c80 <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c80:	f8 08 16 05 	lsr	r8,r12,0x5
80002c84:	a9 68       	lsl	r8,0x8
80002c86:	e0 28 f0 00 	sub	r8,61440
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002c8a:	30 19       	mov	r9,1
80002c8c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c90:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002c94:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002c98:	91 1c       	st.w	r8[0x4],r12
}
80002c9a:	5e fc       	retal	r12

80002c9c <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c9c:	f8 08 16 05 	lsr	r8,r12,0x5
80002ca0:	a9 68       	lsl	r8,0x8
80002ca2:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80002ca6:	30 19       	mov	r9,1
80002ca8:	f2 0c 09 4c 	lsl	r12,r9,r12
80002cac:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80002cb0:	12 3b       	cp.w	r11,r9
80002cb2:	c0 a0       	breq	80002cc6 <gpio_enable_pin_interrupt+0x2a>
80002cb4:	c0 43       	brcs	80002cbc <gpio_enable_pin_interrupt+0x20>
80002cb6:	58 2b       	cp.w	r11,2
80002cb8:	c1 11       	brne	80002cda <gpio_enable_pin_interrupt+0x3e>
80002cba:	c0 b8       	rjmp	80002cd0 <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002cbc:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002cc0:	f1 4c 00 b8 	st.w	r8[184],r12
80002cc4:	c0 c8       	rjmp	80002cdc <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80002cc6:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002cca:	f1 4c 00 b8 	st.w	r8[184],r12
80002cce:	c0 78       	rjmp	80002cdc <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002cd0:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
80002cd4:	f1 4c 00 b4 	st.w	r8[180],r12
80002cd8:	c0 28       	rjmp	80002cdc <gpio_enable_pin_interrupt+0x40>
80002cda:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80002cdc:	f1 4c 00 94 	st.w	r8[148],r12
80002ce0:	5e fd       	retal	0

80002ce2 <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002ce2:	f8 08 16 05 	lsr	r8,r12,0x5
80002ce6:	a9 68       	lsl	r8,0x8
80002ce8:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80002cec:	f0 f8 00 d0 	ld.w	r8,r8[208]
80002cf0:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002cf4:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002cf8:	5e fc       	retal	r12

80002cfa <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002cfa:	f8 08 16 05 	lsr	r8,r12,0x5
80002cfe:	a9 68       	lsl	r8,0x8
80002d00:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80002d04:	30 19       	mov	r9,1
80002d06:	f2 0c 09 4c 	lsl	r12,r9,r12
80002d0a:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80002d0e:	5e fc       	retal	r12

80002d10 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002d10:	c0 08       	rjmp	80002d10 <_unhandled_interrupt>
80002d12:	d7 03       	nop

80002d14 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002d14:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002d18:	49 99       	lddpc	r9,80002d7c <INTC_register_interrupt+0x68>
80002d1a:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002d1e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002d22:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002d24:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002d28:	58 0a       	cp.w	r10,0
80002d2a:	c0 91       	brne	80002d3c <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002d2c:	49 59       	lddpc	r9,80002d80 <INTC_register_interrupt+0x6c>
80002d2e:	49 6a       	lddpc	r10,80002d84 <INTC_register_interrupt+0x70>
80002d30:	12 1a       	sub	r10,r9
80002d32:	fe 79 08 00 	mov	r9,-63488
80002d36:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002d3a:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002d3c:	58 1a       	cp.w	r10,1
80002d3e:	c0 a1       	brne	80002d52 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002d40:	49 09       	lddpc	r9,80002d80 <INTC_register_interrupt+0x6c>
80002d42:	49 2a       	lddpc	r10,80002d88 <INTC_register_interrupt+0x74>
80002d44:	12 1a       	sub	r10,r9
80002d46:	bf aa       	sbr	r10,0x1e
80002d48:	fe 79 08 00 	mov	r9,-63488
80002d4c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002d50:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80002d52:	58 2a       	cp.w	r10,2
80002d54:	c0 a1       	brne	80002d68 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002d56:	48 b9       	lddpc	r9,80002d80 <INTC_register_interrupt+0x6c>
80002d58:	48 da       	lddpc	r10,80002d8c <INTC_register_interrupt+0x78>
80002d5a:	12 1a       	sub	r10,r9
80002d5c:	bf ba       	sbr	r10,0x1f
80002d5e:	fe 79 08 00 	mov	r9,-63488
80002d62:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002d66:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002d68:	48 69       	lddpc	r9,80002d80 <INTC_register_interrupt+0x6c>
80002d6a:	48 aa       	lddpc	r10,80002d90 <INTC_register_interrupt+0x7c>
80002d6c:	12 1a       	sub	r10,r9
80002d6e:	ea 1a c0 00 	orh	r10,0xc000
80002d72:	fe 79 08 00 	mov	r9,-63488
80002d76:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002d7a:	5e fc       	retal	r12
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	47 a8       	lddsp	r8,sp[0x1e8]
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	42 00       	lddsp	r0,sp[0x80]
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	43 04       	lddsp	r4,sp[0xc0]
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	43 12       	lddsp	r2,sp[0xc4]
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	43 20       	lddsp	r0,sp[0xc8]
80002d90:	80 00       	ld.sh	r0,r0[0x0]
80002d92:	43 2e       	lddsp	lr,sp[0xc8]

80002d94 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002d94:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002d96:	49 18       	lddpc	r8,80002dd8 <INTC_init_interrupts+0x44>
80002d98:	e3 b8 00 01 	mtsr	0x4,r8
80002d9c:	49 0e       	lddpc	lr,80002ddc <INTC_init_interrupts+0x48>
80002d9e:	30 07       	mov	r7,0
80002da0:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002da2:	49 0c       	lddpc	r12,80002de0 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002da4:	49 05       	lddpc	r5,80002de4 <INTC_init_interrupts+0x50>
80002da6:	10 15       	sub	r5,r8
80002da8:	fe 76 08 00 	mov	r6,-63488
80002dac:	c1 08       	rjmp	80002dcc <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002dae:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002db0:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002db2:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002db4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002db8:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002dba:	10 3a       	cp.w	r10,r8
80002dbc:	fe 9b ff fc 	brhi	80002db4 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002dc0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002dc4:	2f f7       	sub	r7,-1
80002dc6:	2f 8e       	sub	lr,-8
80002dc8:	59 47       	cp.w	r7,20
80002dca:	c0 50       	breq	80002dd4 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002dcc:	7c 08       	ld.w	r8,lr[0x0]
80002dce:	58 08       	cp.w	r8,0
80002dd0:	ce f1       	brne	80002dae <INTC_init_interrupts+0x1a>
80002dd2:	cf 7b       	rjmp	80002dc0 <INTC_init_interrupts+0x2c>
80002dd4:	d8 22       	popm	r4-r7,pc
80002dd6:	00 00       	add	r0,r0
80002dd8:	80 00       	ld.sh	r0,r0[0x0]
80002dda:	42 00       	lddsp	r0,sp[0x80]
80002ddc:	80 00       	ld.sh	r0,r0[0x0]
80002dde:	47 a8       	lddsp	r8,sp[0x1e8]
80002de0:	80 00       	ld.sh	r0,r0[0x0]
80002de2:	2d 10       	sub	r0,-47
80002de4:	80 00       	ld.sh	r0,r0[0x0]
80002de6:	43 04       	lddsp	r4,sp[0xc0]

80002de8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002de8:	fe 78 08 00 	mov	r8,-63488
80002dec:	e0 69 00 83 	mov	r9,131
80002df0:	f2 0c 01 0c 	sub	r12,r9,r12
80002df4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002df8:	f2 ca ff c0 	sub	r10,r9,-64
80002dfc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002e00:	58 08       	cp.w	r8,0
80002e02:	c0 21       	brne	80002e06 <_get_interrupt_handler+0x1e>
80002e04:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
80002e06:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002e0a:	48 5a       	lddpc	r10,80002e1c <_get_interrupt_handler+0x34>
80002e0c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002e10:	f0 08 11 1f 	rsub	r8,r8,31
80002e14:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002e16:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002e1a:	5e fc       	retal	r12
80002e1c:	80 00       	ld.sh	r0,r0[0x0]
80002e1e:	47 a8       	lddsp	r8,sp[0x1e8]

80002e20 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002e20:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002e22:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002e26:	99 a8       	st.w	r12[0x28],r8
}
80002e28:	5e fc       	retal	r12
80002e2a:	d7 03       	nop

80002e2c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002e2c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002e2e:	ec 5b bb 9f 	cp.w	r11,899999
80002e32:	e0 8b 00 04 	brhi	80002e3a <pm_enable_osc0_crystal+0xe>
80002e36:	30 4b       	mov	r11,4
80002e38:	c1 38       	rjmp	80002e5e <pm_enable_osc0_crystal+0x32>
80002e3a:	e0 68 c6 bf 	mov	r8,50879
80002e3e:	ea 18 00 2d 	orh	r8,0x2d
80002e42:	10 3b       	cp.w	r11,r8
80002e44:	e0 8b 00 04 	brhi	80002e4c <pm_enable_osc0_crystal+0x20>
80002e48:	30 5b       	mov	r11,5
80002e4a:	c0 a8       	rjmp	80002e5e <pm_enable_osc0_crystal+0x32>
80002e4c:	e0 68 12 00 	mov	r8,4608
80002e50:	ea 18 00 7a 	orh	r8,0x7a
80002e54:	10 3b       	cp.w	r11,r8
80002e56:	f9 bb 03 06 	movlo	r11,6
80002e5a:	f9 bb 02 07 	movhs	r11,7
80002e5e:	f0 1f 00 02 	mcall	80002e64 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002e62:	d8 02       	popm	pc
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	2e 20       	sub	r0,-30

80002e68 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002e68:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002e6a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002e6e:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002e70:	78 08       	ld.w	r8,r12[0x0]
80002e72:	a3 a8       	sbr	r8,0x2
80002e74:	99 08       	st.w	r12[0x0],r8
}
80002e76:	5e fc       	retal	r12

80002e78 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002e78:	79 58       	ld.w	r8,r12[0x54]
80002e7a:	e2 18 00 80 	andl	r8,0x80,COH
80002e7e:	cf d0       	breq	80002e78 <pm_wait_for_clk0_ready>
}
80002e80:	5e fc       	retal	r12
80002e82:	d7 03       	nop

80002e84 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002e84:	eb cd 40 80 	pushm	r7,lr
80002e88:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002e8a:	f0 1f 00 04 	mcall	80002e98 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002e8e:	0e 9c       	mov	r12,r7
80002e90:	f0 1f 00 03 	mcall	80002e9c <pm_enable_clk0+0x18>
}
80002e94:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e98:	80 00       	ld.sh	r0,r0[0x0]
80002e9a:	2e 68       	sub	r8,-26
80002e9c:	80 00       	ld.sh	r0,r0[0x0]
80002e9e:	2e 78       	sub	r8,-25

80002ea0 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002ea0:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002ea2:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002ea6:	99 08       	st.w	r12[0x0],r8
}
80002ea8:	5e fc       	retal	r12
80002eaa:	d7 03       	nop

80002eac <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002eac:	eb cd 40 c0 	pushm	r6-r7,lr
80002eb0:	18 97       	mov	r7,r12
80002eb2:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002eb4:	f0 1f 00 06 	mcall	80002ecc <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002eb8:	0c 9b       	mov	r11,r6
80002eba:	0e 9c       	mov	r12,r7
80002ebc:	f0 1f 00 05 	mcall	80002ed0 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002ec0:	30 1b       	mov	r11,1
80002ec2:	0e 9c       	mov	r12,r7
80002ec4:	f0 1f 00 04 	mcall	80002ed4 <pm_switch_to_osc0+0x28>
}
80002ec8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ecc:	80 00       	ld.sh	r0,r0[0x0]
80002ece:	2e 2c       	sub	r12,-30
80002ed0:	80 00       	ld.sh	r0,r0[0x0]
80002ed2:	2e 84       	sub	r4,-24
80002ed4:	80 00       	ld.sh	r0,r0[0x0]
80002ed6:	2e a0       	sub	r0,-22

80002ed8 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002ed8:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002eda:	58 0c       	cp.w	r12,0
80002edc:	c0 40       	breq	80002ee4 <pcl_switch_to_osc+0xc>
80002ede:	fe 7c d8 f0 	mov	r12,-10000
80002ee2:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
80002ee4:	fe 7c 0c 00 	mov	r12,-62464
80002ee8:	f0 1f 00 02 	mcall	80002ef0 <pcl_switch_to_osc+0x18>
80002eec:	d8 0a       	popm	pc,r12=0
80002eee:	00 00       	add	r0,r0
80002ef0:	80 00       	ld.sh	r0,r0[0x0]
80002ef2:	2e ac       	sub	r12,-22

80002ef4 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80002ef4:	58 0b       	cp.w	r11,0
80002ef6:	c1 90       	breq	80002f28 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002ef8:	58 6c       	cp.w	r12,6
80002efa:	e0 8b 00 17 	brhi	80002f28 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002efe:	76 0a       	ld.w	r10,r11[0x0]
80002f00:	fe 78 30 00 	mov	r8,-53248
80002f04:	f8 c9 ff f0 	sub	r9,r12,-16
80002f08:	a5 79       	lsl	r9,0x5
80002f0a:	f0 09 00 09 	add	r9,r8,r9
80002f0e:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002f10:	76 19       	ld.w	r9,r11[0x4]
80002f12:	a5 7c       	lsl	r12,0x5
80002f14:	f0 0c 00 0c 	add	r12,r8,r12
80002f18:	f8 c8 fd fc 	sub	r8,r12,-516
80002f1c:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002f1e:	76 28       	ld.w	r8,r11[0x8]
80002f20:	f8 cc fd f8 	sub	r12,r12,-520
80002f24:	99 08       	st.w	r12[0x0],r8
80002f26:	5e fd       	retal	0

  return PWM_SUCCESS;
80002f28:	5e ff       	retal	1

80002f2a <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80002f2a:	18 98       	mov	r8,r12
80002f2c:	e0 18 ff 80 	andl	r8,0xff80
80002f30:	c0 20       	breq	80002f34 <pwm_start_channels+0xa>
80002f32:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002f34:	fe 78 30 00 	mov	r8,-53248
80002f38:	91 1c       	st.w	r8[0x4],r12
80002f3a:	5e fd       	retal	0

80002f3c <pwm_async_update_channel>:

int pwm_async_update_channel(unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
80002f3c:	58 6c       	cp.w	r12,6
80002f3e:	e0 88 00 03 	brls	80002f44 <pwm_async_update_channel+0x8>
80002f42:	5e ff       	retal	1
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
80002f44:	76 0a       	ld.w	r10,r11[0x0]
80002f46:	fe 78 30 00 	mov	r8,-53248
80002f4a:	f8 c9 ff f0 	sub	r9,r12,-16
80002f4e:	a5 79       	lsl	r9,0x5
80002f50:	f0 09 00 09 	add	r9,r8,r9
80002f54:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
80002f56:	76 49       	ld.w	r9,r11[0x10]
80002f58:	a5 7c       	lsl	r12,0x5
80002f5a:	18 08       	add	r8,r12
80002f5c:	f0 c8 fd f0 	sub	r8,r8,-528
80002f60:	91 09       	st.w	r8[0x0],r9
80002f62:	5e fd       	retal	0

80002f64 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002f64:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002f68:	58 0c       	cp.w	r12,0
80002f6a:	c0 21       	brne	80002f6e <pwm_init+0xa>
80002f6c:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002f6e:	e6 18 00 01 	andh	r8,0x1,COH
80002f72:	c0 91       	brne	80002f84 <pwm_init+0x20>
80002f74:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002f76:	fe 78 30 00 	mov	r8,-53248
80002f7a:	37 f9       	mov	r9,127
80002f7c:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002f7e:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002f80:	d5 03       	csrf	0x10
80002f82:	c0 68       	rjmp	80002f8e <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002f84:	fe 78 30 00 	mov	r8,-53248
80002f88:	37 f9       	mov	r9,127
80002f8a:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002f8c:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80002f8e:	78 08       	ld.w	r8,r12[0x0]
80002f90:	78 39       	ld.w	r9,r12[0xc]
80002f92:	a9 69       	lsl	r9,0x8
80002f94:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80002f98:	78 18       	ld.w	r8,r12[0x4]
80002f9a:	10 49       	or	r9,r8
80002f9c:	78 28       	ld.w	r8,r12[0x8]
80002f9e:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002fa2:	fe 78 30 00 	mov	r8,-53248
80002fa6:	91 09       	st.w	r8[0x0],r9
80002fa8:	5e fd       	retal	0
80002faa:	d7 03       	nop

80002fac <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002fac:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002fb0:	fe c0 ed b0 	sub	r0,pc,-4688

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002fb4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002fb8:	d5 53       	csrf	0x15
  cp      r0, r1
80002fba:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002fbc:	e0 61 05 38 	mov	r1,1336
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002fc0:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002fc2:	c0 72       	brcc	80002fd0 <idata_load_loop_end>
  cp      r0, r1
80002fc4:	fe c2 e6 d4 	sub	r2,pc,-6444

80002fc8 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002fc8:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002fca:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002fcc:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002fce:	cf d3       	brcs	80002fc8 <idata_load_loop>

80002fd0 <idata_load_loop_end>:
  mov     r2, 0
80002fd0:	e0 60 05 38 	mov	r0,1336
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002fd4:	e0 61 06 80 	mov	r1,1664
  cp      r0, r1
  brlo    udata_clear_loop
80002fd8:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002fda:	c0 62       	brcc	80002fe6 <udata_clear_loop_end>
80002fdc:	30 02       	mov	r2,0
80002fde:	30 03       	mov	r3,0

80002fe0 <udata_clear_loop>:
80002fe0:	a1 22       	st.d	r0++,r2
80002fe2:	02 30       	cp.w	r0,r1
80002fe4:	cf e3       	brcs	80002fe0 <udata_clear_loop>

80002fe6 <udata_clear_loop_end>:
80002fe6:	fe cf fa 4e 	sub	pc,pc,-1458
80002fea:	d7 03       	nop

80002fec <copiarArreglo>:
    }//while
}//shellSort

void copiarArreglo(short *a, short *b, short longitud){
	short contador = 0;
	while(contador < longitud){
80002fec:	30 08       	mov	r8,0
80002fee:	f0 0a 19 00 	cp.h	r10,r8
80002ff2:	5e ac       	retle	r12
        }//for
        i=i/2;
    }//while
}//shellSort

void copiarArreglo(short *a, short *b, short longitud){
80002ff4:	20 1a       	sub	r10,1
80002ff6:	5c 7a       	castu.h	r10
80002ff8:	2f fa       	sub	r10,-1
80002ffa:	a1 7a       	lsl	r10,0x1
80002ffc:	30 08       	mov	r8,0
	short contador = 0;
	while(contador < longitud){
		*b = *a;
80002ffe:	f8 08 04 09 	ld.sh	r9,r12[r8]
80003002:	f6 08 0a 09 	st.h	r11[r8],r9
80003006:	2f e8       	sub	r8,-2
    }//while
}//shellSort

void copiarArreglo(short *a, short *b, short longitud){
	short contador = 0;
	while(contador < longitud){
80003008:	14 38       	cp.w	r8,r10
8000300a:	cf a1       	brne	80002ffe <copiarArreglo+0x12>
8000300c:	5e fc       	retal	r12
8000300e:	d7 03       	nop

80003010 <timer>:
		break;
	}//Switch
	et024006_PrintString(tiempoTranscurrido, (const unsigned char *)&FONT8x8, 260, 20, WHITE, -1);
}//drawSort

void timer(void){
80003010:	eb cd 40 c0 	pushm	r6-r7,lr
	tc_read_sr(&AVR32_TC, 0);//Limpiar bandera
80003014:	30 0b       	mov	r11,0
80003016:	fe 7c 38 00 	mov	r12,-51200
8000301a:	f0 1f 00 2d 	mcall	800030cc <timer+0xbc>
	contadorMs++;
8000301e:	4a d9       	lddpc	r9,800030d0 <timer+0xc0>
80003020:	92 08       	ld.sh	r8,r9[0x0]
80003022:	2f f8       	sub	r8,-1
80003024:	b2 08       	st.h	r9[0x0],r8
	if(contadorMs==10){
80003026:	30 a9       	mov	r9,10
80003028:	f2 08 19 00 	cp.h	r8,r9
8000302c:	c4 d1       	brne	800030c6 <timer+0xb6>
		centecimas++;
8000302e:	4a a9       	lddpc	r9,800030d4 <timer+0xc4>
80003030:	92 08       	ld.sh	r8,r9[0x0]
80003032:	2f f8       	sub	r8,-1
80003034:	5c 88       	casts.h	r8
80003036:	b2 08       	st.h	r9[0x0],r8
		tiempoTranscurrido[3] = (centecimas%10)+'0';
80003038:	4a 89       	lddpc	r9,800030d8 <timer+0xc8>
8000303a:	e0 6e 66 67 	mov	lr,26215
8000303e:	ea 1e 66 66 	orh	lr,0x6666
80003042:	f0 0e 04 4a 	muls.d	r10,r8,lr
80003046:	a3 4b       	asr	r11,0x2
80003048:	f0 0a 14 1f 	asr	r10,r8,0x1f
8000304c:	14 1b       	sub	r11,r10
8000304e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003052:	f0 0b 01 1b 	sub	r11,r8,r11<<0x1
80003056:	2d 0b       	sub	r11,-48
80003058:	b2 bb       	st.b	r9[0x3],r11
		tiempoTranscurrido[2] = '.';
8000305a:	32 eb       	mov	r11,46
8000305c:	b2 ab       	st.b	r9[0x2],r11
		tiempoTranscurrido[1] = (centecimas%100)/10+'0';
8000305e:	e0 6b 85 1f 	mov	r11,34079
80003062:	ea 1b 51 eb 	orh	r11,0x51eb
80003066:	f0 0b 04 46 	muls.d	r6,r8,r11
8000306a:	0e 9c       	mov	r12,r7
8000306c:	a5 5c       	asr	r12,0x5
8000306e:	14 1c       	sub	r12,r10
80003070:	f8 0c 10 64 	mul	r12,r12,100
80003074:	f0 0c 01 0c 	sub	r12,r8,r12
80003078:	5c 8c       	casts.h	r12
8000307a:	f8 0e 04 46 	muls.d	r6,r12,lr
8000307e:	0e 9e       	mov	lr,r7
80003080:	a3 4e       	asr	lr,0x2
80003082:	bf 5c       	asr	r12,0x1f
80003084:	fc 0c 01 0c 	sub	r12,lr,r12
80003088:	2d 0c       	sub	r12,-48
8000308a:	b2 9c       	st.b	r9[0x1],r12
		tiempoTranscurrido[0] = (centecimas%1000)/100+'0';
8000308c:	e0 67 4d d3 	mov	r7,19923
80003090:	ea 17 10 62 	orh	r7,0x1062
80003094:	f0 07 04 46 	muls.d	r6,r8,r7
80003098:	0e 9c       	mov	r12,r7
8000309a:	a7 4c       	asr	r12,0x6
8000309c:	f8 0a 01 0a 	sub	r10,r12,r10
800030a0:	e0 6c 03 e8 	mov	r12,1000
800030a4:	b9 3a       	mul	r10,r12
800030a6:	14 18       	sub	r8,r10
800030a8:	5c 88       	casts.h	r8
800030aa:	f0 0b 04 4a 	muls.d	r10,r8,r11
800030ae:	a5 5b       	asr	r11,0x5
800030b0:	bf 58       	asr	r8,0x1f
800030b2:	f6 08 01 08 	sub	r8,r11,r8
800030b6:	2d 08       	sub	r8,-48
800030b8:	b2 88       	st.b	r9[0x0],r8
		gpio_tgl_gpio_pin(LED0_GPIO);//Cada 100ms
800030ba:	33 bc       	mov	r12,59
800030bc:	f0 1f 00 08 	mcall	800030dc <timer+0xcc>
		contadorMs=0;
800030c0:	30 09       	mov	r9,0
800030c2:	48 48       	lddpc	r8,800030d0 <timer+0xc0>
800030c4:	b0 09       	st.h	r8[0x0],r9
	}//If
}//timer
800030c6:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800030ca:	d6 03       	rete
800030cc:	80 00       	ld.sh	r0,r0[0x0]
800030ce:	20 b6       	sub	r6,11
800030d0:	00 00       	add	r0,r0
800030d2:	06 72       	tst	r2,r3
800030d4:	00 00       	add	r0,r0
800030d6:	06 70       	tst	r0,r3
800030d8:	00 00       	add	r0,r0
800030da:	06 74       	tst	r4,r3
800030dc:	80 00       	ld.sh	r0,r0[0x0]
800030de:	2c 80       	sub	r0,-56

800030e0 <drawSort>:
		*b = *a;
		b++; a++; contador++;
	}//While
}//copiarArreglo

void drawSort(short *arreglo){
800030e0:	eb cd 40 f8 	pushm	r3-r7,lr
800030e4:	18 96       	mov	r6,r12
800030e6:	30 07       	mov	r7,0
	for (int l=0; l<ET024006_WIDTH; l++){
		et024006_DrawVertLine( l, 0, ET024006_HEIGHT, BLACK);
800030e8:	0e 95       	mov	r5,r7
800030ea:	e0 64 00 f0 	mov	r4,240
		et024006_DrawVertLine( l, ET024006_HEIGHT-arreglo[l], arreglo[l], WHITE);
800030ee:	e0 63 ff ff 	mov	r3,65535
	}//While
}//copiarArreglo

void drawSort(short *arreglo){
	for (int l=0; l<ET024006_WIDTH; l++){
		et024006_DrawVertLine( l, 0, ET024006_HEIGHT, BLACK);
800030f2:	0a 99       	mov	r9,r5
800030f4:	08 9a       	mov	r10,r4
800030f6:	0a 9b       	mov	r11,r5
800030f8:	0e 9c       	mov	r12,r7
800030fa:	f0 1f 00 34 	mcall	800031c8 <drawSort+0xe8>
		et024006_DrawVertLine( l, ET024006_HEIGHT-arreglo[l], arreglo[l], WHITE);
800030fe:	0d 1a       	ld.sh	r10,r6++
80003100:	e0 6b 00 f0 	mov	r11,240
80003104:	14 1b       	sub	r11,r10
80003106:	06 99       	mov	r9,r3
80003108:	5c 7a       	castu.h	r10
8000310a:	5c 7b       	castu.h	r11
8000310c:	0e 9c       	mov	r12,r7
8000310e:	f0 1f 00 2f 	mcall	800031c8 <drawSort+0xe8>
		b++; a++; contador++;
	}//While
}//copiarArreglo

void drawSort(short *arreglo){
	for (int l=0; l<ET024006_WIDTH; l++){
80003112:	2f f7       	sub	r7,-1
80003114:	e0 47 01 40 	cp.w	r7,320
80003118:	ce d1       	brne	800030f2 <drawSort+0x12>
		et024006_DrawVertLine( l, 0, ET024006_HEIGHT, BLACK);
		et024006_DrawVertLine( l, ET024006_HEIGHT-arreglo[l], arreglo[l], WHITE);
	}//for
	switch(currentSort){
8000311a:	4a d8       	lddpc	r8,800031cc <drawSort+0xec>
8000311c:	90 08       	ld.sh	r8,r8[0x0]
8000311e:	30 29       	mov	r9,2
80003120:	f2 08 19 00 	cp.h	r8,r9
80003124:	c1 e0       	breq	80003160 <drawSort+0x80>
80003126:	e0 89 00 07 	brgt	80003134 <drawSort+0x54>
8000312a:	30 19       	mov	r9,1
8000312c:	f2 08 19 00 	cp.h	r8,r9
80003130:	c3 e1       	brne	800031ac <drawSort+0xcc>
80003132:	c0 a8       	rjmp	80003146 <drawSort+0x66>
80003134:	30 39       	mov	r9,3
80003136:	f2 08 19 00 	cp.h	r8,r9
8000313a:	c2 00       	breq	8000317a <drawSort+0x9a>
8000313c:	30 49       	mov	r9,4
8000313e:	f2 08 19 00 	cp.h	r8,r9
80003142:	c3 51       	brne	800031ac <drawSort+0xcc>
80003144:	c2 88       	rjmp	80003194 <drawSort+0xb4>
		case 1:
		et024006_PrintString("Bubble Sort:", (const unsigned char *)&FONT8x8, 150, 20, WHITE, -1);
80003146:	3f f8       	mov	r8,-1
80003148:	1a d8       	st.w	--sp,r8
8000314a:	e0 68 ff ff 	mov	r8,65535
8000314e:	31 49       	mov	r9,20
80003150:	e0 6a 00 96 	mov	r10,150
80003154:	49 fb       	lddpc	r11,800031d0 <drawSort+0xf0>
80003156:	4a 0c       	lddpc	r12,800031d4 <drawSort+0xf4>
80003158:	f0 1f 00 20 	mcall	800031d8 <drawSort+0xf8>
		break;
8000315c:	2f fd       	sub	sp,-4
8000315e:	c2 78       	rjmp	800031ac <drawSort+0xcc>
		case 2:
		et024006_PrintString("Select Sort:", (const unsigned char *)&FONT8x8, 150, 20, WHITE, -1);
80003160:	3f f8       	mov	r8,-1
80003162:	1a d8       	st.w	--sp,r8
80003164:	e0 68 ff ff 	mov	r8,65535
80003168:	31 49       	mov	r9,20
8000316a:	e0 6a 00 96 	mov	r10,150
8000316e:	49 9b       	lddpc	r11,800031d0 <drawSort+0xf0>
80003170:	49 bc       	lddpc	r12,800031dc <drawSort+0xfc>
80003172:	f0 1f 00 1a 	mcall	800031d8 <drawSort+0xf8>
		break;
80003176:	2f fd       	sub	sp,-4
80003178:	c1 a8       	rjmp	800031ac <drawSort+0xcc>
		case 3:
		et024006_PrintString("Quick Sort:", (const unsigned char *)&FONT8x8, 150, 20, WHITE, -1);
8000317a:	3f f8       	mov	r8,-1
8000317c:	1a d8       	st.w	--sp,r8
8000317e:	e0 68 ff ff 	mov	r8,65535
80003182:	31 49       	mov	r9,20
80003184:	e0 6a 00 96 	mov	r10,150
80003188:	49 2b       	lddpc	r11,800031d0 <drawSort+0xf0>
8000318a:	49 6c       	lddpc	r12,800031e0 <drawSort+0x100>
8000318c:	f0 1f 00 13 	mcall	800031d8 <drawSort+0xf8>
		break;
80003190:	2f fd       	sub	sp,-4
80003192:	c0 d8       	rjmp	800031ac <drawSort+0xcc>
		case 4:
		et024006_PrintString("Shell Sort:", (const unsigned char *)&FONT8x8, 150, 20, WHITE, -1);
80003194:	3f f8       	mov	r8,-1
80003196:	1a d8       	st.w	--sp,r8
80003198:	e0 68 ff ff 	mov	r8,65535
8000319c:	31 49       	mov	r9,20
8000319e:	e0 6a 00 96 	mov	r10,150
800031a2:	48 cb       	lddpc	r11,800031d0 <drawSort+0xf0>
800031a4:	49 0c       	lddpc	r12,800031e4 <drawSort+0x104>
800031a6:	f0 1f 00 0d 	mcall	800031d8 <drawSort+0xf8>
800031aa:	2f fd       	sub	sp,-4
		break;
	}//Switch
	et024006_PrintString(tiempoTranscurrido, (const unsigned char *)&FONT8x8, 260, 20, WHITE, -1);
800031ac:	3f f8       	mov	r8,-1
800031ae:	1a d8       	st.w	--sp,r8
800031b0:	e0 68 ff ff 	mov	r8,65535
800031b4:	31 49       	mov	r9,20
800031b6:	e0 6a 01 04 	mov	r10,260
800031ba:	48 6b       	lddpc	r11,800031d0 <drawSort+0xf0>
800031bc:	48 bc       	lddpc	r12,800031e8 <drawSort+0x108>
800031be:	f0 1f 00 07 	mcall	800031d8 <drawSort+0xf8>
800031c2:	2f fd       	sub	sp,-4
}//drawSort
800031c4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	25 60       	sub	r0,86
800031cc:	00 00       	add	r0,r0
800031ce:	00 2c       	rsub	r12,r0
800031d0:	80 00       	ld.sh	r0,r0[0x0]
800031d2:	44 00       	lddsp	r0,sp[0x100]
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	48 48       	lddpc	r8,800031e4 <drawSort+0x104>
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	22 a4       	sub	r4,42
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	48 58       	lddpc	r8,800031f0 <shellSort+0x4>
800031e0:	80 00       	ld.sh	r0,r0[0x0]
800031e2:	48 68       	lddpc	r8,800031f8 <shellSort+0xc>
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	48 74       	lddpc	r4,80003200 <shellSort+0x14>
800031e8:	00 00       	add	r0,r0
800031ea:	06 74       	tst	r4,r3

800031ec <shellSort>:
    if(i<fin){
        quickSort(salida,i,fin,longitud);
    }//if
}//quickSort

void shellSort(short *salida, short longitud){
800031ec:	d4 31       	pushm	r0-r7,lr
800031ee:	18 97       	mov	r7,r12
800031f0:	16 90       	mov	r0,r11
	enter = 1;
800031f2:	30 18       	mov	r8,1
800031f4:	4b 49       	lddpc	r9,800032c4 <shellSort+0xd8>
800031f6:	93 08       	st.w	r9[0x0],r8
	currentSort = 4;
800031f8:	30 4a       	mov	r10,4
800031fa:	4b 49       	lddpc	r9,800032c8 <shellSort+0xdc>
800031fc:	b2 0a       	st.h	r9[0x0],r10
    short i,x,y,t;
    for(i=1;i<longitud;i=i*3+1){}
800031fe:	f0 0b 19 00 	cp.h	r11,r8
80003202:	e0 89 00 05 	brgt	8000320c <shellSort+0x20>
80003206:	30 16       	mov	r6,1
80003208:	0c 92       	mov	r2,r6
8000320a:	c4 e8       	rjmp	800032a6 <shellSort+0xba>
8000320c:	30 16       	mov	r6,1
8000320e:	ec 08 15 01 	lsl	r8,r6,0x1
80003212:	f0 06 00 06 	add	r6,r8,r6
80003216:	2f f6       	sub	r6,-1
80003218:	5c 86       	casts.h	r6
8000321a:	ec 00 19 00 	cp.h	r0,r6
8000321e:	fe 99 ff f8 	brgt	8000320e <shellSort+0x22>
    while (i>0){
80003222:	30 08       	mov	r8,0
80003224:	f0 06 19 00 	cp.h	r6,r8
80003228:	e0 8a 00 4c 	brle	800032c0 <shellSort+0xd4>
8000322c:	0c 92       	mov	r2,r6
8000322e:	c3 c8       	rjmp	800032a6 <shellSort+0xba>
        for (x=i; x<longitud; x++){
            y=x;
            t=salida[x];
80003230:	ee 02 04 1b 	ld.sh	r11,r7[r2<<0x1]
            while(y>=i&&salida[y-i]>t){
80003234:	e4 06 19 00 	cp.h	r6,r2
80003238:	e0 89 00 1d 	brgt	80003272 <shellSort+0x86>
8000323c:	e4 06 01 08 	sub	r8,r2,r6
80003240:	ee 08 04 19 	ld.sh	r9,r7[r8<<0x1]
80003244:	f2 0b 19 00 	cp.h	r11,r9
80003248:	c1 54       	brge	80003272 <shellSort+0x86>
    if(i<fin){
        quickSort(salida,i,fin,longitud);
    }//if
}//quickSort

void shellSort(short *salida, short longitud){
8000324a:	f5 d1 b0 10 	bfexts	r10,r1,0x0,0x10
8000324e:	04 98       	mov	r8,r2
    while (i>0){
        for (x=i; x<longitud; x++){
            y=x;
            t=salida[x];
            while(y>=i&&salida[y-i]>t){
                salida[y]=salida[y-i];
80003250:	ee 08 0a 19 	st.h	r7[r8<<0x1],r9
    if(i<fin){
        quickSort(salida,i,fin,longitud);
    }//if
}//quickSort

void shellSort(short *salida, short longitud){
80003254:	0a 18       	sub	r8,r5
80003256:	5c 88       	casts.h	r8
    for(i=1;i<longitud;i=i*3+1){}
    while (i>0){
        for (x=i; x<longitud; x++){
            y=x;
            t=salida[x];
            while(y>=i&&salida[y-i]>t){
80003258:	ec 0a 19 00 	cp.h	r10,r6
8000325c:	c0 c5       	brlt	80003274 <shellSort+0x88>
8000325e:	f0 03 01 09 	sub	r9,r8,r3
80003262:	ee 09 04 19 	ld.sh	r9,r7[r9<<0x1]
80003266:	08 0a       	add	r10,r4
80003268:	5c 8a       	casts.h	r10
8000326a:	f2 0b 19 00 	cp.h	r11,r9
8000326e:	cf 15       	brlt	80003250 <shellSort+0x64>
80003270:	c0 28       	rjmp	80003274 <shellSort+0x88>
80003272:	04 98       	mov	r8,r2
                salida[y]=salida[y-i];
                y=y-i;
            }//while
            salida[y]=t;
80003274:	ee 08 0a 1b 	st.h	r7[r8<<0x1],r11
			drawSort(salida);
80003278:	0e 9c       	mov	r12,r7
8000327a:	f0 1f 00 15 	mcall	800032cc <shellSort+0xe0>
	enter = 1;
	currentSort = 4;
    short i,x,y,t;
    for(i=1;i<longitud;i=i*3+1){}
    while (i>0){
        for (x=i; x<longitud; x++){
8000327e:	2f f2       	sub	r2,-1
80003280:	5c 82       	casts.h	r2
80003282:	2f f1       	sub	r1,-1
80003284:	5c 81       	casts.h	r1
80003286:	e4 00 19 00 	cp.h	r0,r2
8000328a:	fe 99 ff d3 	brgt	80003230 <shellSort+0x44>
                y=y-i;
            }//while
            salida[y]=t;
			drawSort(salida);
        }//for
        i=i/2;
8000328e:	ec 08 16 1f 	lsr	r8,r6,0x1f
80003292:	f0 06 00 06 	add	r6,r8,r6
80003296:	ed d6 b0 30 	bfexts	r6,r6,0x1,0x10
void shellSort(short *salida, short longitud){
	enter = 1;
	currentSort = 4;
    short i,x,y,t;
    for(i=1;i<longitud;i=i*3+1){}
    while (i>0){
8000329a:	30 08       	mov	r8,0
8000329c:	f0 06 19 00 	cp.h	r6,r8
800032a0:	e0 8a 00 10 	brle	800032c0 <shellSort+0xd4>
800032a4:	0c 92       	mov	r2,r6
        for (x=i; x<longitud; x++){
800032a6:	e4 00 19 00 	cp.h	r0,r2
800032aa:	fe 9a ff f2 	brle	8000328e <shellSort+0xa2>
    if(i<fin){
        quickSort(salida,i,fin,longitud);
    }//if
}//quickSort

void shellSort(short *salida, short longitud){
800032ae:	0c 95       	mov	r5,r6
800032b0:	e4 06 01 01 	sub	r1,r2,r6
800032b4:	5c 81       	casts.h	r1
    for(i=1;i<longitud;i=i*3+1){}
    while (i>0){
        for (x=i; x<longitud; x++){
            y=x;
            t=salida[x];
            while(y>=i&&salida[y-i]>t){
800032b6:	0c 93       	mov	r3,r6
    if(i<fin){
        quickSort(salida,i,fin,longitud);
    }//if
}//quickSort

void shellSort(short *salida, short longitud){
800032b8:	ec 04 11 00 	rsub	r4,r6,0
800032bc:	5c 84       	casts.h	r4
800032be:	cb 9b       	rjmp	80003230 <shellSort+0x44>
800032c0:	d8 32       	popm	r0-r7,pc
800032c2:	00 00       	add	r0,r0
800032c4:	00 00       	add	r0,r0
800032c6:	00 08       	add	r8,r0
800032c8:	00 00       	add	r0,r0
800032ca:	00 2c       	rsub	r12,r0
800032cc:	80 00       	ld.sh	r0,r0[0x0]
800032ce:	30 e0       	mov	r0,14

800032d0 <quickSort>:
		salida[x] = tmp;
		drawSort(salida);delay_ms(4);
	}//for
}//selectionSort

void quickSort(short *salida, short inicio, short fin, short longitud){
800032d0:	d4 31       	pushm	r0-r7,lr
800032d2:	20 4d       	sub	sp,16
800032d4:	18 93       	mov	r3,r12
800032d6:	16 94       	mov	r4,r11
800032d8:	14 90       	mov	r0,r10
800032da:	50 19       	stdsp	sp[0x4],r9
	enter = 1;
800032dc:	30 19       	mov	r9,1
800032de:	4b b8       	lddpc	r8,800033c8 <quickSort+0xf8>
800032e0:	91 09       	st.w	r8[0x0],r9
	currentSort = 3;
800032e2:	30 39       	mov	r9,3
800032e4:	4b a8       	lddpc	r8,800033cc <quickSort+0xfc>
800032e6:	b0 09       	st.h	r8[0x0],r9
    short i = inicio, f=fin, t;
    short x = salida[(inicio+fin)/2];
800032e8:	50 3b       	stdsp	sp[0xc],r11
800032ea:	50 2a       	stdsp	sp[0x8],r10
800032ec:	f4 0b 00 08 	add	r8,r10,r11
800032f0:	f0 09 16 1f 	lsr	r9,r8,0x1f
800032f4:	f2 08 00 08 	add	r8,r9,r8
800032f8:	a1 58       	asr	r8,0x1
800032fa:	f8 08 04 16 	ld.sh	r6,r12[r8<<0x1]
800032fe:	16 92       	mov	r2,r11
80003300:	2f f2       	sub	r2,-1
80003302:	5c 82       	casts.h	r2
80003304:	14 97       	mov	r7,r10
    do{
        while(salida[i]<x&&f<=fin){i++;}//while
80003306:	30 05       	mov	r5,0
80003308:	c0 38       	rjmp	8000330e <quickSort+0x3e>

void quickSort(short *salida, short inicio, short fin, short longitud){
	enter = 1;
	currentSort = 3;
    short i = inicio, f=fin, t;
    short x = salida[(inicio+fin)/2];
8000330a:	2f f2       	sub	r2,-1
8000330c:	5c 82       	casts.h	r2
8000330e:	e4 c1 00 01 	sub	r1,r2,1
80003312:	5c 81       	casts.h	r1
    do{
        while(salida[i]<x&&f<=fin){i++;}//while
80003314:	e6 01 00 1e 	add	lr,r3,r1<<0x1
80003318:	9c 0c       	ld.sh	r12,lr[0x0]
8000331a:	ec 0c 19 00 	cp.h	r12,r6
8000331e:	5f 59       	srlt	r9
80003320:	e0 07 19 00 	cp.h	r7,r0
80003324:	5f a8       	srle	r8
80003326:	f3 e8 00 08 	and	r8,r9,r8
8000332a:	ea 08 18 00 	cp.b	r8,r5
8000332e:	ce e1       	brne	8000330a <quickSort+0x3a>
        while(x<salida[f]&&f>inicio){f--;}//while bhvgcfvgbjhknlm,
80003330:	e6 07 00 18 	add	r8,r3,r7<<0x1
80003334:	90 09       	ld.sh	r9,r8[0x0]
80003336:	ec 09 19 00 	cp.h	r9,r6
8000333a:	5f 9a       	srgt	r10
8000333c:	50 0a       	stdsp	sp[0x0],r10
8000333e:	e8 07 19 00 	cp.h	r7,r4
80003342:	5f 9a       	srgt	r10
80003344:	40 0b       	lddsp	r11,sp[0x0]
80003346:	f7 ea 00 0a 	and	r10,r11,r10
8000334a:	ea 0a 18 00 	cp.b	r10,r5
8000334e:	c1 30       	breq	80003374 <quickSort+0xa4>
80003350:	50 0c       	stdsp	sp[0x0],r12
80003352:	20 17       	sub	r7,1
80003354:	5c 87       	casts.h	r7
80003356:	e6 07 00 18 	add	r8,r3,r7<<0x1
8000335a:	90 09       	ld.sh	r9,r8[0x0]
8000335c:	ec 09 19 00 	cp.h	r9,r6
80003360:	5f 9b       	srgt	r11
80003362:	ee 04 19 00 	cp.h	r4,r7
80003366:	5f 5a       	srlt	r10
80003368:	f7 ea 00 0a 	and	r10,r11,r10
8000336c:	ea 0a 18 00 	cp.b	r10,r5
80003370:	cf 11       	brne	80003352 <quickSort+0x82>
80003372:	40 0c       	lddsp	r12,sp[0x0]
        if(i<=f){
80003374:	e2 07 19 00 	cp.h	r7,r1
80003378:	c2 15       	brlt	800033ba <quickSort+0xea>
            t=salida[i];
            salida[i]=salida[f];
8000337a:	bc 09       	st.h	lr[0x0],r9
            salida[f]=t;
8000337c:	b0 0c       	st.h	r8[0x0],r12
8000337e:	e3 d2 b0 10 	bfexts	r1,r2,0x0,0x10
            i++; f--;
80003382:	20 17       	sub	r7,1
80003384:	5c 87       	casts.h	r7
        }//if
		drawSort(salida);
80003386:	06 9c       	mov	r12,r3
80003388:	f0 1f 00 12 	mcall	800033d0 <quickSort+0x100>
    }while (i<=f);//do
8000338c:	e2 07 19 00 	cp.h	r7,r1
80003390:	cb d4       	brge	8000330a <quickSort+0x3a>
    if(inicio<f){
80003392:	ee 04 19 00 	cp.h	r4,r7
80003396:	c0 74       	brge	800033a4 <quickSort+0xd4>
        quickSort(salida,inicio,f,longitud);
80003398:	40 19       	lddsp	r9,sp[0x4]
8000339a:	0e 9a       	mov	r10,r7
8000339c:	40 3b       	lddsp	r11,sp[0xc]
8000339e:	06 9c       	mov	r12,r3
800033a0:	f0 1f 00 0d 	mcall	800033d4 <quickSort+0x104>
    }//if
    if(i<fin){
800033a4:	e2 00 19 00 	cp.h	r0,r1
800033a8:	e0 8a 00 0d 	brle	800033c2 <quickSort+0xf2>
        quickSort(salida,i,fin,longitud);
800033ac:	40 19       	lddsp	r9,sp[0x4]
800033ae:	40 2a       	lddsp	r10,sp[0x8]
800033b0:	02 9b       	mov	r11,r1
800033b2:	06 9c       	mov	r12,r3
800033b4:	f0 1f 00 08 	mcall	800033d4 <quickSort+0x104>
800033b8:	c0 58       	rjmp	800033c2 <quickSort+0xf2>
            t=salida[i];
            salida[i]=salida[f];
            salida[f]=t;
            i++; f--;
        }//if
		drawSort(salida);
800033ba:	06 9c       	mov	r12,r3
800033bc:	f0 1f 00 05 	mcall	800033d0 <quickSort+0x100>
800033c0:	ce 9b       	rjmp	80003392 <quickSort+0xc2>
        quickSort(salida,inicio,f,longitud);
    }//if
    if(i<fin){
        quickSort(salida,i,fin,longitud);
    }//if
}//quickSort
800033c2:	2f cd       	sub	sp,-16
800033c4:	d8 32       	popm	r0-r7,pc
800033c6:	00 00       	add	r0,r0
800033c8:	00 00       	add	r0,r0
800033ca:	00 08       	add	r8,r0
800033cc:	00 00       	add	r0,r0
800033ce:	00 2c       	rsub	r12,r0
800033d0:	80 00       	ld.sh	r0,r0[0x0]
800033d2:	30 e0       	mov	r0,14
800033d4:	80 00       	ld.sh	r0,r0[0x0]
800033d6:	32 d0       	mov	r0,45

800033d8 <selectionSort>:
        cont2++; cont1=0;
	drawSort(salida);delay_ms(4);
    }//While
}//bubbleSort

void selectionSort(short *salida, short longitud) {
800033d8:	eb cd 40 f8 	pushm	r3-r7,lr
800033dc:	18 97       	mov	r7,r12
800033de:	16 96       	mov	r6,r11
	enter = 1;
800033e0:	30 19       	mov	r9,1
800033e2:	4a 78       	lddpc	r8,8000347c <selectionSort+0xa4>
800033e4:	91 09       	st.w	r8[0x0],r9
	currentSort = 2;
800033e6:	30 29       	mov	r9,2
800033e8:	4a 68       	lddpc	r8,80003480 <selectionSort+0xa8>
800033ea:	b0 09       	st.h	r8[0x0],r9
	short x, y, min, tmp;
	for(x = 0; x < longitud; x++) {
800033ec:	30 08       	mov	r8,0
800033ee:	f0 0b 19 00 	cp.h	r11,r8
800033f2:	e0 8a 00 43 	brle	80003478 <selectionSort+0xa0>
800033f6:	18 93       	mov	r3,r12
800033f8:	30 14       	mov	r4,1
800033fa:	30 05       	mov	r5,0
800033fc:	08 98       	mov	r8,r4
800033fe:	5c 88       	casts.h	r8
		min = x;
		for(y = x + 1; y < longitud; y++) {
80003400:	ec 08 19 00 	cp.h	r8,r6
80003404:	c0 35       	brlt	8000340a <selectionSort+0x32>
80003406:	0a 99       	mov	r9,r5
80003408:	c1 08       	rjmp	80003428 <selectionSort+0x50>
8000340a:	0a 99       	mov	r9,r5
			if(salida[min] > salida[y]) {
8000340c:	ee 09 04 1b 	ld.sh	r11,r7[r9<<0x1]
80003410:	ee 08 04 1a 	ld.sh	r10,r7[r8<<0x1]
80003414:	f4 0b 19 00 	cp.h	r11,r10
80003418:	f0 09 17 90 	movgt	r9,r8
	enter = 1;
	currentSort = 2;
	short x, y, min, tmp;
	for(x = 0; x < longitud; x++) {
		min = x;
		for(y = x + 1; y < longitud; y++) {
8000341c:	2f f8       	sub	r8,-1
8000341e:	5c 88       	casts.h	r8
80003420:	f0 06 19 00 	cp.h	r6,r8
80003424:	fe 99 ff f4 	brgt	8000340c <selectionSort+0x34>
			if(salida[min] > salida[y]) {
				min = y;
			}//if
		}//for
		tmp = salida[min];
80003428:	ee 09 00 19 	add	r9,r7,r9<<0x1
8000342c:	92 08       	ld.sh	r8,r9[0x0]
		salida[min] = salida[x];
8000342e:	86 0a       	ld.sh	r10,r3[0x0]
80003430:	b2 0a       	st.h	r9[0x0],r10
		salida[x] = tmp;
80003432:	a6 08       	st.h	r3[0x0],r8
		drawSort(salida);delay_ms(4);
80003434:	0e 9c       	mov	r12,r7
80003436:	f0 1f 00 14 	mcall	80003484 <selectionSort+0xac>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000343a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000343e:	e2 79 a9 80 	mov	r9,240000
80003442:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003446:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000344a:	14 38       	cp.w	r8,r10
8000344c:	e0 88 00 08 	brls	8000345c <selectionSort+0x84>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003450:	12 38       	cp.w	r8,r9
80003452:	fe 98 ff fa 	brls	80003446 <selectionSort+0x6e>
80003456:	12 3a       	cp.w	r10,r9
80003458:	c0 73       	brcs	80003466 <selectionSort+0x8e>
8000345a:	cf 6b       	rjmp	80003446 <selectionSort+0x6e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000345c:	12 38       	cp.w	r8,r9
8000345e:	e0 8b 00 04 	brhi	80003466 <selectionSort+0x8e>
80003462:	12 3a       	cp.w	r10,r9
80003464:	cf 12       	brcc	80003446 <selectionSort+0x6e>

void selectionSort(short *salida, short longitud) {
	enter = 1;
	currentSort = 2;
	short x, y, min, tmp;
	for(x = 0; x < longitud; x++) {
80003466:	2f f5       	sub	r5,-1
80003468:	5c 85       	casts.h	r5
8000346a:	2f f4       	sub	r4,-1
8000346c:	5c 84       	casts.h	r4
8000346e:	2f e3       	sub	r3,-2
80003470:	ea 06 19 00 	cp.h	r6,r5
80003474:	fe 99 ff c4 	brgt	800033fc <selectionSort+0x24>
80003478:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000347c:	00 00       	add	r0,r0
8000347e:	00 08       	add	r8,r0
80003480:	00 00       	add	r0,r0
80003482:	00 2c       	rsub	r12,r0
80003484:	80 00       	ld.sh	r0,r0[0x0]
80003486:	30 e0       	mov	r0,14

80003488 <bubbleSort>:
		contadorMs=0;
		centecimas=0;
	}//IF
}//Teclas

void bubbleSort(short *salida, short longitud){
80003488:	d4 21       	pushm	r4-r7,lr
	enter = 1;
8000348a:	30 18       	mov	r8,1
8000348c:	49 d9       	lddpc	r9,80003500 <bubbleSort+0x78>
8000348e:	93 08       	st.w	r9[0x0],r8
	currentSort = 1;
80003490:	49 d9       	lddpc	r9,80003504 <bubbleSort+0x7c>
80003492:	b2 08       	st.h	r9[0x0],r8
80003494:	30 07       	mov	r7,0
    short aux1=0, aux2=0, cont1=0, cont2=0;
    int direccion = salida;
    while(cont2 < longitud-1){
80003496:	f6 c6 00 01 	sub	r6,r11,1
8000349a:	18 95       	mov	r5,r12
8000349c:	0e 94       	mov	r4,r7
8000349e:	c2 d8       	rjmp	800034f8 <bubbleSort+0x70>
800034a0:	0a 98       	mov	r8,r5
800034a2:	08 99       	mov	r9,r4
                aux2 = *salida;
                *salida = aux1;salida--;
                *salida = aux2;salida++;
            }//if
            cont1++;
        }while (cont1 < longitud-cont2-1);
800034a4:	ec 0c 01 0c 	sub	r12,r6,r12
	enter = 1;
	currentSort = 1;
    short aux1=0, aux2=0, cont1=0, cont2=0;
    int direccion = salida;
    while(cont2 < longitud-1){
        do{ aux1 = *salida;
800034a8:	11 1b       	ld.sh	r11,r8++
            salida++;
            if (*salida < aux1){
800034aa:	90 0a       	ld.sh	r10,r8[0x0]
800034ac:	f4 0b 19 00 	cp.h	r11,r10
800034b0:	e0 8a 00 05 	brle	800034ba <bubbleSort+0x32>
                aux2 = *salida;
                *salida = aux1;salida--;
800034b4:	b0 0b       	st.h	r8[0x0],r11
                *salida = aux2;salida++;
800034b6:	f1 5a ff fe 	st.h	r8[-2],r10
            }//if
            cont1++;
800034ba:	2f f9       	sub	r9,-1
800034bc:	5c 89       	casts.h	r9
        }while (cont1 < longitud-cont2-1);
800034be:	18 39       	cp.w	r9,r12
800034c0:	cf 45       	brlt	800034a8 <bubbleSort+0x20>
        salida = direccion;
        cont2++; cont1=0;
800034c2:	2f f7       	sub	r7,-1
800034c4:	5c 87       	casts.h	r7
	drawSort(salida);delay_ms(4);
800034c6:	0a 9c       	mov	r12,r5
800034c8:	f0 1f 00 10 	mcall	80003508 <bubbleSort+0x80>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800034cc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800034d0:	e2 79 a9 80 	mov	r9,240000
800034d4:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800034d8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800034dc:	14 38       	cp.w	r8,r10
800034de:	e0 88 00 08 	brls	800034ee <bubbleSort+0x66>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800034e2:	12 38       	cp.w	r8,r9
800034e4:	fe 98 ff fa 	brls	800034d8 <bubbleSort+0x50>
800034e8:	12 3a       	cp.w	r10,r9
800034ea:	c0 73       	brcs	800034f8 <bubbleSort+0x70>
800034ec:	cf 6b       	rjmp	800034d8 <bubbleSort+0x50>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800034ee:	12 38       	cp.w	r8,r9
800034f0:	e0 8b 00 04 	brhi	800034f8 <bubbleSort+0x70>
800034f4:	12 3a       	cp.w	r10,r9
800034f6:	cf 12       	brcc	800034d8 <bubbleSort+0x50>
void bubbleSort(short *salida, short longitud){
	enter = 1;
	currentSort = 1;
    short aux1=0, aux2=0, cont1=0, cont2=0;
    int direccion = salida;
    while(cont2 < longitud-1){
800034f8:	0e 9c       	mov	r12,r7
800034fa:	0c 37       	cp.w	r7,r6
800034fc:	cd 25       	brlt	800034a0 <bubbleSort+0x18>
        }while (cont1 < longitud-cont2-1);
        salida = direccion;
        cont2++; cont1=0;
	drawSort(salida);delay_ms(4);
    }//While
}//bubbleSort
800034fe:	d8 22       	popm	r4-r7,pc
80003500:	00 00       	add	r0,r0
80003502:	00 08       	add	r8,r0
80003504:	00 00       	add	r0,r0
80003506:	00 2c       	rsub	r12,r0
80003508:	80 00       	ld.sh	r0,r0[0x0]
8000350a:	30 e0       	mov	r0,14

8000350c <teclas>:

void CLR_disp(void){
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
}

void teclas(void){//handler teclas left, right o center
8000350c:	d4 01       	pushm	lr
	if (gpio_get_pin_interrupt_flag (QT1081_TOUCH_SENSOR_RIGHT)){
8000350e:	33 8c       	mov	r12,56
80003510:	f0 1f 00 16 	mcall	80003568 <teclas+0x5c>
80003514:	c0 40       	breq	8000351c <teclas+0x10>
		gpio_clear_pin_interrupt_flag(QT1081_TOUCH_SENSOR_RIGHT);
80003516:	33 8c       	mov	r12,56
80003518:	f0 1f 00 15 	mcall	8000356c <teclas+0x60>
	}//RIGHT
	if (gpio_get_pin_interrupt_flag (QT1081_TOUCH_SENSOR_LEFT)){
8000351c:	33 9c       	mov	r12,57
8000351e:	f0 1f 00 13 	mcall	80003568 <teclas+0x5c>
80003522:	c0 40       	breq	8000352a <teclas+0x1e>
		gpio_clear_pin_interrupt_flag(QT1081_TOUCH_SENSOR_LEFT);
80003524:	33 9c       	mov	r12,57
80003526:	f0 1f 00 12 	mcall	8000356c <teclas+0x60>
	}//LEFT
	if (gpio_get_pin_interrupt_flag(QT1081_TOUCH_SENSOR_DOWN)){
8000352a:	33 7c       	mov	r12,55
8000352c:	f0 1f 00 0f 	mcall	80003568 <teclas+0x5c>
80003530:	c0 40       	breq	80003538 <teclas+0x2c>
		gpio_clear_pin_interrupt_flag(QT1081_TOUCH_SENSOR_DOWN);
80003532:	33 7c       	mov	r12,55
80003534:	f0 1f 00 0e 	mcall	8000356c <teclas+0x60>
	}//DOWN
	if (gpio_get_pin_interrupt_flag(QT1081_TOUCH_SENSOR_UP)){
80003538:	33 6c       	mov	r12,54
8000353a:	f0 1f 00 0c 	mcall	80003568 <teclas+0x5c>
8000353e:	c0 40       	breq	80003546 <teclas+0x3a>
		gpio_clear_pin_interrupt_flag(QT1081_TOUCH_SENSOR_UP);
80003540:	33 6c       	mov	r12,54
80003542:	f0 1f 00 0b 	mcall	8000356c <teclas+0x60>
	}//UP
	if (gpio_get_pin_interrupt_flag (QT1081_TOUCH_SENSOR_ENTER)){
80003546:	33 ac       	mov	r12,58
80003548:	f0 1f 00 08 	mcall	80003568 <teclas+0x5c>
8000354c:	c0 b0       	breq	80003562 <teclas+0x56>
		gpio_clear_pin_interrupt_flag(QT1081_TOUCH_SENSOR_ENTER);
8000354e:	33 ac       	mov	r12,58
80003550:	f0 1f 00 07 	mcall	8000356c <teclas+0x60>
		enter=0;
80003554:	30 08       	mov	r8,0
80003556:	48 79       	lddpc	r9,80003570 <teclas+0x64>
80003558:	93 08       	st.w	r9[0x0],r8
		contadorMs=0;
8000355a:	48 79       	lddpc	r9,80003574 <teclas+0x68>
8000355c:	b2 08       	st.h	r9[0x0],r8
		centecimas=0;
8000355e:	48 79       	lddpc	r9,80003578 <teclas+0x6c>
80003560:	b2 08       	st.h	r9[0x0],r8
	}//IF
}//Teclas
80003562:	d4 02       	popm	lr
80003564:	d6 03       	rete
80003566:	00 00       	add	r0,r0
80003568:	80 00       	ld.sh	r0,r0[0x0]
8000356a:	2c e2       	sub	r2,-50
8000356c:	80 00       	ld.sh	r0,r0[0x0]
8000356e:	2c fa       	sub	r10,-49
80003570:	00 00       	add	r0,r0
80003572:	00 08       	add	r8,r0
80003574:	00 00       	add	r0,r0
80003576:	06 72       	tst	r2,r3
80003578:	00 00       	add	r0,r0
8000357a:	06 70       	tst	r0,r3

8000357c <CLR_disp>:
	pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
	pwm_channel_init(6, &pwm_channel6);
	pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
}//tft_bl_init

void CLR_disp(void){
8000357c:	d4 01       	pushm	lr
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
8000357e:	30 08       	mov	r8,0
80003580:	e0 69 00 f0 	mov	r9,240
80003584:	e0 6a 01 40 	mov	r10,320
80003588:	10 9b       	mov	r11,r8
8000358a:	10 9c       	mov	r12,r8
8000358c:	f0 1f 00 02 	mcall	80003594 <CLR_disp+0x18>
}
80003590:	d8 02       	popm	pc
80003592:	00 00       	add	r0,r0
80003594:	80 00       	ld.sh	r0,r0[0x0]
80003596:	25 20       	sub	r0,82

80003598 <main>:
short contadorMs;
char tiempoTranscurrido[4];
short centecimas;
short currentSort = 1;

int main(){
80003598:	d4 31       	pushm	r0-r7,lr
8000359a:	fa cd 02 98 	sub	sp,sp,664
		  .lovrs = 0,
		  .covfs = 0
	  };//Interrupcion timer

	
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
8000359e:	30 3a       	mov	r10,3
800035a0:	e0 6b 1b 00 	mov	r11,6912
800035a4:	ea 1b 00 b7 	orh	r11,0xb7
800035a8:	30 0c       	mov	r12,0
800035aa:	f0 1f 00 86 	mcall	800037c0 <main+0x228>
	et024006_Init( FOSC0, FOSC0 );
800035ae:	e0 6b 1b 00 	mov	r11,6912
800035b2:	ea 1b 00 b7 	orh	r11,0xb7
800035b6:	16 9c       	mov	r12,r11
800035b8:	f0 1f 00 83 	mcall	800037c4 <main+0x22c>
	}//While Actividad

}//Main

static void tft_bl_init(void){
	pwm_opt_t opt = {.diva = 0,.divb = 0,.prea = 0,.preb = 0};
800035bc:	30 07       	mov	r7,0
800035be:	50 27       	stdsp	sp[0x8],r7
800035c0:	50 37       	stdsp	sp[0xc],r7
800035c2:	50 47       	stdsp	sp[0x10],r7
800035c4:	50 57       	stdsp	sp[0x14],r7
	pwm_init(&opt);
800035c6:	fa cc ff f8 	sub	r12,sp,-8
800035ca:	f0 1f 00 80 	mcall	800037c8 <main+0x230>
	pwm_channel6.CMR.calg = PWM_MODE_LEFT_ALIGNED;
800035ce:	fe fb 01 fe 	ld.w	r11,pc[510]
800035d2:	76 08       	ld.w	r8,r11[0x0]
	pwm_channel6.CMR.cpol = PWM_POLARITY_HIGH; //PWM_POLARITY_LOW;//PWM_POLARITY_HIGH;
800035d4:	30 16       	mov	r6,1
	pwm_channel6.CMR.cpd = PWM_UPDATE_DUTY;
800035d6:	e0 18 f8 ff 	andl	r8,0xf8ff
	pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
800035da:	a9 b8       	sbr	r8,0x9
800035dc:	f1 d6 d0 04 	bfins	r8,r6,0x0,0x4
800035e0:	97 08       	st.w	r11[0x0],r8
	pwm_channel_init(6, &pwm_channel6);
800035e2:	30 6c       	mov	r12,6
800035e4:	f0 1f 00 7b 	mcall	800037d0 <main+0x238>
	pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
800035e8:	34 0c       	mov	r12,64
800035ea:	f0 1f 00 7b 	mcall	800037d4 <main+0x23c>

	
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
800035ee:	0e 98       	mov	r8,r7
800035f0:	e0 69 00 f0 	mov	r9,240
800035f4:	e0 6a 01 40 	mov	r10,320
800035f8:	0e 9b       	mov	r11,r7
800035fa:	0e 9c       	mov	r12,r7
800035fc:	f0 1f 00 77 	mcall	800037d8 <main+0x240>

	Disable_global_interrupt();
80003600:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80003602:	f0 1f 00 77 	mcall	800037dc <main+0x244>
	INTC_register_interrupt(&teclas, 71, 0);
80003606:	4f 75       	lddpc	r5,800037e0 <main+0x248>
80003608:	0e 9a       	mov	r10,r7
8000360a:	34 7b       	mov	r11,71
8000360c:	0a 9c       	mov	r12,r5
8000360e:	f0 1f 00 76 	mcall	800037e4 <main+0x24c>
	INTC_register_interrupt(&teclas, 70,0);
80003612:	0e 9a       	mov	r10,r7
80003614:	34 6b       	mov	r11,70
80003616:	0a 9c       	mov	r12,r5
80003618:	f0 1f 00 73 	mcall	800037e4 <main+0x24c>
	INTC_register_interrupt(&timer, AVR32_TC_IRQ0, AVR32_INTC_INT0); //Timer
8000361c:	0e 9a       	mov	r10,r7
8000361e:	e0 6b 01 c0 	mov	r11,448
80003622:	4f 2c       	lddpc	r12,800037e8 <main+0x250>
80003624:	f0 1f 00 70 	mcall	800037e4 <main+0x24c>
	gpio_enable_pin_interrupt(QT1081_TOUCH_SENSOR_LEFT,GPIO_RISING_EDGE);
80003628:	0c 9b       	mov	r11,r6
8000362a:	33 9c       	mov	r12,57
8000362c:	f0 1f 00 70 	mcall	800037ec <main+0x254>
	gpio_enable_pin_interrupt(QT1081_TOUCH_SENSOR_RIGHT,GPIO_RISING_EDGE);
80003630:	0c 9b       	mov	r11,r6
80003632:	33 8c       	mov	r12,56
80003634:	f0 1f 00 6e 	mcall	800037ec <main+0x254>
	gpio_enable_pin_interrupt(QT1081_TOUCH_SENSOR_ENTER,GPIO_RISING_EDGE);
80003638:	0c 9b       	mov	r11,r6
8000363a:	33 ac       	mov	r12,58
8000363c:	f0 1f 00 6c 	mcall	800037ec <main+0x254>
	gpio_enable_pin_interrupt(QT1081_TOUCH_SENSOR_UP,GPIO_RISING_EDGE);
80003640:	0c 9b       	mov	r11,r6
80003642:	33 6c       	mov	r12,54
80003644:	f0 1f 00 6a 	mcall	800037ec <main+0x254>
	gpio_enable_pin_interrupt(QT1081_TOUCH_SENSOR_DOWN,GPIO_RISING_EDGE);
80003648:	0c 9b       	mov	r11,r6
8000364a:	33 7c       	mov	r12,55
8000364c:	f0 1f 00 68 	mcall	800037ec <main+0x254>
	Enable_global_interrupt();
80003650:	d5 03       	csrf	0x10
	
	tc_init_waveform(&AVR32_TC, &WAVEFORM_OPT);
80003652:	4e 8b       	lddpc	r11,800037f0 <main+0x258>
80003654:	fe 7c 38 00 	mov	r12,-51200
80003658:	f0 1f 00 67 	mcall	800037f4 <main+0x25c>
	tc_write_rc(&AVR32_TC, 0, 15000);//15000 - 10ms
8000365c:	e0 6a 3a 98 	mov	r10,15000
80003660:	0e 9b       	mov	r11,r7
80003662:	fe 7c 38 00 	mov	r12,-51200
80003666:	f0 1f 00 65 	mcall	800037f8 <main+0x260>
	tc_configure_interrupts(&AVR32_TC, 0, &TC_INTERRUPT);
8000366a:	4e 5a       	lddpc	r10,800037fc <main+0x264>
8000366c:	0e 9b       	mov	r11,r7
8000366e:	fe 7c 38 00 	mov	r12,-51200
80003672:	f0 1f 00 64 	mcall	80003800 <main+0x268>
	tc_start(&AVR32_TC, 0);
80003676:	0e 9b       	mov	r11,r7
80003678:	fe 7c 38 00 	mov	r12,-51200
8000367c:	f0 1f 00 62 	mcall	80003804 <main+0x26c>

	while(pwm_channel6.cdty < pwm_channel6.cprd){
80003680:	4d 37       	lddpc	r7,800037cc <main+0x234>
		pwm_channel6.cdty++;
		pwm_channel6.cupd = pwm_channel6.cdty;
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
80003682:	30 66       	mov	r6,6
	tc_init_waveform(&AVR32_TC, &WAVEFORM_OPT);
	tc_write_rc(&AVR32_TC, 0, 15000);//15000 - 10ms
	tc_configure_interrupts(&AVR32_TC, 0, &TC_INTERRUPT);
	tc_start(&AVR32_TC, 0);

	while(pwm_channel6.cdty < pwm_channel6.cprd){
80003684:	c0 88       	rjmp	80003694 <main+0xfc>
		pwm_channel6.cdty++;
80003686:	2f f8       	sub	r8,-1
80003688:	8f 18       	st.w	r7[0x4],r8
		pwm_channel6.cupd = pwm_channel6.cdty;
8000368a:	8f 48       	st.w	r7[0x10],r8
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
8000368c:	0e 9b       	mov	r11,r7
8000368e:	0c 9c       	mov	r12,r6
80003690:	f0 1f 00 5e 	mcall	80003808 <main+0x270>
	tc_init_waveform(&AVR32_TC, &WAVEFORM_OPT);
	tc_write_rc(&AVR32_TC, 0, 15000);//15000 - 10ms
	tc_configure_interrupts(&AVR32_TC, 0, &TC_INTERRUPT);
	tc_start(&AVR32_TC, 0);

	while(pwm_channel6.cdty < pwm_channel6.cprd){
80003694:	6e 18       	ld.w	r8,r7[0x4]
80003696:	6e 29       	ld.w	r9,r7[0x8]
80003698:	12 38       	cp.w	r8,r9
8000369a:	cf 63       	brcs	80003686 <main+0xee>
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
	}//PWM
	
	short desordenado[320];
	short longitudDeArreglo = sizeof(desordenado)/sizeof(desordenado[0]);
	short ordenadoSelectionSort[longitudDeArreglo];
8000369c:	fa cd 02 84 	sub	sp,sp,644
800036a0:	1a 90       	mov	r0,sp
	short ordenadoBubbleSort[longitudDeArreglo];
800036a2:	fa cd 02 84 	sub	sp,sp,644
800036a6:	1a 91       	mov	r1,sp
	short ordenadoQuickSort[longitudDeArreglo];
800036a8:	fa cd 02 84 	sub	sp,sp,644
800036ac:	1a 93       	mov	r3,sp
	short ordenadoShellSort[longitudDeArreglo];
800036ae:	fa cd 02 84 	sub	sp,sp,644
800036b2:	1a 92       	mov	r2,sp
800036b4:	fa c6 f5 d8 	sub	r6,sp,-2600
short contadorMs;
char tiempoTranscurrido[4];
short centecimas;
short currentSort = 1;

int main(){
800036b8:	fa c7 f3 58 	sub	r7,sp,-3240
	short ordenadoSelectionSort[longitudDeArreglo];
	short ordenadoBubbleSort[longitudDeArreglo];
	short ordenadoQuickSort[longitudDeArreglo];
	short ordenadoShellSort[longitudDeArreglo];

	for(short k=0; k<longitudDeArreglo; k++){desordenado[k] = rand()%200;}
800036bc:	e0 65 85 1f 	mov	r5,34079
800036c0:	ea 15 51 eb 	orh	r5,0x51eb
800036c4:	e0 64 00 c8 	mov	r4,200
800036c8:	f0 1f 00 51 	mcall	8000380c <main+0x274>
800036cc:	f8 05 04 48 	muls.d	r8,r12,r5
800036d0:	a7 49       	asr	r9,0x6
800036d2:	f8 08 14 1f 	asr	r8,r12,0x1f
800036d6:	f2 08 01 08 	sub	r8,r9,r8
800036da:	a9 38       	mul	r8,r4
800036dc:	f8 08 01 08 	sub	r8,r12,r8
800036e0:	0c b8       	st.h	r6++,r8
800036e2:	0e 36       	cp.w	r6,r7
800036e4:	cf 21       	brne	800036c8 <main+0x130>

	copiarArreglo(desordenado, ordenadoBubbleSort, longitudDeArreglo);
800036e6:	fa c7 f5 d8 	sub	r7,sp,-2600
800036ea:	e0 6a 01 40 	mov	r10,320
800036ee:	02 9b       	mov	r11,r1
800036f0:	0e 9c       	mov	r12,r7
800036f2:	f0 1f 00 48 	mcall	80003810 <main+0x278>
	copiarArreglo(desordenado, ordenadoSelectionSort, longitudDeArreglo);
800036f6:	e0 6a 01 40 	mov	r10,320
800036fa:	00 9b       	mov	r11,r0
800036fc:	0e 9c       	mov	r12,r7
800036fe:	f0 1f 00 45 	mcall	80003810 <main+0x278>
	copiarArreglo(desordenado, ordenadoQuickSort, longitudDeArreglo);
80003702:	fb 43 0a 14 	st.w	sp[2580],r3
80003706:	e0 6a 01 40 	mov	r10,320
8000370a:	06 9b       	mov	r11,r3
8000370c:	0e 9c       	mov	r12,r7
8000370e:	f0 1f 00 41 	mcall	80003810 <main+0x278>
	copiarArreglo(desordenado, ordenadoShellSort, longitudDeArreglo);
80003712:	fb 42 0a 10 	st.w	sp[2576],r2
80003716:	e0 6a 01 40 	mov	r10,320
8000371a:	04 9b       	mov	r11,r2
8000371c:	0e 9c       	mov	r12,r7
8000371e:	f0 1f 00 3d 	mcall	80003810 <main+0x278>
	
	gpio_clr_gpio_pin(LED1_GPIO);
80003722:	33 cc       	mov	r12,60
80003724:	f0 1f 00 3c 	mcall	80003814 <main+0x27c>

	while(1){
		switch (actividad){
80003728:	4b c6       	lddpc	r6,80003818 <main+0x280>
8000372a:	30 15       	mov	r5,1
			case 0:
			CLR_disp();
			bubbleSort(ordenadoBubbleSort, longitudDeArreglo);
8000372c:	e0 64 01 40 	mov	r4,320
			while(enter);
80003730:	4b b7       	lddpc	r7,8000381c <main+0x284>
	copiarArreglo(desordenado, ordenadoShellSort, longitudDeArreglo);
	
	gpio_clr_gpio_pin(LED1_GPIO);

	while(1){
		switch (actividad){
80003732:	30 23       	mov	r3,2
80003734:	30 32       	mov	r2,3
80003736:	8c 08       	ld.sh	r8,r6[0x0]
80003738:	ea 08 19 00 	cp.h	r8,r5
8000373c:	c1 60       	breq	80003768 <main+0x1d0>
8000373e:	c0 83       	brcs	8000374e <main+0x1b6>
80003740:	e6 08 19 00 	cp.h	r8,r3
80003744:	c1 f0       	breq	80003782 <main+0x1ea>
80003746:	e4 08 19 00 	cp.h	r8,r2
8000374a:	cf 61       	brne	80003736 <main+0x19e>
8000374c:	c2 c8       	rjmp	800037a4 <main+0x20c>
			case 0:
			CLR_disp();
8000374e:	f0 1f 00 35 	mcall	80003820 <main+0x288>
			bubbleSort(ordenadoBubbleSort, longitudDeArreglo);
80003752:	08 9b       	mov	r11,r4
80003754:	02 9c       	mov	r12,r1
80003756:	f0 1f 00 34 	mcall	80003824 <main+0x28c>
			while(enter);
8000375a:	6e 08       	ld.w	r8,r7[0x0]
8000375c:	58 08       	cp.w	r8,0
8000375e:	cf e1       	brne	8000375a <main+0x1c2>
			actividad++;
80003760:	8c 08       	ld.sh	r8,r6[0x0]
80003762:	2f f8       	sub	r8,-1
80003764:	ac 08       	st.h	r6[0x0],r8
			break;
80003766:	ce 8b       	rjmp	80003736 <main+0x19e>
			
			case 1:
			CLR_disp();
80003768:	f0 1f 00 2e 	mcall	80003820 <main+0x288>
			selectionSort(ordenadoSelectionSort, longitudDeArreglo);
8000376c:	08 9b       	mov	r11,r4
8000376e:	00 9c       	mov	r12,r0
80003770:	f0 1f 00 2e 	mcall	80003828 <main+0x290>
			while(enter);
80003774:	6e 08       	ld.w	r8,r7[0x0]
80003776:	58 08       	cp.w	r8,0
80003778:	cf e1       	brne	80003774 <main+0x1dc>
			actividad++;
8000377a:	8c 08       	ld.sh	r8,r6[0x0]
8000377c:	2f f8       	sub	r8,-1
8000377e:	ac 08       	st.h	r6[0x0],r8
			break;
80003780:	cd bb       	rjmp	80003736 <main+0x19e>

			case 2:
			CLR_disp();
80003782:	f0 1f 00 28 	mcall	80003820 <main+0x288>
			quickSort(ordenadoQuickSort, 0, longitudDeArreglo-1, longitudDeArreglo);
80003786:	08 99       	mov	r9,r4
80003788:	e0 6a 01 3f 	mov	r10,319
8000378c:	30 0b       	mov	r11,0
8000378e:	fa fc 0a 14 	ld.w	r12,sp[2580]
80003792:	f0 1f 00 27 	mcall	8000382c <main+0x294>
			while(enter);
80003796:	6e 08       	ld.w	r8,r7[0x0]
80003798:	58 08       	cp.w	r8,0
8000379a:	cf e1       	brne	80003796 <main+0x1fe>
			actividad++;
8000379c:	8c 08       	ld.sh	r8,r6[0x0]
8000379e:	2f f8       	sub	r8,-1
800037a0:	ac 08       	st.h	r6[0x0],r8
			break;
800037a2:	cc ab       	rjmp	80003736 <main+0x19e>

			case 3:
			CLR_disp();
800037a4:	f0 1f 00 1f 	mcall	80003820 <main+0x288>
			shellSort(ordenadoShellSort, longitudDeArreglo);
800037a8:	08 9b       	mov	r11,r4
800037aa:	fa fc 0a 10 	ld.w	r12,sp[2576]
800037ae:	f0 1f 00 21 	mcall	80003830 <main+0x298>
			while(enter);
800037b2:	6e 08       	ld.w	r8,r7[0x0]
800037b4:	58 08       	cp.w	r8,0
800037b6:	cf e1       	brne	800037b2 <main+0x21a>
			actividad++;
800037b8:	8c 08       	ld.sh	r8,r6[0x0]
800037ba:	2f f8       	sub	r8,-1
800037bc:	ac 08       	st.h	r6[0x0],r8
800037be:	cb cb       	rjmp	80003736 <main+0x19e>
800037c0:	80 00       	ld.sh	r0,r0[0x0]
800037c2:	2e d8       	sub	r8,-19
800037c4:	80 00       	ld.sh	r0,r0[0x0]
800037c6:	25 ec       	sub	r12,94
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	2f 64       	sub	r4,-10
800037cc:	00 00       	add	r0,r0
800037ce:	00 0c       	add	r12,r0
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	2e f4       	sub	r4,-17
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	2f 2a       	sub	r10,-14
800037d8:	80 00       	ld.sh	r0,r0[0x0]
800037da:	25 20       	sub	r0,82
800037dc:	80 00       	ld.sh	r0,r0[0x0]
800037de:	2d 94       	sub	r4,-39
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	35 0c       	mov	r12,80
800037e4:	80 00       	ld.sh	r0,r0[0x0]
800037e6:	2d 14       	sub	r4,-47
800037e8:	80 00       	ld.sh	r0,r0[0x0]
800037ea:	30 10       	mov	r0,1
800037ec:	80 00       	ld.sh	r0,r0[0x0]
800037ee:	2c 9c       	sub	r12,-55
800037f0:	80 00       	ld.sh	r0,r0[0x0]
800037f2:	48 80       	lddpc	r0,80003810 <main+0x278>
800037f4:	80 00       	ld.sh	r0,r0[0x0]
800037f6:	20 08       	sub	r8,0
800037f8:	80 00       	ld.sh	r0,r0[0x0]
800037fa:	20 c8       	sub	r8,12
800037fc:	80 00       	ld.sh	r0,r0[0x0]
800037fe:	48 88       	lddpc	r8,8000381c <main+0x284>
80003800:	80 00       	ld.sh	r0,r0[0x0]
80003802:	20 fc       	sub	r12,15
80003804:	80 00       	ld.sh	r0,r0[0x0]
80003806:	20 a4       	sub	r4,10
80003808:	80 00       	ld.sh	r0,r0[0x0]
8000380a:	2f 3c       	sub	r12,-13
8000380c:	80 00       	ld.sh	r0,r0[0x0]
8000380e:	3a 98       	mov	r8,-87
80003810:	80 00       	ld.sh	r0,r0[0x0]
80003812:	2f ec       	sub	r12,-2
80003814:	80 00       	ld.sh	r0,r0[0x0]
80003816:	2c 64       	sub	r4,-58
80003818:	00 00       	add	r0,r0
8000381a:	06 34       	cp.w	r4,r3
8000381c:	00 00       	add	r0,r0
8000381e:	00 08       	add	r8,r0
80003820:	80 00       	ld.sh	r0,r0[0x0]
80003822:	35 7c       	mov	r12,87
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	34 88       	mov	r8,72
80003828:	80 00       	ld.sh	r0,r0[0x0]
8000382a:	33 d8       	mov	r8,61
8000382c:	80 00       	ld.sh	r0,r0[0x0]
8000382e:	32 d0       	mov	r0,45
80003830:	80 00       	ld.sh	r0,r0[0x0]
80003832:	31 ec       	mov	r12,30

80003834 <__avr32_udiv64>:
80003834:	d4 31       	pushm	r0-r7,lr
80003836:	1a 97       	mov	r7,sp
80003838:	20 3d       	sub	sp,12
8000383a:	10 9c       	mov	r12,r8
8000383c:	12 9e       	mov	lr,r9
8000383e:	14 93       	mov	r3,r10
80003840:	58 09       	cp.w	r9,0
80003842:	e0 81 00 bd 	brne	800039bc <__avr32_udiv64+0x188>
80003846:	16 38       	cp.w	r8,r11
80003848:	e0 88 00 40 	brls	800038c8 <__avr32_udiv64+0x94>
8000384c:	f0 08 12 00 	clz	r8,r8
80003850:	c0 d0       	breq	8000386a <__avr32_udiv64+0x36>
80003852:	f6 08 09 4b 	lsl	r11,r11,r8
80003856:	f0 09 11 20 	rsub	r9,r8,32
8000385a:	f8 08 09 4c 	lsl	r12,r12,r8
8000385e:	f4 09 0a 49 	lsr	r9,r10,r9
80003862:	f4 08 09 43 	lsl	r3,r10,r8
80003866:	f3 eb 10 0b 	or	r11,r9,r11
8000386a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000386e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003872:	f6 0e 0d 00 	divu	r0,r11,lr
80003876:	e6 0b 16 10 	lsr	r11,r3,0x10
8000387a:	00 99       	mov	r9,r0
8000387c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003880:	e0 0a 02 48 	mul	r8,r0,r10
80003884:	10 3b       	cp.w	r11,r8
80003886:	c0 a2       	brcc	8000389a <__avr32_udiv64+0x66>
80003888:	20 19       	sub	r9,1
8000388a:	18 0b       	add	r11,r12
8000388c:	18 3b       	cp.w	r11,r12
8000388e:	c0 63       	brcs	8000389a <__avr32_udiv64+0x66>
80003890:	10 3b       	cp.w	r11,r8
80003892:	f7 b9 03 01 	sublo	r9,1
80003896:	f7 dc e3 0b 	addcs	r11,r11,r12
8000389a:	f6 08 01 01 	sub	r1,r11,r8
8000389e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800038a2:	e2 0e 0d 00 	divu	r0,r1,lr
800038a6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800038aa:	00 98       	mov	r8,r0
800038ac:	e0 0a 02 4a 	mul	r10,r0,r10
800038b0:	14 33       	cp.w	r3,r10
800038b2:	c0 82       	brcc	800038c2 <__avr32_udiv64+0x8e>
800038b4:	20 18       	sub	r8,1
800038b6:	18 03       	add	r3,r12
800038b8:	18 33       	cp.w	r3,r12
800038ba:	c0 43       	brcs	800038c2 <__avr32_udiv64+0x8e>
800038bc:	14 33       	cp.w	r3,r10
800038be:	f7 b8 03 01 	sublo	r8,1
800038c2:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800038c6:	cd f8       	rjmp	80003a84 <__avr32_udiv64+0x250>
800038c8:	58 08       	cp.w	r8,0
800038ca:	c0 51       	brne	800038d4 <__avr32_udiv64+0xa0>
800038cc:	30 19       	mov	r9,1
800038ce:	f2 08 0d 08 	divu	r8,r9,r8
800038d2:	10 9c       	mov	r12,r8
800038d4:	f8 06 12 00 	clz	r6,r12
800038d8:	c0 41       	brne	800038e0 <__avr32_udiv64+0xac>
800038da:	18 1b       	sub	r11,r12
800038dc:	30 19       	mov	r9,1
800038de:	c4 08       	rjmp	8000395e <__avr32_udiv64+0x12a>
800038e0:	ec 01 11 20 	rsub	r1,r6,32
800038e4:	f4 01 0a 49 	lsr	r9,r10,r1
800038e8:	f8 06 09 4c 	lsl	r12,r12,r6
800038ec:	f6 06 09 48 	lsl	r8,r11,r6
800038f0:	f6 01 0a 41 	lsr	r1,r11,r1
800038f4:	f3 e8 10 08 	or	r8,r9,r8
800038f8:	f8 03 16 10 	lsr	r3,r12,0x10
800038fc:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80003900:	e2 03 0d 00 	divu	r0,r1,r3
80003904:	f0 0b 16 10 	lsr	r11,r8,0x10
80003908:	00 9e       	mov	lr,r0
8000390a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000390e:	e0 05 02 49 	mul	r9,r0,r5
80003912:	12 3b       	cp.w	r11,r9
80003914:	c0 a2       	brcc	80003928 <__avr32_udiv64+0xf4>
80003916:	20 1e       	sub	lr,1
80003918:	18 0b       	add	r11,r12
8000391a:	18 3b       	cp.w	r11,r12
8000391c:	c0 63       	brcs	80003928 <__avr32_udiv64+0xf4>
8000391e:	12 3b       	cp.w	r11,r9
80003920:	f7 be 03 01 	sublo	lr,1
80003924:	f7 dc e3 0b 	addcs	r11,r11,r12
80003928:	12 1b       	sub	r11,r9
8000392a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000392e:	f6 03 0d 02 	divu	r2,r11,r3
80003932:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80003936:	04 99       	mov	r9,r2
80003938:	e4 05 02 4b 	mul	r11,r2,r5
8000393c:	16 38       	cp.w	r8,r11
8000393e:	c0 a2       	brcc	80003952 <__avr32_udiv64+0x11e>
80003940:	20 19       	sub	r9,1
80003942:	18 08       	add	r8,r12
80003944:	18 38       	cp.w	r8,r12
80003946:	c0 63       	brcs	80003952 <__avr32_udiv64+0x11e>
80003948:	16 38       	cp.w	r8,r11
8000394a:	f7 b9 03 01 	sublo	r9,1
8000394e:	f1 dc e3 08 	addcs	r8,r8,r12
80003952:	f4 06 09 43 	lsl	r3,r10,r6
80003956:	f0 0b 01 0b 	sub	r11,r8,r11
8000395a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000395e:	f8 06 16 10 	lsr	r6,r12,0x10
80003962:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80003966:	f6 06 0d 00 	divu	r0,r11,r6
8000396a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000396e:	00 9a       	mov	r10,r0
80003970:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003974:	e0 0e 02 48 	mul	r8,r0,lr
80003978:	10 3b       	cp.w	r11,r8
8000397a:	c0 a2       	brcc	8000398e <__avr32_udiv64+0x15a>
8000397c:	20 1a       	sub	r10,1
8000397e:	18 0b       	add	r11,r12
80003980:	18 3b       	cp.w	r11,r12
80003982:	c0 63       	brcs	8000398e <__avr32_udiv64+0x15a>
80003984:	10 3b       	cp.w	r11,r8
80003986:	f7 ba 03 01 	sublo	r10,1
8000398a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000398e:	f6 08 01 01 	sub	r1,r11,r8
80003992:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003996:	e2 06 0d 00 	divu	r0,r1,r6
8000399a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000399e:	00 98       	mov	r8,r0
800039a0:	e0 0e 02 4b 	mul	r11,r0,lr
800039a4:	16 33       	cp.w	r3,r11
800039a6:	c0 82       	brcc	800039b6 <__avr32_udiv64+0x182>
800039a8:	20 18       	sub	r8,1
800039aa:	18 03       	add	r3,r12
800039ac:	18 33       	cp.w	r3,r12
800039ae:	c0 43       	brcs	800039b6 <__avr32_udiv64+0x182>
800039b0:	16 33       	cp.w	r3,r11
800039b2:	f7 b8 03 01 	sublo	r8,1
800039b6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800039ba:	c6 98       	rjmp	80003a8c <__avr32_udiv64+0x258>
800039bc:	16 39       	cp.w	r9,r11
800039be:	e0 8b 00 65 	brhi	80003a88 <__avr32_udiv64+0x254>
800039c2:	f2 09 12 00 	clz	r9,r9
800039c6:	c0 b1       	brne	800039dc <__avr32_udiv64+0x1a8>
800039c8:	10 3a       	cp.w	r10,r8
800039ca:	5f 2a       	srhs	r10
800039cc:	1c 3b       	cp.w	r11,lr
800039ce:	5f b8       	srhi	r8
800039d0:	10 4a       	or	r10,r8
800039d2:	f2 0a 18 00 	cp.b	r10,r9
800039d6:	c5 90       	breq	80003a88 <__avr32_udiv64+0x254>
800039d8:	30 18       	mov	r8,1
800039da:	c5 98       	rjmp	80003a8c <__avr32_udiv64+0x258>
800039dc:	f0 09 09 46 	lsl	r6,r8,r9
800039e0:	f2 03 11 20 	rsub	r3,r9,32
800039e4:	fc 09 09 4e 	lsl	lr,lr,r9
800039e8:	f0 03 0a 48 	lsr	r8,r8,r3
800039ec:	f6 09 09 4c 	lsl	r12,r11,r9
800039f0:	f4 03 0a 42 	lsr	r2,r10,r3
800039f4:	ef 46 ff f4 	st.w	r7[-12],r6
800039f8:	f6 03 0a 43 	lsr	r3,r11,r3
800039fc:	18 42       	or	r2,r12
800039fe:	f1 ee 10 0c 	or	r12,r8,lr
80003a02:	f8 01 16 10 	lsr	r1,r12,0x10
80003a06:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80003a0a:	e6 01 0d 04 	divu	r4,r3,r1
80003a0e:	e4 03 16 10 	lsr	r3,r2,0x10
80003a12:	08 9e       	mov	lr,r4
80003a14:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80003a18:	e8 06 02 48 	mul	r8,r4,r6
80003a1c:	10 33       	cp.w	r3,r8
80003a1e:	c0 a2       	brcc	80003a32 <__avr32_udiv64+0x1fe>
80003a20:	20 1e       	sub	lr,1
80003a22:	18 03       	add	r3,r12
80003a24:	18 33       	cp.w	r3,r12
80003a26:	c0 63       	brcs	80003a32 <__avr32_udiv64+0x1fe>
80003a28:	10 33       	cp.w	r3,r8
80003a2a:	f7 be 03 01 	sublo	lr,1
80003a2e:	e7 dc e3 03 	addcs	r3,r3,r12
80003a32:	10 13       	sub	r3,r8
80003a34:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80003a38:	e6 01 0d 00 	divu	r0,r3,r1
80003a3c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003a40:	00 98       	mov	r8,r0
80003a42:	e0 06 02 46 	mul	r6,r0,r6
80003a46:	0c 3b       	cp.w	r11,r6
80003a48:	c0 a2       	brcc	80003a5c <__avr32_udiv64+0x228>
80003a4a:	20 18       	sub	r8,1
80003a4c:	18 0b       	add	r11,r12
80003a4e:	18 3b       	cp.w	r11,r12
80003a50:	c0 63       	brcs	80003a5c <__avr32_udiv64+0x228>
80003a52:	0c 3b       	cp.w	r11,r6
80003a54:	f7 dc e3 0b 	addcs	r11,r11,r12
80003a58:	f7 b8 03 01 	sublo	r8,1
80003a5c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003a60:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003a64:	0c 1b       	sub	r11,r6
80003a66:	f0 04 06 42 	mulu.d	r2,r8,r4
80003a6a:	06 95       	mov	r5,r3
80003a6c:	16 35       	cp.w	r5,r11
80003a6e:	e0 8b 00 0a 	brhi	80003a82 <__avr32_udiv64+0x24e>
80003a72:	5f 0b       	sreq	r11
80003a74:	f4 09 09 49 	lsl	r9,r10,r9
80003a78:	12 32       	cp.w	r2,r9
80003a7a:	5f b9       	srhi	r9
80003a7c:	f7 e9 00 09 	and	r9,r11,r9
80003a80:	c0 60       	breq	80003a8c <__avr32_udiv64+0x258>
80003a82:	20 18       	sub	r8,1
80003a84:	30 09       	mov	r9,0
80003a86:	c0 38       	rjmp	80003a8c <__avr32_udiv64+0x258>
80003a88:	30 09       	mov	r9,0
80003a8a:	12 98       	mov	r8,r9
80003a8c:	10 9a       	mov	r10,r8
80003a8e:	12 93       	mov	r3,r9
80003a90:	10 92       	mov	r2,r8
80003a92:	12 9b       	mov	r11,r9
80003a94:	2f dd       	sub	sp,-12
80003a96:	d8 32       	popm	r0-r7,pc

80003a98 <rand>:
80003a98:	d4 21       	pushm	r4-r7,lr
80003a9a:	e0 67 01 20 	mov	r7,288
80003a9e:	6e 06       	ld.w	r6,r7[0x0]
80003aa0:	6c e8       	ld.w	r8,r6[0x38]
80003aa2:	58 08       	cp.w	r8,0
80003aa4:	c1 91       	brne	80003ad6 <rand+0x3e>
80003aa6:	31 8c       	mov	r12,24
80003aa8:	c3 8c       	rcall	80003b18 <malloc>
80003aaa:	e0 69 33 0e 	mov	r9,13070
80003aae:	8d ec       	st.w	r6[0x38],r12
80003ab0:	6e 08       	ld.w	r8,r7[0x0]
80003ab2:	70 e8       	ld.w	r8,r8[0x38]
80003ab4:	b0 09       	st.h	r8[0x0],r9
80003ab6:	fe 79 ab cd 	mov	r9,-21555
80003aba:	b0 19       	st.h	r8[0x2],r9
80003abc:	e0 69 12 34 	mov	r9,4660
80003ac0:	b0 29       	st.h	r8[0x4],r9
80003ac2:	fe 79 e6 6d 	mov	r9,-6547
80003ac6:	b0 39       	st.h	r8[0x6],r9
80003ac8:	fe 79 de ec 	mov	r9,-8468
80003acc:	b0 49       	st.h	r8[0x8],r9
80003ace:	30 59       	mov	r9,5
80003ad0:	b0 59       	st.h	r8[0xa],r9
80003ad2:	30 b9       	mov	r9,11
80003ad4:	b0 69       	st.h	r8[0xc],r9
80003ad6:	e0 68 01 20 	mov	r8,288
80003ada:	70 08       	ld.w	r8,r8[0x0]
80003adc:	70 e8       	ld.w	r8,r8[0x38]
80003ade:	70 47       	ld.w	r7,r8[0x10]
80003ae0:	70 5c       	ld.w	r12,r8[0x14]
80003ae2:	e0 69 7f 2d 	mov	r9,32557
80003ae6:	ea 19 4c 95 	orh	r9,0x4c95
80003aea:	f8 09 06 4a 	mulu.d	r10,r12,r9
80003aee:	ee 09 02 49 	mul	r9,r7,r9
80003af2:	e0 67 f4 2d 	mov	r7,62509
80003af6:	ea 17 58 51 	orh	r7,0x5851
80003afa:	30 16       	mov	r6,1
80003afc:	f8 07 03 49 	mac	r9,r12,r7
80003b00:	30 07       	mov	r7,0
80003b02:	f2 0b 00 0b 	add	r11,r9,r11
80003b06:	0c 0a       	add	r10,r6
80003b08:	f6 07 00 4b 	adc	r11,r11,r7
80003b0c:	f0 eb 00 10 	st.d	r8[16],r10
80003b10:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80003b14:	d8 22       	popm	r4-r7,pc
80003b16:	d7 03       	nop

80003b18 <malloc>:
80003b18:	d4 01       	pushm	lr
80003b1a:	e0 68 01 20 	mov	r8,288
80003b1e:	18 9b       	mov	r11,r12
80003b20:	70 0c       	ld.w	r12,r8[0x0]
80003b22:	c0 3c       	rcall	80003b28 <_malloc_r>
80003b24:	d8 02       	popm	pc
80003b26:	d7 03       	nop

80003b28 <_malloc_r>:
80003b28:	d4 31       	pushm	r0-r7,lr
80003b2a:	f6 c8 ff f5 	sub	r8,r11,-11
80003b2e:	18 95       	mov	r5,r12
80003b30:	10 97       	mov	r7,r8
80003b32:	e0 17 ff f8 	andl	r7,0xfff8
80003b36:	59 68       	cp.w	r8,22
80003b38:	f9 b7 08 10 	movls	r7,16
80003b3c:	16 37       	cp.w	r7,r11
80003b3e:	5f 38       	srlo	r8
80003b40:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80003b44:	c0 50       	breq	80003b4e <_malloc_r+0x26>
80003b46:	30 c8       	mov	r8,12
80003b48:	99 38       	st.w	r12[0xc],r8
80003b4a:	e0 8f 01 f4 	bral	80003f32 <_malloc_r+0x40a>
80003b4e:	e0 a0 02 01 	rcall	80003f50 <__malloc_lock>
80003b52:	e0 47 01 f7 	cp.w	r7,503
80003b56:	e0 8b 00 1d 	brhi	80003b90 <_malloc_r+0x68>
80003b5a:	ee 03 16 03 	lsr	r3,r7,0x3
80003b5e:	e0 68 01 24 	mov	r8,292
80003b62:	f0 03 00 38 	add	r8,r8,r3<<0x3
80003b66:	70 36       	ld.w	r6,r8[0xc]
80003b68:	10 36       	cp.w	r6,r8
80003b6a:	c0 61       	brne	80003b76 <_malloc_r+0x4e>
80003b6c:	ec c8 ff f8 	sub	r8,r6,-8
80003b70:	70 36       	ld.w	r6,r8[0xc]
80003b72:	10 36       	cp.w	r6,r8
80003b74:	c0 c0       	breq	80003b8c <_malloc_r+0x64>
80003b76:	6c 18       	ld.w	r8,r6[0x4]
80003b78:	e0 18 ff fc 	andl	r8,0xfffc
80003b7c:	6c 3a       	ld.w	r10,r6[0xc]
80003b7e:	ec 08 00 09 	add	r9,r6,r8
80003b82:	0a 9c       	mov	r12,r5
80003b84:	6c 28       	ld.w	r8,r6[0x8]
80003b86:	95 28       	st.w	r10[0x8],r8
80003b88:	91 3a       	st.w	r8[0xc],r10
80003b8a:	c4 78       	rjmp	80003c18 <_malloc_r+0xf0>
80003b8c:	2f e3       	sub	r3,-2
80003b8e:	c4 d8       	rjmp	80003c28 <_malloc_r+0x100>
80003b90:	ee 03 16 09 	lsr	r3,r7,0x9
80003b94:	c0 41       	brne	80003b9c <_malloc_r+0x74>
80003b96:	ee 03 16 03 	lsr	r3,r7,0x3
80003b9a:	c2 68       	rjmp	80003be6 <_malloc_r+0xbe>
80003b9c:	58 43       	cp.w	r3,4
80003b9e:	e0 8b 00 06 	brhi	80003baa <_malloc_r+0x82>
80003ba2:	ee 03 16 06 	lsr	r3,r7,0x6
80003ba6:	2c 83       	sub	r3,-56
80003ba8:	c1 f8       	rjmp	80003be6 <_malloc_r+0xbe>
80003baa:	59 43       	cp.w	r3,20
80003bac:	e0 8b 00 04 	brhi	80003bb4 <_malloc_r+0x8c>
80003bb0:	2a 53       	sub	r3,-91
80003bb2:	c1 a8       	rjmp	80003be6 <_malloc_r+0xbe>
80003bb4:	e0 43 00 54 	cp.w	r3,84
80003bb8:	e0 8b 00 06 	brhi	80003bc4 <_malloc_r+0x9c>
80003bbc:	ee 03 16 0c 	lsr	r3,r7,0xc
80003bc0:	29 23       	sub	r3,-110
80003bc2:	c1 28       	rjmp	80003be6 <_malloc_r+0xbe>
80003bc4:	e0 43 01 54 	cp.w	r3,340
80003bc8:	e0 8b 00 06 	brhi	80003bd4 <_malloc_r+0xac>
80003bcc:	ee 03 16 0f 	lsr	r3,r7,0xf
80003bd0:	28 93       	sub	r3,-119
80003bd2:	c0 a8       	rjmp	80003be6 <_malloc_r+0xbe>
80003bd4:	e0 43 05 54 	cp.w	r3,1364
80003bd8:	e0 88 00 04 	brls	80003be0 <_malloc_r+0xb8>
80003bdc:	37 e3       	mov	r3,126
80003bde:	c0 48       	rjmp	80003be6 <_malloc_r+0xbe>
80003be0:	ee 03 16 12 	lsr	r3,r7,0x12
80003be4:	28 43       	sub	r3,-124
80003be6:	e0 6a 01 24 	mov	r10,292
80003bea:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80003bee:	74 36       	ld.w	r6,r10[0xc]
80003bf0:	c1 98       	rjmp	80003c22 <_malloc_r+0xfa>
80003bf2:	6c 19       	ld.w	r9,r6[0x4]
80003bf4:	e0 19 ff fc 	andl	r9,0xfffc
80003bf8:	f2 07 01 0b 	sub	r11,r9,r7
80003bfc:	58 fb       	cp.w	r11,15
80003bfe:	e0 8a 00 04 	brle	80003c06 <_malloc_r+0xde>
80003c02:	20 13       	sub	r3,1
80003c04:	c1 18       	rjmp	80003c26 <_malloc_r+0xfe>
80003c06:	6c 38       	ld.w	r8,r6[0xc]
80003c08:	58 0b       	cp.w	r11,0
80003c0a:	c0 b5       	brlt	80003c20 <_malloc_r+0xf8>
80003c0c:	6c 2a       	ld.w	r10,r6[0x8]
80003c0e:	ec 09 00 09 	add	r9,r6,r9
80003c12:	0a 9c       	mov	r12,r5
80003c14:	91 2a       	st.w	r8[0x8],r10
80003c16:	95 38       	st.w	r10[0xc],r8
80003c18:	72 18       	ld.w	r8,r9[0x4]
80003c1a:	a1 a8       	sbr	r8,0x0
80003c1c:	93 18       	st.w	r9[0x4],r8
80003c1e:	cb c8       	rjmp	80003d96 <_malloc_r+0x26e>
80003c20:	10 96       	mov	r6,r8
80003c22:	14 36       	cp.w	r6,r10
80003c24:	ce 71       	brne	80003bf2 <_malloc_r+0xca>
80003c26:	2f f3       	sub	r3,-1
80003c28:	e0 6a 01 24 	mov	r10,292
80003c2c:	f4 cc ff f8 	sub	r12,r10,-8
80003c30:	78 26       	ld.w	r6,r12[0x8]
80003c32:	18 36       	cp.w	r6,r12
80003c34:	c6 c0       	breq	80003d0c <_malloc_r+0x1e4>
80003c36:	6c 19       	ld.w	r9,r6[0x4]
80003c38:	e0 19 ff fc 	andl	r9,0xfffc
80003c3c:	f2 07 01 08 	sub	r8,r9,r7
80003c40:	58 f8       	cp.w	r8,15
80003c42:	e0 89 00 8f 	brgt	80003d60 <_malloc_r+0x238>
80003c46:	99 3c       	st.w	r12[0xc],r12
80003c48:	99 2c       	st.w	r12[0x8],r12
80003c4a:	58 08       	cp.w	r8,0
80003c4c:	c0 55       	brlt	80003c56 <_malloc_r+0x12e>
80003c4e:	ec 09 00 09 	add	r9,r6,r9
80003c52:	0a 9c       	mov	r12,r5
80003c54:	ce 2b       	rjmp	80003c18 <_malloc_r+0xf0>
80003c56:	e0 49 01 ff 	cp.w	r9,511
80003c5a:	e0 8b 00 13 	brhi	80003c80 <_malloc_r+0x158>
80003c5e:	a3 99       	lsr	r9,0x3
80003c60:	f4 09 00 38 	add	r8,r10,r9<<0x3
80003c64:	70 2b       	ld.w	r11,r8[0x8]
80003c66:	8d 38       	st.w	r6[0xc],r8
80003c68:	8d 2b       	st.w	r6[0x8],r11
80003c6a:	97 36       	st.w	r11[0xc],r6
80003c6c:	91 26       	st.w	r8[0x8],r6
80003c6e:	a3 49       	asr	r9,0x2
80003c70:	74 18       	ld.w	r8,r10[0x4]
80003c72:	30 1b       	mov	r11,1
80003c74:	f6 09 09 49 	lsl	r9,r11,r9
80003c78:	f1 e9 10 09 	or	r9,r8,r9
80003c7c:	95 19       	st.w	r10[0x4],r9
80003c7e:	c4 78       	rjmp	80003d0c <_malloc_r+0x1e4>
80003c80:	f2 0a 16 09 	lsr	r10,r9,0x9
80003c84:	58 4a       	cp.w	r10,4
80003c86:	e0 8b 00 07 	brhi	80003c94 <_malloc_r+0x16c>
80003c8a:	f2 0a 16 06 	lsr	r10,r9,0x6
80003c8e:	2c 8a       	sub	r10,-56
80003c90:	c2 08       	rjmp	80003cd0 <_malloc_r+0x1a8>
80003c92:	d7 03       	nop
80003c94:	59 4a       	cp.w	r10,20
80003c96:	e0 8b 00 04 	brhi	80003c9e <_malloc_r+0x176>
80003c9a:	2a 5a       	sub	r10,-91
80003c9c:	c1 a8       	rjmp	80003cd0 <_malloc_r+0x1a8>
80003c9e:	e0 4a 00 54 	cp.w	r10,84
80003ca2:	e0 8b 00 06 	brhi	80003cae <_malloc_r+0x186>
80003ca6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80003caa:	29 2a       	sub	r10,-110
80003cac:	c1 28       	rjmp	80003cd0 <_malloc_r+0x1a8>
80003cae:	e0 4a 01 54 	cp.w	r10,340
80003cb2:	e0 8b 00 06 	brhi	80003cbe <_malloc_r+0x196>
80003cb6:	f2 0a 16 0f 	lsr	r10,r9,0xf
80003cba:	28 9a       	sub	r10,-119
80003cbc:	c0 a8       	rjmp	80003cd0 <_malloc_r+0x1a8>
80003cbe:	e0 4a 05 54 	cp.w	r10,1364
80003cc2:	e0 88 00 04 	brls	80003cca <_malloc_r+0x1a2>
80003cc6:	37 ea       	mov	r10,126
80003cc8:	c0 48       	rjmp	80003cd0 <_malloc_r+0x1a8>
80003cca:	f2 0a 16 12 	lsr	r10,r9,0x12
80003cce:	28 4a       	sub	r10,-124
80003cd0:	e0 6b 01 24 	mov	r11,292
80003cd4:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80003cd8:	68 28       	ld.w	r8,r4[0x8]
80003cda:	08 38       	cp.w	r8,r4
80003cdc:	c0 e1       	brne	80003cf8 <_malloc_r+0x1d0>
80003cde:	76 19       	ld.w	r9,r11[0x4]
80003ce0:	a3 4a       	asr	r10,0x2
80003ce2:	30 1e       	mov	lr,1
80003ce4:	fc 0a 09 4a 	lsl	r10,lr,r10
80003ce8:	f3 ea 10 0a 	or	r10,r9,r10
80003cec:	10 99       	mov	r9,r8
80003cee:	97 1a       	st.w	r11[0x4],r10
80003cf0:	c0 a8       	rjmp	80003d04 <_malloc_r+0x1dc>
80003cf2:	70 28       	ld.w	r8,r8[0x8]
80003cf4:	08 38       	cp.w	r8,r4
80003cf6:	c0 60       	breq	80003d02 <_malloc_r+0x1da>
80003cf8:	70 1a       	ld.w	r10,r8[0x4]
80003cfa:	e0 1a ff fc 	andl	r10,0xfffc
80003cfe:	14 39       	cp.w	r9,r10
80003d00:	cf 93       	brcs	80003cf2 <_malloc_r+0x1ca>
80003d02:	70 39       	ld.w	r9,r8[0xc]
80003d04:	8d 39       	st.w	r6[0xc],r9
80003d06:	8d 28       	st.w	r6[0x8],r8
80003d08:	91 36       	st.w	r8[0xc],r6
80003d0a:	93 26       	st.w	r9[0x8],r6
80003d0c:	e6 08 14 02 	asr	r8,r3,0x2
80003d10:	30 1b       	mov	r11,1
80003d12:	e0 64 01 24 	mov	r4,292
80003d16:	f6 08 09 4b 	lsl	r11,r11,r8
80003d1a:	68 18       	ld.w	r8,r4[0x4]
80003d1c:	10 3b       	cp.w	r11,r8
80003d1e:	e0 8b 00 69 	brhi	80003df0 <_malloc_r+0x2c8>
80003d22:	f7 e8 00 09 	and	r9,r11,r8
80003d26:	c0 b1       	brne	80003d3c <_malloc_r+0x214>
80003d28:	e0 13 ff fc 	andl	r3,0xfffc
80003d2c:	a1 7b       	lsl	r11,0x1
80003d2e:	2f c3       	sub	r3,-4
80003d30:	c0 38       	rjmp	80003d36 <_malloc_r+0x20e>
80003d32:	2f c3       	sub	r3,-4
80003d34:	a1 7b       	lsl	r11,0x1
80003d36:	f7 e8 00 09 	and	r9,r11,r8
80003d3a:	cf c0       	breq	80003d32 <_malloc_r+0x20a>
80003d3c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80003d40:	06 92       	mov	r2,r3
80003d42:	1c 91       	mov	r1,lr
80003d44:	62 36       	ld.w	r6,r1[0xc]
80003d46:	c2 d8       	rjmp	80003da0 <_malloc_r+0x278>
80003d48:	6c 1a       	ld.w	r10,r6[0x4]
80003d4a:	e0 1a ff fc 	andl	r10,0xfffc
80003d4e:	f4 07 01 08 	sub	r8,r10,r7
80003d52:	58 f8       	cp.w	r8,15
80003d54:	e0 8a 00 15 	brle	80003d7e <_malloc_r+0x256>
80003d58:	6c 3a       	ld.w	r10,r6[0xc]
80003d5a:	6c 29       	ld.w	r9,r6[0x8]
80003d5c:	95 29       	st.w	r10[0x8],r9
80003d5e:	93 3a       	st.w	r9[0xc],r10
80003d60:	0e 99       	mov	r9,r7
80003d62:	ec 07 00 07 	add	r7,r6,r7
80003d66:	a1 a9       	sbr	r9,0x0
80003d68:	99 37       	st.w	r12[0xc],r7
80003d6a:	99 27       	st.w	r12[0x8],r7
80003d6c:	8d 19       	st.w	r6[0x4],r9
80003d6e:	ee 08 09 08 	st.w	r7[r8],r8
80003d72:	8f 2c       	st.w	r7[0x8],r12
80003d74:	8f 3c       	st.w	r7[0xc],r12
80003d76:	a1 a8       	sbr	r8,0x0
80003d78:	0a 9c       	mov	r12,r5
80003d7a:	8f 18       	st.w	r7[0x4],r8
80003d7c:	c0 d8       	rjmp	80003d96 <_malloc_r+0x26e>
80003d7e:	6c 39       	ld.w	r9,r6[0xc]
80003d80:	58 08       	cp.w	r8,0
80003d82:	c0 e5       	brlt	80003d9e <_malloc_r+0x276>
80003d84:	ec 0a 00 0a 	add	r10,r6,r10
80003d88:	74 18       	ld.w	r8,r10[0x4]
80003d8a:	a1 a8       	sbr	r8,0x0
80003d8c:	0a 9c       	mov	r12,r5
80003d8e:	95 18       	st.w	r10[0x4],r8
80003d90:	6c 28       	ld.w	r8,r6[0x8]
80003d92:	93 28       	st.w	r9[0x8],r8
80003d94:	91 39       	st.w	r8[0xc],r9
80003d96:	cd ec       	rcall	80003f52 <__malloc_unlock>
80003d98:	ec cc ff f8 	sub	r12,r6,-8
80003d9c:	d8 32       	popm	r0-r7,pc
80003d9e:	12 96       	mov	r6,r9
80003da0:	02 36       	cp.w	r6,r1
80003da2:	cd 31       	brne	80003d48 <_malloc_r+0x220>
80003da4:	2f f2       	sub	r2,-1
80003da6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80003daa:	c0 30       	breq	80003db0 <_malloc_r+0x288>
80003dac:	2f 81       	sub	r1,-8
80003dae:	cc bb       	rjmp	80003d44 <_malloc_r+0x21c>
80003db0:	1c 98       	mov	r8,lr
80003db2:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80003db6:	c0 81       	brne	80003dc6 <_malloc_r+0x29e>
80003db8:	68 19       	ld.w	r9,r4[0x4]
80003dba:	f6 08 11 ff 	rsub	r8,r11,-1
80003dbe:	f3 e8 00 08 	and	r8,r9,r8
80003dc2:	89 18       	st.w	r4[0x4],r8
80003dc4:	c0 78       	rjmp	80003dd2 <_malloc_r+0x2aa>
80003dc6:	f0 c9 00 08 	sub	r9,r8,8
80003dca:	20 13       	sub	r3,1
80003dcc:	70 08       	ld.w	r8,r8[0x0]
80003dce:	12 38       	cp.w	r8,r9
80003dd0:	cf 10       	breq	80003db2 <_malloc_r+0x28a>
80003dd2:	a1 7b       	lsl	r11,0x1
80003dd4:	68 18       	ld.w	r8,r4[0x4]
80003dd6:	10 3b       	cp.w	r11,r8
80003dd8:	e0 8b 00 0c 	brhi	80003df0 <_malloc_r+0x2c8>
80003ddc:	58 0b       	cp.w	r11,0
80003dde:	c0 90       	breq	80003df0 <_malloc_r+0x2c8>
80003de0:	04 93       	mov	r3,r2
80003de2:	c0 38       	rjmp	80003de8 <_malloc_r+0x2c0>
80003de4:	2f c3       	sub	r3,-4
80003de6:	a1 7b       	lsl	r11,0x1
80003de8:	f7 e8 00 09 	and	r9,r11,r8
80003dec:	ca 81       	brne	80003d3c <_malloc_r+0x214>
80003dee:	cf bb       	rjmp	80003de4 <_malloc_r+0x2bc>
80003df0:	68 23       	ld.w	r3,r4[0x8]
80003df2:	66 12       	ld.w	r2,r3[0x4]
80003df4:	e0 12 ff fc 	andl	r2,0xfffc
80003df8:	0e 32       	cp.w	r2,r7
80003dfa:	5f 39       	srlo	r9
80003dfc:	e4 07 01 08 	sub	r8,r2,r7
80003e00:	58 f8       	cp.w	r8,15
80003e02:	5f aa       	srle	r10
80003e04:	f5 e9 10 09 	or	r9,r10,r9
80003e08:	e0 80 00 96 	breq	80003f34 <_malloc_r+0x40c>
80003e0c:	e0 68 06 40 	mov	r8,1600
80003e10:	70 01       	ld.w	r1,r8[0x0]
80003e12:	e0 68 05 30 	mov	r8,1328
80003e16:	2f 01       	sub	r1,-16
80003e18:	70 08       	ld.w	r8,r8[0x0]
80003e1a:	0e 01       	add	r1,r7
80003e1c:	5b f8       	cp.w	r8,-1
80003e1e:	c0 40       	breq	80003e26 <_malloc_r+0x2fe>
80003e20:	28 11       	sub	r1,-127
80003e22:	e0 11 ff 80 	andl	r1,0xff80
80003e26:	02 9b       	mov	r11,r1
80003e28:	0a 9c       	mov	r12,r5
80003e2a:	c9 5c       	rcall	80003f54 <_sbrk_r>
80003e2c:	18 96       	mov	r6,r12
80003e2e:	5b fc       	cp.w	r12,-1
80003e30:	c7 30       	breq	80003f16 <_malloc_r+0x3ee>
80003e32:	e6 02 00 08 	add	r8,r3,r2
80003e36:	10 3c       	cp.w	r12,r8
80003e38:	c0 32       	brcc	80003e3e <_malloc_r+0x316>
80003e3a:	08 33       	cp.w	r3,r4
80003e3c:	c6 d1       	brne	80003f16 <_malloc_r+0x3ee>
80003e3e:	e0 6a 06 44 	mov	r10,1604
80003e42:	74 09       	ld.w	r9,r10[0x0]
80003e44:	e2 09 00 09 	add	r9,r1,r9
80003e48:	95 09       	st.w	r10[0x0],r9
80003e4a:	10 36       	cp.w	r6,r8
80003e4c:	c0 a1       	brne	80003e60 <_malloc_r+0x338>
80003e4e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80003e52:	c0 71       	brne	80003e60 <_malloc_r+0x338>
80003e54:	e2 02 00 02 	add	r2,r1,r2
80003e58:	68 28       	ld.w	r8,r4[0x8]
80003e5a:	a1 a2       	sbr	r2,0x0
80003e5c:	91 12       	st.w	r8[0x4],r2
80003e5e:	c4 d8       	rjmp	80003ef8 <_malloc_r+0x3d0>
80003e60:	e0 6a 05 30 	mov	r10,1328
80003e64:	74 0b       	ld.w	r11,r10[0x0]
80003e66:	5b fb       	cp.w	r11,-1
80003e68:	c0 31       	brne	80003e6e <_malloc_r+0x346>
80003e6a:	95 06       	st.w	r10[0x0],r6
80003e6c:	c0 78       	rjmp	80003e7a <_malloc_r+0x352>
80003e6e:	ec 09 00 09 	add	r9,r6,r9
80003e72:	e0 6a 06 44 	mov	r10,1604
80003e76:	10 19       	sub	r9,r8
80003e78:	95 09       	st.w	r10[0x0],r9
80003e7a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80003e7e:	f0 09 11 08 	rsub	r9,r8,8
80003e82:	58 08       	cp.w	r8,0
80003e84:	f2 08 17 10 	movne	r8,r9
80003e88:	ed d8 e1 06 	addne	r6,r6,r8
80003e8c:	28 08       	sub	r8,-128
80003e8e:	ec 01 00 01 	add	r1,r6,r1
80003e92:	0a 9c       	mov	r12,r5
80003e94:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80003e98:	f0 01 01 01 	sub	r1,r8,r1
80003e9c:	02 9b       	mov	r11,r1
80003e9e:	c5 bc       	rcall	80003f54 <_sbrk_r>
80003ea0:	e0 68 06 44 	mov	r8,1604
80003ea4:	5b fc       	cp.w	r12,-1
80003ea6:	ec 0c 17 00 	moveq	r12,r6
80003eaa:	f9 b1 00 00 	moveq	r1,0
80003eae:	70 09       	ld.w	r9,r8[0x0]
80003eb0:	0c 1c       	sub	r12,r6
80003eb2:	89 26       	st.w	r4[0x8],r6
80003eb4:	02 0c       	add	r12,r1
80003eb6:	12 01       	add	r1,r9
80003eb8:	a1 ac       	sbr	r12,0x0
80003eba:	91 01       	st.w	r8[0x0],r1
80003ebc:	8d 1c       	st.w	r6[0x4],r12
80003ebe:	08 33       	cp.w	r3,r4
80003ec0:	c1 c0       	breq	80003ef8 <_malloc_r+0x3d0>
80003ec2:	58 f2       	cp.w	r2,15
80003ec4:	e0 8b 00 05 	brhi	80003ece <_malloc_r+0x3a6>
80003ec8:	30 18       	mov	r8,1
80003eca:	8d 18       	st.w	r6[0x4],r8
80003ecc:	c2 58       	rjmp	80003f16 <_malloc_r+0x3ee>
80003ece:	30 59       	mov	r9,5
80003ed0:	20 c2       	sub	r2,12
80003ed2:	e0 12 ff f8 	andl	r2,0xfff8
80003ed6:	e6 02 00 08 	add	r8,r3,r2
80003eda:	91 29       	st.w	r8[0x8],r9
80003edc:	91 19       	st.w	r8[0x4],r9
80003ede:	66 18       	ld.w	r8,r3[0x4]
80003ee0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ee4:	e5 e8 10 08 	or	r8,r2,r8
80003ee8:	87 18       	st.w	r3[0x4],r8
80003eea:	58 f2       	cp.w	r2,15
80003eec:	e0 88 00 06 	brls	80003ef8 <_malloc_r+0x3d0>
80003ef0:	e6 cb ff f8 	sub	r11,r3,-8
80003ef4:	0a 9c       	mov	r12,r5
80003ef6:	ca 7c       	rcall	80004044 <_free_r>
80003ef8:	e0 69 06 3c 	mov	r9,1596
80003efc:	72 0a       	ld.w	r10,r9[0x0]
80003efe:	e0 68 06 44 	mov	r8,1604
80003f02:	70 08       	ld.w	r8,r8[0x0]
80003f04:	14 38       	cp.w	r8,r10
80003f06:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80003f0a:	e0 69 06 38 	mov	r9,1592
80003f0e:	72 0a       	ld.w	r10,r9[0x0]
80003f10:	14 38       	cp.w	r8,r10
80003f12:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80003f16:	68 28       	ld.w	r8,r4[0x8]
80003f18:	70 18       	ld.w	r8,r8[0x4]
80003f1a:	e0 18 ff fc 	andl	r8,0xfffc
80003f1e:	0e 38       	cp.w	r8,r7
80003f20:	5f 39       	srlo	r9
80003f22:	0e 18       	sub	r8,r7
80003f24:	58 f8       	cp.w	r8,15
80003f26:	5f aa       	srle	r10
80003f28:	f5 e9 10 09 	or	r9,r10,r9
80003f2c:	c0 40       	breq	80003f34 <_malloc_r+0x40c>
80003f2e:	0a 9c       	mov	r12,r5
80003f30:	c1 1c       	rcall	80003f52 <__malloc_unlock>
80003f32:	d8 3a       	popm	r0-r7,pc,r12=0
80003f34:	68 26       	ld.w	r6,r4[0x8]
80003f36:	a1 a8       	sbr	r8,0x0
80003f38:	0e 99       	mov	r9,r7
80003f3a:	a1 a9       	sbr	r9,0x0
80003f3c:	8d 19       	st.w	r6[0x4],r9
80003f3e:	ec 07 00 07 	add	r7,r6,r7
80003f42:	0a 9c       	mov	r12,r5
80003f44:	89 27       	st.w	r4[0x8],r7
80003f46:	8f 18       	st.w	r7[0x4],r8
80003f48:	c0 5c       	rcall	80003f52 <__malloc_unlock>
80003f4a:	ec cc ff f8 	sub	r12,r6,-8
80003f4e:	d8 32       	popm	r0-r7,pc

80003f50 <__malloc_lock>:
80003f50:	5e fc       	retal	r12

80003f52 <__malloc_unlock>:
80003f52:	5e fc       	retal	r12

80003f54 <_sbrk_r>:
80003f54:	d4 21       	pushm	r4-r7,lr
80003f56:	30 08       	mov	r8,0
80003f58:	18 97       	mov	r7,r12
80003f5a:	e0 66 06 78 	mov	r6,1656
80003f5e:	16 9c       	mov	r12,r11
80003f60:	8d 08       	st.w	r6[0x0],r8
80003f62:	c0 9c       	rcall	80003f74 <_sbrk>
80003f64:	5b fc       	cp.w	r12,-1
80003f66:	c0 51       	brne	80003f70 <_sbrk_r+0x1c>
80003f68:	6c 08       	ld.w	r8,r6[0x0]
80003f6a:	58 08       	cp.w	r8,0
80003f6c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80003f70:	d8 22       	popm	r4-r7,pc
80003f72:	d7 03       	nop

80003f74 <_sbrk>:
80003f74:	d4 01       	pushm	lr
80003f76:	e0 68 06 6c 	mov	r8,1644
80003f7a:	70 09       	ld.w	r9,r8[0x0]
80003f7c:	58 09       	cp.w	r9,0
80003f7e:	c0 41       	brne	80003f86 <_sbrk+0x12>
80003f80:	e0 69 06 80 	mov	r9,1664
80003f84:	91 09       	st.w	r8[0x0],r9
80003f86:	e0 69 06 6c 	mov	r9,1644
80003f8a:	e0 6a f0 00 	mov	r10,61440
80003f8e:	72 08       	ld.w	r8,r9[0x0]
80003f90:	f0 0c 00 0c 	add	r12,r8,r12
80003f94:	14 3c       	cp.w	r12,r10
80003f96:	e0 8b 00 04 	brhi	80003f9e <_sbrk+0x2a>
80003f9a:	93 0c       	st.w	r9[0x0],r12
80003f9c:	c0 58       	rjmp	80003fa6 <_sbrk+0x32>
80003f9e:	c0 7c       	rcall	80003fac <__errno>
80003fa0:	30 c8       	mov	r8,12
80003fa2:	99 08       	st.w	r12[0x0],r8
80003fa4:	3f f8       	mov	r8,-1
80003fa6:	10 9c       	mov	r12,r8
80003fa8:	d8 02       	popm	pc
80003faa:	d7 03       	nop

80003fac <__errno>:
80003fac:	e0 68 01 20 	mov	r8,288
80003fb0:	70 0c       	ld.w	r12,r8[0x0]
80003fb2:	2f 4c       	sub	r12,-12
80003fb4:	5e fc       	retal	r12
80003fb6:	d7 03       	nop

80003fb8 <_malloc_trim_r>:
80003fb8:	d4 21       	pushm	r4-r7,lr
80003fba:	16 95       	mov	r5,r11
80003fbc:	18 97       	mov	r7,r12
80003fbe:	cc 9f       	rcall	80003f50 <__malloc_lock>
80003fc0:	e0 64 01 24 	mov	r4,292
80003fc4:	68 28       	ld.w	r8,r4[0x8]
80003fc6:	70 16       	ld.w	r6,r8[0x4]
80003fc8:	e0 16 ff fc 	andl	r6,0xfffc
80003fcc:	ec c8 ff 91 	sub	r8,r6,-111
80003fd0:	f0 05 01 05 	sub	r5,r8,r5
80003fd4:	e0 15 ff 80 	andl	r5,0xff80
80003fd8:	ea c5 00 80 	sub	r5,r5,128
80003fdc:	e0 45 00 7f 	cp.w	r5,127
80003fe0:	e0 8a 00 22 	brle	80004024 <_malloc_trim_r+0x6c>
80003fe4:	30 0b       	mov	r11,0
80003fe6:	0e 9c       	mov	r12,r7
80003fe8:	cb 6f       	rcall	80003f54 <_sbrk_r>
80003fea:	68 28       	ld.w	r8,r4[0x8]
80003fec:	0c 08       	add	r8,r6
80003fee:	10 3c       	cp.w	r12,r8
80003ff0:	c1 a1       	brne	80004024 <_malloc_trim_r+0x6c>
80003ff2:	ea 0b 11 00 	rsub	r11,r5,0
80003ff6:	0e 9c       	mov	r12,r7
80003ff8:	ca ef       	rcall	80003f54 <_sbrk_r>
80003ffa:	5b fc       	cp.w	r12,-1
80003ffc:	c1 71       	brne	8000402a <_malloc_trim_r+0x72>
80003ffe:	30 0b       	mov	r11,0
80004000:	0e 9c       	mov	r12,r7
80004002:	ca 9f       	rcall	80003f54 <_sbrk_r>
80004004:	68 28       	ld.w	r8,r4[0x8]
80004006:	f8 08 01 09 	sub	r9,r12,r8
8000400a:	58 f9       	cp.w	r9,15
8000400c:	e0 8a 00 0c 	brle	80004024 <_malloc_trim_r+0x6c>
80004010:	a1 a9       	sbr	r9,0x0
80004012:	91 19       	st.w	r8[0x4],r9
80004014:	e0 68 05 30 	mov	r8,1328
80004018:	70 09       	ld.w	r9,r8[0x0]
8000401a:	e0 68 06 44 	mov	r8,1604
8000401e:	f8 09 01 09 	sub	r9,r12,r9
80004022:	91 09       	st.w	r8[0x0],r9
80004024:	0e 9c       	mov	r12,r7
80004026:	c9 6f       	rcall	80003f52 <__malloc_unlock>
80004028:	d8 2a       	popm	r4-r7,pc,r12=0
8000402a:	68 28       	ld.w	r8,r4[0x8]
8000402c:	0a 16       	sub	r6,r5
8000402e:	a1 a6       	sbr	r6,0x0
80004030:	91 16       	st.w	r8[0x4],r6
80004032:	e0 68 06 44 	mov	r8,1604
80004036:	70 09       	ld.w	r9,r8[0x0]
80004038:	0a 19       	sub	r9,r5
8000403a:	0e 9c       	mov	r12,r7
8000403c:	91 09       	st.w	r8[0x0],r9
8000403e:	c8 af       	rcall	80003f52 <__malloc_unlock>
80004040:	da 2a       	popm	r4-r7,pc,r12=1
80004042:	d7 03       	nop

80004044 <_free_r>:
80004044:	d4 21       	pushm	r4-r7,lr
80004046:	16 96       	mov	r6,r11
80004048:	18 97       	mov	r7,r12
8000404a:	58 0b       	cp.w	r11,0
8000404c:	e0 80 00 bd 	breq	800041c6 <_free_r+0x182>
80004050:	c8 0f       	rcall	80003f50 <__malloc_lock>
80004052:	20 86       	sub	r6,8
80004054:	e0 6a 01 24 	mov	r10,292
80004058:	6c 18       	ld.w	r8,r6[0x4]
8000405a:	74 2e       	ld.w	lr,r10[0x8]
8000405c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80004060:	a1 c8       	cbr	r8,0x0
80004062:	ec 08 00 09 	add	r9,r6,r8
80004066:	72 1b       	ld.w	r11,r9[0x4]
80004068:	e0 1b ff fc 	andl	r11,0xfffc
8000406c:	1c 39       	cp.w	r9,lr
8000406e:	c1 d1       	brne	800040a8 <_free_r+0x64>
80004070:	f6 08 00 08 	add	r8,r11,r8
80004074:	58 0c       	cp.w	r12,0
80004076:	c0 81       	brne	80004086 <_free_r+0x42>
80004078:	6c 09       	ld.w	r9,r6[0x0]
8000407a:	12 16       	sub	r6,r9
8000407c:	12 08       	add	r8,r9
8000407e:	6c 3b       	ld.w	r11,r6[0xc]
80004080:	6c 29       	ld.w	r9,r6[0x8]
80004082:	97 29       	st.w	r11[0x8],r9
80004084:	93 3b       	st.w	r9[0xc],r11
80004086:	10 99       	mov	r9,r8
80004088:	95 26       	st.w	r10[0x8],r6
8000408a:	a1 a9       	sbr	r9,0x0
8000408c:	8d 19       	st.w	r6[0x4],r9
8000408e:	e0 69 05 2c 	mov	r9,1324
80004092:	72 09       	ld.w	r9,r9[0x0]
80004094:	12 38       	cp.w	r8,r9
80004096:	c0 63       	brcs	800040a2 <_free_r+0x5e>
80004098:	e0 68 06 40 	mov	r8,1600
8000409c:	0e 9c       	mov	r12,r7
8000409e:	70 0b       	ld.w	r11,r8[0x0]
800040a0:	c8 cf       	rcall	80003fb8 <_malloc_trim_r>
800040a2:	0e 9c       	mov	r12,r7
800040a4:	c5 7f       	rcall	80003f52 <__malloc_unlock>
800040a6:	d8 22       	popm	r4-r7,pc
800040a8:	93 1b       	st.w	r9[0x4],r11
800040aa:	58 0c       	cp.w	r12,0
800040ac:	c0 30       	breq	800040b2 <_free_r+0x6e>
800040ae:	30 0c       	mov	r12,0
800040b0:	c1 08       	rjmp	800040d0 <_free_r+0x8c>
800040b2:	6c 0e       	ld.w	lr,r6[0x0]
800040b4:	f4 c5 ff f8 	sub	r5,r10,-8
800040b8:	1c 16       	sub	r6,lr
800040ba:	1c 08       	add	r8,lr
800040bc:	6c 2e       	ld.w	lr,r6[0x8]
800040be:	0a 3e       	cp.w	lr,r5
800040c0:	f9 bc 00 01 	moveq	r12,1
800040c4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800040c8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800040cc:	fd f5 1a 03 	st.wne	lr[0xc],r5
800040d0:	f2 0b 00 0e 	add	lr,r9,r11
800040d4:	7c 1e       	ld.w	lr,lr[0x4]
800040d6:	ed be 00 00 	bld	lr,0x0
800040da:	c1 40       	breq	80004102 <_free_r+0xbe>
800040dc:	16 08       	add	r8,r11
800040de:	58 0c       	cp.w	r12,0
800040e0:	c0 d1       	brne	800040fa <_free_r+0xb6>
800040e2:	e0 6e 01 24 	mov	lr,292
800040e6:	72 2b       	ld.w	r11,r9[0x8]
800040e8:	2f 8e       	sub	lr,-8
800040ea:	1c 3b       	cp.w	r11,lr
800040ec:	c0 71       	brne	800040fa <_free_r+0xb6>
800040ee:	97 36       	st.w	r11[0xc],r6
800040f0:	97 26       	st.w	r11[0x8],r6
800040f2:	8d 2b       	st.w	r6[0x8],r11
800040f4:	8d 3b       	st.w	r6[0xc],r11
800040f6:	30 1c       	mov	r12,1
800040f8:	c0 58       	rjmp	80004102 <_free_r+0xbe>
800040fa:	72 2b       	ld.w	r11,r9[0x8]
800040fc:	72 39       	ld.w	r9,r9[0xc]
800040fe:	93 2b       	st.w	r9[0x8],r11
80004100:	97 39       	st.w	r11[0xc],r9
80004102:	10 99       	mov	r9,r8
80004104:	ec 08 09 08 	st.w	r6[r8],r8
80004108:	a1 a9       	sbr	r9,0x0
8000410a:	8d 19       	st.w	r6[0x4],r9
8000410c:	58 0c       	cp.w	r12,0
8000410e:	c5 a1       	brne	800041c2 <_free_r+0x17e>
80004110:	e0 48 01 ff 	cp.w	r8,511
80004114:	e0 8b 00 13 	brhi	8000413a <_free_r+0xf6>
80004118:	a3 98       	lsr	r8,0x3
8000411a:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000411e:	72 2b       	ld.w	r11,r9[0x8]
80004120:	8d 39       	st.w	r6[0xc],r9
80004122:	8d 2b       	st.w	r6[0x8],r11
80004124:	97 36       	st.w	r11[0xc],r6
80004126:	93 26       	st.w	r9[0x8],r6
80004128:	a3 48       	asr	r8,0x2
8000412a:	74 19       	ld.w	r9,r10[0x4]
8000412c:	30 1b       	mov	r11,1
8000412e:	f6 08 09 48 	lsl	r8,r11,r8
80004132:	f3 e8 10 08 	or	r8,r9,r8
80004136:	95 18       	st.w	r10[0x4],r8
80004138:	c4 58       	rjmp	800041c2 <_free_r+0x17e>
8000413a:	f0 0b 16 09 	lsr	r11,r8,0x9
8000413e:	58 4b       	cp.w	r11,4
80004140:	e0 8b 00 06 	brhi	8000414c <_free_r+0x108>
80004144:	f0 0b 16 06 	lsr	r11,r8,0x6
80004148:	2c 8b       	sub	r11,-56
8000414a:	c2 08       	rjmp	8000418a <_free_r+0x146>
8000414c:	59 4b       	cp.w	r11,20
8000414e:	e0 8b 00 04 	brhi	80004156 <_free_r+0x112>
80004152:	2a 5b       	sub	r11,-91
80004154:	c1 b8       	rjmp	8000418a <_free_r+0x146>
80004156:	e0 4b 00 54 	cp.w	r11,84
8000415a:	e0 8b 00 06 	brhi	80004166 <_free_r+0x122>
8000415e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80004162:	29 2b       	sub	r11,-110
80004164:	c1 38       	rjmp	8000418a <_free_r+0x146>
80004166:	e0 4b 01 54 	cp.w	r11,340
8000416a:	e0 8b 00 06 	brhi	80004176 <_free_r+0x132>
8000416e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80004172:	28 9b       	sub	r11,-119
80004174:	c0 b8       	rjmp	8000418a <_free_r+0x146>
80004176:	e0 4b 05 54 	cp.w	r11,1364
8000417a:	e0 88 00 05 	brls	80004184 <_free_r+0x140>
8000417e:	37 eb       	mov	r11,126
80004180:	c0 58       	rjmp	8000418a <_free_r+0x146>
80004182:	d7 03       	nop
80004184:	f0 0b 16 12 	lsr	r11,r8,0x12
80004188:	28 4b       	sub	r11,-124
8000418a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000418e:	78 29       	ld.w	r9,r12[0x8]
80004190:	18 39       	cp.w	r9,r12
80004192:	c0 e1       	brne	800041ae <_free_r+0x16a>
80004194:	74 18       	ld.w	r8,r10[0x4]
80004196:	a3 4b       	asr	r11,0x2
80004198:	30 1c       	mov	r12,1
8000419a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000419e:	f1 eb 10 0b 	or	r11,r8,r11
800041a2:	12 98       	mov	r8,r9
800041a4:	95 1b       	st.w	r10[0x4],r11
800041a6:	c0 a8       	rjmp	800041ba <_free_r+0x176>
800041a8:	72 29       	ld.w	r9,r9[0x8]
800041aa:	18 39       	cp.w	r9,r12
800041ac:	c0 60       	breq	800041b8 <_free_r+0x174>
800041ae:	72 1a       	ld.w	r10,r9[0x4]
800041b0:	e0 1a ff fc 	andl	r10,0xfffc
800041b4:	14 38       	cp.w	r8,r10
800041b6:	cf 93       	brcs	800041a8 <_free_r+0x164>
800041b8:	72 38       	ld.w	r8,r9[0xc]
800041ba:	8d 38       	st.w	r6[0xc],r8
800041bc:	8d 29       	st.w	r6[0x8],r9
800041be:	93 36       	st.w	r9[0xc],r6
800041c0:	91 26       	st.w	r8[0x8],r6
800041c2:	0e 9c       	mov	r12,r7
800041c4:	cc 7e       	rcall	80003f52 <__malloc_unlock>
800041c6:	d8 22       	popm	r4-r7,pc

Disassembly of section .exception:

80004200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80004200:	c0 08       	rjmp	80004200 <_evba>
	...

80004204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80004204:	c0 08       	rjmp	80004204 <_handle_TLB_Multiple_Hit>
	...

80004208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80004208:	c0 08       	rjmp	80004208 <_handle_Bus_Error_Data_Fetch>
	...

8000420c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000420c:	c0 08       	rjmp	8000420c <_handle_Bus_Error_Instruction_Fetch>
	...

80004210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80004210:	c0 08       	rjmp	80004210 <_handle_NMI>
	...

80004214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80004214:	c0 08       	rjmp	80004214 <_handle_Instruction_Address>
	...

80004218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80004218:	c0 08       	rjmp	80004218 <_handle_ITLB_Protection>
	...

8000421c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000421c:	c0 08       	rjmp	8000421c <_handle_Breakpoint>
	...

80004220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80004220:	c0 08       	rjmp	80004220 <_handle_Illegal_Opcode>
	...

80004224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80004224:	c0 08       	rjmp	80004224 <_handle_Unimplemented_Instruction>
	...

80004228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80004228:	c0 08       	rjmp	80004228 <_handle_Privilege_Violation>
	...

8000422c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000422c:	c0 08       	rjmp	8000422c <_handle_Floating_Point>
	...

80004230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80004230:	c0 08       	rjmp	80004230 <_handle_Coprocessor_Absent>
	...

80004234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80004234:	c0 08       	rjmp	80004234 <_handle_Data_Address_Read>
	...

80004238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80004238:	c0 08       	rjmp	80004238 <_handle_Data_Address_Write>
	...

8000423c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000423c:	c0 08       	rjmp	8000423c <_handle_DTLB_Protection_Read>
	...

80004240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80004240:	c0 08       	rjmp	80004240 <_handle_DTLB_Protection_Write>
	...

80004244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80004244:	c0 08       	rjmp	80004244 <_handle_DTLB_Modified>
	...

80004250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80004250:	c0 08       	rjmp	80004250 <_handle_ITLB_Miss>
	...

80004260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80004260:	c0 08       	rjmp	80004260 <_handle_DTLB_Miss_Read>
	...

80004270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80004270:	c0 08       	rjmp	80004270 <_handle_DTLB_Miss_Write>
	...

80004300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80004300:	c0 08       	rjmp	80004300 <_handle_Supervisor_Call>
80004302:	d7 03       	nop

80004304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004304:	30 0c       	mov	r12,0
80004306:	fe b0 f5 71 	rcall	80002de8 <_get_interrupt_handler>
8000430a:	58 0c       	cp.w	r12,0
8000430c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80004310:	d6 03       	rete

80004312 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004312:	30 1c       	mov	r12,1
80004314:	fe b0 f5 6a 	rcall	80002de8 <_get_interrupt_handler>
80004318:	58 0c       	cp.w	r12,0
8000431a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000431e:	d6 03       	rete

80004320 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004320:	30 2c       	mov	r12,2
80004322:	fe b0 f5 63 	rcall	80002de8 <_get_interrupt_handler>
80004326:	58 0c       	cp.w	r12,0
80004328:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000432c:	d6 03       	rete

8000432e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000432e:	30 3c       	mov	r12,3
80004330:	fe b0 f5 5c 	rcall	80002de8 <_get_interrupt_handler>
80004334:	58 0c       	cp.w	r12,0
80004336:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000433a:	d6 03       	rete
8000433c:	d7 03       	nop
8000433e:	d7 03       	nop
80004340:	d7 03       	nop
80004342:	d7 03       	nop
80004344:	d7 03       	nop
80004346:	d7 03       	nop
80004348:	d7 03       	nop
8000434a:	d7 03       	nop
8000434c:	d7 03       	nop
8000434e:	d7 03       	nop
80004350:	d7 03       	nop
80004352:	d7 03       	nop
80004354:	d7 03       	nop
80004356:	d7 03       	nop
80004358:	d7 03       	nop
8000435a:	d7 03       	nop
8000435c:	d7 03       	nop
8000435e:	d7 03       	nop
80004360:	d7 03       	nop
80004362:	d7 03       	nop
80004364:	d7 03       	nop
80004366:	d7 03       	nop
80004368:	d7 03       	nop
8000436a:	d7 03       	nop
8000436c:	d7 03       	nop
8000436e:	d7 03       	nop
80004370:	d7 03       	nop
80004372:	d7 03       	nop
80004374:	d7 03       	nop
80004376:	d7 03       	nop
80004378:	d7 03       	nop
8000437a:	d7 03       	nop
8000437c:	d7 03       	nop
8000437e:	d7 03       	nop
80004380:	d7 03       	nop
80004382:	d7 03       	nop
80004384:	d7 03       	nop
80004386:	d7 03       	nop
80004388:	d7 03       	nop
8000438a:	d7 03       	nop
8000438c:	d7 03       	nop
8000438e:	d7 03       	nop
80004390:	d7 03       	nop
80004392:	d7 03       	nop
80004394:	d7 03       	nop
80004396:	d7 03       	nop
80004398:	d7 03       	nop
8000439a:	d7 03       	nop
8000439c:	d7 03       	nop
8000439e:	d7 03       	nop
800043a0:	d7 03       	nop
800043a2:	d7 03       	nop
800043a4:	d7 03       	nop
800043a6:	d7 03       	nop
800043a8:	d7 03       	nop
800043aa:	d7 03       	nop
800043ac:	d7 03       	nop
800043ae:	d7 03       	nop
800043b0:	d7 03       	nop
800043b2:	d7 03       	nop
800043b4:	d7 03       	nop
800043b6:	d7 03       	nop
800043b8:	d7 03       	nop
800043ba:	d7 03       	nop
800043bc:	d7 03       	nop
800043be:	d7 03       	nop
800043c0:	d7 03       	nop
800043c2:	d7 03       	nop
800043c4:	d7 03       	nop
800043c6:	d7 03       	nop
800043c8:	d7 03       	nop
800043ca:	d7 03       	nop
800043cc:	d7 03       	nop
800043ce:	d7 03       	nop
800043d0:	d7 03       	nop
800043d2:	d7 03       	nop
800043d4:	d7 03       	nop
800043d6:	d7 03       	nop
800043d8:	d7 03       	nop
800043da:	d7 03       	nop
800043dc:	d7 03       	nop
800043de:	d7 03       	nop
800043e0:	d7 03       	nop
800043e2:	d7 03       	nop
800043e4:	d7 03       	nop
800043e6:	d7 03       	nop
800043e8:	d7 03       	nop
800043ea:	d7 03       	nop
800043ec:	d7 03       	nop
800043ee:	d7 03       	nop
800043f0:	d7 03       	nop
800043f2:	d7 03       	nop
800043f4:	d7 03       	nop
800043f6:	d7 03       	nop
800043f8:	d7 03       	nop
800043fa:	d7 03       	nop
800043fc:	d7 03       	nop
800043fe:	d7 03       	nop
