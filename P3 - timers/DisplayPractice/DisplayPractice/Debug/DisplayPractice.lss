
DisplayPractice.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021cc  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004200  80004200  00004600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001bc  80004400  80004400  00004800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  800045bc  800045bc  000049bc  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000530  00000008  800045c0  00004c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000001f0  00000538  00000538  00000000  2**2
                  ALLOC
  9 .heap         0000e8d8  00000728  00000728  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00005138  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000918  00000000  00000000  00005168  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000140d  00000000  00000000  00005a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001090e  00000000  00000000  00006e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002a26  00000000  00000000  0001779b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000076cb  00000000  00000000  0001a1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000014c4  00000000  00000000  0002188c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002fec  00000000  00000000  00022d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00004679  00000000  00000000  00025d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0085ce24  00000000  00000000  0002a3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000bc0  00000000  00000000  008871e0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d1 4c 	sub	pc,pc,-11956

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f1 50 	sub	pc,pc,-3760

Disassembly of section .text:

80002008 <et024006_SetLimits>:
80002008:	eb cd 40 80 	pushm	r7,lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000200c:	fc 1e c0 00 	movh	lr,0xc000
80002010:	30 28       	mov	r8,2
80002012:	bc 08       	st.h	lr[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002014:	ef dc c1 08 	bfextu	r7,r12,0x8,0x8
80002018:	fc 18 c0 20 	movh	r8,0xc020
8000201c:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000201e:	30 37       	mov	r7,3
80002020:	bc 07       	st.h	lr[0x0],r7
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002022:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002024:	30 4c       	mov	r12,4
80002026:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002028:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000202c:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000202e:	30 5c       	mov	r12,5
80002030:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002032:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002034:	30 6a       	mov	r10,6
80002036:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002038:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
8000203c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000203e:	30 7a       	mov	r10,7
80002040:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002042:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002044:	30 8a       	mov	r10,8
80002046:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002048:	f5 d9 c1 08 	bfextu	r10,r9,0x8,0x8
8000204c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000204e:	30 9a       	mov	r10,9
80002050:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002052:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80002054:	e3 cd 80 80 	ldm	sp++,r7,pc

80002058 <et024006_DrawPixel>:
  return color;
}


void et024006_DrawPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
80002058:	eb cd 40 80 	pushm	r7,lr
8000205c:	14 97       	mov	r7,r10
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetLimits( x, y, x, y );
8000205e:	5c 7b       	castu.h	r11
80002060:	5c 7c       	castu.h	r12
80002062:	16 99       	mov	r9,r11
80002064:	18 9a       	mov	r10,r12
80002066:	f0 1f 00 06 	mcall	8000207c <et024006_DrawPixel+0x24>
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000206a:	32 29       	mov	r9,34
8000206c:	fc 18 c0 00 	movh	r8,0xc000
80002070:	b0 09       	st.h	r8[0x0],r9
  et024006_SendSPI( ET024006_ID | ET024006_BS0 | ET024006_RS );
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#else
  *ET024006_PARAM_ADDR = color;
80002072:	fc 18 c0 20 	movh	r8,0xc020
80002076:	b0 07       	st.h	r8[0x0],r7
#endif
}
80002078:	e3 cd 80 80 	ldm	sp++,r7,pc
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	20 08       	sub	r8,0

80002080 <et024006_DuplicatePixel>:
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002080:	32 29       	mov	r9,34
80002082:	fc 18 c0 00 	movh	r8,0xc000
80002086:	b0 09       	st.h	r8[0x0],r9
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80002088:	58 7b       	cp.w	r11,7
8000208a:	e0 88 00 13 	brls	800020b0 <et024006_DuplicatePixel+0x30>
8000208e:	16 99       	mov	r9,r11
    *ET024006_PARAM_ADDR = color;
80002090:	fc 18 c0 20 	movh	r8,0xc020
80002094:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002096:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002098:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
8000209a:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
8000209c:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
8000209e:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800020a0:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800020a2:	b0 0c       	st.h	r8[0x0],r12
    count-=8;
800020a4:	20 89       	sub	r9,8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
800020a6:	58 79       	cp.w	r9,7
800020a8:	fe 9b ff f6 	brhi	80002094 <et024006_DuplicatePixel+0x14>



/* --- Pixel block operations --- */

void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
800020ac:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
800020b0:	58 0b       	cp.w	r11,0
800020b2:	5e 0c       	reteq	r12
    *ET024006_PARAM_ADDR = color;
800020b4:	fc 18 c0 20 	movh	r8,0xc020
800020b8:	b0 0c       	st.h	r8[0x0],r12
    --count;
800020ba:	20 1b       	sub	r11,1
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
800020bc:	cf e1       	brne	800020b8 <et024006_DuplicatePixel+0x38>
800020be:	5e fc       	retal	r12

800020c0 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
800020c0:	eb cd 40 e0 	pushm	r5-r7,lr
800020c4:	14 97       	mov	r7,r10
800020c6:	12 96       	mov	r6,r9
800020c8:	10 95       	mov	r5,r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
800020ca:	f6 c9 00 01 	sub	r9,r11,1
800020ce:	0c 09       	add	r9,r6
800020d0:	f8 ca 00 01 	sub	r10,r12,1
800020d4:	0e 0a       	add	r10,r7
800020d6:	5c 79       	castu.h	r9
800020d8:	5c 7a       	castu.h	r10
800020da:	5c 7b       	castu.h	r11
800020dc:	5c 7c       	castu.h	r12
800020de:	f0 1f 00 07 	mcall	800020f8 <et024006_DrawFilledRect+0x38>
  uint32_t count = (uint32_t) width * height;
  et024006_DuplicatePixel( color, count );
800020e2:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
800020e6:	5c 77       	castu.h	r7
800020e8:	af 3b       	mul	r11,r7
800020ea:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
800020ee:	f0 1f 00 04 	mcall	800020fc <et024006_DrawFilledRect+0x3c>
}
800020f2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800020f6:	00 00       	add	r0,r0
800020f8:	80 00       	ld.sh	r0,r0[0x0]
800020fa:	20 08       	sub	r8,0
800020fc:	80 00       	ld.sh	r0,r0[0x0]
800020fe:	20 80       	sub	r0,8

80002100 <et024006_DrawVertLine>:
  et024006_DrawFilledRect( x, y, length, 1, color );
}


void et024006_DrawVertLine( uint16_t x, uint16_t y, uint16_t length, et024006_color_t color )
{
80002100:	d4 01       	pushm	lr
  et024006_DrawFilledRect( x, y, 1, length, color );
80002102:	f1 d9 c0 10 	bfextu	r8,r9,0x0,0x10
80002106:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
8000210a:	30 1a       	mov	r10,1
8000210c:	5c 7b       	castu.h	r11
8000210e:	5c 7c       	castu.h	r12
80002110:	f0 1f 00 02 	mcall	80002118 <et024006_DrawVertLine+0x18>
}
80002114:	d8 02       	popm	pc
80002116:	00 00       	add	r0,r0
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	20 c0       	sub	r0,12

8000211c <et024006_DrawFilledCircle>:
	uint16_t x,
	uint16_t y,
	uint16_t radius,
	uint16_t color,
	uint8_t quadrantMask )
{
8000211c:	d4 31       	pushm	r0-r7,lr
8000211e:	20 5d       	sub	sp,20
80002120:	18 92       	mov	r2,r12
80002122:	16 90       	mov	r0,r11
	// Draw only a pixel if radius is zero.
	if (radius == 0) {
80002124:	58 0a       	cp.w	r10,0
80002126:	c0 81       	brne	80002136 <et024006_DrawFilledCircle+0x1a>
		et024006_DrawPixel( x, y, color );
80002128:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
8000212c:	5c 7b       	castu.h	r11
8000212e:	5c 7c       	castu.h	r12
80002130:	f0 1f 00 4f 	mcall	8000226c <et024006_DrawFilledCircle+0x150>
		return;
80002134:	c9 98       	rjmp	80002266 <et024006_DrawFilledCircle+0x14a>
	}

	// Set up start iterators.
	uint16_t offsetX = 0;
	uint16_t offsetY = radius;
	int16_t error = 3 - 2 * radius;
80002136:	f4 04 10 fe 	mul	r4,r10,-2
8000213a:	2f d4       	sub	r4,-3
8000213c:	5c 84       	casts.h	r4
8000213e:	e7 dc b0 10 	bfexts	r3,r12,0x0,0x10
80002142:	ef da b0 10 	bfexts	r7,r10,0x0,0x10
80002146:	30 15       	mov	r5,1
80002148:	30 06       	mov	r6,0

	// Iterate offsetX from 0 to radius.
	while (offsetX <= offsetY) {
		// Draw vertical lines tracking each quadrant.
		if (quadrantMask & TFT_QUADRANT0) {
8000214a:	10 9a       	mov	r10,r8
8000214c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002150:	50 18       	stdsp	sp[0x4],r8
			et024006_DrawVertLine( x + offsetY, y - offsetX,
80002152:	e3 d9 c0 10 	bfextu	r1,r9,0x0,0x10
				offsetX + 1, color );
			et024006_DrawVertLine( x + offsetX, y - offsetY,
				offsetY + 1, color );
		}
		if (quadrantMask & TFT_QUADRANT1) {
80002156:	14 99       	mov	r9,r10
80002158:	e2 19 00 0c 	andl	r9,0xc,COH
8000215c:	50 29       	stdsp	sp[0x8],r9
			et024006_DrawVertLine( x - offsetY, y - offsetX,
				offsetX + 1, color );
			et024006_DrawVertLine( x - offsetX, y - offsetY,
				offsetY + 1, color );
		}
		if (quadrantMask & TFT_QUADRANT2) {
8000215e:	14 98       	mov	r8,r10
80002160:	e2 18 00 30 	andl	r8,0x30,COH
80002164:	50 38       	stdsp	sp[0xc],r8
			et024006_DrawVertLine( x - offsetY, y, offsetX + 1,
80002166:	f3 db c0 10 	bfextu	r9,r11,0x0,0x10
8000216a:	50 09       	stdsp	sp[0x0],r9
				color );
			et024006_DrawVertLine( x - offsetX, y, offsetY + 1,
				color );
		}
		if (quadrantMask & TFT_QUADRANT3) {
8000216c:	e2 1a 00 c0 	andl	r10,0xc0,COH
80002170:	50 4a       	stdsp	sp[0x10],r10
	int16_t error = 3 - 2 * radius;

	// Iterate offsetX from 0 to radius.
	while (offsetX <= offsetY) {
		// Draw vertical lines tracking each quadrant.
		if (quadrantMask & TFT_QUADRANT0) {
80002172:	40 18       	lddsp	r8,sp[0x4]
80002174:	58 08       	cp.w	r8,0
80002176:	c1 70       	breq	800021a4 <et024006_DrawFilledCircle+0x88>
			et024006_DrawVertLine( x + offsetY, y - offsetX,
80002178:	e0 06 01 0b 	sub	r11,r0,r6
8000217c:	0e 9c       	mov	r12,r7
8000217e:	04 0c       	add	r12,r2
80002180:	02 99       	mov	r9,r1
80002182:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
80002186:	5c 7b       	castu.h	r11
80002188:	5c 7c       	castu.h	r12
8000218a:	f0 1f 00 3a 	mcall	80002270 <et024006_DrawFilledCircle+0x154>
				offsetX + 1, color );
			et024006_DrawVertLine( x + offsetX, y - offsetY,
8000218e:	0e 9a       	mov	r10,r7
80002190:	2f fa       	sub	r10,-1
80002192:	e0 07 01 0b 	sub	r11,r0,r7
80002196:	02 99       	mov	r9,r1
80002198:	5c 7a       	castu.h	r10
8000219a:	5c 7b       	castu.h	r11
8000219c:	f9 d3 c0 10 	bfextu	r12,r3,0x0,0x10
800021a0:	f0 1f 00 34 	mcall	80002270 <et024006_DrawFilledCircle+0x154>
				offsetY + 1, color );
		}
		if (quadrantMask & TFT_QUADRANT1) {
800021a4:	40 28       	lddsp	r8,sp[0x8]
800021a6:	58 08       	cp.w	r8,0
800021a8:	c1 80       	breq	800021d8 <et024006_DrawFilledCircle+0xbc>
			et024006_DrawVertLine( x - offsetY, y - offsetX,
800021aa:	e0 06 01 0b 	sub	r11,r0,r6
800021ae:	e4 07 01 0c 	sub	r12,r2,r7
800021b2:	02 99       	mov	r9,r1
800021b4:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
800021b8:	5c 7b       	castu.h	r11
800021ba:	5c 7c       	castu.h	r12
800021bc:	f0 1f 00 2d 	mcall	80002270 <et024006_DrawFilledCircle+0x154>
				offsetX + 1, color );
			et024006_DrawVertLine( x - offsetX, y - offsetY,
800021c0:	0e 9a       	mov	r10,r7
800021c2:	2f fa       	sub	r10,-1
800021c4:	e0 07 01 0b 	sub	r11,r0,r7
800021c8:	e4 06 01 0c 	sub	r12,r2,r6
800021cc:	02 99       	mov	r9,r1
800021ce:	5c 7a       	castu.h	r10
800021d0:	5c 7b       	castu.h	r11
800021d2:	5c 7c       	castu.h	r12
800021d4:	f0 1f 00 27 	mcall	80002270 <et024006_DrawFilledCircle+0x154>
				offsetY + 1, color );
		}
		if (quadrantMask & TFT_QUADRANT2) {
800021d8:	40 39       	lddsp	r9,sp[0xc]
800021da:	58 09       	cp.w	r9,0
800021dc:	c1 40       	breq	80002204 <et024006_DrawFilledCircle+0xe8>
			et024006_DrawVertLine( x - offsetY, y, offsetX + 1,
800021de:	e4 07 01 0c 	sub	r12,r2,r7
800021e2:	02 99       	mov	r9,r1
800021e4:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
800021e8:	40 0b       	lddsp	r11,sp[0x0]
800021ea:	5c 7c       	castu.h	r12
800021ec:	f0 1f 00 21 	mcall	80002270 <et024006_DrawFilledCircle+0x154>
				color );
			et024006_DrawVertLine( x - offsetX, y, offsetY + 1,
800021f0:	0e 9a       	mov	r10,r7
800021f2:	2f fa       	sub	r10,-1
800021f4:	e4 06 01 0c 	sub	r12,r2,r6
800021f8:	02 99       	mov	r9,r1
800021fa:	5c 7a       	castu.h	r10
800021fc:	40 0b       	lddsp	r11,sp[0x0]
800021fe:	5c 7c       	castu.h	r12
80002200:	f0 1f 00 1c 	mcall	80002270 <et024006_DrawFilledCircle+0x154>
				color );
		}
		if (quadrantMask & TFT_QUADRANT3) {
80002204:	40 49       	lddsp	r9,sp[0x10]
80002206:	58 09       	cp.w	r9,0
80002208:	c1 30       	breq	8000222e <et024006_DrawFilledCircle+0x112>
			et024006_DrawVertLine( x + offsetY, y, offsetX + 1,
8000220a:	0e 9c       	mov	r12,r7
8000220c:	04 0c       	add	r12,r2
8000220e:	02 99       	mov	r9,r1
80002210:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
80002214:	40 0b       	lddsp	r11,sp[0x0]
80002216:	5c 7c       	castu.h	r12
80002218:	f0 1f 00 16 	mcall	80002270 <et024006_DrawFilledCircle+0x154>
				color );
			et024006_DrawVertLine( x + offsetX, y, offsetY + 1,
8000221c:	0e 9a       	mov	r10,r7
8000221e:	2f fa       	sub	r10,-1
80002220:	02 99       	mov	r9,r1
80002222:	5c 7a       	castu.h	r10
80002224:	40 0b       	lddsp	r11,sp[0x0]
80002226:	f9 d3 c0 10 	bfextu	r12,r3,0x0,0x10
8000222a:	f0 1f 00 12 	mcall	80002270 <et024006_DrawFilledCircle+0x154>
				color );
		}

		// Update error value and step offsetY when required.
		if (error < 0) {
8000222e:	30 09       	mov	r9,0
80002230:	f2 04 19 00 	cp.h	r4,r9
80002234:	c0 84       	brge	80002244 <et024006_DrawFilledCircle+0x128>
			error += ((offsetX << 2) + 6);
80002236:	ec 08 15 02 	lsl	r8,r6,0x2
8000223a:	f0 04 00 04 	add	r4,r8,r4
8000223e:	2f a4       	sub	r4,-6
80002240:	5c 84       	casts.h	r4
80002242:	c0 98       	rjmp	80002254 <et024006_DrawFilledCircle+0x138>
		} else {
			error += (((offsetX - offsetY) << 2) + 10);
80002244:	2f 64       	sub	r4,-10
80002246:	ec 07 01 08 	sub	r8,r6,r7
8000224a:	a3 68       	lsl	r8,0x2
8000224c:	10 04       	add	r4,r8
8000224e:	5c 84       	casts.h	r4
			--offsetY;
80002250:	20 17       	sub	r7,1
80002252:	5c 87       	casts.h	r7
		}

		// Next X.
		++offsetX;
80002254:	2f f6       	sub	r6,-1
80002256:	5c 86       	casts.h	r6
80002258:	2f f5       	sub	r5,-1
8000225a:	5c 85       	casts.h	r5
8000225c:	2f f3       	sub	r3,-1
8000225e:	5c 83       	casts.h	r3
	uint16_t offsetX = 0;
	uint16_t offsetY = radius;
	int16_t error = 3 - 2 * radius;

	// Iterate offsetX from 0 to radius.
	while (offsetX <= offsetY) {
80002260:	ec 07 19 00 	cp.h	r7,r6
80002264:	c8 72       	brcc	80002172 <et024006_DrawFilledCircle+0x56>
		}

		// Next X.
		++offsetX;
	}
}
80002266:	2f bd       	sub	sp,-20
80002268:	d8 32       	popm	r0-r7,pc
8000226a:	00 00       	add	r0,r0
8000226c:	80 00       	ld.sh	r0,r0[0x0]
8000226e:	20 58       	sub	r8,5
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	21 00       	sub	r0,16

80002274 <et024006_AdjustGamma>:

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002274:	fc 19 c0 00 	movh	r9,0xc000
80002278:	34 6a       	mov	r10,70
8000227a:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000227c:	fc 18 c0 20 	movh	r8,0xc020
80002280:	e0 6b 00 94 	mov	r11,148
80002284:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002286:	34 7b       	mov	r11,71
80002288:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000228a:	34 1b       	mov	r11,65
8000228c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000228e:	34 8b       	mov	r11,72
80002290:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002292:	30 0b       	mov	r11,0
80002294:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002296:	34 9b       	mov	r11,73
80002298:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000229a:	33 3b       	mov	r11,51
8000229c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000229e:	34 ab       	mov	r11,74
800022a0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800022a2:	32 5b       	mov	r11,37
800022a4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800022a6:	34 bb       	mov	r11,75
800022a8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800022aa:	34 5b       	mov	r11,69
800022ac:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800022ae:	34 cb       	mov	r11,76
800022b0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800022b2:	34 4b       	mov	r11,68
800022b4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800022b6:	34 db       	mov	r11,77
800022b8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800022ba:	37 7b       	mov	r11,119
800022bc:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800022be:	34 eb       	mov	r11,78
800022c0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800022c2:	31 2b       	mov	r11,18
800022c4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800022c6:	34 fb       	mov	r11,79
800022c8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800022ca:	e0 6b 00 cc 	mov	r11,204
800022ce:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800022d0:	35 0b       	mov	r11,80
800022d2:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800022d4:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800022d6:	35 1a       	mov	r10,81
800022d8:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800022da:	e0 69 00 82 	mov	r9,130
800022de:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
800022e0:	5e fc       	retal	r12
800022e2:	d7 03       	nop

800022e4 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
800022e4:	eb cd 40 c0 	pushm	r6-r7,lr
  tft_data.cpu_hz = cpu_hz;
800022e8:	fe f7 04 80 	ld.w	r7,pc[1152]
800022ec:	8f 0c       	st.w	r7[0x0],r12
  tft_data.hsb_hz = hsb_hz;
800022ee:	8f 1b       	st.w	r7[0x4],r11

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
800022f0:	16 9c       	mov	r12,r11
800022f2:	f0 1f 01 1f 	mcall	8000276c <et024006_Init+0x488>
static void et024006_SetupInterface( void )
{

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
800022f6:	35 5c       	mov	r12,85
800022f8:	f0 1f 01 1e 	mcall	80002770 <et024006_Init+0x48c>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
800022fc:	30 2b       	mov	r11,2
800022fe:	33 2c       	mov	r12,50
80002300:	f0 1f 01 1d 	mcall	80002774 <et024006_Init+0x490>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80002304:	35 2c       	mov	r12,82
80002306:	f0 1f 01 1d 	mcall	80002778 <et024006_Init+0x494>
/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
8000230a:	35 2c       	mov	r12,82
8000230c:	f0 1f 01 1c 	mcall	8000277c <et024006_Init+0x498>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002310:	6e 07       	ld.w	r7,r7[0x0]
80002312:	33 28       	mov	r8,50
80002314:	ee 08 06 46 	mulu.d	r6,r7,r8
80002318:	ee 78 42 40 	mov	r8,1000000
8000231c:	30 09       	mov	r9,0
8000231e:	ee 7a 42 3f 	mov	r10,999999
80002322:	30 0b       	mov	r11,0
80002324:	ec 0a 00 0a 	add	r10,r6,r10
80002328:	ee 0b 00 4b 	adc	r11,r7,r11
8000232c:	f0 1f 01 15 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002330:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002334:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002338:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000233c:	14 38       	cp.w	r8,r10
8000233e:	e0 88 00 09 	brls	80002350 <et024006_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002342:	12 38       	cp.w	r8,r9
80002344:	fe 98 ff fa 	brls	80002338 <et024006_Init+0x54>
80002348:	12 3a       	cp.w	r10,r9
8000234a:	e0 83 00 a2 	brlo	8000248e <et024006_Init+0x1aa>
8000234e:	cf 5b       	rjmp	80002338 <et024006_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002350:	12 38       	cp.w	r8,r9
80002352:	e0 8b 00 9e 	brhi	8000248e <et024006_Init+0x1aa>
80002356:	12 3a       	cp.w	r10,r9
80002358:	e0 83 00 9b 	brlo	8000248e <et024006_Init+0x1aa>
8000235c:	ce eb       	rjmp	80002338 <et024006_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000235e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002362:	14 38       	cp.w	r8,r10
80002364:	e0 88 00 09 	brls	80002376 <et024006_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002368:	12 38       	cp.w	r8,r9
8000236a:	fe 98 ff fa 	brls	8000235e <et024006_Init+0x7a>
8000236e:	12 3a       	cp.w	r10,r9
80002370:	e0 83 00 a9 	brlo	800024c2 <et024006_Init+0x1de>
80002374:	cf 5b       	rjmp	8000235e <et024006_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002376:	12 38       	cp.w	r8,r9
80002378:	e0 8b 00 a5 	brhi	800024c2 <et024006_Init+0x1de>
8000237c:	12 3a       	cp.w	r10,r9
8000237e:	e0 83 00 a2 	brlo	800024c2 <et024006_Init+0x1de>
80002382:	ce eb       	rjmp	8000235e <et024006_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002384:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002388:	14 38       	cp.w	r8,r10
8000238a:	e0 88 00 09 	brls	8000239c <et024006_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000238e:	12 38       	cp.w	r8,r9
80002390:	fe 98 ff fa 	brls	80002384 <et024006_Init+0xa0>
80002394:	12 3a       	cp.w	r10,r9
80002396:	e0 83 01 1e 	brlo	800025d2 <et024006_Init+0x2ee>
8000239a:	cf 5b       	rjmp	80002384 <et024006_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000239c:	12 38       	cp.w	r8,r9
8000239e:	e0 8b 01 1a 	brhi	800025d2 <et024006_Init+0x2ee>
800023a2:	12 3a       	cp.w	r10,r9
800023a4:	e0 83 01 17 	brlo	800025d2 <et024006_Init+0x2ee>
800023a8:	ce eb       	rjmp	80002384 <et024006_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023aa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023ae:	14 38       	cp.w	r8,r10
800023b0:	e0 88 00 09 	brls	800023c2 <et024006_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023b4:	12 38       	cp.w	r8,r9
800023b6:	fe 98 ff fa 	brls	800023aa <et024006_Init+0xc6>
800023ba:	12 3a       	cp.w	r10,r9
800023bc:	e0 83 01 29 	brlo	8000260e <et024006_Init+0x32a>
800023c0:	cf 5b       	rjmp	800023aa <et024006_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023c2:	12 38       	cp.w	r8,r9
800023c4:	e0 8b 01 25 	brhi	8000260e <et024006_Init+0x32a>
800023c8:	12 3a       	cp.w	r10,r9
800023ca:	e0 83 01 22 	brlo	8000260e <et024006_Init+0x32a>
800023ce:	ce eb       	rjmp	800023aa <et024006_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023d0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023d4:	14 38       	cp.w	r8,r10
800023d6:	e0 88 00 09 	brls	800023e8 <et024006_Init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023da:	12 38       	cp.w	r8,r9
800023dc:	fe 98 ff fa 	brls	800023d0 <et024006_Init+0xec>
800023e0:	12 3a       	cp.w	r10,r9
800023e2:	e0 83 01 35 	brlo	8000264c <et024006_Init+0x368>
800023e6:	cf 5b       	rjmp	800023d0 <et024006_Init+0xec>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023e8:	12 38       	cp.w	r8,r9
800023ea:	e0 8b 01 31 	brhi	8000264c <et024006_Init+0x368>
800023ee:	12 3a       	cp.w	r10,r9
800023f0:	e0 83 01 2e 	brlo	8000264c <et024006_Init+0x368>
800023f4:	ce eb       	rjmp	800023d0 <et024006_Init+0xec>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023f6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023fa:	14 38       	cp.w	r8,r10
800023fc:	e0 88 00 09 	brls	8000240e <et024006_Init+0x12a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002400:	12 38       	cp.w	r8,r9
80002402:	fe 98 ff fa 	brls	800023f6 <et024006_Init+0x112>
80002406:	12 3a       	cp.w	r10,r9
80002408:	e0 83 01 40 	brlo	80002688 <et024006_Init+0x3a4>
8000240c:	cf 5b       	rjmp	800023f6 <et024006_Init+0x112>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000240e:	12 38       	cp.w	r8,r9
80002410:	e0 8b 01 3c 	brhi	80002688 <et024006_Init+0x3a4>
80002414:	12 3a       	cp.w	r10,r9
80002416:	e0 83 01 39 	brlo	80002688 <et024006_Init+0x3a4>
8000241a:	ce eb       	rjmp	800023f6 <et024006_Init+0x112>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000241c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002420:	14 38       	cp.w	r8,r10
80002422:	e0 88 00 09 	brls	80002434 <et024006_Init+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002426:	12 38       	cp.w	r8,r9
80002428:	fe 98 ff fa 	brls	8000241c <et024006_Init+0x138>
8000242c:	12 3a       	cp.w	r10,r9
8000242e:	e0 83 01 4b 	brlo	800026c4 <et024006_Init+0x3e0>
80002432:	cf 5b       	rjmp	8000241c <et024006_Init+0x138>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002434:	12 38       	cp.w	r8,r9
80002436:	e0 8b 01 47 	brhi	800026c4 <et024006_Init+0x3e0>
8000243a:	12 3a       	cp.w	r10,r9
8000243c:	e0 83 01 44 	brlo	800026c4 <et024006_Init+0x3e0>
80002440:	ce eb       	rjmp	8000241c <et024006_Init+0x138>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002442:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002446:	14 38       	cp.w	r8,r10
80002448:	e0 88 00 09 	brls	8000245a <et024006_Init+0x176>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000244c:	12 38       	cp.w	r8,r9
8000244e:	fe 98 ff fa 	brls	80002442 <et024006_Init+0x15e>
80002452:	12 3a       	cp.w	r10,r9
80002454:	e0 83 01 56 	brlo	80002700 <et024006_Init+0x41c>
80002458:	cf 5b       	rjmp	80002442 <et024006_Init+0x15e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000245a:	12 38       	cp.w	r8,r9
8000245c:	e0 8b 01 52 	brhi	80002700 <et024006_Init+0x41c>
80002460:	12 3a       	cp.w	r10,r9
80002462:	e0 83 01 4f 	brlo	80002700 <et024006_Init+0x41c>
80002466:	ce eb       	rjmp	80002442 <et024006_Init+0x15e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002468:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000246c:	14 38       	cp.w	r8,r10
8000246e:	e0 88 00 09 	brls	80002480 <et024006_Init+0x19c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002472:	12 38       	cp.w	r8,r9
80002474:	fe 98 ff fa 	brls	80002468 <et024006_Init+0x184>
80002478:	12 3a       	cp.w	r10,r9
8000247a:	e0 83 01 64 	brlo	80002742 <et024006_Init+0x45e>
8000247e:	cf 5b       	rjmp	80002468 <et024006_Init+0x184>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002480:	12 38       	cp.w	r8,r9
80002482:	e0 8b 01 60 	brhi	80002742 <et024006_Init+0x45e>
80002486:	12 3a       	cp.w	r10,r9
80002488:	e0 83 01 5d 	brlo	80002742 <et024006_Init+0x45e>
8000248c:	ce eb       	rjmp	80002468 <et024006_Init+0x184>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
8000248e:	35 2c       	mov	r12,82
80002490:	f0 1f 00 ba 	mcall	80002778 <et024006_Init+0x494>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002494:	fe f8 02 d4 	ld.w	r8,pc[724]
80002498:	70 07       	ld.w	r7,r8[0x0]
8000249a:	30 58       	mov	r8,5
8000249c:	ee 08 06 46 	mulu.d	r6,r7,r8
800024a0:	e0 68 03 e8 	mov	r8,1000
800024a4:	30 09       	mov	r9,0
800024a6:	e0 6a 03 e7 	mov	r10,999
800024aa:	30 0b       	mov	r11,0
800024ac:	ec 0a 00 0a 	add	r10,r6,r10
800024b0:	ee 0b 00 4b 	adc	r11,r7,r11
800024b4:	f0 1f 00 b3 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024b8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024bc:	f0 0a 00 0a 	add	r10,r8,r10
800024c0:	c4 fb       	rjmp	8000235e <et024006_Init+0x7a>
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
#endif
  et024006_SetupInterface();
  et024006_ResetDisplay();
  et024006_AdjustGamma();
800024c2:	f0 1f 00 b1 	mcall	80002784 <et024006_Init+0x4a0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024c6:	fc 19 c0 00 	movh	r9,0xc000
800024ca:	30 1a       	mov	r10,1
800024cc:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024ce:	fc 18 c0 20 	movh	r8,0xc020
800024d2:	30 6b       	mov	r11,6
800024d4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024d6:	33 ab       	mov	r11,58
800024d8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024da:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024dc:	33 bb       	mov	r11,59
800024de:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024e0:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024e2:	33 ca       	mov	r10,60
800024e4:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024e6:	e0 6a 00 f0 	mov	r10,240
800024ea:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024ec:	33 db       	mov	r11,61
800024ee:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024f0:	30 07       	mov	r7,0
800024f2:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024f4:	33 eb       	mov	r11,62
800024f6:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024f8:	33 8b       	mov	r11,56
800024fa:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024fc:	34 0c       	mov	r12,64
800024fe:	b2 0c       	st.h	r9[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002500:	30 fe       	mov	lr,15
80002502:	b0 0e       	st.h	r8[0x0],lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002504:	34 1e       	mov	lr,65
80002506:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002508:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000250a:	32 7a       	mov	r10,39
8000250c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000250e:	30 2a       	mov	r10,2
80002510:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002512:	32 8e       	mov	lr,40
80002514:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002516:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002518:	32 9e       	mov	lr,41
8000251a:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000251c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000251e:	32 ae       	mov	lr,42
80002520:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002522:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002524:	32 ce       	mov	lr,44
80002526:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002528:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000252a:	32 de       	mov	lr,45
8000252c:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000252e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002530:	31 9a       	mov	r10,25
80002532:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002534:	34 9a       	mov	r10,73
80002536:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002538:	e0 6a 00 93 	mov	r10,147
8000253c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000253e:	30 8a       	mov	r10,8
80002540:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002542:	31 6a       	mov	r10,22
80002544:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002546:	36 8a       	mov	r10,104
80002548:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000254a:	32 3a       	mov	r10,35
8000254c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000254e:	e0 6a 00 95 	mov	r10,149
80002552:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002554:	32 4e       	mov	lr,36
80002556:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002558:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000255a:	32 5a       	mov	r10,37
8000255c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000255e:	e0 6a 00 ff 	mov	r10,255
80002562:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002564:	e0 6a 00 90 	mov	r10,144
80002568:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000256a:	37 fa       	mov	r10,127
8000256c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000256e:	33 5a       	mov	r10,53
80002570:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002572:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002574:	33 6a       	mov	r10,54
80002576:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002578:	37 8a       	mov	r10,120
8000257a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000257c:	31 da       	mov	r10,29
8000257e:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002580:	30 7a       	mov	r10,7
80002582:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002584:	31 ea       	mov	r10,30
80002586:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002588:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000258a:	31 fa       	mov	r10,31
8000258c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000258e:	30 4a       	mov	r10,4
80002590:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002592:	32 0a       	mov	r10,32
80002594:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002596:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002598:	34 4a       	mov	r10,68
8000259a:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000259c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000259e:	34 5a       	mov	r10,69
800025a0:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025a2:	31 29       	mov	r9,18
800025a4:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800025a6:	4f 18       	lddpc	r8,80002768 <et024006_Init+0x484>
800025a8:	70 07       	ld.w	r7,r8[0x0]
800025aa:	30 a8       	mov	r8,10
800025ac:	ee 08 06 46 	mulu.d	r6,r7,r8
800025b0:	e0 68 03 e8 	mov	r8,1000
800025b4:	30 09       	mov	r9,0
800025b6:	e0 6a 03 e7 	mov	r10,999
800025ba:	30 0b       	mov	r11,0
800025bc:	ec 0a 00 0a 	add	r10,r6,r10
800025c0:	ee 0b 00 4b 	adc	r11,r7,r11
800025c4:	f0 1f 00 6f 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800025c8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025cc:	f0 0a 00 0a 	add	r10,r8,r10
800025d0:	cd aa       	rjmp	80002384 <et024006_Init+0xa0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025d2:	31 c9       	mov	r9,28
800025d4:	fc 18 c0 00 	movh	r8,0xc000
800025d8:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025da:	30 49       	mov	r9,4
800025dc:	fc 18 c0 20 	movh	r8,0xc020
800025e0:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800025e2:	4e 28       	lddpc	r8,80002768 <et024006_Init+0x484>
800025e4:	70 07       	ld.w	r7,r8[0x0]
800025e6:	31 48       	mov	r8,20
800025e8:	ee 08 06 46 	mulu.d	r6,r7,r8
800025ec:	e0 68 03 e8 	mov	r8,1000
800025f0:	30 09       	mov	r9,0
800025f2:	e0 6a 03 e7 	mov	r10,999
800025f6:	30 0b       	mov	r11,0
800025f8:	ec 0a 00 0a 	add	r10,r6,r10
800025fc:	ee 0b 00 4b 	adc	r11,r7,r11
80002600:	f0 1f 00 60 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002604:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002608:	f0 0a 00 0a 	add	r10,r8,r10
8000260c:	cc fa       	rjmp	800023aa <et024006_Init+0xc6>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000260e:	34 39       	mov	r9,67
80002610:	fc 18 c0 00 	movh	r8,0xc000
80002614:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002616:	e0 69 00 80 	mov	r9,128
8000261a:	fc 18 c0 20 	movh	r8,0xc020
8000261e:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002620:	4d 28       	lddpc	r8,80002768 <et024006_Init+0x484>
80002622:	70 07       	ld.w	r7,r8[0x0]
80002624:	30 58       	mov	r8,5
80002626:	ee 08 06 46 	mulu.d	r6,r7,r8
8000262a:	e0 68 03 e8 	mov	r8,1000
8000262e:	30 09       	mov	r9,0
80002630:	e0 6a 03 e7 	mov	r10,999
80002634:	30 0b       	mov	r11,0
80002636:	ec 0a 00 0a 	add	r10,r6,r10
8000263a:	ee 0b 00 4b 	adc	r11,r7,r11
8000263e:	f0 1f 00 51 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002642:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002646:	f0 0a 00 0a 	add	r10,r8,r10
8000264a:	cc 3a       	rjmp	800023d0 <et024006_Init+0xec>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000264c:	31 b9       	mov	r9,27
8000264e:	fc 18 c0 00 	movh	r8,0xc000
80002652:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002654:	30 89       	mov	r9,8
80002656:	fc 18 c0 20 	movh	r8,0xc020
8000265a:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000265c:	4c 38       	lddpc	r8,80002768 <et024006_Init+0x484>
8000265e:	70 07       	ld.w	r7,r8[0x0]
80002660:	32 88       	mov	r8,40
80002662:	ee 08 06 46 	mulu.d	r6,r7,r8
80002666:	e0 68 03 e8 	mov	r8,1000
8000266a:	30 09       	mov	r9,0
8000266c:	e0 6a 03 e7 	mov	r10,999
80002670:	30 0b       	mov	r11,0
80002672:	ec 0a 00 0a 	add	r10,r6,r10
80002676:	ee 0b 00 4b 	adc	r11,r7,r11
8000267a:	f0 1f 00 42 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000267e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002682:	f0 0a 00 0a 	add	r10,r8,r10
80002686:	cb 8a       	rjmp	800023f6 <et024006_Init+0x112>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002688:	31 b9       	mov	r9,27
8000268a:	fc 18 c0 00 	movh	r8,0xc000
8000268e:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002690:	31 09       	mov	r9,16
80002692:	fc 18 c0 20 	movh	r8,0xc020
80002696:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002698:	4b 48       	lddpc	r8,80002768 <et024006_Init+0x484>
8000269a:	70 07       	ld.w	r7,r8[0x0]
8000269c:	32 88       	mov	r8,40
8000269e:	ee 08 06 46 	mulu.d	r6,r7,r8
800026a2:	e0 68 03 e8 	mov	r8,1000
800026a6:	30 09       	mov	r9,0
800026a8:	e0 6a 03 e7 	mov	r10,999
800026ac:	30 0b       	mov	r11,0
800026ae:	ec 0a 00 0a 	add	r10,r6,r10
800026b2:	ee 0b 00 4b 	adc	r11,r7,r11
800026b6:	f0 1f 00 33 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026ba:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026be:	f0 0a 00 0a 	add	r10,r8,r10
800026c2:	ca da       	rjmp	8000241c <et024006_Init+0x138>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800026c4:	32 69       	mov	r9,38
800026c6:	fc 18 c0 00 	movh	r8,0xc000
800026ca:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800026cc:	30 49       	mov	r9,4
800026ce:	fc 18 c0 20 	movh	r8,0xc020
800026d2:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800026d4:	4a 58       	lddpc	r8,80002768 <et024006_Init+0x484>
800026d6:	70 07       	ld.w	r7,r8[0x0]
800026d8:	32 88       	mov	r8,40
800026da:	ee 08 06 46 	mulu.d	r6,r7,r8
800026de:	e0 68 03 e8 	mov	r8,1000
800026e2:	30 09       	mov	r9,0
800026e4:	e0 6a 03 e7 	mov	r10,999
800026e8:	30 0b       	mov	r11,0
800026ea:	ec 0a 00 0a 	add	r10,r6,r10
800026ee:	ee 0b 00 4b 	adc	r11,r7,r11
800026f2:	f0 1f 00 24 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026f6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026fa:	f0 0a 00 0a 	add	r10,r8,r10
800026fe:	ca 2a       	rjmp	80002442 <et024006_Init+0x15e>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002700:	fc 19 c0 00 	movh	r9,0xc000
80002704:	32 6a       	mov	r10,38
80002706:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002708:	fc 18 c0 20 	movh	r8,0xc020
8000270c:	32 4b       	mov	r11,36
8000270e:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002710:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002712:	32 c9       	mov	r9,44
80002714:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002716:	49 58       	lddpc	r8,80002768 <et024006_Init+0x484>
80002718:	70 07       	ld.w	r7,r8[0x0]
8000271a:	32 88       	mov	r8,40
8000271c:	ee 08 06 46 	mulu.d	r6,r7,r8
80002720:	e0 68 03 e8 	mov	r8,1000
80002724:	30 09       	mov	r9,0
80002726:	e0 6a 03 e7 	mov	r10,999
8000272a:	30 0b       	mov	r11,0
8000272c:	ec 0a 00 0a 	add	r10,r6,r10
80002730:	ee 0b 00 4b 	adc	r11,r7,r11
80002734:	f0 1f 00 13 	mcall	80002780 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002738:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000273c:	f0 0a 00 0a 	add	r10,r8,r10
80002740:	c9 4a       	rjmp	80002468 <et024006_Init+0x184>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002742:	fc 19 c0 00 	movh	r9,0xc000
80002746:	32 68       	mov	r8,38
80002748:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000274a:	fc 18 c0 20 	movh	r8,0xc020
8000274e:	33 ca       	mov	r10,60
80002750:	b0 0a       	st.h	r8[0x0],r10
}

__always_inline static uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002752:	37 0a       	mov	r10,112
80002754:	b2 0a       	st.h	r9[0x0],r10
  return *ET024006_PARAM_ADDR;
80002756:	90 0b       	ld.sh	r11,r8[0x0]
80002758:	5c 5b       	castu.b	r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000275a:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000275c:	16 99       	mov	r9,r11
8000275e:	a3 b9       	sbr	r9,0x3
80002760:	b0 09       	st.h	r8[0x0],r9
  et024006_GeneralSettings();
  et024006_InterfaceSettings();
  et024006_PowerSettings();
  et024006_PowerUp();
  et024006_PowerOn();
}
80002762:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002766:	00 00       	add	r0,r0
80002768:	00 00       	add	r0,r0
8000276a:	05 38       	ld.ub	r8,r2++
8000276c:	80 00       	ld.sh	r0,r0[0x0]
8000276e:	27 88       	sub	r8,120
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	29 28       	sub	r8,-110
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	28 a4       	sub	r4,-118
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	29 56       	sub	r6,-107
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	29 72       	sub	r2,-105
80002780:	80 00       	ld.sh	r0,r0[0x0]
80002782:	36 f8       	mov	r8,111
80002784:	80 00       	ld.sh	r0,r0[0x0]
80002786:	22 74       	sub	r4,39

80002788 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80002788:	eb cd 40 fc 	pushm	r2-r7,lr
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8000278c:	ee 78 42 3f 	mov	r8,999999
80002790:	f8 08 00 09 	add	r9,r12,r8
80002794:	e0 68 de 83 	mov	r8,56963
80002798:	ea 18 43 1b 	orh	r8,0x431b
8000279c:	f2 08 06 48 	mulu.d	r8,r9,r8
800027a0:	f2 08 16 12 	lsr	r8,r9,0x12
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
800027a4:	f0 08 00 25 	add	r5,r8,r8<<0x2
800027a8:	a3 65       	lsl	r5,0x2
800027aa:	ea c5 fc 19 	sub	r5,r5,-999
800027ae:	e0 69 4d d3 	mov	r9,19923
800027b2:	ea 19 10 62 	orh	r9,0x1062
800027b6:	ea 09 06 44 	mulu.d	r4,r5,r9
800027ba:	a7 85       	lsr	r5,0x6
800027bc:	f0 0a 15 04 	lsl	r10,r8,0x4
800027c0:	f4 08 01 07 	sub	r7,r10,r8
800027c4:	a1 77       	lsl	r7,0x1
800027c6:	ee c7 fc 19 	sub	r7,r7,-999
800027ca:	ee 09 06 46 	mulu.d	r6,r7,r9
800027ce:	0e 94       	mov	r4,r7
800027d0:	a7 84       	lsr	r4,0x6
800027d2:	f4 08 01 07 	sub	r7,r10,r8
800027d6:	a3 67       	lsl	r7,0x2
800027d8:	ee c7 fc 19 	sub	r7,r7,-999
800027dc:	ee 09 06 46 	mulu.d	r6,r7,r9
800027e0:	a7 87       	lsr	r7,0x6
800027e2:	f0 03 10 5a 	mul	r3,r8,90
800027e6:	e6 c3 fc 19 	sub	r3,r3,-999
800027ea:	e6 09 06 42 	mulu.d	r2,r3,r9
800027ee:	e6 0c 16 06 	lsr	r12,r3,0x6
800027f2:	e0 63 00 d2 	mov	r3,210
800027f6:	f0 03 02 43 	mul	r3,r8,r3
800027fa:	e6 c3 fc 19 	sub	r3,r3,-999
800027fe:	e6 09 06 42 	mulu.d	r2,r3,r9
80002802:	e6 06 16 06 	lsr	r6,r3,0x6
80002806:	f4 08 01 0b 	sub	r11,r10,r8
8000280a:	a5 6b       	lsl	r11,0x4
8000280c:	f6 cb fc 19 	sub	r11,r11,-999
80002810:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002814:	f6 0e 16 06 	lsr	lr,r11,0x6
80002818:	f0 03 10 64 	mul	r3,r8,100
8000281c:	e6 c3 fc 19 	sub	r3,r3,-999
80002820:	e6 09 06 42 	mulu.d	r2,r3,r9
80002824:	a7 83       	lsr	r3,0x6
80002826:	e0 6a 01 0e 	mov	r10,270
8000282a:	b5 38       	mul	r8,r10
8000282c:	f0 c8 fc 19 	sub	r8,r8,-999
80002830:	f0 09 06 48 	mulu.d	r8,r8,r9
80002834:	a7 89       	lsr	r9,0x6
80002836:	ec 04 00 0a 	add	r10,r6,r4
8000283a:	1c 3a       	cp.w	r10,lr
8000283c:	f4 0e 17 20 	movhs	lr,r10
80002840:	ee 05 00 0b 	add	r11,r7,r5
80002844:	18 3b       	cp.w	r11,r12
80002846:	f6 0c 17 20 	movhs	r12,r11
8000284a:	06 3b       	cp.w	r11,r3
8000284c:	e6 0b 17 30 	movlo	r11,r3
80002850:	12 3a       	cp.w	r10,r9
80002852:	f4 09 17 20 	movhs	r9,r10
80002856:	eb e4 11 05 	or	r5,r5,r4<<0x10
8000285a:	fe 6a 1c 00 	mov	r10,-123904
8000285e:	95 05       	st.w	r10[0x0],r5
80002860:	ef e6 11 07 	or	r7,r7,r6<<0x10
80002864:	ef ec 10 87 	or	r7,r7,r12<<0x8
80002868:	ef ee 11 87 	or	r7,r7,lr<<0x18
8000286c:	95 17       	st.w	r10[0x4],r7
8000286e:	1c 39       	cp.w	r9,lr
80002870:	f2 0e 17 20 	movhs	lr,r9
80002874:	18 3b       	cp.w	r11,r12
80002876:	f8 0b 17 30 	movlo	r11,r12
8000287a:	f7 ee 11 0b 	or	r11,r11,lr<<0x10
8000287e:	95 2b       	st.w	r10[0x8],r11
80002880:	e0 68 10 03 	mov	r8,4099
80002884:	95 38       	st.w	r10[0xc],r8
80002886:	30 19       	mov	r9,1
80002888:	48 48       	lddpc	r8,80002898 <smc_init+0x110>
8000288a:	b0 89       	st.b	r8[0x0],r9
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
8000288c:	31 4b       	mov	r11,20
8000288e:	48 4c       	lddpc	r12,8000289c <smc_init+0x114>
80002890:	f0 1f 00 04 	mcall	800028a0 <smc_init+0x118>
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
}
80002894:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002898:	00 00       	add	r0,r0
8000289a:	05 40       	ld.w	r0,--r2
8000289c:	80 00       	ld.sh	r0,r0[0x0]
8000289e:	44 00       	lddsp	r0,sp[0x100]
800028a0:	80 00       	ld.sh	r0,r0[0x0]
800028a2:	28 f8       	sub	r8,-113

800028a4 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800028a4:	f8 08 16 05 	lsr	r8,r12,0x5
800028a8:	a9 68       	lsl	r8,0x8
800028aa:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800028ae:	58 1b       	cp.w	r11,1
800028b0:	c0 d0       	breq	800028ca <gpio_enable_module_pin+0x26>
800028b2:	c0 63       	brcs	800028be <gpio_enable_module_pin+0x1a>
800028b4:	58 2b       	cp.w	r11,2
800028b6:	c1 00       	breq	800028d6 <gpio_enable_module_pin+0x32>
800028b8:	58 3b       	cp.w	r11,3
800028ba:	c1 40       	breq	800028e2 <gpio_enable_module_pin+0x3e>
800028bc:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800028be:	30 19       	mov	r9,1
800028c0:	f2 0c 09 49 	lsl	r9,r9,r12
800028c4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800028c6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800028c8:	c1 28       	rjmp	800028ec <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800028ca:	30 19       	mov	r9,1
800028cc:	f2 0c 09 49 	lsl	r9,r9,r12
800028d0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800028d2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800028d4:	c0 c8       	rjmp	800028ec <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800028d6:	30 19       	mov	r9,1
800028d8:	f2 0c 09 49 	lsl	r9,r9,r12
800028dc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800028de:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800028e0:	c0 68       	rjmp	800028ec <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800028e2:	30 19       	mov	r9,1
800028e4:	f2 0c 09 49 	lsl	r9,r9,r12
800028e8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800028ea:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800028ec:	30 19       	mov	r9,1
800028ee:	f2 0c 09 4c 	lsl	r12,r9,r12
800028f2:	91 2c       	st.w	r8[0x8],r12
800028f4:	5e fd       	retal	0
800028f6:	d7 03       	nop

800028f8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800028f8:	d4 21       	pushm	r4-r7,lr
800028fa:	18 97       	mov	r7,r12
800028fc:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800028fe:	58 0b       	cp.w	r11,0
80002900:	c0 31       	brne	80002906 <gpio_enable_module+0xe>
80002902:	30 05       	mov	r5,0
80002904:	c0 d8       	rjmp	8000291e <gpio_enable_module+0x26>
80002906:	30 06       	mov	r6,0
80002908:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000290a:	6e 1b       	ld.w	r11,r7[0x4]
8000290c:	6e 0c       	ld.w	r12,r7[0x0]
8000290e:	f0 1f 00 06 	mcall	80002924 <gpio_enable_module+0x2c>
80002912:	18 45       	or	r5,r12
		gpiomap++;
80002914:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002916:	2f f6       	sub	r6,-1
80002918:	0c 34       	cp.w	r4,r6
8000291a:	fe 9b ff f8 	brhi	8000290a <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000291e:	0a 9c       	mov	r12,r5
80002920:	d8 22       	popm	r4-r7,pc
80002922:	00 00       	add	r0,r0
80002924:	80 00       	ld.sh	r0,r0[0x0]
80002926:	28 a4       	sub	r4,-118

80002928 <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002928:	f8 08 16 05 	lsr	r8,r12,0x5
8000292c:	a9 68       	lsl	r8,0x8
8000292e:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002932:	30 19       	mov	r9,1
80002934:	f2 0c 09 4c 	lsl	r12,r9,r12
80002938:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
8000293c:	91 1c       	st.w	r8[0x4],r12
}
8000293e:	5e fc       	retal	r12

80002940 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002940:	f8 08 16 05 	lsr	r8,r12,0x5
80002944:	a9 68       	lsl	r8,0x8
80002946:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->puers = 1 << (pin & 0x1F);
8000294a:	30 19       	mov	r9,1
8000294c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002950:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80002954:	5e fc       	retal	r12

80002956 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002956:	f8 08 16 05 	lsr	r8,r12,0x5
8000295a:	a9 68       	lsl	r8,0x8
8000295c:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002960:	30 19       	mov	r9,1
80002962:	f2 0c 09 4c 	lsl	r12,r9,r12
80002966:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000296a:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000296e:	91 1c       	st.w	r8[0x4],r12
}
80002970:	5e fc       	retal	r12

80002972 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002972:	f8 08 16 05 	lsr	r8,r12,0x5
80002976:	a9 68       	lsl	r8,0x8
80002978:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000297c:	30 19       	mov	r9,1
8000297e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002982:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002986:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000298a:	91 1c       	st.w	r8[0x4],r12
}
8000298c:	5e fc       	retal	r12

8000298e <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000298e:	f8 08 16 05 	lsr	r8,r12,0x5
80002992:	a9 68       	lsl	r8,0x8
80002994:	e0 28 f0 00 	sub	r8,61440
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002998:	30 19       	mov	r9,1
8000299a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000299e:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800029a2:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800029a6:	91 1c       	st.w	r8[0x4],r12
}
800029a8:	5e fc       	retal	r12

800029aa <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800029aa:	f8 08 16 05 	lsr	r8,r12,0x5
800029ae:	a9 68       	lsl	r8,0x8
800029b0:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
800029b4:	30 19       	mov	r9,1
800029b6:	f2 0c 09 4c 	lsl	r12,r9,r12
800029ba:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
800029be:	12 3b       	cp.w	r11,r9
800029c0:	c0 a0       	breq	800029d4 <gpio_enable_pin_interrupt+0x2a>
800029c2:	c0 43       	brcs	800029ca <gpio_enable_pin_interrupt+0x20>
800029c4:	58 2b       	cp.w	r11,2
800029c6:	c1 11       	brne	800029e8 <gpio_enable_pin_interrupt+0x3e>
800029c8:	c0 b8       	rjmp	800029de <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800029ca:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800029ce:	f1 4c 00 b8 	st.w	r8[184],r12
800029d2:	c0 c8       	rjmp	800029ea <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
800029d4:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800029d8:	f1 4c 00 b8 	st.w	r8[184],r12
800029dc:	c0 78       	rjmp	800029ea <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800029de:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
800029e2:	f1 4c 00 b4 	st.w	r8[180],r12
800029e6:	c0 28       	rjmp	800029ea <gpio_enable_pin_interrupt+0x40>
800029e8:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
800029ea:	f1 4c 00 94 	st.w	r8[148],r12
800029ee:	5e fd       	retal	0

800029f0 <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800029f0:	f8 08 16 05 	lsr	r8,r12,0x5
800029f4:	a9 68       	lsl	r8,0x8
800029f6:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800029fa:	f0 f8 00 d0 	ld.w	r8,r8[208]
800029fe:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002a02:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002a06:	5e fc       	retal	r12

80002a08 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002a08:	f8 08 16 05 	lsr	r8,r12,0x5
80002a0c:	a9 68       	lsl	r8,0x8
80002a0e:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80002a12:	30 19       	mov	r9,1
80002a14:	f2 0c 09 4c 	lsl	r12,r9,r12
80002a18:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80002a1c:	5e fc       	retal	r12

80002a1e <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002a1e:	c0 08       	rjmp	80002a1e <_unhandled_interrupt>

80002a20 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002a20:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002a24:	49 99       	lddpc	r9,80002a88 <INTC_register_interrupt+0x68>
80002a26:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002a2a:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002a2e:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002a30:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002a34:	58 0a       	cp.w	r10,0
80002a36:	c0 91       	brne	80002a48 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002a38:	49 59       	lddpc	r9,80002a8c <INTC_register_interrupt+0x6c>
80002a3a:	49 6a       	lddpc	r10,80002a90 <INTC_register_interrupt+0x70>
80002a3c:	12 1a       	sub	r10,r9
80002a3e:	fe 79 08 00 	mov	r9,-63488
80002a42:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002a46:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002a48:	58 1a       	cp.w	r10,1
80002a4a:	c0 a1       	brne	80002a5e <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002a4c:	49 09       	lddpc	r9,80002a8c <INTC_register_interrupt+0x6c>
80002a4e:	49 2a       	lddpc	r10,80002a94 <INTC_register_interrupt+0x74>
80002a50:	12 1a       	sub	r10,r9
80002a52:	bf aa       	sbr	r10,0x1e
80002a54:	fe 79 08 00 	mov	r9,-63488
80002a58:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002a5c:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80002a5e:	58 2a       	cp.w	r10,2
80002a60:	c0 a1       	brne	80002a74 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002a62:	48 b9       	lddpc	r9,80002a8c <INTC_register_interrupt+0x6c>
80002a64:	48 da       	lddpc	r10,80002a98 <INTC_register_interrupt+0x78>
80002a66:	12 1a       	sub	r10,r9
80002a68:	bf ba       	sbr	r10,0x1f
80002a6a:	fe 79 08 00 	mov	r9,-63488
80002a6e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002a72:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002a74:	48 69       	lddpc	r9,80002a8c <INTC_register_interrupt+0x6c>
80002a76:	48 aa       	lddpc	r10,80002a9c <INTC_register_interrupt+0x7c>
80002a78:	12 1a       	sub	r10,r9
80002a7a:	ea 1a c0 00 	orh	r10,0xc000
80002a7e:	fe 79 08 00 	mov	r9,-63488
80002a82:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002a86:	5e fc       	retal	r12
80002a88:	80 00       	ld.sh	r0,r0[0x0]
80002a8a:	44 a0       	lddsp	r0,sp[0x128]
80002a8c:	80 00       	ld.sh	r0,r0[0x0]
80002a8e:	42 00       	lddsp	r0,sp[0x80]
80002a90:	80 00       	ld.sh	r0,r0[0x0]
80002a92:	43 04       	lddsp	r4,sp[0xc0]
80002a94:	80 00       	ld.sh	r0,r0[0x0]
80002a96:	43 12       	lddsp	r2,sp[0xc4]
80002a98:	80 00       	ld.sh	r0,r0[0x0]
80002a9a:	43 20       	lddsp	r0,sp[0xc8]
80002a9c:	80 00       	ld.sh	r0,r0[0x0]
80002a9e:	43 2e       	lddsp	lr,sp[0xc8]

80002aa0 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002aa0:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002aa2:	49 18       	lddpc	r8,80002ae4 <INTC_init_interrupts+0x44>
80002aa4:	e3 b8 00 01 	mtsr	0x4,r8
80002aa8:	49 0e       	lddpc	lr,80002ae8 <INTC_init_interrupts+0x48>
80002aaa:	30 07       	mov	r7,0
80002aac:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002aae:	49 0c       	lddpc	r12,80002aec <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002ab0:	49 05       	lddpc	r5,80002af0 <INTC_init_interrupts+0x50>
80002ab2:	10 15       	sub	r5,r8
80002ab4:	fe 76 08 00 	mov	r6,-63488
80002ab8:	c1 08       	rjmp	80002ad8 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002aba:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002abc:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002abe:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002ac0:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002ac4:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002ac6:	10 3a       	cp.w	r10,r8
80002ac8:	fe 9b ff fc 	brhi	80002ac0 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002acc:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002ad0:	2f f7       	sub	r7,-1
80002ad2:	2f 8e       	sub	lr,-8
80002ad4:	59 47       	cp.w	r7,20
80002ad6:	c0 50       	breq	80002ae0 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002ad8:	7c 08       	ld.w	r8,lr[0x0]
80002ada:	58 08       	cp.w	r8,0
80002adc:	ce f1       	brne	80002aba <INTC_init_interrupts+0x1a>
80002ade:	cf 7b       	rjmp	80002acc <INTC_init_interrupts+0x2c>
80002ae0:	d8 22       	popm	r4-r7,pc
80002ae2:	00 00       	add	r0,r0
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	42 00       	lddsp	r0,sp[0x80]
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	44 a0       	lddsp	r0,sp[0x128]
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	2a 1e       	sub	lr,-95
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	43 04       	lddsp	r4,sp[0xc0]

80002af4 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002af4:	fe 78 08 00 	mov	r8,-63488
80002af8:	e0 69 00 83 	mov	r9,131
80002afc:	f2 0c 01 0c 	sub	r12,r9,r12
80002b00:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002b04:	f2 ca ff c0 	sub	r10,r9,-64
80002b08:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002b0c:	58 08       	cp.w	r8,0
80002b0e:	c0 21       	brne	80002b12 <_get_interrupt_handler+0x1e>
80002b10:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002b12:	f0 08 12 00 	clz	r8,r8
80002b16:	48 5a       	lddpc	r10,80002b28 <_get_interrupt_handler+0x34>
80002b18:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002b1c:	f0 08 11 1f 	rsub	r8,r8,31
80002b20:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002b22:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002b26:	5e fc       	retal	r12
80002b28:	80 00       	ld.sh	r0,r0[0x0]
80002b2a:	44 a0       	lddsp	r0,sp[0x128]

80002b2c <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002b2c:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002b2e:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002b32:	99 a8       	st.w	r12[0x28],r8
}
80002b34:	5e fc       	retal	r12
80002b36:	d7 03       	nop

80002b38 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002b38:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002b3a:	ec 5b bb 9f 	cp.w	r11,899999
80002b3e:	e0 8b 00 04 	brhi	80002b46 <pm_enable_osc0_crystal+0xe>
80002b42:	30 4b       	mov	r11,4
80002b44:	c1 38       	rjmp	80002b6a <pm_enable_osc0_crystal+0x32>
80002b46:	e0 68 c6 bf 	mov	r8,50879
80002b4a:	ea 18 00 2d 	orh	r8,0x2d
80002b4e:	10 3b       	cp.w	r11,r8
80002b50:	e0 8b 00 04 	brhi	80002b58 <pm_enable_osc0_crystal+0x20>
80002b54:	30 5b       	mov	r11,5
80002b56:	c0 a8       	rjmp	80002b6a <pm_enable_osc0_crystal+0x32>
80002b58:	e0 68 12 00 	mov	r8,4608
80002b5c:	ea 18 00 7a 	orh	r8,0x7a
80002b60:	10 3b       	cp.w	r11,r8
80002b62:	f9 bb 03 06 	movlo	r11,6
80002b66:	f9 bb 02 07 	movhs	r11,7
80002b6a:	f0 1f 00 02 	mcall	80002b70 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002b6e:	d8 02       	popm	pc
80002b70:	80 00       	ld.sh	r0,r0[0x0]
80002b72:	2b 2c       	sub	r12,-78

80002b74 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002b74:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002b76:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002b7a:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002b7c:	78 08       	ld.w	r8,r12[0x0]
80002b7e:	a3 a8       	sbr	r8,0x2
80002b80:	99 08       	st.w	r12[0x0],r8
}
80002b82:	5e fc       	retal	r12

80002b84 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002b84:	79 58       	ld.w	r8,r12[0x54]
80002b86:	e2 18 00 80 	andl	r8,0x80,COH
80002b8a:	cf d0       	breq	80002b84 <pm_wait_for_clk0_ready>
}
80002b8c:	5e fc       	retal	r12
80002b8e:	d7 03       	nop

80002b90 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002b90:	eb cd 40 80 	pushm	r7,lr
80002b94:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002b96:	f0 1f 00 04 	mcall	80002ba4 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002b9a:	0e 9c       	mov	r12,r7
80002b9c:	f0 1f 00 03 	mcall	80002ba8 <pm_enable_clk0+0x18>
}
80002ba0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	2b 74       	sub	r4,-73
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	2b 84       	sub	r4,-72

80002bac <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002bac:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002bae:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002bb2:	99 08       	st.w	r12[0x0],r8
}
80002bb4:	5e fc       	retal	r12
80002bb6:	d7 03       	nop

80002bb8 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002bb8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bbc:	18 97       	mov	r7,r12
80002bbe:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002bc0:	f0 1f 00 06 	mcall	80002bd8 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002bc4:	0c 9b       	mov	r11,r6
80002bc6:	0e 9c       	mov	r12,r7
80002bc8:	f0 1f 00 05 	mcall	80002bdc <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002bcc:	30 1b       	mov	r11,1
80002bce:	0e 9c       	mov	r12,r7
80002bd0:	f0 1f 00 04 	mcall	80002be0 <pm_switch_to_osc0+0x28>
}
80002bd4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bd8:	80 00       	ld.sh	r0,r0[0x0]
80002bda:	2b 38       	sub	r8,-77
80002bdc:	80 00       	ld.sh	r0,r0[0x0]
80002bde:	2b 90       	sub	r0,-71
80002be0:	80 00       	ld.sh	r0,r0[0x0]
80002be2:	2b ac       	sub	r12,-70

80002be4 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002be4:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002be6:	58 0c       	cp.w	r12,0
80002be8:	c0 40       	breq	80002bf0 <pcl_switch_to_osc+0xc>
80002bea:	fe 7c d8 f0 	mov	r12,-10000
80002bee:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
80002bf0:	fe 7c 0c 00 	mov	r12,-62464
80002bf4:	f0 1f 00 02 	mcall	80002bfc <pcl_switch_to_osc+0x18>
80002bf8:	d8 0a       	popm	pc,r12=0
80002bfa:	00 00       	add	r0,r0
80002bfc:	80 00       	ld.sh	r0,r0[0x0]
80002bfe:	2b b8       	sub	r8,-69

80002c00 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80002c00:	58 0b       	cp.w	r11,0
80002c02:	c1 90       	breq	80002c34 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002c04:	58 6c       	cp.w	r12,6
80002c06:	e0 8b 00 17 	brhi	80002c34 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002c0a:	76 0a       	ld.w	r10,r11[0x0]
80002c0c:	fe 78 30 00 	mov	r8,-53248
80002c10:	f8 c9 ff f0 	sub	r9,r12,-16
80002c14:	a5 79       	lsl	r9,0x5
80002c16:	f0 09 00 09 	add	r9,r8,r9
80002c1a:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002c1c:	76 19       	ld.w	r9,r11[0x4]
80002c1e:	a5 7c       	lsl	r12,0x5
80002c20:	f0 0c 00 0c 	add	r12,r8,r12
80002c24:	f8 c8 fd fc 	sub	r8,r12,-516
80002c28:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002c2a:	76 28       	ld.w	r8,r11[0x8]
80002c2c:	f8 cc fd f8 	sub	r12,r12,-520
80002c30:	99 08       	st.w	r12[0x0],r8
80002c32:	5e fd       	retal	0

  return PWM_SUCCESS;
80002c34:	5e ff       	retal	1

80002c36 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80002c36:	18 98       	mov	r8,r12
80002c38:	e0 18 ff 80 	andl	r8,0xff80
80002c3c:	c0 20       	breq	80002c40 <pwm_start_channels+0xa>
80002c3e:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002c40:	fe 78 30 00 	mov	r8,-53248
80002c44:	91 1c       	st.w	r8[0x4],r12
80002c46:	5e fd       	retal	0

80002c48 <pwm_async_update_channel>:

int pwm_async_update_channel(unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
80002c48:	58 6c       	cp.w	r12,6
80002c4a:	e0 88 00 03 	brls	80002c50 <pwm_async_update_channel+0x8>
80002c4e:	5e ff       	retal	1
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
80002c50:	76 0a       	ld.w	r10,r11[0x0]
80002c52:	fe 78 30 00 	mov	r8,-53248
80002c56:	f8 c9 ff f0 	sub	r9,r12,-16
80002c5a:	a5 79       	lsl	r9,0x5
80002c5c:	f0 09 00 09 	add	r9,r8,r9
80002c60:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
80002c62:	76 49       	ld.w	r9,r11[0x10]
80002c64:	a5 7c       	lsl	r12,0x5
80002c66:	18 08       	add	r8,r12
80002c68:	f0 c8 fd f0 	sub	r8,r8,-528
80002c6c:	91 09       	st.w	r8[0x0],r9
80002c6e:	5e fd       	retal	0

80002c70 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002c70:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002c74:	58 0c       	cp.w	r12,0
80002c76:	c0 21       	brne	80002c7a <pwm_init+0xa>
80002c78:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002c7a:	e6 18 00 01 	andh	r8,0x1,COH
80002c7e:	c0 91       	brne	80002c90 <pwm_init+0x20>
80002c80:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002c82:	fe 78 30 00 	mov	r8,-53248
80002c86:	37 f9       	mov	r9,127
80002c88:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002c8a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002c8c:	d5 03       	csrf	0x10
80002c8e:	c0 68       	rjmp	80002c9a <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002c90:	fe 78 30 00 	mov	r8,-53248
80002c94:	37 f9       	mov	r9,127
80002c96:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002c98:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80002c9a:	78 08       	ld.w	r8,r12[0x0]
80002c9c:	78 39       	ld.w	r9,r12[0xc]
80002c9e:	a9 69       	lsl	r9,0x8
80002ca0:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80002ca4:	78 18       	ld.w	r8,r12[0x4]
80002ca6:	10 49       	or	r9,r8
80002ca8:	78 28       	ld.w	r8,r12[0x8]
80002caa:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002cae:	fe 78 30 00 	mov	r8,-53248
80002cb2:	91 09       	st.w	r8[0x0],r9
80002cb4:	5e fd       	retal	0

80002cb6 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002cb6:	76 09       	ld.w	r9,r11[0x0]
80002cb8:	58 29       	cp.w	r9,2
80002cba:	e0 88 00 03 	brls	80002cc0 <tc_init_waveform+0xa>
80002cbe:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002cc0:	76 18       	ld.w	r8,r11[0x4]
80002cc2:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002cc6:	af ba       	sbr	r10,0xf
80002cc8:	10 9b       	mov	r11,r8
80002cca:	e6 1b c0 00 	andh	r11,0xc000,COH
80002cce:	16 4a       	or	r10,r11
80002cd0:	10 9b       	mov	r11,r8
80002cd2:	e6 1b 30 00 	andh	r11,0x3000,COH
80002cd6:	16 4a       	or	r10,r11
80002cd8:	10 9b       	mov	r11,r8
80002cda:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002cde:	16 4a       	or	r10,r11
80002ce0:	10 9b       	mov	r11,r8
80002ce2:	e6 1b 03 00 	andh	r11,0x300,COH
80002ce6:	16 4a       	or	r10,r11
80002ce8:	10 9b       	mov	r11,r8
80002cea:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002cee:	16 4a       	or	r10,r11
80002cf0:	10 9b       	mov	r11,r8
80002cf2:	e6 1b 00 30 	andh	r11,0x30,COH
80002cf6:	16 4a       	or	r10,r11
80002cf8:	10 9b       	mov	r11,r8
80002cfa:	e6 1b 00 0c 	andh	r11,0xc,COH
80002cfe:	16 4a       	or	r10,r11
80002d00:	10 9b       	mov	r11,r8
80002d02:	e6 1b 00 03 	andh	r11,0x3,COH
80002d06:	16 4a       	or	r10,r11
80002d08:	10 9b       	mov	r11,r8
80002d0a:	e2 1b 60 00 	andl	r11,0x6000,COH
80002d0e:	16 4a       	or	r10,r11
80002d10:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80002d14:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
80002d18:	10 9b       	mov	r11,r8
80002d1a:	e2 1b 0c 00 	andl	r11,0xc00,COH
80002d1e:	16 4a       	or	r10,r11
80002d20:	10 9b       	mov	r11,r8
80002d22:	e2 1b 03 00 	andl	r11,0x300,COH
80002d26:	16 4a       	or	r10,r11
80002d28:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
80002d2c:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
80002d30:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80002d34:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
80002d38:	10 9b       	mov	r11,r8
80002d3a:	e2 1b 00 30 	andl	r11,0x30,COH
80002d3e:	16 4a       	or	r10,r11
80002d40:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002d44:	f5 e8 10 38 	or	r8,r10,r8<<0x3
80002d48:	a5 69       	lsl	r9,0x4
80002d4a:	2f f9       	sub	r9,-1
80002d4c:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002d50:	5e fd       	retal	0

80002d52 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002d52:	58 2b       	cp.w	r11,2
80002d54:	e0 88 00 03 	brls	80002d5a <tc_start+0x8>
80002d58:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002d5a:	a7 6b       	lsl	r11,0x6
80002d5c:	16 0c       	add	r12,r11
80002d5e:	30 58       	mov	r8,5
80002d60:	99 08       	st.w	r12[0x0],r8
80002d62:	5e fd       	retal	0

80002d64 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002d64:	58 2b       	cp.w	r11,2
80002d66:	e0 88 00 03 	brls	80002d6c <tc_read_sr+0x8>
80002d6a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002d6c:	a7 6b       	lsl	r11,0x6
80002d6e:	2e 0b       	sub	r11,-32
80002d70:	16 0c       	add	r12,r11
80002d72:	78 0c       	ld.w	r12,r12[0x0]
}
80002d74:	5e fc       	retal	r12

80002d76 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002d76:	58 2b       	cp.w	r11,2
80002d78:	e0 88 00 03 	brls	80002d7e <tc_write_rc+0x8>
80002d7c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002d7e:	f6 08 15 04 	lsl	r8,r11,0x4
80002d82:	2f f8       	sub	r8,-1
80002d84:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002d88:	e2 18 80 00 	andl	r8,0x8000,COH
80002d8c:	c0 c0       	breq	80002da4 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002d8e:	a7 6b       	lsl	r11,0x6
80002d90:	16 0c       	add	r12,r11
80002d92:	2e 4c       	sub	r12,-28
80002d94:	78 08       	ld.w	r8,r12[0x0]
80002d96:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002d9a:	e0 18 00 00 	andl	r8,0x0
80002d9e:	f3 e8 10 08 	or	r8,r9,r8
80002da2:	99 08       	st.w	r12[0x0],r8

  return value;
80002da4:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002da8:	5e fc       	retal	r12

80002daa <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002daa:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002dae:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002db2:	58 2b       	cp.w	r11,2
80002db4:	e0 88 00 04 	brls	80002dbc <tc_configure_interrupts+0x12>
80002db8:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002dbc:	ee 19 00 01 	eorh	r9,0x1
80002dc0:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002dc4:	74 08       	ld.w	r8,r10[0x0]
80002dc6:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002dca:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002dce:	a7 6e       	lsl	lr,0x6
80002dd0:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002dd4:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80002dd8:	0e 4e       	or	lr,r7
80002dda:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002dde:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002de2:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002de6:	fd e7 10 4e 	or	lr,lr,r7<<0x4
80002dea:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002dee:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002df2:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002df6:	fd e7 10 2e 	or	lr,lr,r7<<0x2
80002dfa:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002dfe:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002e02:	f6 0e 15 06 	lsl	lr,r11,0x6
80002e06:	f8 0e 00 0e 	add	lr,r12,lr
80002e0a:	2d ce       	sub	lr,-36
80002e0c:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002e0e:	58 09       	cp.w	r9,0
80002e10:	c0 20       	breq	80002e14 <tc_configure_interrupts+0x6a>
80002e12:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002e14:	74 08       	ld.w	r8,r10[0x0]
80002e16:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002e1a:	e0 65 00 80 	mov	r5,128
80002e1e:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002e22:	74 08       	ld.w	r8,r10[0x0]
80002e24:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002e28:	f9 b4 00 40 	moveq	r4,64
80002e2c:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002e30:	74 08       	ld.w	r8,r10[0x0]
80002e32:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002e36:	f9 b3 00 20 	moveq	r3,32
80002e3a:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002e3e:	74 08       	ld.w	r8,r10[0x0]
80002e40:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002e44:	f9 b2 00 10 	moveq	r2,16
80002e48:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002e4c:	74 08       	ld.w	r8,r10[0x0]
80002e4e:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002e52:	f9 b6 00 08 	moveq	r6,8
80002e56:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002e5a:	74 08       	ld.w	r8,r10[0x0]
80002e5c:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002e60:	f9 b7 00 04 	moveq	r7,4
80002e64:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002e68:	74 08       	ld.w	r8,r10[0x0]
80002e6a:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002e6e:	f9 be 00 02 	moveq	lr,2
80002e72:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002e76:	74 08       	ld.w	r8,r10[0x0]
80002e78:	ec 18 00 01 	eorl	r8,0x1
80002e7c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002e80:	eb e8 10 08 	or	r8,r5,r8
80002e84:	08 48       	or	r8,r4
80002e86:	06 48       	or	r8,r3
80002e88:	04 48       	or	r8,r2
80002e8a:	0c 48       	or	r8,r6
80002e8c:	0e 48       	or	r8,r7
80002e8e:	1c 48       	or	r8,lr
80002e90:	f6 0a 15 06 	lsl	r10,r11,0x6
80002e94:	f8 0a 00 0a 	add	r10,r12,r10
80002e98:	2d 8a       	sub	r10,-40
80002e9a:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002e9c:	a7 6b       	lsl	r11,0x6
80002e9e:	2e 0b       	sub	r11,-32
80002ea0:	16 0c       	add	r12,r11
80002ea2:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002ea4:	58 09       	cp.w	r9,0
80002ea6:	c0 31       	brne	80002eac <tc_configure_interrupts+0x102>
80002ea8:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002eac:	d5 03       	csrf	0x10
80002eae:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002eb2:	d7 03       	nop

80002eb4 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002eb4:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002eb8:	fe c0 ec b8 	sub	r0,pc,-4936

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002ebc:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002ec0:	d5 53       	csrf	0x15
  cp      r0, r1
80002ec2:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002ec4:	e0 61 05 38 	mov	r1,1336
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002ec8:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002eca:	c0 72       	brcc	80002ed8 <idata_load_loop_end>
  cp      r0, r1
80002ecc:	fe c2 e9 0c 	sub	r2,pc,-5876

80002ed0 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002ed0:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002ed2:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002ed4:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002ed6:	cf d3       	brcs	80002ed0 <idata_load_loop>

80002ed8 <idata_load_loop_end>:
  mov     r2, 0
80002ed8:	e0 60 05 38 	mov	r0,1336
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002edc:	e0 61 07 28 	mov	r1,1832
  cp      r0, r1
  brlo    udata_clear_loop
80002ee0:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002ee2:	c0 62       	brcc	80002eee <udata_clear_loop_end>
80002ee4:	30 02       	mov	r2,0
80002ee6:	30 03       	mov	r3,0

80002ee8 <udata_clear_loop>:
80002ee8:	a1 22       	st.d	r0++,r2
80002eea:	02 30       	cp.w	r0,r1
80002eec:	cf e3       	brcs	80002ee8 <udata_clear_loop>

80002eee <udata_clear_loop_end>:
80002eee:	fe cf fa f2 	sub	pc,pc,-1294
80002ef2:	d7 03       	nop

80002ef4 <rst_board>:
//   return coord;
// }
void print_time_left(){
  et024006_DrawFilledRect(240,40,80,200-counter*2,0xFFFF);
}
void rst_board (/*spc * c00*/){
80002ef4:	48 78       	lddpc	r8,80002f10 <rst_board+0x1c>
80002ef6:	f0 ca ff 58 	sub	r10,r8,-168
  for (int i = 0; i < BOARD_WIDTH; i++){
    for (int j = 0;  j < BOARD_HEIGHT; j++){
      // spc * c = get_spc_ptr(c00, i, j);
      // * c = NONE;
      board[i][j] = NOPLAYER;
80002efa:	30 09       	mov	r9,0
80002efc:	91 09       	st.w	r8[0x0],r9
80002efe:	91 19       	st.w	r8[0x4],r9
80002f00:	91 29       	st.w	r8[0x8],r9
80002f02:	91 39       	st.w	r8[0xc],r9
80002f04:	91 49       	st.w	r8[0x10],r9
80002f06:	91 59       	st.w	r8[0x14],r9
80002f08:	2e 88       	sub	r8,-24
// }
void print_time_left(){
  et024006_DrawFilledRect(240,40,80,200-counter*2,0xFFFF);
}
void rst_board (/*spc * c00*/){
  for (int i = 0; i < BOARD_WIDTH; i++){
80002f0a:	14 38       	cp.w	r8,r10
80002f0c:	cf 81       	brne	80002efc <rst_board+0x8>
      // spc * c = get_spc_ptr(c00, i, j);
      // * c = NONE;
      board[i][j] = NOPLAYER;
    }
  }
}
80002f0e:	5e fc       	retal	r12
80002f10:	00 00       	add	r0,r0
80002f12:	06 78       	tst	r8,r3

80002f14 <winner>:
      }

    }
  }
}
void winner (){
80002f14:	eb cd 40 f8 	pushm	r3-r7,lr
80002f18:	30 0c       	mov	r12,0
80002f1a:	18 9b       	mov	r11,r12
  //board full no winner
  uint8_t c=0;
  for (int i = 0; i < BOARD_WIDTH; i++){
80002f1c:	4d c7       	lddpc	r7,8000308c <winner+0x178>
80002f1e:	18 9e       	mov	lr,r12
80002f20:	c0 d8       	rjmp	80002f3a <winner+0x26>
    for (int j = 0; j < BOARD_HEIGHT; j++){
      if (board[i][j]==NOPLAYER){
80002f22:	72 0a       	ld.w	r10,r9[0x0]
80002f24:	58 0a       	cp.w	r10,0
80002f26:	c0 31       	brne	80002f2c <winner+0x18>
        c++;
80002f28:	2f fb       	sub	r11,-1
80002f2a:	5c 5b       	castu.b	r11
}
void winner (){
  //board full no winner
  uint8_t c=0;
  for (int i = 0; i < BOARD_WIDTH; i++){
    for (int j = 0; j < BOARD_HEIGHT; j++){
80002f2c:	2f f8       	sub	r8,-1
80002f2e:	2f c9       	sub	r9,-4
80002f30:	58 68       	cp.w	r8,6
80002f32:	cf 81       	brne	80002f22 <winner+0xe>
  }
}
void winner (){
  //board full no winner
  uint8_t c=0;
  for (int i = 0; i < BOARD_WIDTH; i++){
80002f34:	2f fc       	sub	r12,-1
80002f36:	58 7c       	cp.w	r12,7
80002f38:	c0 70       	breq	80002f46 <winner+0x32>
80002f3a:	f8 0c 00 19 	add	r9,r12,r12<<0x1
80002f3e:	ee 09 00 39 	add	r9,r7,r9<<0x3
80002f42:	1c 98       	mov	r8,lr
80002f44:	ce fb       	rjmp	80002f22 <winner+0xe>
80002f46:	16 9c       	mov	r12,r11
      if (board[i][j]==NOPLAYER){
        c++;
      }
    }
  }
  if (c==0){
80002f48:	58 0b       	cp.w	r11,0
80002f4a:	c0 41       	brne	80002f52 <winner+0x3e>
    win=3;
80002f4c:	30 39       	mov	r9,3
80002f4e:	4d 18       	lddpc	r8,80003090 <winner+0x17c>
80002f50:	b0 89       	st.b	r8[0x0],r9
80002f52:	4d 08       	lddpc	r8,80003090 <winner+0x17c>
80002f54:	11 87       	ld.ub	r7,r8[0x0]
80002f56:	30 0e       	mov	lr,0
  }
  //vertical
  enum spc last = NOPLAYER;
  for (int i = 0; i < BOARD_WIDTH; i++){
80002f58:	4c d4       	lddpc	r4,8000308c <winner+0x178>
80002f5a:	1c 95       	mov	r5,lr
80002f5c:	1c 96       	mov	r6,lr
    last = NOPLAYER;
    for (int j = 0;  j < BOARD_HEIGHT; j++){
      if(board[i][j] != NOPLAYER){
        if(last == board[i][j]){
          c++;
          if (c==3){
80002f5e:	30 33       	mov	r3,3
80002f60:	c1 a8       	rjmp	80002f94 <winner+0x80>
        c++;
      }
    }
  }
  if (c==0){
    win=3;
80002f62:	10 9b       	mov	r11,r8
  //vertical
  enum spc last = NOPLAYER;
  for (int i = 0; i < BOARD_WIDTH; i++){
    last = NOPLAYER;
    for (int j = 0;  j < BOARD_HEIGHT; j++){
      if(board[i][j] != NOPLAYER){
80002f64:	74 08       	ld.w	r8,r10[0x0]
80002f66:	58 08       	cp.w	r8,0
80002f68:	c0 e0       	breq	80002f84 <winner+0x70>
        if(last == board[i][j]){
80002f6a:	10 3b       	cp.w	r11,r8
80002f6c:	c0 30       	breq	80002f72 <winner+0x5e>
80002f6e:	0c 9c       	mov	r12,r6
80002f70:	c0 b8       	rjmp	80002f86 <winner+0x72>
          c++;
80002f72:	2f fc       	sub	r12,-1
80002f74:	5c 5c       	castu.b	r12
          if (c==3){
80002f76:	e6 0c 18 00 	cp.b	r12,r3
80002f7a:	c0 51       	brne	80002f84 <winner+0x70>
            win = board[i][j];
80002f7c:	ef db c0 08 	bfextu	r7,r11,0x0,0x8
80002f80:	16 98       	mov	r8,r11
80002f82:	c0 28       	rjmp	80002f86 <winner+0x72>
80002f84:	16 98       	mov	r8,r11
  }
  //vertical
  enum spc last = NOPLAYER;
  for (int i = 0; i < BOARD_WIDTH; i++){
    last = NOPLAYER;
    for (int j = 0;  j < BOARD_HEIGHT; j++){
80002f86:	2f f9       	sub	r9,-1
80002f88:	2f ca       	sub	r10,-4
80002f8a:	58 69       	cp.w	r9,6
80002f8c:	ce b1       	brne	80002f62 <winner+0x4e>
  if (c==0){
    win=3;
  }
  //vertical
  enum spc last = NOPLAYER;
  for (int i = 0; i < BOARD_WIDTH; i++){
80002f8e:	2f fe       	sub	lr,-1
80002f90:	58 7e       	cp.w	lr,7
80002f92:	c0 80       	breq	80002fa2 <winner+0x8e>
80002f94:	fc 0e 00 1a 	add	r10,lr,lr<<0x1
80002f98:	e8 0a 00 3a 	add	r10,r4,r10<<0x3
80002f9c:	0a 99       	mov	r9,r5
80002f9e:	0c 9b       	mov	r11,r6
80002fa0:	ce 2b       	rjmp	80002f64 <winner+0x50>
80002fa2:	4b c8       	lddpc	r8,80003090 <winner+0x17c>
80002fa4:	b0 87       	st.b	r8[0x0],r7
80002fa6:	30 06       	mov	r6,0
        }
      }
    }
  }
  //Horizontal
  for (int j = 0;  j < BOARD_HEIGHT; j++){
80002fa8:	4b 94       	lddpc	r4,8000308c <winner+0x178>
80002faa:	0c 95       	mov	r5,r6
80002fac:	0c 9e       	mov	lr,r6
    last = NOPLAYER;
    for (int i = 0; i < BOARD_WIDTH; i++){
      if(board[i][j] != NOPLAYER){
        if(last == board[i][j]){
          c++;
          if (c==3){
80002fae:	30 33       	mov	r3,3
80002fb0:	c1 d8       	rjmp	80002fea <winner+0xd6>
  if (c==0){
    win=3;
  }
  //vertical
  enum spc last = NOPLAYER;
  for (int i = 0; i < BOARD_WIDTH; i++){
80002fb2:	10 9b       	mov	r11,r8
  }
  //Horizontal
  for (int j = 0;  j < BOARD_HEIGHT; j++){
    last = NOPLAYER;
    for (int i = 0; i < BOARD_WIDTH; i++){
      if(board[i][j] != NOPLAYER){
80002fb4:	74 08       	ld.w	r8,r10[0x0]
80002fb6:	58 08       	cp.w	r8,0
80002fb8:	c0 41       	brne	80002fc0 <winner+0xac>
80002fba:	16 98       	mov	r8,r11
80002fbc:	1c 9c       	mov	r12,lr
80002fbe:	c0 f8       	rjmp	80002fdc <winner+0xc8>
        if(last == board[i][j]){
80002fc0:	10 3b       	cp.w	r11,r8
80002fc2:	c0 30       	breq	80002fc8 <winner+0xb4>
80002fc4:	1c 9c       	mov	r12,lr
80002fc6:	c0 b8       	rjmp	80002fdc <winner+0xc8>
          c++;
80002fc8:	2f fc       	sub	r12,-1
80002fca:	5c 5c       	castu.b	r12
          if (c==3){
80002fcc:	e6 0c 18 00 	cp.b	r12,r3
80002fd0:	c0 30       	breq	80002fd6 <winner+0xc2>
80002fd2:	16 98       	mov	r8,r11
80002fd4:	c0 48       	rjmp	80002fdc <winner+0xc8>
            win = board[i][j];
80002fd6:	ef db c0 08 	bfextu	r7,r11,0x0,0x8
80002fda:	16 98       	mov	r8,r11
    }
  }
  //Horizontal
  for (int j = 0;  j < BOARD_HEIGHT; j++){
    last = NOPLAYER;
    for (int i = 0; i < BOARD_WIDTH; i++){
80002fdc:	2f f9       	sub	r9,-1
80002fde:	2e 8a       	sub	r10,-24
80002fe0:	58 79       	cp.w	r9,7
80002fe2:	ce 81       	brne	80002fb2 <winner+0x9e>
        }
      }
    }
  }
  //Horizontal
  for (int j = 0;  j < BOARD_HEIGHT; j++){
80002fe4:	2f f6       	sub	r6,-1
80002fe6:	58 66       	cp.w	r6,6
80002fe8:	c0 60       	breq	80002ff4 <winner+0xe0>
80002fea:	e8 06 00 2a 	add	r10,r4,r6<<0x2
80002fee:	0a 99       	mov	r9,r5
80002ff0:	1c 9b       	mov	r11,lr
80002ff2:	ce 1b       	rjmp	80002fb4 <winner+0xa0>
80002ff4:	4a 78       	lddpc	r8,80003090 <winner+0x17c>
80002ff6:	b0 87       	st.b	r8[0x0],r7
      }

    }
  }
}
void winner (){
80002ff8:	4a 56       	lddpc	r6,8000308c <winner+0x178>
80002ffa:	ec cb ff e8 	sub	r11,r6,-24
80002ffe:	30 0c       	mov	r12,0
        c=0;
      }
    }
  }
  //diagonal1
  for (int i = 0; i < BOARD_WIDTH-3; i++){
80003000:	0c 9e       	mov	lr,r6
80003002:	c1 68       	rjmp	8000302e <winner+0x11a>
    for (int j = 3;  j < BOARD_HEIGHT; j++){
      if(board[i][j] == board[i+1][j-1] && board[i][j] == board[i+2][j-2]
80003004:	70 09       	ld.w	r9,r8[0x0]
80003006:	70 5a       	ld.w	r10,r8[0x14]
80003008:	14 39       	cp.w	r9,r10
8000300a:	c0 b1       	brne	80003020 <winner+0x10c>
8000300c:	70 aa       	ld.w	r10,r8[0x28]
8000300e:	14 39       	cp.w	r9,r10
80003010:	c0 81       	brne	80003020 <winner+0x10c>
80003012:	70 fa       	ld.w	r10,r8[0x3c]
80003014:	14 39       	cp.w	r9,r10
80003016:	c0 51       	brne	80003020 <winner+0x10c>
80003018:	58 09       	cp.w	r9,0
8000301a:	c0 30       	breq	80003020 <winner+0x10c>
          && board[i][j] == board[i+3][j-3] && board[i][j]!=NOPLAYER){
          win = board[i][j];
8000301c:	ef d9 c0 08 	bfextu	r7,r9,0x0,0x8
80003020:	2f c8       	sub	r8,-4
      }
    }
  }
  //diagonal1
  for (int i = 0; i < BOARD_WIDTH-3; i++){
    for (int j = 3;  j < BOARD_HEIGHT; j++){
80003022:	16 38       	cp.w	r8,r11
80003024:	cf 01       	brne	80003004 <winner+0xf0>
        c=0;
      }
    }
  }
  //diagonal1
  for (int i = 0; i < BOARD_WIDTH-3; i++){
80003026:	2f fc       	sub	r12,-1
80003028:	2e 8b       	sub	r11,-24
8000302a:	58 4c       	cp.w	r12,4
8000302c:	c0 70       	breq	8000303a <winner+0x126>
8000302e:	f8 0c 00 18 	add	r8,r12,r12<<0x1
80003032:	a3 78       	lsl	r8,0x3
80003034:	2f 48       	sub	r8,-12
80003036:	1c 08       	add	r8,lr
80003038:	ce 6b       	rjmp	80003004 <winner+0xf0>
8000303a:	49 68       	lddpc	r8,80003090 <winner+0x17c>
8000303c:	b0 87       	st.b	r8[0x0],r7
8000303e:	ec cb ff a0 	sub	r11,r6,-96
80003042:	30 3c       	mov	r12,3
          win = board[i][j];
      }
    }
  }
  //diagonal2
  for (int i = 3; i < BOARD_WIDTH; i++){
80003044:	49 2e       	lddpc	lr,8000308c <winner+0x178>
80003046:	c1 98       	rjmp	80003078 <winner+0x164>
    for (int j = 3;  j < BOARD_HEIGHT; j++){
      if(board[i][j] == board[i-1][j-1] && board[i][j] == board[i-2][j-2]
80003048:	70 09       	ld.w	r9,r8[0x0]
8000304a:	f0 fa ff e4 	ld.w	r10,r8[-28]
8000304e:	14 39       	cp.w	r9,r10
80003050:	c0 d1       	brne	8000306a <winner+0x156>
80003052:	f0 fa ff c8 	ld.w	r10,r8[-56]
80003056:	14 39       	cp.w	r9,r10
80003058:	c0 91       	brne	8000306a <winner+0x156>
8000305a:	f0 fa ff ac 	ld.w	r10,r8[-84]
8000305e:	14 39       	cp.w	r9,r10
80003060:	c0 51       	brne	8000306a <winner+0x156>
80003062:	58 09       	cp.w	r9,0
80003064:	c0 30       	breq	8000306a <winner+0x156>
          && board[i][j] == board[i-3][j-3] && board[i][j]!=NOPLAYER){
          win = board[i][j];
80003066:	ef d9 c0 08 	bfextu	r7,r9,0x0,0x8
8000306a:	2f c8       	sub	r8,-4
      }
    }
  }
  //diagonal2
  for (int i = 3; i < BOARD_WIDTH; i++){
    for (int j = 3;  j < BOARD_HEIGHT; j++){
8000306c:	10 3b       	cp.w	r11,r8
8000306e:	ce d1       	brne	80003048 <winner+0x134>
          win = board[i][j];
      }
    }
  }
  //diagonal2
  for (int i = 3; i < BOARD_WIDTH; i++){
80003070:	2f fc       	sub	r12,-1
80003072:	2e 8b       	sub	r11,-24
80003074:	58 7c       	cp.w	r12,7
80003076:	c0 70       	breq	80003084 <winner+0x170>
80003078:	f8 0c 00 18 	add	r8,r12,r12<<0x1
8000307c:	a3 78       	lsl	r8,0x3
8000307e:	2f 48       	sub	r8,-12
80003080:	1c 08       	add	r8,lr
80003082:	ce 3b       	rjmp	80003048 <winner+0x134>
80003084:	48 38       	lddpc	r8,80003090 <winner+0x17c>
80003086:	b0 87       	st.b	r8[0x0],r7
          win = board[i][j];
      }
    }
  }

}
80003088:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000308c:	00 00       	add	r0,r0
8000308e:	06 78       	tst	r8,r3
80003090:	00 00       	add	r0,r0
80003092:	06 34       	cp.w	r4,r3

80003094 <timer>:
		gpio_tgl_gpio_pin(LED0_GPIO);
	}
	gpio_get_pin_interrupt_flag(BTN_CENTER);
} //Fin Botones

void timer(void){
80003094:	d4 01       	pushm	lr
	tc_read_sr(&AVR32_TC, 0);//Limpiar bandera
80003096:	30 0b       	mov	r11,0
80003098:	fe 7c 38 00 	mov	r12,-51200
8000309c:	f0 1f 00 06 	mcall	800030b4 <timer+0x20>
  if (counter) counter--;
800030a0:	48 68       	lddpc	r8,800030b8 <timer+0x24>
800030a2:	11 88       	ld.ub	r8,r8[0x0]
800030a4:	58 08       	cp.w	r8,0
800030a6:	c0 40       	breq	800030ae <timer+0x1a>
800030a8:	20 18       	sub	r8,1
800030aa:	48 49       	lddpc	r9,800030b8 <timer+0x24>
800030ac:	b2 88       	st.b	r9[0x0],r8
}//timer
800030ae:	d4 02       	popm	lr
800030b0:	d6 03       	rete
800030b2:	00 00       	add	r0,r0
800030b4:	80 00       	ld.sh	r0,r0[0x0]
800030b6:	2d 64       	sub	r4,-42
800030b8:	00 00       	add	r0,r0
800030ba:	00 0c       	add	r12,r0

800030bc <buttons_interrupt_routine>:
    }
  }
  draw_game();
}

void buttons_interrupt_routine (void){
800030bc:	d4 01       	pushm	lr
	if (gpio_get_pin_interrupt_flag(BTN_UP)) {
800030be:	33 6c       	mov	r12,54
800030c0:	f0 1f 00 20 	mcall	80003140 <buttons_interrupt_routine+0x84>
800030c4:	c0 70       	breq	800030d2 <buttons_interrupt_routine+0x16>
		btn_pressed=UP;
800030c6:	30 19       	mov	r9,1
800030c8:	49 f8       	lddpc	r8,80003144 <buttons_interrupt_routine+0x88>
800030ca:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_UP);
800030cc:	33 6c       	mov	r12,54
800030ce:	f0 1f 00 1f 	mcall	80003148 <buttons_interrupt_routine+0x8c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_DOWN)){
800030d2:	33 7c       	mov	r12,55
800030d4:	f0 1f 00 1b 	mcall	80003140 <buttons_interrupt_routine+0x84>
800030d8:	c0 70       	breq	800030e6 <buttons_interrupt_routine+0x2a>
		btn_pressed=DOWN;
800030da:	30 29       	mov	r9,2
800030dc:	49 a8       	lddpc	r8,80003144 <buttons_interrupt_routine+0x88>
800030de:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_DOWN);
800030e0:	33 7c       	mov	r12,55
800030e2:	f0 1f 00 1a 	mcall	80003148 <buttons_interrupt_routine+0x8c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_RIGHT)){
800030e6:	33 8c       	mov	r12,56
800030e8:	f0 1f 00 16 	mcall	80003140 <buttons_interrupt_routine+0x84>
800030ec:	c0 70       	breq	800030fa <buttons_interrupt_routine+0x3e>
		btn_pressed=RIGHT;
800030ee:	30 49       	mov	r9,4
800030f0:	49 58       	lddpc	r8,80003144 <buttons_interrupt_routine+0x88>
800030f2:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_RIGHT);
800030f4:	33 8c       	mov	r12,56
800030f6:	f0 1f 00 15 	mcall	80003148 <buttons_interrupt_routine+0x8c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_LEFT)){
800030fa:	33 9c       	mov	r12,57
800030fc:	f0 1f 00 11 	mcall	80003140 <buttons_interrupt_routine+0x84>
80003100:	c0 70       	breq	8000310e <buttons_interrupt_routine+0x52>
		btn_pressed=LEFT;
80003102:	30 39       	mov	r9,3
80003104:	49 08       	lddpc	r8,80003144 <buttons_interrupt_routine+0x88>
80003106:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_LEFT);
80003108:	33 9c       	mov	r12,57
8000310a:	f0 1f 00 10 	mcall	80003148 <buttons_interrupt_routine+0x8c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_CENTER)){
8000310e:	33 ac       	mov	r12,58
80003110:	f0 1f 00 0c 	mcall	80003140 <buttons_interrupt_routine+0x84>
80003114:	c1 20       	breq	80003138 <buttons_interrupt_routine+0x7c>
		btn_pressed=CENTER;
80003116:	30 59       	mov	r9,5
80003118:	48 b8       	lddpc	r8,80003144 <buttons_interrupt_routine+0x88>
8000311a:	91 09       	st.w	r8[0x0],r9
		state = (state + 1) % state_num;
8000311c:	48 c8       	lddpc	r8,8000314c <buttons_interrupt_routine+0x90>
8000311e:	11 8b       	ld.ub	r11,r8[0x0]
80003120:	2f fb       	sub	r11,-1
80003122:	48 c9       	lddpc	r9,80003150 <buttons_interrupt_routine+0x94>
80003124:	13 89       	ld.ub	r9,r9[0x0]
80003126:	f6 09 0c 0a 	divs	r10,r11,r9
8000312a:	b0 8b       	st.b	r8[0x0],r11
		gpio_clear_pin_interrupt_flag(BTN_CENTER);
8000312c:	33 ac       	mov	r12,58
8000312e:	f0 1f 00 07 	mcall	80003148 <buttons_interrupt_routine+0x8c>
		gpio_tgl_gpio_pin(LED0_GPIO);
80003132:	33 bc       	mov	r12,59
80003134:	f0 1f 00 08 	mcall	80003154 <buttons_interrupt_routine+0x98>
	}
	gpio_get_pin_interrupt_flag(BTN_CENTER);
80003138:	33 ac       	mov	r12,58
8000313a:	f0 1f 00 02 	mcall	80003140 <buttons_interrupt_routine+0x84>
} //Fin Botones
8000313e:	d8 02       	popm	pc
80003140:	80 00       	ld.sh	r0,r0[0x0]
80003142:	29 f0       	sub	r0,-97
80003144:	00 00       	add	r0,r0
80003146:	06 38       	cp.w	r8,r3
80003148:	80 00       	ld.sh	r0,r0[0x0]
8000314a:	2a 08       	sub	r8,-96
8000314c:	00 00       	add	r0,r0
8000314e:	06 3c       	cp.w	r12,r3
80003150:	00 00       	add	r0,r0
80003152:	00 30       	cp.w	r0,r0
80003154:	80 00       	ld.sh	r0,r0[0x0]
80003156:	29 8e       	sub	lr,-104

80003158 <print_time_left>:
//   spc * coord = c00;
//   coord += x;
//   coord += (y*BOARD_WIDTH);
//   return coord;
// }
void print_time_left(){
80003158:	d4 01       	pushm	lr
  et024006_DrawFilledRect(240,40,80,200-counter*2,0xFFFF);
8000315a:	48 98       	lddpc	r8,8000317c <print_time_left+0x24>
8000315c:	11 89       	ld.ub	r9,r8[0x0]
8000315e:	f2 09 11 64 	rsub	r9,r9,100
80003162:	a1 79       	lsl	r9,0x1
80003164:	e0 68 ff ff 	mov	r8,65535
80003168:	e2 19 ff fe 	andl	r9,0xfffe,COH
8000316c:	35 0a       	mov	r10,80
8000316e:	32 8b       	mov	r11,40
80003170:	e0 6c 00 f0 	mov	r12,240
80003174:	f0 1f 00 03 	mcall	80003180 <print_time_left+0x28>
}
80003178:	d8 02       	popm	pc
8000317a:	00 00       	add	r0,r0
8000317c:	00 00       	add	r0,r0
8000317e:	00 0c       	add	r12,r0
80003180:	80 00       	ld.sh	r0,r0[0x0]
80003182:	20 c0       	sub	r0,12

80003184 <draw_game>:
      // * c = NONE;
      board[i][j] = NOPLAYER;
    }
  }
}
void draw_game(){
80003184:	d4 31       	pushm	r0-r7,lr
  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80003186:	30 08       	mov	r8,0
80003188:	e0 69 00 f0 	mov	r9,240
8000318c:	e0 6a 01 40 	mov	r10,320
80003190:	10 9b       	mov	r11,r8
80003192:	10 9c       	mov	r12,r8
80003194:	f0 1f 00 2f 	mcall	80003250 <draw_game+0xcc>
  uint8_t color = 0xFFFF;
  //position to drop
  if (state){
80003198:	4a f8       	lddpc	r8,80003254 <draw_game+0xd0>
8000319a:	11 89       	ld.ub	r9,r8[0x0]
8000319c:	30 08       	mov	r8,0
8000319e:	f0 09 18 00 	cp.b	r9,r8
800031a2:	c0 f0       	breq	800031c0 <draw_game+0x3c>
    et024006_DrawFilledCircle(drop_pos*34 + 17, 17, 15, BLUE, 0b11111111);
800031a4:	4a d8       	lddpc	r8,80003258 <draw_game+0xd4>
800031a6:	11 8c       	ld.ub	r12,r8[0x0]
800031a8:	f8 0c 10 22 	mul	r12,r12,34
800031ac:	2e fc       	sub	r12,-17
800031ae:	e0 68 00 ff 	mov	r8,255
800031b2:	31 f9       	mov	r9,31
800031b4:	30 fa       	mov	r10,15
800031b6:	31 1b       	mov	r11,17
800031b8:	5c 7c       	castu.h	r12
800031ba:	f0 1f 00 29 	mcall	8000325c <draw_game+0xd8>
800031be:	c0 f8       	rjmp	800031dc <draw_game+0x58>
  }else{
    et024006_DrawFilledCircle(drop_pos*34 + 17, 17, 15, GREEN, 0b11111111);
800031c0:	4a 68       	lddpc	r8,80003258 <draw_game+0xd4>
800031c2:	11 8c       	ld.ub	r12,r8[0x0]
800031c4:	f8 0c 10 22 	mul	r12,r12,34
800031c8:	2e fc       	sub	r12,-17
800031ca:	e0 68 00 ff 	mov	r8,255
800031ce:	e0 69 07 e0 	mov	r9,2016
800031d2:	30 fa       	mov	r10,15
800031d4:	31 1b       	mov	r11,17
800031d6:	5c 7c       	castu.h	r12
800031d8:	f0 1f 00 21 	mcall	8000325c <draw_game+0xd8>
800031dc:	31 11       	mov	r1,17
800031de:	30 04       	mov	r4,0
      switch (board[i][j]){
        case NOPLAYER:
          et024006_DrawFilledCircle(i*34+17, (j+1)*34+17, 15, WHITE, 0b11111111);
          break;
        case BLUE_PLAYER:
          et024006_DrawFilledCircle(i*34+17, (j+1)*34+17, 15, BLUE, 0b11111111);
800031e0:	e0 63 00 ff 	mov	r3,255
800031e4:	31 f0       	mov	r0,31
800031e6:	30 f2       	mov	r2,15
800031e8:	c2 a8       	rjmp	8000323c <draw_game+0xb8>
  }

  //all board
  for (int i = 0; i < BOARD_WIDTH; i++){
    for (int j = 0;  j < BOARD_HEIGHT; j++){
      switch (board[i][j]){
800031ea:	6c 08       	ld.w	r8,r6[0x0]
800031ec:	58 18       	cp.w	r8,1
800031ee:	c0 e0       	breq	8000320a <draw_game+0x86>
800031f0:	c0 43       	brcs	800031f8 <draw_game+0x74>
800031f2:	58 28       	cp.w	r8,2
800031f4:	c1 b1       	brne	8000322a <draw_game+0xa6>
800031f6:	c1 28       	rjmp	8000321a <draw_game+0x96>
        case NOPLAYER:
          et024006_DrawFilledCircle(i*34+17, (j+1)*34+17, 15, WHITE, 0b11111111);
800031f8:	06 98       	mov	r8,r3
800031fa:	e0 69 ff ff 	mov	r9,65535
800031fe:	04 9a       	mov	r10,r2
80003200:	0e 9b       	mov	r11,r7
80003202:	0a 9c       	mov	r12,r5
80003204:	f0 1f 00 16 	mcall	8000325c <draw_game+0xd8>
          break;
80003208:	c1 18       	rjmp	8000322a <draw_game+0xa6>
        case BLUE_PLAYER:
          et024006_DrawFilledCircle(i*34+17, (j+1)*34+17, 15, BLUE, 0b11111111);
8000320a:	06 98       	mov	r8,r3
8000320c:	00 99       	mov	r9,r0
8000320e:	04 9a       	mov	r10,r2
80003210:	0e 9b       	mov	r11,r7
80003212:	0a 9c       	mov	r12,r5
80003214:	f0 1f 00 12 	mcall	8000325c <draw_game+0xd8>
          break;
80003218:	c0 98       	rjmp	8000322a <draw_game+0xa6>
        case GREEN_PLAYER:
          et024006_DrawFilledCircle(i*34+17, (j+1)*34+17, 15, GREEN, 0b11111111);
8000321a:	06 98       	mov	r8,r3
8000321c:	e0 69 07 e0 	mov	r9,2016
80003220:	04 9a       	mov	r10,r2
80003222:	0e 9b       	mov	r11,r7
80003224:	0a 9c       	mov	r12,r5
80003226:	f0 1f 00 0e 	mcall	8000325c <draw_game+0xd8>
8000322a:	2f c6       	sub	r6,-4
8000322c:	2d e7       	sub	r7,-34
    et024006_DrawFilledCircle(drop_pos*34 + 17, 17, 15, GREEN, 0b11111111);
  }

  //all board
  for (int i = 0; i < BOARD_WIDTH; i++){
    for (int j = 0;  j < BOARD_HEIGHT; j++){
8000322e:	e0 47 00 ff 	cp.w	r7,255
80003232:	cd c1       	brne	800031ea <draw_game+0x66>
  }else{
    et024006_DrawFilledCircle(drop_pos*34 + 17, 17, 15, GREEN, 0b11111111);
  }

  //all board
  for (int i = 0; i < BOARD_WIDTH; i++){
80003234:	2f f4       	sub	r4,-1
80003236:	2d e1       	sub	r1,-34
80003238:	58 74       	cp.w	r4,7
8000323a:	c0 90       	breq	8000324c <draw_game+0xc8>
8000323c:	02 95       	mov	r5,r1
8000323e:	e8 04 00 16 	add	r6,r4,r4<<0x1
80003242:	48 88       	lddpc	r8,80003260 <draw_game+0xdc>
80003244:	f0 06 00 36 	add	r6,r8,r6<<0x3
80003248:	33 37       	mov	r7,51
8000324a:	cd 0b       	rjmp	800031ea <draw_game+0x66>
8000324c:	d8 32       	popm	r0-r7,pc
8000324e:	00 00       	add	r0,r0
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	20 c0       	sub	r0,12
80003254:	00 00       	add	r0,r0
80003256:	06 3c       	cp.w	r12,r3
80003258:	00 00       	add	r0,r0
8000325a:	06 3d       	cp.w	sp,r3
8000325c:	80 00       	ld.sh	r0,r0[0x0]
8000325e:	21 1c       	sub	r12,17
80003260:	00 00       	add	r0,r0
80003262:	06 78       	tst	r8,r3

80003264 <drop_chip>:
    }
  }

}

void drop_chip(){
80003264:	d4 01       	pushm	lr
  if (board[drop_pos][BOARD_HEIGHT-1] == NOPLAYER){
80003266:	4a 18       	lddpc	r8,800032e8 <drop_chip+0x84>
80003268:	11 8a       	ld.ub	r10,r8[0x0]
8000326a:	f4 0a 00 19 	add	r9,r10,r10<<0x1
8000326e:	4a 08       	lddpc	r8,800032ec <drop_chip+0x88>
80003270:	f0 09 00 38 	add	r8,r8,r9<<0x3
80003274:	70 58       	ld.w	r8,r8[0x14]
80003276:	58 08       	cp.w	r8,0
80003278:	c1 11       	brne	8000329a <drop_chip+0x36>
    board[drop_pos][BOARD_HEIGHT-1] = state ? GREEN_PLAYER : BLUE_PLAYER;
8000327a:	49 e8       	lddpc	r8,800032f0 <drop_chip+0x8c>
8000327c:	11 89       	ld.ub	r9,r8[0x0]
8000327e:	30 08       	mov	r8,0
80003280:	f0 09 18 00 	cp.b	r9,r8
80003284:	f9 b8 01 02 	movne	r8,2
80003288:	f9 b8 00 01 	moveq	r8,1
8000328c:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
80003290:	49 79       	lddpc	r9,800032ec <drop_chip+0x88>
80003292:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003296:	95 58       	st.w	r10[0x14],r8
80003298:	c2 48       	rjmp	800032e0 <drop_chip+0x7c>
8000329a:	f4 0a 00 19 	add	r9,r10,r10<<0x1
8000329e:	49 48       	lddpc	r8,800032ec <drop_chip+0x88>
800032a0:	f0 09 00 38 	add	r8,r8,r9<<0x3
800032a4:	30 09       	mov	r9,0
  }else{
    for (int j=0; j<BOARD_HEIGHT; j++){
      if (board[drop_pos][j] != NOPLAYER && board[drop_pos][0]==NOPLAYER){
800032a6:	10 9c       	mov	r12,r8
800032a8:	70 0b       	ld.w	r11,r8[0x0]
800032aa:	58 0b       	cp.w	r11,0
800032ac:	c1 60       	breq	800032d8 <drop_chip+0x74>
800032ae:	78 0b       	ld.w	r11,r12[0x0]
800032b0:	58 0b       	cp.w	r11,0
800032b2:	c1 31       	brne	800032d8 <drop_chip+0x74>
        board[drop_pos][j-1] = state ? GREEN_PLAYER : BLUE_PLAYER;
800032b4:	48 f8       	lddpc	r8,800032f0 <drop_chip+0x8c>
800032b6:	11 8b       	ld.ub	r11,r8[0x0]
800032b8:	30 08       	mov	r8,0
800032ba:	f0 0b 18 00 	cp.b	r11,r8
800032be:	f9 b8 01 02 	movne	r8,2
800032c2:	f9 b8 00 01 	moveq	r8,1
800032c6:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
800032ca:	f2 0a 00 19 	add	r9,r9,r10<<0x1
800032ce:	20 19       	sub	r9,1
800032d0:	48 7a       	lddpc	r10,800032ec <drop_chip+0x88>
800032d2:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
        break;
800032d6:	c0 58       	rjmp	800032e0 <drop_chip+0x7c>

void drop_chip(){
  if (board[drop_pos][BOARD_HEIGHT-1] == NOPLAYER){
    board[drop_pos][BOARD_HEIGHT-1] = state ? GREEN_PLAYER : BLUE_PLAYER;
  }else{
    for (int j=0; j<BOARD_HEIGHT; j++){
800032d8:	2f f9       	sub	r9,-1
800032da:	2f c8       	sub	r8,-4
800032dc:	58 69       	cp.w	r9,6
800032de:	ce 51       	brne	800032a8 <drop_chip+0x44>
        board[drop_pos][j-1] = state ? GREEN_PLAYER : BLUE_PLAYER;
        break;
      }
    }
  }
  draw_game();
800032e0:	f0 1f 00 05 	mcall	800032f4 <drop_chip+0x90>
}
800032e4:	d8 02       	popm	pc
800032e6:	00 00       	add	r0,r0
800032e8:	00 00       	add	r0,r0
800032ea:	06 3d       	cp.w	sp,r3
800032ec:	00 00       	add	r0,r0
800032ee:	06 78       	tst	r8,r3
800032f0:	00 00       	add	r0,r0
800032f2:	06 3c       	cp.w	r12,r3
800032f4:	80 00       	ld.sh	r0,r0[0x0]
800032f6:	31 84       	mov	r4,24

800032f8 <take_turn>:
      delay_ms(1000);
      state = 1;
    }
  }
} // main end
void take_turn(uint8_t selected_state){
800032f8:	d4 31       	pushm	r0-r7,lr
800032fa:	18 94       	mov	r4,r12
  draw_game();
800032fc:	f0 1f 00 34 	mcall	800033cc <take_turn+0xd4>
  while(state == selected_state){
80003300:	4b 46       	lddpc	r6,800033d0 <take_turn+0xd8>
    if( btn_pressed==LEFT && drop_pos>0){
80003302:	4b 57       	lddpc	r7,800033d4 <take_turn+0xdc>
80003304:	4b 51       	lddpc	r1,800033d8 <take_turn+0xe0>
      drop_pos--;
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80003306:	30 05       	mov	r5,0
      draw_game();
    }
    if( btn_pressed==RIGHT && drop_pos<BOARD_WIDTH-1){
80003308:	30 50       	mov	r0,5
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
      draw_game();
    }
    btn_pressed=NONE;
    print_time_left();
    gpio_tgl_gpio_pin(LED0_GPIO);
8000330a:	33 b2       	mov	r2,59
    if (!counter){
8000330c:	0a 93       	mov	r3,r5
    }
  }
} // main end
void take_turn(uint8_t selected_state){
  draw_game();
  while(state == selected_state){
8000330e:	c5 38       	rjmp	800033b4 <take_turn+0xbc>
    if( btn_pressed==LEFT && drop_pos>0){
80003310:	6e 08       	ld.w	r8,r7[0x0]
80003312:	58 38       	cp.w	r8,3
80003314:	c1 11       	brne	80003336 <take_turn+0x3e>
80003316:	03 88       	ld.ub	r8,r1[0x0]
80003318:	58 08       	cp.w	r8,0
8000331a:	c0 e0       	breq	80003336 <take_turn+0x3e>
      drop_pos--;
8000331c:	20 18       	sub	r8,1
8000331e:	a2 88       	st.b	r1[0x0],r8
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80003320:	0a 98       	mov	r8,r5
80003322:	e0 69 00 f0 	mov	r9,240
80003326:	e0 6a 01 40 	mov	r10,320
8000332a:	0a 9b       	mov	r11,r5
8000332c:	0a 9c       	mov	r12,r5
8000332e:	f0 1f 00 2c 	mcall	800033dc <take_turn+0xe4>
      draw_game();
80003332:	f0 1f 00 27 	mcall	800033cc <take_turn+0xd4>
    }
    if( btn_pressed==RIGHT && drop_pos<BOARD_WIDTH-1){
80003336:	6e 08       	ld.w	r8,r7[0x0]
80003338:	58 48       	cp.w	r8,4
8000333a:	c1 31       	brne	80003360 <take_turn+0x68>
8000333c:	03 88       	ld.ub	r8,r1[0x0]
8000333e:	e0 08 18 00 	cp.b	r8,r0
80003342:	e0 8b 00 0f 	brhi	80003360 <take_turn+0x68>
      drop_pos++;
80003346:	2f f8       	sub	r8,-1
80003348:	a2 88       	st.b	r1[0x0],r8
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
8000334a:	0a 98       	mov	r8,r5
8000334c:	e0 69 00 f0 	mov	r9,240
80003350:	e0 6a 01 40 	mov	r10,320
80003354:	0a 9b       	mov	r11,r5
80003356:	0a 9c       	mov	r12,r5
80003358:	f0 1f 00 21 	mcall	800033dc <take_turn+0xe4>
      draw_game();
8000335c:	f0 1f 00 1c 	mcall	800033cc <take_turn+0xd4>
    }
    btn_pressed=NONE;
80003360:	8f 05       	st.w	r7[0x0],r5
    print_time_left();
80003362:	f0 1f 00 20 	mcall	800033e0 <take_turn+0xe8>
    gpio_tgl_gpio_pin(LED0_GPIO);
80003366:	04 9c       	mov	r12,r2
80003368:	f0 1f 00 1f 	mcall	800033e4 <take_turn+0xec>
    if (!counter){
8000336c:	49 f8       	lddpc	r8,800033e8 <take_turn+0xf0>
8000336e:	11 88       	ld.ub	r8,r8[0x0]
80003370:	e6 08 18 00 	cp.b	r8,r3
80003374:	c2 01       	brne	800033b4 <take_turn+0xbc>
      drop_pos = rand()%BOARD_WIDTH;
80003376:	f0 1f 00 1e 	mcall	800033ec <take_turn+0xf4>
8000337a:	e0 69 24 93 	mov	r9,9363
8000337e:	ea 19 92 49 	orh	r9,0x9249
80003382:	f8 09 04 48 	muls.d	r8,r12,r9
80003386:	f8 09 00 08 	add	r8,r12,r9
8000338a:	a3 48       	asr	r8,0x2
8000338c:	f8 09 14 1f 	asr	r9,r12,0x1f
80003390:	12 18       	sub	r8,r9
80003392:	f0 09 15 03 	lsl	r9,r8,0x3
80003396:	f2 08 01 08 	sub	r8,r9,r8
8000339a:	49 09       	lddpc	r9,800033d8 <take_turn+0xe0>
8000339c:	f8 08 01 08 	sub	r8,r12,r8
800033a0:	b2 88       	st.b	r9[0x0],r8
      state = (state+1)%state_num;
800033a2:	48 c8       	lddpc	r8,800033d0 <take_turn+0xd8>
800033a4:	11 8b       	ld.ub	r11,r8[0x0]
800033a6:	2f fb       	sub	r11,-1
800033a8:	49 29       	lddpc	r9,800033f0 <take_turn+0xf8>
800033aa:	13 89       	ld.ub	r9,r9[0x0]
800033ac:	f6 09 0c 0a 	divs	r10,r11,r9
800033b0:	b0 8b       	st.b	r8[0x0],r11
      break;
800033b2:	c0 58       	rjmp	800033bc <take_turn+0xc4>
    }
  }
} // main end
void take_turn(uint8_t selected_state){
  draw_game();
  while(state == selected_state){
800033b4:	0d 88       	ld.ub	r8,r6[0x0]
800033b6:	e8 08 18 00 	cp.b	r8,r4
800033ba:	ca b0       	breq	80003310 <take_turn+0x18>
      drop_pos = rand()%BOARD_WIDTH;
      state = (state+1)%state_num;
      break;
    }
  }
  drop_chip();
800033bc:	f0 1f 00 0e 	mcall	800033f4 <take_turn+0xfc>
  winner();
800033c0:	f0 1f 00 0e 	mcall	800033f8 <take_turn+0x100>
  btn_pressed=NONE;
800033c4:	30 09       	mov	r9,0
800033c6:	48 48       	lddpc	r8,800033d4 <take_turn+0xdc>
800033c8:	91 09       	st.w	r8[0x0],r9
}
800033ca:	d8 32       	popm	r0-r7,pc
800033cc:	80 00       	ld.sh	r0,r0[0x0]
800033ce:	31 84       	mov	r4,24
800033d0:	00 00       	add	r0,r0
800033d2:	06 3c       	cp.w	r12,r3
800033d4:	00 00       	add	r0,r0
800033d6:	06 38       	cp.w	r8,r3
800033d8:	00 00       	add	r0,r0
800033da:	06 3d       	cp.w	sp,r3
800033dc:	80 00       	ld.sh	r0,r0[0x0]
800033de:	20 c0       	sub	r0,12
800033e0:	80 00       	ld.sh	r0,r0[0x0]
800033e2:	31 58       	mov	r8,21
800033e4:	80 00       	ld.sh	r0,r0[0x0]
800033e6:	29 8e       	sub	lr,-104
800033e8:	00 00       	add	r0,r0
800033ea:	00 0c       	add	r12,r0
800033ec:	80 00       	ld.sh	r0,r0[0x0]
800033ee:	3a b0       	mov	r0,-85
800033f0:	00 00       	add	r0,r0
800033f2:	00 30       	cp.w	r0,r0
800033f4:	80 00       	ld.sh	r0,r0[0x0]
800033f6:	32 64       	mov	r4,38
800033f8:	80 00       	ld.sh	r0,r0[0x0]
800033fa:	2f 14       	sub	r4,-15

800033fc <main>:
void take_turn(uint8_t selected_state);
// Main function


int main(void)
{
800033fc:	d4 31       	pushm	r0-r7,lr
800033fe:	20 7d       	sub	sp,28
		  .cpas  = 0,
		  .lovrs = 0,
		  .covfs = 0
	  };//Interrupcion timer
  // Set CPU and PBA clock
  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80003400:	30 3a       	mov	r10,3
80003402:	e0 6b 1b 00 	mov	r11,6912
80003406:	ea 1b 00 b7 	orh	r11,0xb7
8000340a:	30 0c       	mov	r12,0
8000340c:	f0 1f 00 9b 	mcall	80003678 <main+0x27c>
  gpio_enable_gpio_pin(LED0_GPIO);
80003410:	33 bc       	mov	r12,59
80003412:	f0 1f 00 9b 	mcall	8000367c <main+0x280>
  gpio_enable_gpio_pin(LED1_GPIO);
80003416:	33 cc       	mov	r12,60
80003418:	f0 1f 00 99 	mcall	8000367c <main+0x280>
  gpio_enable_gpio_pin(LED2_GPIO);
8000341c:	30 5c       	mov	r12,5
8000341e:	f0 1f 00 98 	mcall	8000367c <main+0x280>
  gpio_enable_gpio_pin(LED3_GPIO);
80003422:	30 6c       	mov	r12,6
80003424:	f0 1f 00 96 	mcall	8000367c <main+0x280>
  et024006_Init( FOSC0, FOSC0 );
80003428:	e0 6b 1b 00 	mov	r11,6912
8000342c:	ea 1b 00 b7 	orh	r11,0xb7
80003430:	16 9c       	mov	r12,r11
80003432:	f0 1f 00 94 	mcall	80003680 <main+0x284>
	Disable_global_interrupt();
80003436:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80003438:	f0 1f 00 93 	mcall	80003684 <main+0x288>
	INTC_register_interrupt(&buttons_interrupt_routine, 70, 3);
8000343c:	fe f7 02 4c 	ld.w	r7,pc[588]
80003440:	30 3a       	mov	r10,3
80003442:	34 6b       	mov	r11,70
80003444:	0e 9c       	mov	r12,r7
80003446:	f0 1f 00 92 	mcall	8000368c <main+0x290>
	INTC_register_interrupt(&buttons_interrupt_routine, 71, 3);
8000344a:	30 3a       	mov	r10,3
8000344c:	34 7b       	mov	r11,71
8000344e:	0e 9c       	mov	r12,r7
80003450:	f0 1f 00 8f 	mcall	8000368c <main+0x290>
  INTC_register_interrupt(&timer, AVR32_TC_IRQ0, AVR32_INTC_INT0); //Timer
80003454:	30 0a       	mov	r10,0
80003456:	e0 6b 01 c0 	mov	r11,448
8000345a:	fe fc 02 36 	ld.w	r12,pc[566]
8000345e:	f0 1f 00 8c 	mcall	8000368c <main+0x290>
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
80003462:	fa c7 ff ee 	sub	r7,sp,-18
80003466:	30 aa       	mov	r10,10
80003468:	fe fb 02 2c 	ld.w	r11,pc[556]
8000346c:	0e 9c       	mov	r12,r7
8000346e:	f0 1f 00 8b 	mcall	80003698 <main+0x29c>
  tc_init_waveform(&AVR32_TC, &WAVEFORM_OPT);
80003472:	fe fb 02 2a 	ld.w	r11,pc[554]
80003476:	fe 7c 38 00 	mov	r12,-51200
8000347a:	f0 1f 00 8a 	mcall	800036a0 <main+0x2a4>
	tc_write_rc(&AVR32_TC, 0, 15000);//15000 - 10ms
8000347e:	e0 6a 3a 98 	mov	r10,15000
80003482:	30 0b       	mov	r11,0
80003484:	fe 7c 38 00 	mov	r12,-51200
80003488:	f0 1f 00 87 	mcall	800036a4 <main+0x2a8>
	tc_configure_interrupts(&AVR32_TC, 0, &TC_INTERRUPT);
8000348c:	fe fa 02 1c 	ld.w	r10,pc[540]
80003490:	30 0b       	mov	r11,0
80003492:	fe 7c 38 00 	mov	r12,-51200
80003496:	f0 1f 00 86 	mcall	800036ac <main+0x2b0>
	   tc_start(&AVR32_TC, 0);
8000349a:	30 0b       	mov	r11,0
8000349c:	fe 7c 38 00 	mov	r12,-51200
800034a0:	f0 1f 00 84 	mcall	800036b0 <main+0x2b4>
void print_time_left();
void take_turn(uint8_t selected_state);
// Main function


int main(void)
800034a4:	fa c5 ff e4 	sub	r5,sp,-28
	tc_configure_interrupts(&AVR32_TC, 0, &TC_INTERRUPT);
	   tc_start(&AVR32_TC, 0);
	for(uint8_t i=0; i<5; i++){
		gpio_enable_gpio_pin(button_ref[i]);
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
800034a8:	30 24       	mov	r4,2
  tc_init_waveform(&AVR32_TC, &WAVEFORM_OPT);
	tc_write_rc(&AVR32_TC, 0, 15000);//15000 - 10ms
	tc_configure_interrupts(&AVR32_TC, 0, &TC_INTERRUPT);
	   tc_start(&AVR32_TC, 0);
	for(uint8_t i=0; i<5; i++){
		gpio_enable_gpio_pin(button_ref[i]);
800034aa:	0f 26       	ld.uh	r6,r7++
800034ac:	0c 9c       	mov	r12,r6
800034ae:	f0 1f 00 74 	mcall	8000367c <main+0x280>
		gpio_enable_pin_pull_up(button_ref[i]);
800034b2:	0c 9c       	mov	r12,r6
800034b4:	f0 1f 00 80 	mcall	800036b4 <main+0x2b8>
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
800034b8:	08 9b       	mov	r11,r4
800034ba:	0c 9c       	mov	r12,r6
800034bc:	f0 1f 00 7f 	mcall	800036b8 <main+0x2bc>
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
  tc_init_waveform(&AVR32_TC, &WAVEFORM_OPT);
	tc_write_rc(&AVR32_TC, 0, 15000);//15000 - 10ms
	tc_configure_interrupts(&AVR32_TC, 0, &TC_INTERRUPT);
	   tc_start(&AVR32_TC, 0);
	for(uint8_t i=0; i<5; i++){
800034c0:	0a 37       	cp.w	r7,r5
800034c2:	cf 41       	brne	800034aa <main+0xae>
		gpio_enable_gpio_pin(button_ref[i]);
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
	}
	Enable_global_interrupt();
800034c4:	d5 03       	csrf	0x10
  pwm_opt_t opt = {
    .diva = 0,
    .divb = 0,
    .prea = 0,
    .preb = 0
  };
800034c6:	30 08       	mov	r8,0
800034c8:	50 08       	stdsp	sp[0x0],r8
800034ca:	50 18       	stdsp	sp[0x4],r8
800034cc:	50 28       	stdsp	sp[0x8],r8
800034ce:	50 38       	stdsp	sp[0xc],r8
  pwm_init(&opt);
800034d0:	1a 9c       	mov	r12,sp
800034d2:	f0 1f 00 7b 	mcall	800036bc <main+0x2c0>
  pwm_channel6.CMR.calg = PWM_MODE_LEFT_ALIGNED;
800034d6:	4f bb       	lddpc	r11,800036c0 <main+0x2c4>
800034d8:	76 08       	ld.w	r8,r11[0x0]
  pwm_channel6.CMR.cpol = PWM_POLARITY_HIGH; //PWM_POLARITY_LOW;//PWM_POLARITY_HIGH;
  pwm_channel6.CMR.cpd = PWM_UPDATE_DUTY;
800034da:	e0 18 f8 ff 	andl	r8,0xf8ff
  pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
800034de:	a9 b8       	sbr	r8,0x9
800034e0:	30 19       	mov	r9,1
800034e2:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800034e6:	97 08       	st.w	r11[0x0],r8
  pwm_channel_init(6, &pwm_channel6);
800034e8:	30 6c       	mov	r12,6
800034ea:	f0 1f 00 77 	mcall	800036c4 <main+0x2c8>
  pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
800034ee:	34 0c       	mov	r12,64
800034f0:	f0 1f 00 76 	mcall	800036c8 <main+0x2cc>
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
	}
	Enable_global_interrupt();
  tft_bl_init();
  while(pwm_channel6.cdty < pwm_channel6.cprd)
800034f4:	4f 37       	lddpc	r7,800036c0 <main+0x2c4>
  {
    pwm_channel6.cdty++;
    pwm_channel6.cupd = pwm_channel6.cdty;
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
800034f6:	30 66       	mov	r6,6
800034f8:	c1 c8       	rjmp	80003530 <main+0x134>
	}
	Enable_global_interrupt();
  tft_bl_init();
  while(pwm_channel6.cdty < pwm_channel6.cprd)
  {
    pwm_channel6.cdty++;
800034fa:	2f f8       	sub	r8,-1
800034fc:	8f 18       	st.w	r7[0x4],r8
    pwm_channel6.cupd = pwm_channel6.cdty;
800034fe:	8f 48       	st.w	r7[0x10],r8
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
80003500:	0e 9b       	mov	r11,r7
80003502:	0c 9c       	mov	r12,r6
80003504:	f0 1f 00 72 	mcall	800036cc <main+0x2d0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003508:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000350c:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003510:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003514:	14 38       	cp.w	r8,r10
80003516:	e0 88 00 08 	brls	80003526 <main+0x12a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000351a:	12 38       	cp.w	r8,r9
8000351c:	fe 98 ff fa 	brls	80003510 <main+0x114>
80003520:	12 3a       	cp.w	r10,r9
80003522:	c0 73       	brcs	80003530 <main+0x134>
80003524:	cf 6b       	rjmp	80003510 <main+0x114>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003526:	12 38       	cp.w	r8,r9
80003528:	e0 8b 00 04 	brhi	80003530 <main+0x134>
8000352c:	12 3a       	cp.w	r10,r9
8000352e:	cf 12       	brcc	80003510 <main+0x114>
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
	}
	Enable_global_interrupt();
  tft_bl_init();
  while(pwm_channel6.cdty < pwm_channel6.cprd)
80003530:	6e 18       	ld.w	r8,r7[0x4]
80003532:	6e 29       	ld.w	r9,r7[0x8]
80003534:	12 38       	cp.w	r8,r9
80003536:	ce 23       	brcs	800034fa <main+0xfe>
    //pwm_channel6.cdty--;
    pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
    delay_ms(1);
  }
  // Clear the display i.e. make it black
  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80003538:	30 08       	mov	r8,0
8000353a:	e0 69 00 f0 	mov	r9,240
8000353e:	e0 6a 01 40 	mov	r10,320
80003542:	10 9b       	mov	r11,r8
80003544:	10 9c       	mov	r12,r8
80003546:	f0 1f 00 63 	mcall	800036d0 <main+0x2d4>
  et024006_DrawFilledCircle(drop_pos*34 + 17, 17, 15, 0xFFFF, 0b11111111);
8000354a:	4e 38       	lddpc	r8,800036d4 <main+0x2d8>
8000354c:	11 8c       	ld.ub	r12,r8[0x0]
8000354e:	f8 0c 10 22 	mul	r12,r12,34
80003552:	2e fc       	sub	r12,-17
80003554:	e0 68 00 ff 	mov	r8,255
80003558:	e0 69 ff ff 	mov	r9,65535
8000355c:	30 fa       	mov	r10,15
8000355e:	31 1b       	mov	r11,17
80003560:	5c 7c       	castu.h	r12
80003562:	f0 1f 00 5e 	mcall	800036d8 <main+0x2dc>
    rst_board();
    if (delay_time>10000){
      delay_time -= 5000;
    }
    tc_write_rc(&AVR32_TC, 0, delay_time);//15000 - 10ms
    win = 0;
80003566:	30 06       	mov	r6,0
    while(!win){
      counter = 100;
80003568:	4d d2       	lddpc	r2,800036dc <main+0x2e0>
8000356a:	36 45       	mov	r5,100
      switch(state){
8000356c:	4d d7       	lddpc	r7,800036e0 <main+0x2e4>
  }
  // Clear the display i.e. make it black
  et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
  et024006_DrawFilledCircle(drop_pos*34 + 17, 17, 15, 0xFFFF, 0b11111111);
  while(1){
    rst_board();
8000356e:	f0 1f 00 5e 	mcall	800036e4 <main+0x2e8>
    if (delay_time>10000){
80003572:	4d e9       	lddpc	r9,800036e8 <main+0x2ec>
80003574:	72 08       	ld.w	r8,r9[0x0]
80003576:	e0 48 27 10 	cp.w	r8,10000
8000357a:	e0 8a 00 05 	brle	80003584 <main+0x188>
      delay_time -= 5000;
8000357e:	f0 c8 13 88 	sub	r8,r8,5000
80003582:	93 08       	st.w	r9[0x0],r8
    }
    tc_write_rc(&AVR32_TC, 0, delay_time);//15000 - 10ms
80003584:	4d 98       	lddpc	r8,800036e8 <main+0x2ec>
80003586:	90 9a       	ld.uh	r10,r8[0x2]
80003588:	30 0b       	mov	r11,0
8000358a:	fe 7c 38 00 	mov	r12,-51200
8000358e:	f0 1f 00 46 	mcall	800036a4 <main+0x2a8>
    win = 0;
80003592:	4d 78       	lddpc	r8,800036ec <main+0x2f0>
80003594:	b0 86       	st.b	r8[0x0],r6
    while(!win){
      counter = 100;
      switch(state){
        case 0:
          take_turn(0);
80003596:	30 01       	mov	r1,0
    }
    tc_write_rc(&AVR32_TC, 0, delay_time);//15000 - 10ms
    win = 0;
    while(!win){
      counter = 100;
      switch(state){
80003598:	30 13       	mov	r3,1
          break;
        case 1:
        take_turn(1);
        break;
        default:
        state = (state + 1) % state_num;
8000359a:	4d 60       	lddpc	r0,800036f0 <main+0x2f4>
    if (delay_time>10000){
      delay_time -= 5000;
    }
    tc_write_rc(&AVR32_TC, 0, delay_time);//15000 - 10ms
    win = 0;
    while(!win){
8000359c:	10 94       	mov	r4,r8
      counter = 100;
8000359e:	a4 85       	st.b	r2[0x0],r5
      switch(state){
800035a0:	0f 88       	ld.ub	r8,r7[0x0]
800035a2:	ec 08 18 00 	cp.b	r8,r6
800035a6:	c0 50       	breq	800035b0 <main+0x1b4>
800035a8:	e6 08 18 00 	cp.b	r8,r3
800035ac:	c0 a1       	brne	800035c0 <main+0x1c4>
800035ae:	c0 58       	rjmp	800035b8 <main+0x1bc>
        case 0:
          take_turn(0);
800035b0:	02 9c       	mov	r12,r1
800035b2:	f0 1f 00 51 	mcall	800036f4 <main+0x2f8>
          break;
800035b6:	c0 a8       	rjmp	800035ca <main+0x1ce>
        case 1:
        take_turn(1);
800035b8:	30 1c       	mov	r12,1
800035ba:	f0 1f 00 4f 	mcall	800036f4 <main+0x2f8>
        break;
800035be:	c0 68       	rjmp	800035ca <main+0x1ce>
        default:
        state = (state + 1) % state_num;
800035c0:	2f f8       	sub	r8,-1
800035c2:	01 89       	ld.ub	r9,r0[0x0]
800035c4:	f0 09 0c 08 	divs	r8,r8,r9
800035c8:	ae 89       	st.b	r7[0x0],r9
    if (delay_time>10000){
      delay_time -= 5000;
    }
    tc_write_rc(&AVR32_TC, 0, delay_time);//15000 - 10ms
    win = 0;
    while(!win){
800035ca:	09 88       	ld.ub	r8,r4[0x0]
800035cc:	58 08       	cp.w	r8,0
800035ce:	ce 80       	breq	8000359e <main+0x1a2>
        break;
        default:
        state = (state + 1) % state_num;
      }
    };
    if (win == 1){
800035d0:	30 19       	mov	r9,1
800035d2:	f2 08 18 00 	cp.b	r8,r9
800035d6:	c2 31       	brne	8000361c <main+0x220>
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLUE );
800035d8:	31 f8       	mov	r8,31
800035da:	e0 69 00 f0 	mov	r9,240
800035de:	e0 6a 01 40 	mov	r10,320
800035e2:	30 0b       	mov	r11,0
800035e4:	16 9c       	mov	r12,r11
800035e6:	f0 1f 00 3b 	mcall	800036d0 <main+0x2d4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800035ea:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800035ee:	e0 6a 1b 00 	mov	r10,6912
800035f2:	ea 1a 00 b7 	orh	r10,0xb7
800035f6:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035fa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035fe:	14 38       	cp.w	r8,r10
80003600:	e0 88 00 08 	brls	80003610 <main+0x214>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003604:	12 38       	cp.w	r8,r9
80003606:	fe 98 ff fa 	brls	800035fa <main+0x1fe>
8000360a:	12 3a       	cp.w	r10,r9
8000360c:	c3 13       	brcs	8000366e <main+0x272>
8000360e:	cf 6b       	rjmp	800035fa <main+0x1fe>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003610:	12 38       	cp.w	r8,r9
80003612:	e0 8b 00 2e 	brhi	8000366e <main+0x272>
80003616:	12 3a       	cp.w	r10,r9
80003618:	c2 b3       	brcs	8000366e <main+0x272>
8000361a:	cf 0b       	rjmp	800035fa <main+0x1fe>
      delay_ms(1000);
      state = 0;
    }
    if(win == 2){
8000361c:	4b 48       	lddpc	r8,800036ec <main+0x2f0>
8000361e:	11 89       	ld.ub	r9,r8[0x0]
80003620:	30 28       	mov	r8,2
80003622:	f0 09 18 00 	cp.b	r9,r8
80003626:	ca 41       	brne	8000356e <main+0x172>
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, GREEN );
80003628:	e0 68 07 e0 	mov	r8,2016
8000362c:	e0 69 00 f0 	mov	r9,240
80003630:	e0 6a 01 40 	mov	r10,320
80003634:	30 0b       	mov	r11,0
80003636:	16 9c       	mov	r12,r11
80003638:	f0 1f 00 26 	mcall	800036d0 <main+0x2d4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000363c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003640:	e0 6a 1b 00 	mov	r10,6912
80003644:	ea 1a 00 b7 	orh	r10,0xb7
80003648:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000364c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003650:	14 38       	cp.w	r8,r10
80003652:	e0 88 00 08 	brls	80003662 <main+0x266>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003656:	12 38       	cp.w	r8,r9
80003658:	fe 98 ff fa 	brls	8000364c <main+0x250>
8000365c:	12 3a       	cp.w	r10,r9
8000365e:	c0 a3       	brcs	80003672 <main+0x276>
80003660:	cf 6b       	rjmp	8000364c <main+0x250>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003662:	12 38       	cp.w	r8,r9
80003664:	e0 8b 00 07 	brhi	80003672 <main+0x276>
80003668:	12 3a       	cp.w	r10,r9
8000366a:	c0 43       	brcs	80003672 <main+0x276>
8000366c:	cf 0b       	rjmp	8000364c <main+0x250>
      }
    };
    if (win == 1){
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLUE );
      delay_ms(1000);
      state = 0;
8000366e:	ae 86       	st.b	r7[0x0],r6
80003670:	cd 6b       	rjmp	8000361c <main+0x220>
    }
    if(win == 2){
      et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, GREEN );
      delay_ms(1000);
      state = 1;
80003672:	30 18       	mov	r8,1
80003674:	ae 88       	st.b	r7[0x0],r8
80003676:	c7 cb       	rjmp	8000356e <main+0x172>
80003678:	80 00       	ld.sh	r0,r0[0x0]
8000367a:	2b e4       	sub	r4,-66
8000367c:	80 00       	ld.sh	r0,r0[0x0]
8000367e:	29 28       	sub	r8,-110
80003680:	80 00       	ld.sh	r0,r0[0x0]
80003682:	22 e4       	sub	r4,46
80003684:	80 00       	ld.sh	r0,r0[0x0]
80003686:	2a a0       	sub	r0,-86
80003688:	80 00       	ld.sh	r0,r0[0x0]
8000368a:	30 bc       	mov	r12,11
8000368c:	80 00       	ld.sh	r0,r0[0x0]
8000368e:	2a 20       	sub	r0,-94
80003690:	80 00       	ld.sh	r0,r0[0x0]
80003692:	30 94       	mov	r4,9
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	45 4c       	lddsp	r12,sp[0x150]
80003698:	80 00       	ld.sh	r0,r0[0x0]
8000369a:	39 68       	mov	r8,-106
8000369c:	80 00       	ld.sh	r0,r0[0x0]
8000369e:	45 40       	lddsp	r0,sp[0x150]
800036a0:	80 00       	ld.sh	r0,r0[0x0]
800036a2:	2c b6       	sub	r6,-53
800036a4:	80 00       	ld.sh	r0,r0[0x0]
800036a6:	2d 76       	sub	r6,-41
800036a8:	80 00       	ld.sh	r0,r0[0x0]
800036aa:	45 48       	lddsp	r8,sp[0x150]
800036ac:	80 00       	ld.sh	r0,r0[0x0]
800036ae:	2d aa       	sub	r10,-38
800036b0:	80 00       	ld.sh	r0,r0[0x0]
800036b2:	2d 52       	sub	r2,-43
800036b4:	80 00       	ld.sh	r0,r0[0x0]
800036b6:	29 40       	sub	r0,-108
800036b8:	80 00       	ld.sh	r0,r0[0x0]
800036ba:	29 aa       	sub	r10,-102
800036bc:	80 00       	ld.sh	r0,r0[0x0]
800036be:	2c 70       	sub	r0,-57
800036c0:	00 00       	add	r0,r0
800036c2:	00 10       	sub	r0,r0
800036c4:	80 00       	ld.sh	r0,r0[0x0]
800036c6:	2c 00       	sub	r0,-64
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	2c 36       	sub	r6,-61
800036cc:	80 00       	ld.sh	r0,r0[0x0]
800036ce:	2c 48       	sub	r8,-60
800036d0:	80 00       	ld.sh	r0,r0[0x0]
800036d2:	20 c0       	sub	r0,12
800036d4:	00 00       	add	r0,r0
800036d6:	06 3d       	cp.w	sp,r3
800036d8:	80 00       	ld.sh	r0,r0[0x0]
800036da:	21 1c       	sub	r12,17
800036dc:	00 00       	add	r0,r0
800036de:	00 0c       	add	r12,r0
800036e0:	00 00       	add	r0,r0
800036e2:	06 3c       	cp.w	r12,r3
800036e4:	80 00       	ld.sh	r0,r0[0x0]
800036e6:	2e f4       	sub	r4,-17
800036e8:	00 00       	add	r0,r0
800036ea:	00 08       	add	r8,r0
800036ec:	00 00       	add	r0,r0
800036ee:	06 34       	cp.w	r4,r3
800036f0:	00 00       	add	r0,r0
800036f2:	00 30       	cp.w	r0,r0
800036f4:	80 00       	ld.sh	r0,r0[0x0]
800036f6:	32 f8       	mov	r8,47

800036f8 <__avr32_udiv64>:
800036f8:	d4 31       	pushm	r0-r7,lr
800036fa:	1a 97       	mov	r7,sp
800036fc:	20 3d       	sub	sp,12
800036fe:	10 9c       	mov	r12,r8
80003700:	12 9e       	mov	lr,r9
80003702:	14 93       	mov	r3,r10
80003704:	58 09       	cp.w	r9,0
80003706:	e0 81 00 bd 	brne	80003880 <__avr32_udiv64+0x188>
8000370a:	16 38       	cp.w	r8,r11
8000370c:	e0 88 00 40 	brls	8000378c <__avr32_udiv64+0x94>
80003710:	f0 08 12 00 	clz	r8,r8
80003714:	c0 d0       	breq	8000372e <__avr32_udiv64+0x36>
80003716:	f6 08 09 4b 	lsl	r11,r11,r8
8000371a:	f0 09 11 20 	rsub	r9,r8,32
8000371e:	f8 08 09 4c 	lsl	r12,r12,r8
80003722:	f4 09 0a 49 	lsr	r9,r10,r9
80003726:	f4 08 09 43 	lsl	r3,r10,r8
8000372a:	f3 eb 10 0b 	or	r11,r9,r11
8000372e:	f8 0e 16 10 	lsr	lr,r12,0x10
80003732:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003736:	f6 0e 0d 00 	divu	r0,r11,lr
8000373a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000373e:	00 99       	mov	r9,r0
80003740:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003744:	e0 0a 02 48 	mul	r8,r0,r10
80003748:	10 3b       	cp.w	r11,r8
8000374a:	c0 a2       	brcc	8000375e <__avr32_udiv64+0x66>
8000374c:	20 19       	sub	r9,1
8000374e:	18 0b       	add	r11,r12
80003750:	18 3b       	cp.w	r11,r12
80003752:	c0 63       	brcs	8000375e <__avr32_udiv64+0x66>
80003754:	10 3b       	cp.w	r11,r8
80003756:	f7 b9 03 01 	sublo	r9,1
8000375a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000375e:	f6 08 01 01 	sub	r1,r11,r8
80003762:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003766:	e2 0e 0d 00 	divu	r0,r1,lr
8000376a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000376e:	00 98       	mov	r8,r0
80003770:	e0 0a 02 4a 	mul	r10,r0,r10
80003774:	14 33       	cp.w	r3,r10
80003776:	c0 82       	brcc	80003786 <__avr32_udiv64+0x8e>
80003778:	20 18       	sub	r8,1
8000377a:	18 03       	add	r3,r12
8000377c:	18 33       	cp.w	r3,r12
8000377e:	c0 43       	brcs	80003786 <__avr32_udiv64+0x8e>
80003780:	14 33       	cp.w	r3,r10
80003782:	f7 b8 03 01 	sublo	r8,1
80003786:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000378a:	cd f8       	rjmp	80003948 <__avr32_udiv64+0x250>
8000378c:	58 08       	cp.w	r8,0
8000378e:	c0 51       	brne	80003798 <__avr32_udiv64+0xa0>
80003790:	30 19       	mov	r9,1
80003792:	f2 08 0d 08 	divu	r8,r9,r8
80003796:	10 9c       	mov	r12,r8
80003798:	f8 06 12 00 	clz	r6,r12
8000379c:	c0 41       	brne	800037a4 <__avr32_udiv64+0xac>
8000379e:	18 1b       	sub	r11,r12
800037a0:	30 19       	mov	r9,1
800037a2:	c4 08       	rjmp	80003822 <__avr32_udiv64+0x12a>
800037a4:	ec 01 11 20 	rsub	r1,r6,32
800037a8:	f4 01 0a 49 	lsr	r9,r10,r1
800037ac:	f8 06 09 4c 	lsl	r12,r12,r6
800037b0:	f6 06 09 48 	lsl	r8,r11,r6
800037b4:	f6 01 0a 41 	lsr	r1,r11,r1
800037b8:	f3 e8 10 08 	or	r8,r9,r8
800037bc:	f8 03 16 10 	lsr	r3,r12,0x10
800037c0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800037c4:	e2 03 0d 00 	divu	r0,r1,r3
800037c8:	f0 0b 16 10 	lsr	r11,r8,0x10
800037cc:	00 9e       	mov	lr,r0
800037ce:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800037d2:	e0 05 02 49 	mul	r9,r0,r5
800037d6:	12 3b       	cp.w	r11,r9
800037d8:	c0 a2       	brcc	800037ec <__avr32_udiv64+0xf4>
800037da:	20 1e       	sub	lr,1
800037dc:	18 0b       	add	r11,r12
800037de:	18 3b       	cp.w	r11,r12
800037e0:	c0 63       	brcs	800037ec <__avr32_udiv64+0xf4>
800037e2:	12 3b       	cp.w	r11,r9
800037e4:	f7 be 03 01 	sublo	lr,1
800037e8:	f7 dc e3 0b 	addcs	r11,r11,r12
800037ec:	12 1b       	sub	r11,r9
800037ee:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800037f2:	f6 03 0d 02 	divu	r2,r11,r3
800037f6:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800037fa:	04 99       	mov	r9,r2
800037fc:	e4 05 02 4b 	mul	r11,r2,r5
80003800:	16 38       	cp.w	r8,r11
80003802:	c0 a2       	brcc	80003816 <__avr32_udiv64+0x11e>
80003804:	20 19       	sub	r9,1
80003806:	18 08       	add	r8,r12
80003808:	18 38       	cp.w	r8,r12
8000380a:	c0 63       	brcs	80003816 <__avr32_udiv64+0x11e>
8000380c:	16 38       	cp.w	r8,r11
8000380e:	f7 b9 03 01 	sublo	r9,1
80003812:	f1 dc e3 08 	addcs	r8,r8,r12
80003816:	f4 06 09 43 	lsl	r3,r10,r6
8000381a:	f0 0b 01 0b 	sub	r11,r8,r11
8000381e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80003822:	f8 06 16 10 	lsr	r6,r12,0x10
80003826:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000382a:	f6 06 0d 00 	divu	r0,r11,r6
8000382e:	e6 0b 16 10 	lsr	r11,r3,0x10
80003832:	00 9a       	mov	r10,r0
80003834:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003838:	e0 0e 02 48 	mul	r8,r0,lr
8000383c:	10 3b       	cp.w	r11,r8
8000383e:	c0 a2       	brcc	80003852 <__avr32_udiv64+0x15a>
80003840:	20 1a       	sub	r10,1
80003842:	18 0b       	add	r11,r12
80003844:	18 3b       	cp.w	r11,r12
80003846:	c0 63       	brcs	80003852 <__avr32_udiv64+0x15a>
80003848:	10 3b       	cp.w	r11,r8
8000384a:	f7 ba 03 01 	sublo	r10,1
8000384e:	f7 dc e3 0b 	addcs	r11,r11,r12
80003852:	f6 08 01 01 	sub	r1,r11,r8
80003856:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000385a:	e2 06 0d 00 	divu	r0,r1,r6
8000385e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003862:	00 98       	mov	r8,r0
80003864:	e0 0e 02 4b 	mul	r11,r0,lr
80003868:	16 33       	cp.w	r3,r11
8000386a:	c0 82       	brcc	8000387a <__avr32_udiv64+0x182>
8000386c:	20 18       	sub	r8,1
8000386e:	18 03       	add	r3,r12
80003870:	18 33       	cp.w	r3,r12
80003872:	c0 43       	brcs	8000387a <__avr32_udiv64+0x182>
80003874:	16 33       	cp.w	r3,r11
80003876:	f7 b8 03 01 	sublo	r8,1
8000387a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000387e:	c6 98       	rjmp	80003950 <__avr32_udiv64+0x258>
80003880:	16 39       	cp.w	r9,r11
80003882:	e0 8b 00 65 	brhi	8000394c <__avr32_udiv64+0x254>
80003886:	f2 09 12 00 	clz	r9,r9
8000388a:	c0 b1       	brne	800038a0 <__avr32_udiv64+0x1a8>
8000388c:	10 3a       	cp.w	r10,r8
8000388e:	5f 2a       	srhs	r10
80003890:	1c 3b       	cp.w	r11,lr
80003892:	5f b8       	srhi	r8
80003894:	10 4a       	or	r10,r8
80003896:	f2 0a 18 00 	cp.b	r10,r9
8000389a:	c5 90       	breq	8000394c <__avr32_udiv64+0x254>
8000389c:	30 18       	mov	r8,1
8000389e:	c5 98       	rjmp	80003950 <__avr32_udiv64+0x258>
800038a0:	f0 09 09 46 	lsl	r6,r8,r9
800038a4:	f2 03 11 20 	rsub	r3,r9,32
800038a8:	fc 09 09 4e 	lsl	lr,lr,r9
800038ac:	f0 03 0a 48 	lsr	r8,r8,r3
800038b0:	f6 09 09 4c 	lsl	r12,r11,r9
800038b4:	f4 03 0a 42 	lsr	r2,r10,r3
800038b8:	ef 46 ff f4 	st.w	r7[-12],r6
800038bc:	f6 03 0a 43 	lsr	r3,r11,r3
800038c0:	18 42       	or	r2,r12
800038c2:	f1 ee 10 0c 	or	r12,r8,lr
800038c6:	f8 01 16 10 	lsr	r1,r12,0x10
800038ca:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800038ce:	e6 01 0d 04 	divu	r4,r3,r1
800038d2:	e4 03 16 10 	lsr	r3,r2,0x10
800038d6:	08 9e       	mov	lr,r4
800038d8:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800038dc:	e8 06 02 48 	mul	r8,r4,r6
800038e0:	10 33       	cp.w	r3,r8
800038e2:	c0 a2       	brcc	800038f6 <__avr32_udiv64+0x1fe>
800038e4:	20 1e       	sub	lr,1
800038e6:	18 03       	add	r3,r12
800038e8:	18 33       	cp.w	r3,r12
800038ea:	c0 63       	brcs	800038f6 <__avr32_udiv64+0x1fe>
800038ec:	10 33       	cp.w	r3,r8
800038ee:	f7 be 03 01 	sublo	lr,1
800038f2:	e7 dc e3 03 	addcs	r3,r3,r12
800038f6:	10 13       	sub	r3,r8
800038f8:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800038fc:	e6 01 0d 00 	divu	r0,r3,r1
80003900:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003904:	00 98       	mov	r8,r0
80003906:	e0 06 02 46 	mul	r6,r0,r6
8000390a:	0c 3b       	cp.w	r11,r6
8000390c:	c0 a2       	brcc	80003920 <__avr32_udiv64+0x228>
8000390e:	20 18       	sub	r8,1
80003910:	18 0b       	add	r11,r12
80003912:	18 3b       	cp.w	r11,r12
80003914:	c0 63       	brcs	80003920 <__avr32_udiv64+0x228>
80003916:	0c 3b       	cp.w	r11,r6
80003918:	f7 dc e3 0b 	addcs	r11,r11,r12
8000391c:	f7 b8 03 01 	sublo	r8,1
80003920:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003924:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003928:	0c 1b       	sub	r11,r6
8000392a:	f0 04 06 42 	mulu.d	r2,r8,r4
8000392e:	06 95       	mov	r5,r3
80003930:	16 35       	cp.w	r5,r11
80003932:	e0 8b 00 0a 	brhi	80003946 <__avr32_udiv64+0x24e>
80003936:	5f 0b       	sreq	r11
80003938:	f4 09 09 49 	lsl	r9,r10,r9
8000393c:	12 32       	cp.w	r2,r9
8000393e:	5f b9       	srhi	r9
80003940:	f7 e9 00 09 	and	r9,r11,r9
80003944:	c0 60       	breq	80003950 <__avr32_udiv64+0x258>
80003946:	20 18       	sub	r8,1
80003948:	30 09       	mov	r9,0
8000394a:	c0 38       	rjmp	80003950 <__avr32_udiv64+0x258>
8000394c:	30 09       	mov	r9,0
8000394e:	12 98       	mov	r8,r9
80003950:	10 9a       	mov	r10,r8
80003952:	12 93       	mov	r3,r9
80003954:	10 92       	mov	r2,r8
80003956:	12 9b       	mov	r11,r9
80003958:	2f dd       	sub	sp,-12
8000395a:	d8 32       	popm	r0-r7,pc

8000395c <__errno>:
8000395c:	e0 68 01 24 	mov	r8,292
80003960:	70 0c       	ld.w	r12,r8[0x0]
80003962:	2f 4c       	sub	r12,-12
80003964:	5e fc       	retal	r12
80003966:	d7 03       	nop

80003968 <memcpy>:
80003968:	58 8a       	cp.w	r10,8
8000396a:	c2 f5       	brlt	800039c8 <memcpy+0x60>
8000396c:	f9 eb 10 09 	or	r9,r12,r11
80003970:	e2 19 00 03 	andl	r9,0x3,COH
80003974:	e0 81 00 97 	brne	80003aa2 <memcpy+0x13a>
80003978:	e0 4a 00 20 	cp.w	r10,32
8000397c:	c3 b4       	brge	800039f2 <memcpy+0x8a>
8000397e:	f4 08 14 02 	asr	r8,r10,0x2
80003982:	f0 09 11 08 	rsub	r9,r8,8
80003986:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000398a:	76 69       	ld.w	r9,r11[0x18]
8000398c:	99 69       	st.w	r12[0x18],r9
8000398e:	76 59       	ld.w	r9,r11[0x14]
80003990:	99 59       	st.w	r12[0x14],r9
80003992:	76 49       	ld.w	r9,r11[0x10]
80003994:	99 49       	st.w	r12[0x10],r9
80003996:	76 39       	ld.w	r9,r11[0xc]
80003998:	99 39       	st.w	r12[0xc],r9
8000399a:	76 29       	ld.w	r9,r11[0x8]
8000399c:	99 29       	st.w	r12[0x8],r9
8000399e:	76 19       	ld.w	r9,r11[0x4]
800039a0:	99 19       	st.w	r12[0x4],r9
800039a2:	76 09       	ld.w	r9,r11[0x0]
800039a4:	99 09       	st.w	r12[0x0],r9
800039a6:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800039aa:	f8 08 00 28 	add	r8,r12,r8<<0x2
800039ae:	e0 1a 00 03 	andl	r10,0x3
800039b2:	f4 0a 11 04 	rsub	r10,r10,4
800039b6:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800039ba:	17 a9       	ld.ub	r9,r11[0x2]
800039bc:	b0 a9       	st.b	r8[0x2],r9
800039be:	17 99       	ld.ub	r9,r11[0x1]
800039c0:	b0 99       	st.b	r8[0x1],r9
800039c2:	17 89       	ld.ub	r9,r11[0x0]
800039c4:	b0 89       	st.b	r8[0x0],r9
800039c6:	5e fc       	retal	r12
800039c8:	f4 0a 11 09 	rsub	r10,r10,9
800039cc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800039d0:	17 f9       	ld.ub	r9,r11[0x7]
800039d2:	b8 f9       	st.b	r12[0x7],r9
800039d4:	17 e9       	ld.ub	r9,r11[0x6]
800039d6:	b8 e9       	st.b	r12[0x6],r9
800039d8:	17 d9       	ld.ub	r9,r11[0x5]
800039da:	b8 d9       	st.b	r12[0x5],r9
800039dc:	17 c9       	ld.ub	r9,r11[0x4]
800039de:	b8 c9       	st.b	r12[0x4],r9
800039e0:	17 b9       	ld.ub	r9,r11[0x3]
800039e2:	b8 b9       	st.b	r12[0x3],r9
800039e4:	17 a9       	ld.ub	r9,r11[0x2]
800039e6:	b8 a9       	st.b	r12[0x2],r9
800039e8:	17 99       	ld.ub	r9,r11[0x1]
800039ea:	b8 99       	st.b	r12[0x1],r9
800039ec:	17 89       	ld.ub	r9,r11[0x0]
800039ee:	b8 89       	st.b	r12[0x0],r9
800039f0:	5e fc       	retal	r12
800039f2:	eb cd 40 c0 	pushm	r6-r7,lr
800039f6:	18 99       	mov	r9,r12
800039f8:	22 0a       	sub	r10,32
800039fa:	b7 07       	ld.d	r6,r11++
800039fc:	b3 26       	st.d	r9++,r6
800039fe:	b7 07       	ld.d	r6,r11++
80003a00:	b3 26       	st.d	r9++,r6
80003a02:	b7 07       	ld.d	r6,r11++
80003a04:	b3 26       	st.d	r9++,r6
80003a06:	b7 07       	ld.d	r6,r11++
80003a08:	b3 26       	st.d	r9++,r6
80003a0a:	22 0a       	sub	r10,32
80003a0c:	cf 74       	brge	800039fa <memcpy+0x92>
80003a0e:	2f 0a       	sub	r10,-16
80003a10:	c0 65       	brlt	80003a1c <memcpy+0xb4>
80003a12:	b7 07       	ld.d	r6,r11++
80003a14:	b3 26       	st.d	r9++,r6
80003a16:	b7 07       	ld.d	r6,r11++
80003a18:	b3 26       	st.d	r9++,r6
80003a1a:	21 0a       	sub	r10,16
80003a1c:	5c 3a       	neg	r10
80003a1e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003a22:	d7 03       	nop
80003a24:	d7 03       	nop
80003a26:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003a2a:	f3 66 00 0e 	st.b	r9[14],r6
80003a2e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003a32:	f3 66 00 0d 	st.b	r9[13],r6
80003a36:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003a3a:	f3 66 00 0c 	st.b	r9[12],r6
80003a3e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003a42:	f3 66 00 0b 	st.b	r9[11],r6
80003a46:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003a4a:	f3 66 00 0a 	st.b	r9[10],r6
80003a4e:	f7 36 00 09 	ld.ub	r6,r11[9]
80003a52:	f3 66 00 09 	st.b	r9[9],r6
80003a56:	f7 36 00 08 	ld.ub	r6,r11[8]
80003a5a:	f3 66 00 08 	st.b	r9[8],r6
80003a5e:	f7 36 00 07 	ld.ub	r6,r11[7]
80003a62:	f3 66 00 07 	st.b	r9[7],r6
80003a66:	f7 36 00 06 	ld.ub	r6,r11[6]
80003a6a:	f3 66 00 06 	st.b	r9[6],r6
80003a6e:	f7 36 00 05 	ld.ub	r6,r11[5]
80003a72:	f3 66 00 05 	st.b	r9[5],r6
80003a76:	f7 36 00 04 	ld.ub	r6,r11[4]
80003a7a:	f3 66 00 04 	st.b	r9[4],r6
80003a7e:	f7 36 00 03 	ld.ub	r6,r11[3]
80003a82:	f3 66 00 03 	st.b	r9[3],r6
80003a86:	f7 36 00 02 	ld.ub	r6,r11[2]
80003a8a:	f3 66 00 02 	st.b	r9[2],r6
80003a8e:	f7 36 00 01 	ld.ub	r6,r11[1]
80003a92:	f3 66 00 01 	st.b	r9[1],r6
80003a96:	f7 36 00 00 	ld.ub	r6,r11[0]
80003a9a:	f3 66 00 00 	st.b	r9[0],r6
80003a9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003aa2:	20 1a       	sub	r10,1
80003aa4:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003aa8:	f8 0a 0b 09 	st.b	r12[r10],r9
80003aac:	cf b1       	brne	80003aa2 <memcpy+0x13a>
80003aae:	5e fc       	retal	r12

80003ab0 <rand>:
80003ab0:	d4 21       	pushm	r4-r7,lr
80003ab2:	e0 67 01 24 	mov	r7,292
80003ab6:	6e 06       	ld.w	r6,r7[0x0]
80003ab8:	6c e8       	ld.w	r8,r6[0x38]
80003aba:	58 08       	cp.w	r8,0
80003abc:	c1 91       	brne	80003aee <rand+0x3e>
80003abe:	31 8c       	mov	r12,24
80003ac0:	c3 8c       	rcall	80003b30 <malloc>
80003ac2:	e0 69 33 0e 	mov	r9,13070
80003ac6:	8d ec       	st.w	r6[0x38],r12
80003ac8:	6e 08       	ld.w	r8,r7[0x0]
80003aca:	70 e8       	ld.w	r8,r8[0x38]
80003acc:	b0 09       	st.h	r8[0x0],r9
80003ace:	fe 79 ab cd 	mov	r9,-21555
80003ad2:	b0 19       	st.h	r8[0x2],r9
80003ad4:	e0 69 12 34 	mov	r9,4660
80003ad8:	b0 29       	st.h	r8[0x4],r9
80003ada:	fe 79 e6 6d 	mov	r9,-6547
80003ade:	b0 39       	st.h	r8[0x6],r9
80003ae0:	fe 79 de ec 	mov	r9,-8468
80003ae4:	b0 49       	st.h	r8[0x8],r9
80003ae6:	30 59       	mov	r9,5
80003ae8:	b0 59       	st.h	r8[0xa],r9
80003aea:	30 b9       	mov	r9,11
80003aec:	b0 69       	st.h	r8[0xc],r9
80003aee:	e0 68 01 24 	mov	r8,292
80003af2:	70 08       	ld.w	r8,r8[0x0]
80003af4:	70 e8       	ld.w	r8,r8[0x38]
80003af6:	70 47       	ld.w	r7,r8[0x10]
80003af8:	70 5c       	ld.w	r12,r8[0x14]
80003afa:	e0 69 7f 2d 	mov	r9,32557
80003afe:	ea 19 4c 95 	orh	r9,0x4c95
80003b02:	f8 09 06 4a 	mulu.d	r10,r12,r9
80003b06:	ee 09 02 49 	mul	r9,r7,r9
80003b0a:	e0 67 f4 2d 	mov	r7,62509
80003b0e:	ea 17 58 51 	orh	r7,0x5851
80003b12:	30 16       	mov	r6,1
80003b14:	f8 07 03 49 	mac	r9,r12,r7
80003b18:	30 07       	mov	r7,0
80003b1a:	f2 0b 00 0b 	add	r11,r9,r11
80003b1e:	0c 0a       	add	r10,r6
80003b20:	f6 07 00 4b 	adc	r11,r11,r7
80003b24:	f0 eb 00 10 	st.d	r8[16],r10
80003b28:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80003b2c:	d8 22       	popm	r4-r7,pc
80003b2e:	d7 03       	nop

80003b30 <malloc>:
80003b30:	d4 01       	pushm	lr
80003b32:	e0 68 01 24 	mov	r8,292
80003b36:	18 9b       	mov	r11,r12
80003b38:	70 0c       	ld.w	r12,r8[0x0]
80003b3a:	c0 3c       	rcall	80003b40 <_malloc_r>
80003b3c:	d8 02       	popm	pc
80003b3e:	d7 03       	nop

80003b40 <_malloc_r>:
80003b40:	d4 31       	pushm	r0-r7,lr
80003b42:	f6 c8 ff f5 	sub	r8,r11,-11
80003b46:	18 95       	mov	r5,r12
80003b48:	10 97       	mov	r7,r8
80003b4a:	e0 17 ff f8 	andl	r7,0xfff8
80003b4e:	59 68       	cp.w	r8,22
80003b50:	f9 b7 08 10 	movls	r7,16
80003b54:	16 37       	cp.w	r7,r11
80003b56:	5f 38       	srlo	r8
80003b58:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80003b5c:	c0 50       	breq	80003b66 <_malloc_r+0x26>
80003b5e:	30 c8       	mov	r8,12
80003b60:	99 38       	st.w	r12[0xc],r8
80003b62:	e0 8f 01 f4 	bral	80003f4a <_malloc_r+0x40a>
80003b66:	e0 a0 02 01 	rcall	80003f68 <__malloc_lock>
80003b6a:	e0 47 01 f7 	cp.w	r7,503
80003b6e:	e0 8b 00 1d 	brhi	80003ba8 <_malloc_r+0x68>
80003b72:	ee 03 16 03 	lsr	r3,r7,0x3
80003b76:	e0 68 01 28 	mov	r8,296
80003b7a:	f0 03 00 38 	add	r8,r8,r3<<0x3
80003b7e:	70 36       	ld.w	r6,r8[0xc]
80003b80:	10 36       	cp.w	r6,r8
80003b82:	c0 61       	brne	80003b8e <_malloc_r+0x4e>
80003b84:	ec c8 ff f8 	sub	r8,r6,-8
80003b88:	70 36       	ld.w	r6,r8[0xc]
80003b8a:	10 36       	cp.w	r6,r8
80003b8c:	c0 c0       	breq	80003ba4 <_malloc_r+0x64>
80003b8e:	6c 18       	ld.w	r8,r6[0x4]
80003b90:	e0 18 ff fc 	andl	r8,0xfffc
80003b94:	6c 3a       	ld.w	r10,r6[0xc]
80003b96:	ec 08 00 09 	add	r9,r6,r8
80003b9a:	0a 9c       	mov	r12,r5
80003b9c:	6c 28       	ld.w	r8,r6[0x8]
80003b9e:	95 28       	st.w	r10[0x8],r8
80003ba0:	91 3a       	st.w	r8[0xc],r10
80003ba2:	c4 78       	rjmp	80003c30 <_malloc_r+0xf0>
80003ba4:	2f e3       	sub	r3,-2
80003ba6:	c4 d8       	rjmp	80003c40 <_malloc_r+0x100>
80003ba8:	ee 03 16 09 	lsr	r3,r7,0x9
80003bac:	c0 41       	brne	80003bb4 <_malloc_r+0x74>
80003bae:	ee 03 16 03 	lsr	r3,r7,0x3
80003bb2:	c2 68       	rjmp	80003bfe <_malloc_r+0xbe>
80003bb4:	58 43       	cp.w	r3,4
80003bb6:	e0 8b 00 06 	brhi	80003bc2 <_malloc_r+0x82>
80003bba:	ee 03 16 06 	lsr	r3,r7,0x6
80003bbe:	2c 83       	sub	r3,-56
80003bc0:	c1 f8       	rjmp	80003bfe <_malloc_r+0xbe>
80003bc2:	59 43       	cp.w	r3,20
80003bc4:	e0 8b 00 04 	brhi	80003bcc <_malloc_r+0x8c>
80003bc8:	2a 53       	sub	r3,-91
80003bca:	c1 a8       	rjmp	80003bfe <_malloc_r+0xbe>
80003bcc:	e0 43 00 54 	cp.w	r3,84
80003bd0:	e0 8b 00 06 	brhi	80003bdc <_malloc_r+0x9c>
80003bd4:	ee 03 16 0c 	lsr	r3,r7,0xc
80003bd8:	29 23       	sub	r3,-110
80003bda:	c1 28       	rjmp	80003bfe <_malloc_r+0xbe>
80003bdc:	e0 43 01 54 	cp.w	r3,340
80003be0:	e0 8b 00 06 	brhi	80003bec <_malloc_r+0xac>
80003be4:	ee 03 16 0f 	lsr	r3,r7,0xf
80003be8:	28 93       	sub	r3,-119
80003bea:	c0 a8       	rjmp	80003bfe <_malloc_r+0xbe>
80003bec:	e0 43 05 54 	cp.w	r3,1364
80003bf0:	e0 88 00 04 	brls	80003bf8 <_malloc_r+0xb8>
80003bf4:	37 e3       	mov	r3,126
80003bf6:	c0 48       	rjmp	80003bfe <_malloc_r+0xbe>
80003bf8:	ee 03 16 12 	lsr	r3,r7,0x12
80003bfc:	28 43       	sub	r3,-124
80003bfe:	e0 6a 01 28 	mov	r10,296
80003c02:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80003c06:	74 36       	ld.w	r6,r10[0xc]
80003c08:	c1 98       	rjmp	80003c3a <_malloc_r+0xfa>
80003c0a:	6c 19       	ld.w	r9,r6[0x4]
80003c0c:	e0 19 ff fc 	andl	r9,0xfffc
80003c10:	f2 07 01 0b 	sub	r11,r9,r7
80003c14:	58 fb       	cp.w	r11,15
80003c16:	e0 8a 00 04 	brle	80003c1e <_malloc_r+0xde>
80003c1a:	20 13       	sub	r3,1
80003c1c:	c1 18       	rjmp	80003c3e <_malloc_r+0xfe>
80003c1e:	6c 38       	ld.w	r8,r6[0xc]
80003c20:	58 0b       	cp.w	r11,0
80003c22:	c0 b5       	brlt	80003c38 <_malloc_r+0xf8>
80003c24:	6c 2a       	ld.w	r10,r6[0x8]
80003c26:	ec 09 00 09 	add	r9,r6,r9
80003c2a:	0a 9c       	mov	r12,r5
80003c2c:	91 2a       	st.w	r8[0x8],r10
80003c2e:	95 38       	st.w	r10[0xc],r8
80003c30:	72 18       	ld.w	r8,r9[0x4]
80003c32:	a1 a8       	sbr	r8,0x0
80003c34:	93 18       	st.w	r9[0x4],r8
80003c36:	cb c8       	rjmp	80003dae <_malloc_r+0x26e>
80003c38:	10 96       	mov	r6,r8
80003c3a:	14 36       	cp.w	r6,r10
80003c3c:	ce 71       	brne	80003c0a <_malloc_r+0xca>
80003c3e:	2f f3       	sub	r3,-1
80003c40:	e0 6a 01 28 	mov	r10,296
80003c44:	f4 cc ff f8 	sub	r12,r10,-8
80003c48:	78 26       	ld.w	r6,r12[0x8]
80003c4a:	18 36       	cp.w	r6,r12
80003c4c:	c6 c0       	breq	80003d24 <_malloc_r+0x1e4>
80003c4e:	6c 19       	ld.w	r9,r6[0x4]
80003c50:	e0 19 ff fc 	andl	r9,0xfffc
80003c54:	f2 07 01 08 	sub	r8,r9,r7
80003c58:	58 f8       	cp.w	r8,15
80003c5a:	e0 89 00 8f 	brgt	80003d78 <_malloc_r+0x238>
80003c5e:	99 3c       	st.w	r12[0xc],r12
80003c60:	99 2c       	st.w	r12[0x8],r12
80003c62:	58 08       	cp.w	r8,0
80003c64:	c0 55       	brlt	80003c6e <_malloc_r+0x12e>
80003c66:	ec 09 00 09 	add	r9,r6,r9
80003c6a:	0a 9c       	mov	r12,r5
80003c6c:	ce 2b       	rjmp	80003c30 <_malloc_r+0xf0>
80003c6e:	e0 49 01 ff 	cp.w	r9,511
80003c72:	e0 8b 00 13 	brhi	80003c98 <_malloc_r+0x158>
80003c76:	a3 99       	lsr	r9,0x3
80003c78:	f4 09 00 38 	add	r8,r10,r9<<0x3
80003c7c:	70 2b       	ld.w	r11,r8[0x8]
80003c7e:	8d 38       	st.w	r6[0xc],r8
80003c80:	8d 2b       	st.w	r6[0x8],r11
80003c82:	97 36       	st.w	r11[0xc],r6
80003c84:	91 26       	st.w	r8[0x8],r6
80003c86:	a3 49       	asr	r9,0x2
80003c88:	74 18       	ld.w	r8,r10[0x4]
80003c8a:	30 1b       	mov	r11,1
80003c8c:	f6 09 09 49 	lsl	r9,r11,r9
80003c90:	f1 e9 10 09 	or	r9,r8,r9
80003c94:	95 19       	st.w	r10[0x4],r9
80003c96:	c4 78       	rjmp	80003d24 <_malloc_r+0x1e4>
80003c98:	f2 0a 16 09 	lsr	r10,r9,0x9
80003c9c:	58 4a       	cp.w	r10,4
80003c9e:	e0 8b 00 07 	brhi	80003cac <_malloc_r+0x16c>
80003ca2:	f2 0a 16 06 	lsr	r10,r9,0x6
80003ca6:	2c 8a       	sub	r10,-56
80003ca8:	c2 08       	rjmp	80003ce8 <_malloc_r+0x1a8>
80003caa:	d7 03       	nop
80003cac:	59 4a       	cp.w	r10,20
80003cae:	e0 8b 00 04 	brhi	80003cb6 <_malloc_r+0x176>
80003cb2:	2a 5a       	sub	r10,-91
80003cb4:	c1 a8       	rjmp	80003ce8 <_malloc_r+0x1a8>
80003cb6:	e0 4a 00 54 	cp.w	r10,84
80003cba:	e0 8b 00 06 	brhi	80003cc6 <_malloc_r+0x186>
80003cbe:	f2 0a 16 0c 	lsr	r10,r9,0xc
80003cc2:	29 2a       	sub	r10,-110
80003cc4:	c1 28       	rjmp	80003ce8 <_malloc_r+0x1a8>
80003cc6:	e0 4a 01 54 	cp.w	r10,340
80003cca:	e0 8b 00 06 	brhi	80003cd6 <_malloc_r+0x196>
80003cce:	f2 0a 16 0f 	lsr	r10,r9,0xf
80003cd2:	28 9a       	sub	r10,-119
80003cd4:	c0 a8       	rjmp	80003ce8 <_malloc_r+0x1a8>
80003cd6:	e0 4a 05 54 	cp.w	r10,1364
80003cda:	e0 88 00 04 	brls	80003ce2 <_malloc_r+0x1a2>
80003cde:	37 ea       	mov	r10,126
80003ce0:	c0 48       	rjmp	80003ce8 <_malloc_r+0x1a8>
80003ce2:	f2 0a 16 12 	lsr	r10,r9,0x12
80003ce6:	28 4a       	sub	r10,-124
80003ce8:	e0 6b 01 28 	mov	r11,296
80003cec:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80003cf0:	68 28       	ld.w	r8,r4[0x8]
80003cf2:	08 38       	cp.w	r8,r4
80003cf4:	c0 e1       	brne	80003d10 <_malloc_r+0x1d0>
80003cf6:	76 19       	ld.w	r9,r11[0x4]
80003cf8:	a3 4a       	asr	r10,0x2
80003cfa:	30 1e       	mov	lr,1
80003cfc:	fc 0a 09 4a 	lsl	r10,lr,r10
80003d00:	f3 ea 10 0a 	or	r10,r9,r10
80003d04:	10 99       	mov	r9,r8
80003d06:	97 1a       	st.w	r11[0x4],r10
80003d08:	c0 a8       	rjmp	80003d1c <_malloc_r+0x1dc>
80003d0a:	70 28       	ld.w	r8,r8[0x8]
80003d0c:	08 38       	cp.w	r8,r4
80003d0e:	c0 60       	breq	80003d1a <_malloc_r+0x1da>
80003d10:	70 1a       	ld.w	r10,r8[0x4]
80003d12:	e0 1a ff fc 	andl	r10,0xfffc
80003d16:	14 39       	cp.w	r9,r10
80003d18:	cf 93       	brcs	80003d0a <_malloc_r+0x1ca>
80003d1a:	70 39       	ld.w	r9,r8[0xc]
80003d1c:	8d 39       	st.w	r6[0xc],r9
80003d1e:	8d 28       	st.w	r6[0x8],r8
80003d20:	91 36       	st.w	r8[0xc],r6
80003d22:	93 26       	st.w	r9[0x8],r6
80003d24:	e6 08 14 02 	asr	r8,r3,0x2
80003d28:	30 1b       	mov	r11,1
80003d2a:	e0 64 01 28 	mov	r4,296
80003d2e:	f6 08 09 4b 	lsl	r11,r11,r8
80003d32:	68 18       	ld.w	r8,r4[0x4]
80003d34:	10 3b       	cp.w	r11,r8
80003d36:	e0 8b 00 69 	brhi	80003e08 <_malloc_r+0x2c8>
80003d3a:	f7 e8 00 09 	and	r9,r11,r8
80003d3e:	c0 b1       	brne	80003d54 <_malloc_r+0x214>
80003d40:	e0 13 ff fc 	andl	r3,0xfffc
80003d44:	a1 7b       	lsl	r11,0x1
80003d46:	2f c3       	sub	r3,-4
80003d48:	c0 38       	rjmp	80003d4e <_malloc_r+0x20e>
80003d4a:	2f c3       	sub	r3,-4
80003d4c:	a1 7b       	lsl	r11,0x1
80003d4e:	f7 e8 00 09 	and	r9,r11,r8
80003d52:	cf c0       	breq	80003d4a <_malloc_r+0x20a>
80003d54:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80003d58:	06 92       	mov	r2,r3
80003d5a:	1c 91       	mov	r1,lr
80003d5c:	62 36       	ld.w	r6,r1[0xc]
80003d5e:	c2 d8       	rjmp	80003db8 <_malloc_r+0x278>
80003d60:	6c 1a       	ld.w	r10,r6[0x4]
80003d62:	e0 1a ff fc 	andl	r10,0xfffc
80003d66:	f4 07 01 08 	sub	r8,r10,r7
80003d6a:	58 f8       	cp.w	r8,15
80003d6c:	e0 8a 00 15 	brle	80003d96 <_malloc_r+0x256>
80003d70:	6c 3a       	ld.w	r10,r6[0xc]
80003d72:	6c 29       	ld.w	r9,r6[0x8]
80003d74:	95 29       	st.w	r10[0x8],r9
80003d76:	93 3a       	st.w	r9[0xc],r10
80003d78:	0e 99       	mov	r9,r7
80003d7a:	ec 07 00 07 	add	r7,r6,r7
80003d7e:	a1 a9       	sbr	r9,0x0
80003d80:	99 37       	st.w	r12[0xc],r7
80003d82:	99 27       	st.w	r12[0x8],r7
80003d84:	8d 19       	st.w	r6[0x4],r9
80003d86:	ee 08 09 08 	st.w	r7[r8],r8
80003d8a:	8f 2c       	st.w	r7[0x8],r12
80003d8c:	8f 3c       	st.w	r7[0xc],r12
80003d8e:	a1 a8       	sbr	r8,0x0
80003d90:	0a 9c       	mov	r12,r5
80003d92:	8f 18       	st.w	r7[0x4],r8
80003d94:	c0 d8       	rjmp	80003dae <_malloc_r+0x26e>
80003d96:	6c 39       	ld.w	r9,r6[0xc]
80003d98:	58 08       	cp.w	r8,0
80003d9a:	c0 e5       	brlt	80003db6 <_malloc_r+0x276>
80003d9c:	ec 0a 00 0a 	add	r10,r6,r10
80003da0:	74 18       	ld.w	r8,r10[0x4]
80003da2:	a1 a8       	sbr	r8,0x0
80003da4:	0a 9c       	mov	r12,r5
80003da6:	95 18       	st.w	r10[0x4],r8
80003da8:	6c 28       	ld.w	r8,r6[0x8]
80003daa:	93 28       	st.w	r9[0x8],r8
80003dac:	91 39       	st.w	r8[0xc],r9
80003dae:	cd ec       	rcall	80003f6a <__malloc_unlock>
80003db0:	ec cc ff f8 	sub	r12,r6,-8
80003db4:	d8 32       	popm	r0-r7,pc
80003db6:	12 96       	mov	r6,r9
80003db8:	02 36       	cp.w	r6,r1
80003dba:	cd 31       	brne	80003d60 <_malloc_r+0x220>
80003dbc:	2f f2       	sub	r2,-1
80003dbe:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80003dc2:	c0 30       	breq	80003dc8 <_malloc_r+0x288>
80003dc4:	2f 81       	sub	r1,-8
80003dc6:	cc bb       	rjmp	80003d5c <_malloc_r+0x21c>
80003dc8:	1c 98       	mov	r8,lr
80003dca:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80003dce:	c0 81       	brne	80003dde <_malloc_r+0x29e>
80003dd0:	68 19       	ld.w	r9,r4[0x4]
80003dd2:	f6 08 11 ff 	rsub	r8,r11,-1
80003dd6:	f3 e8 00 08 	and	r8,r9,r8
80003dda:	89 18       	st.w	r4[0x4],r8
80003ddc:	c0 78       	rjmp	80003dea <_malloc_r+0x2aa>
80003dde:	f0 c9 00 08 	sub	r9,r8,8
80003de2:	20 13       	sub	r3,1
80003de4:	70 08       	ld.w	r8,r8[0x0]
80003de6:	12 38       	cp.w	r8,r9
80003de8:	cf 10       	breq	80003dca <_malloc_r+0x28a>
80003dea:	a1 7b       	lsl	r11,0x1
80003dec:	68 18       	ld.w	r8,r4[0x4]
80003dee:	10 3b       	cp.w	r11,r8
80003df0:	e0 8b 00 0c 	brhi	80003e08 <_malloc_r+0x2c8>
80003df4:	58 0b       	cp.w	r11,0
80003df6:	c0 90       	breq	80003e08 <_malloc_r+0x2c8>
80003df8:	04 93       	mov	r3,r2
80003dfa:	c0 38       	rjmp	80003e00 <_malloc_r+0x2c0>
80003dfc:	2f c3       	sub	r3,-4
80003dfe:	a1 7b       	lsl	r11,0x1
80003e00:	f7 e8 00 09 	and	r9,r11,r8
80003e04:	ca 81       	brne	80003d54 <_malloc_r+0x214>
80003e06:	cf bb       	rjmp	80003dfc <_malloc_r+0x2bc>
80003e08:	68 23       	ld.w	r3,r4[0x8]
80003e0a:	66 12       	ld.w	r2,r3[0x4]
80003e0c:	e0 12 ff fc 	andl	r2,0xfffc
80003e10:	0e 32       	cp.w	r2,r7
80003e12:	5f 39       	srlo	r9
80003e14:	e4 07 01 08 	sub	r8,r2,r7
80003e18:	58 f8       	cp.w	r8,15
80003e1a:	5f aa       	srle	r10
80003e1c:	f5 e9 10 09 	or	r9,r10,r9
80003e20:	e0 80 00 96 	breq	80003f4c <_malloc_r+0x40c>
80003e24:	e0 68 06 48 	mov	r8,1608
80003e28:	70 01       	ld.w	r1,r8[0x0]
80003e2a:	e0 68 05 34 	mov	r8,1332
80003e2e:	2f 01       	sub	r1,-16
80003e30:	70 08       	ld.w	r8,r8[0x0]
80003e32:	0e 01       	add	r1,r7
80003e34:	5b f8       	cp.w	r8,-1
80003e36:	c0 40       	breq	80003e3e <_malloc_r+0x2fe>
80003e38:	28 11       	sub	r1,-127
80003e3a:	e0 11 ff 80 	andl	r1,0xff80
80003e3e:	02 9b       	mov	r11,r1
80003e40:	0a 9c       	mov	r12,r5
80003e42:	c9 5c       	rcall	80003f6c <_sbrk_r>
80003e44:	18 96       	mov	r6,r12
80003e46:	5b fc       	cp.w	r12,-1
80003e48:	c7 30       	breq	80003f2e <_malloc_r+0x3ee>
80003e4a:	e6 02 00 08 	add	r8,r3,r2
80003e4e:	10 3c       	cp.w	r12,r8
80003e50:	c0 32       	brcc	80003e56 <_malloc_r+0x316>
80003e52:	08 33       	cp.w	r3,r4
80003e54:	c6 d1       	brne	80003f2e <_malloc_r+0x3ee>
80003e56:	e0 6a 06 4c 	mov	r10,1612
80003e5a:	74 09       	ld.w	r9,r10[0x0]
80003e5c:	e2 09 00 09 	add	r9,r1,r9
80003e60:	95 09       	st.w	r10[0x0],r9
80003e62:	10 36       	cp.w	r6,r8
80003e64:	c0 a1       	brne	80003e78 <_malloc_r+0x338>
80003e66:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80003e6a:	c0 71       	brne	80003e78 <_malloc_r+0x338>
80003e6c:	e2 02 00 02 	add	r2,r1,r2
80003e70:	68 28       	ld.w	r8,r4[0x8]
80003e72:	a1 a2       	sbr	r2,0x0
80003e74:	91 12       	st.w	r8[0x4],r2
80003e76:	c4 d8       	rjmp	80003f10 <_malloc_r+0x3d0>
80003e78:	e0 6a 05 34 	mov	r10,1332
80003e7c:	74 0b       	ld.w	r11,r10[0x0]
80003e7e:	5b fb       	cp.w	r11,-1
80003e80:	c0 31       	brne	80003e86 <_malloc_r+0x346>
80003e82:	95 06       	st.w	r10[0x0],r6
80003e84:	c0 78       	rjmp	80003e92 <_malloc_r+0x352>
80003e86:	ec 09 00 09 	add	r9,r6,r9
80003e8a:	e0 6a 06 4c 	mov	r10,1612
80003e8e:	10 19       	sub	r9,r8
80003e90:	95 09       	st.w	r10[0x0],r9
80003e92:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80003e96:	f0 09 11 08 	rsub	r9,r8,8
80003e9a:	58 08       	cp.w	r8,0
80003e9c:	f2 08 17 10 	movne	r8,r9
80003ea0:	ed d8 e1 06 	addne	r6,r6,r8
80003ea4:	28 08       	sub	r8,-128
80003ea6:	ec 01 00 01 	add	r1,r6,r1
80003eaa:	0a 9c       	mov	r12,r5
80003eac:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80003eb0:	f0 01 01 01 	sub	r1,r8,r1
80003eb4:	02 9b       	mov	r11,r1
80003eb6:	c5 bc       	rcall	80003f6c <_sbrk_r>
80003eb8:	e0 68 06 4c 	mov	r8,1612
80003ebc:	5b fc       	cp.w	r12,-1
80003ebe:	ec 0c 17 00 	moveq	r12,r6
80003ec2:	f9 b1 00 00 	moveq	r1,0
80003ec6:	70 09       	ld.w	r9,r8[0x0]
80003ec8:	0c 1c       	sub	r12,r6
80003eca:	89 26       	st.w	r4[0x8],r6
80003ecc:	02 0c       	add	r12,r1
80003ece:	12 01       	add	r1,r9
80003ed0:	a1 ac       	sbr	r12,0x0
80003ed2:	91 01       	st.w	r8[0x0],r1
80003ed4:	8d 1c       	st.w	r6[0x4],r12
80003ed6:	08 33       	cp.w	r3,r4
80003ed8:	c1 c0       	breq	80003f10 <_malloc_r+0x3d0>
80003eda:	58 f2       	cp.w	r2,15
80003edc:	e0 8b 00 05 	brhi	80003ee6 <_malloc_r+0x3a6>
80003ee0:	30 18       	mov	r8,1
80003ee2:	8d 18       	st.w	r6[0x4],r8
80003ee4:	c2 58       	rjmp	80003f2e <_malloc_r+0x3ee>
80003ee6:	30 59       	mov	r9,5
80003ee8:	20 c2       	sub	r2,12
80003eea:	e0 12 ff f8 	andl	r2,0xfff8
80003eee:	e6 02 00 08 	add	r8,r3,r2
80003ef2:	91 29       	st.w	r8[0x8],r9
80003ef4:	91 19       	st.w	r8[0x4],r9
80003ef6:	66 18       	ld.w	r8,r3[0x4]
80003ef8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003efc:	e5 e8 10 08 	or	r8,r2,r8
80003f00:	87 18       	st.w	r3[0x4],r8
80003f02:	58 f2       	cp.w	r2,15
80003f04:	e0 88 00 06 	brls	80003f10 <_malloc_r+0x3d0>
80003f08:	e6 cb ff f8 	sub	r11,r3,-8
80003f0c:	0a 9c       	mov	r12,r5
80003f0e:	ca 1c       	rcall	80004050 <_free_r>
80003f10:	e0 69 06 44 	mov	r9,1604
80003f14:	72 0a       	ld.w	r10,r9[0x0]
80003f16:	e0 68 06 4c 	mov	r8,1612
80003f1a:	70 08       	ld.w	r8,r8[0x0]
80003f1c:	14 38       	cp.w	r8,r10
80003f1e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80003f22:	e0 69 06 40 	mov	r9,1600
80003f26:	72 0a       	ld.w	r10,r9[0x0]
80003f28:	14 38       	cp.w	r8,r10
80003f2a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80003f2e:	68 28       	ld.w	r8,r4[0x8]
80003f30:	70 18       	ld.w	r8,r8[0x4]
80003f32:	e0 18 ff fc 	andl	r8,0xfffc
80003f36:	0e 38       	cp.w	r8,r7
80003f38:	5f 39       	srlo	r9
80003f3a:	0e 18       	sub	r8,r7
80003f3c:	58 f8       	cp.w	r8,15
80003f3e:	5f aa       	srle	r10
80003f40:	f5 e9 10 09 	or	r9,r10,r9
80003f44:	c0 40       	breq	80003f4c <_malloc_r+0x40c>
80003f46:	0a 9c       	mov	r12,r5
80003f48:	c1 1c       	rcall	80003f6a <__malloc_unlock>
80003f4a:	d8 3a       	popm	r0-r7,pc,r12=0
80003f4c:	68 26       	ld.w	r6,r4[0x8]
80003f4e:	a1 a8       	sbr	r8,0x0
80003f50:	0e 99       	mov	r9,r7
80003f52:	a1 a9       	sbr	r9,0x0
80003f54:	8d 19       	st.w	r6[0x4],r9
80003f56:	ec 07 00 07 	add	r7,r6,r7
80003f5a:	0a 9c       	mov	r12,r5
80003f5c:	89 27       	st.w	r4[0x8],r7
80003f5e:	8f 18       	st.w	r7[0x4],r8
80003f60:	c0 5c       	rcall	80003f6a <__malloc_unlock>
80003f62:	ec cc ff f8 	sub	r12,r6,-8
80003f66:	d8 32       	popm	r0-r7,pc

80003f68 <__malloc_lock>:
80003f68:	5e fc       	retal	r12

80003f6a <__malloc_unlock>:
80003f6a:	5e fc       	retal	r12

80003f6c <_sbrk_r>:
80003f6c:	d4 21       	pushm	r4-r7,lr
80003f6e:	30 08       	mov	r8,0
80003f70:	18 97       	mov	r7,r12
80003f72:	e0 66 07 20 	mov	r6,1824
80003f76:	16 9c       	mov	r12,r11
80003f78:	8d 08       	st.w	r6[0x0],r8
80003f7a:	c0 9c       	rcall	80003f8c <_sbrk>
80003f7c:	5b fc       	cp.w	r12,-1
80003f7e:	c0 51       	brne	80003f88 <_sbrk_r+0x1c>
80003f80:	6c 08       	ld.w	r8,r6[0x0]
80003f82:	58 08       	cp.w	r8,0
80003f84:	ef f8 1a 03 	st.wne	r7[0xc],r8
80003f88:	d8 22       	popm	r4-r7,pc
80003f8a:	d7 03       	nop

80003f8c <_sbrk>:
80003f8c:	d4 01       	pushm	lr
80003f8e:	e0 68 06 74 	mov	r8,1652
80003f92:	70 09       	ld.w	r9,r8[0x0]
80003f94:	58 09       	cp.w	r9,0
80003f96:	c0 41       	brne	80003f9e <_sbrk+0x12>
80003f98:	e0 69 07 28 	mov	r9,1832
80003f9c:	91 09       	st.w	r8[0x0],r9
80003f9e:	e0 69 06 74 	mov	r9,1652
80003fa2:	e0 6a f0 00 	mov	r10,61440
80003fa6:	72 08       	ld.w	r8,r9[0x0]
80003fa8:	f0 0c 00 0c 	add	r12,r8,r12
80003fac:	14 3c       	cp.w	r12,r10
80003fae:	e0 8b 00 04 	brhi	80003fb6 <_sbrk+0x2a>
80003fb2:	93 0c       	st.w	r9[0x0],r12
80003fb4:	c0 68       	rjmp	80003fc0 <_sbrk+0x34>
80003fb6:	fe b0 fc d3 	rcall	8000395c <__errno>
80003fba:	30 c8       	mov	r8,12
80003fbc:	99 08       	st.w	r12[0x0],r8
80003fbe:	3f f8       	mov	r8,-1
80003fc0:	10 9c       	mov	r12,r8
80003fc2:	d8 02       	popm	pc

80003fc4 <_malloc_trim_r>:
80003fc4:	d4 21       	pushm	r4-r7,lr
80003fc6:	16 95       	mov	r5,r11
80003fc8:	18 97       	mov	r7,r12
80003fca:	cc ff       	rcall	80003f68 <__malloc_lock>
80003fcc:	e0 64 01 28 	mov	r4,296
80003fd0:	68 28       	ld.w	r8,r4[0x8]
80003fd2:	70 16       	ld.w	r6,r8[0x4]
80003fd4:	e0 16 ff fc 	andl	r6,0xfffc
80003fd8:	ec c8 ff 91 	sub	r8,r6,-111
80003fdc:	f0 05 01 05 	sub	r5,r8,r5
80003fe0:	e0 15 ff 80 	andl	r5,0xff80
80003fe4:	ea c5 00 80 	sub	r5,r5,128
80003fe8:	e0 45 00 7f 	cp.w	r5,127
80003fec:	e0 8a 00 22 	brle	80004030 <_malloc_trim_r+0x6c>
80003ff0:	30 0b       	mov	r11,0
80003ff2:	0e 9c       	mov	r12,r7
80003ff4:	cb cf       	rcall	80003f6c <_sbrk_r>
80003ff6:	68 28       	ld.w	r8,r4[0x8]
80003ff8:	0c 08       	add	r8,r6
80003ffa:	10 3c       	cp.w	r12,r8
80003ffc:	c1 a1       	brne	80004030 <_malloc_trim_r+0x6c>
80003ffe:	ea 0b 11 00 	rsub	r11,r5,0
80004002:	0e 9c       	mov	r12,r7
80004004:	cb 4f       	rcall	80003f6c <_sbrk_r>
80004006:	5b fc       	cp.w	r12,-1
80004008:	c1 71       	brne	80004036 <_malloc_trim_r+0x72>
8000400a:	30 0b       	mov	r11,0
8000400c:	0e 9c       	mov	r12,r7
8000400e:	ca ff       	rcall	80003f6c <_sbrk_r>
80004010:	68 28       	ld.w	r8,r4[0x8]
80004012:	f8 08 01 09 	sub	r9,r12,r8
80004016:	58 f9       	cp.w	r9,15
80004018:	e0 8a 00 0c 	brle	80004030 <_malloc_trim_r+0x6c>
8000401c:	a1 a9       	sbr	r9,0x0
8000401e:	91 19       	st.w	r8[0x4],r9
80004020:	e0 68 05 34 	mov	r8,1332
80004024:	70 09       	ld.w	r9,r8[0x0]
80004026:	e0 68 06 4c 	mov	r8,1612
8000402a:	f8 09 01 09 	sub	r9,r12,r9
8000402e:	91 09       	st.w	r8[0x0],r9
80004030:	0e 9c       	mov	r12,r7
80004032:	c9 cf       	rcall	80003f6a <__malloc_unlock>
80004034:	d8 2a       	popm	r4-r7,pc,r12=0
80004036:	68 28       	ld.w	r8,r4[0x8]
80004038:	0a 16       	sub	r6,r5
8000403a:	a1 a6       	sbr	r6,0x0
8000403c:	91 16       	st.w	r8[0x4],r6
8000403e:	e0 68 06 4c 	mov	r8,1612
80004042:	70 09       	ld.w	r9,r8[0x0]
80004044:	0a 19       	sub	r9,r5
80004046:	0e 9c       	mov	r12,r7
80004048:	91 09       	st.w	r8[0x0],r9
8000404a:	c9 0f       	rcall	80003f6a <__malloc_unlock>
8000404c:	da 2a       	popm	r4-r7,pc,r12=1
8000404e:	d7 03       	nop

80004050 <_free_r>:
80004050:	d4 21       	pushm	r4-r7,lr
80004052:	16 96       	mov	r6,r11
80004054:	18 97       	mov	r7,r12
80004056:	58 0b       	cp.w	r11,0
80004058:	e0 80 00 bd 	breq	800041d2 <_free_r+0x182>
8000405c:	c8 6f       	rcall	80003f68 <__malloc_lock>
8000405e:	20 86       	sub	r6,8
80004060:	e0 6a 01 28 	mov	r10,296
80004064:	6c 18       	ld.w	r8,r6[0x4]
80004066:	74 2e       	ld.w	lr,r10[0x8]
80004068:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000406c:	a1 c8       	cbr	r8,0x0
8000406e:	ec 08 00 09 	add	r9,r6,r8
80004072:	72 1b       	ld.w	r11,r9[0x4]
80004074:	e0 1b ff fc 	andl	r11,0xfffc
80004078:	1c 39       	cp.w	r9,lr
8000407a:	c1 d1       	brne	800040b4 <_free_r+0x64>
8000407c:	f6 08 00 08 	add	r8,r11,r8
80004080:	58 0c       	cp.w	r12,0
80004082:	c0 81       	brne	80004092 <_free_r+0x42>
80004084:	6c 09       	ld.w	r9,r6[0x0]
80004086:	12 16       	sub	r6,r9
80004088:	12 08       	add	r8,r9
8000408a:	6c 3b       	ld.w	r11,r6[0xc]
8000408c:	6c 29       	ld.w	r9,r6[0x8]
8000408e:	97 29       	st.w	r11[0x8],r9
80004090:	93 3b       	st.w	r9[0xc],r11
80004092:	10 99       	mov	r9,r8
80004094:	95 26       	st.w	r10[0x8],r6
80004096:	a1 a9       	sbr	r9,0x0
80004098:	8d 19       	st.w	r6[0x4],r9
8000409a:	e0 69 05 30 	mov	r9,1328
8000409e:	72 09       	ld.w	r9,r9[0x0]
800040a0:	12 38       	cp.w	r8,r9
800040a2:	c0 63       	brcs	800040ae <_free_r+0x5e>
800040a4:	e0 68 06 48 	mov	r8,1608
800040a8:	0e 9c       	mov	r12,r7
800040aa:	70 0b       	ld.w	r11,r8[0x0]
800040ac:	c8 cf       	rcall	80003fc4 <_malloc_trim_r>
800040ae:	0e 9c       	mov	r12,r7
800040b0:	c5 df       	rcall	80003f6a <__malloc_unlock>
800040b2:	d8 22       	popm	r4-r7,pc
800040b4:	93 1b       	st.w	r9[0x4],r11
800040b6:	58 0c       	cp.w	r12,0
800040b8:	c0 30       	breq	800040be <_free_r+0x6e>
800040ba:	30 0c       	mov	r12,0
800040bc:	c1 08       	rjmp	800040dc <_free_r+0x8c>
800040be:	6c 0e       	ld.w	lr,r6[0x0]
800040c0:	f4 c5 ff f8 	sub	r5,r10,-8
800040c4:	1c 16       	sub	r6,lr
800040c6:	1c 08       	add	r8,lr
800040c8:	6c 2e       	ld.w	lr,r6[0x8]
800040ca:	0a 3e       	cp.w	lr,r5
800040cc:	f9 bc 00 01 	moveq	r12,1
800040d0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800040d4:	eb fe 1a 02 	st.wne	r5[0x8],lr
800040d8:	fd f5 1a 03 	st.wne	lr[0xc],r5
800040dc:	f2 0b 00 0e 	add	lr,r9,r11
800040e0:	7c 1e       	ld.w	lr,lr[0x4]
800040e2:	ed be 00 00 	bld	lr,0x0
800040e6:	c1 40       	breq	8000410e <_free_r+0xbe>
800040e8:	16 08       	add	r8,r11
800040ea:	58 0c       	cp.w	r12,0
800040ec:	c0 d1       	brne	80004106 <_free_r+0xb6>
800040ee:	e0 6e 01 28 	mov	lr,296
800040f2:	72 2b       	ld.w	r11,r9[0x8]
800040f4:	2f 8e       	sub	lr,-8
800040f6:	1c 3b       	cp.w	r11,lr
800040f8:	c0 71       	brne	80004106 <_free_r+0xb6>
800040fa:	97 36       	st.w	r11[0xc],r6
800040fc:	97 26       	st.w	r11[0x8],r6
800040fe:	8d 2b       	st.w	r6[0x8],r11
80004100:	8d 3b       	st.w	r6[0xc],r11
80004102:	30 1c       	mov	r12,1
80004104:	c0 58       	rjmp	8000410e <_free_r+0xbe>
80004106:	72 2b       	ld.w	r11,r9[0x8]
80004108:	72 39       	ld.w	r9,r9[0xc]
8000410a:	93 2b       	st.w	r9[0x8],r11
8000410c:	97 39       	st.w	r11[0xc],r9
8000410e:	10 99       	mov	r9,r8
80004110:	ec 08 09 08 	st.w	r6[r8],r8
80004114:	a1 a9       	sbr	r9,0x0
80004116:	8d 19       	st.w	r6[0x4],r9
80004118:	58 0c       	cp.w	r12,0
8000411a:	c5 a1       	brne	800041ce <_free_r+0x17e>
8000411c:	e0 48 01 ff 	cp.w	r8,511
80004120:	e0 8b 00 13 	brhi	80004146 <_free_r+0xf6>
80004124:	a3 98       	lsr	r8,0x3
80004126:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000412a:	72 2b       	ld.w	r11,r9[0x8]
8000412c:	8d 39       	st.w	r6[0xc],r9
8000412e:	8d 2b       	st.w	r6[0x8],r11
80004130:	97 36       	st.w	r11[0xc],r6
80004132:	93 26       	st.w	r9[0x8],r6
80004134:	a3 48       	asr	r8,0x2
80004136:	74 19       	ld.w	r9,r10[0x4]
80004138:	30 1b       	mov	r11,1
8000413a:	f6 08 09 48 	lsl	r8,r11,r8
8000413e:	f3 e8 10 08 	or	r8,r9,r8
80004142:	95 18       	st.w	r10[0x4],r8
80004144:	c4 58       	rjmp	800041ce <_free_r+0x17e>
80004146:	f0 0b 16 09 	lsr	r11,r8,0x9
8000414a:	58 4b       	cp.w	r11,4
8000414c:	e0 8b 00 06 	brhi	80004158 <_free_r+0x108>
80004150:	f0 0b 16 06 	lsr	r11,r8,0x6
80004154:	2c 8b       	sub	r11,-56
80004156:	c2 08       	rjmp	80004196 <_free_r+0x146>
80004158:	59 4b       	cp.w	r11,20
8000415a:	e0 8b 00 04 	brhi	80004162 <_free_r+0x112>
8000415e:	2a 5b       	sub	r11,-91
80004160:	c1 b8       	rjmp	80004196 <_free_r+0x146>
80004162:	e0 4b 00 54 	cp.w	r11,84
80004166:	e0 8b 00 06 	brhi	80004172 <_free_r+0x122>
8000416a:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000416e:	29 2b       	sub	r11,-110
80004170:	c1 38       	rjmp	80004196 <_free_r+0x146>
80004172:	e0 4b 01 54 	cp.w	r11,340
80004176:	e0 8b 00 06 	brhi	80004182 <_free_r+0x132>
8000417a:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000417e:	28 9b       	sub	r11,-119
80004180:	c0 b8       	rjmp	80004196 <_free_r+0x146>
80004182:	e0 4b 05 54 	cp.w	r11,1364
80004186:	e0 88 00 05 	brls	80004190 <_free_r+0x140>
8000418a:	37 eb       	mov	r11,126
8000418c:	c0 58       	rjmp	80004196 <_free_r+0x146>
8000418e:	d7 03       	nop
80004190:	f0 0b 16 12 	lsr	r11,r8,0x12
80004194:	28 4b       	sub	r11,-124
80004196:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000419a:	78 29       	ld.w	r9,r12[0x8]
8000419c:	18 39       	cp.w	r9,r12
8000419e:	c0 e1       	brne	800041ba <_free_r+0x16a>
800041a0:	74 18       	ld.w	r8,r10[0x4]
800041a2:	a3 4b       	asr	r11,0x2
800041a4:	30 1c       	mov	r12,1
800041a6:	f8 0b 09 4b 	lsl	r11,r12,r11
800041aa:	f1 eb 10 0b 	or	r11,r8,r11
800041ae:	12 98       	mov	r8,r9
800041b0:	95 1b       	st.w	r10[0x4],r11
800041b2:	c0 a8       	rjmp	800041c6 <_free_r+0x176>
800041b4:	72 29       	ld.w	r9,r9[0x8]
800041b6:	18 39       	cp.w	r9,r12
800041b8:	c0 60       	breq	800041c4 <_free_r+0x174>
800041ba:	72 1a       	ld.w	r10,r9[0x4]
800041bc:	e0 1a ff fc 	andl	r10,0xfffc
800041c0:	14 38       	cp.w	r8,r10
800041c2:	cf 93       	brcs	800041b4 <_free_r+0x164>
800041c4:	72 38       	ld.w	r8,r9[0xc]
800041c6:	8d 38       	st.w	r6[0xc],r8
800041c8:	8d 29       	st.w	r6[0x8],r9
800041ca:	93 36       	st.w	r9[0xc],r6
800041cc:	91 26       	st.w	r8[0x8],r6
800041ce:	0e 9c       	mov	r12,r7
800041d0:	cc de       	rcall	80003f6a <__malloc_unlock>
800041d2:	d8 22       	popm	r4-r7,pc

Disassembly of section .exception:

80004200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80004200:	c0 08       	rjmp	80004200 <_evba>
	...

80004204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80004204:	c0 08       	rjmp	80004204 <_handle_TLB_Multiple_Hit>
	...

80004208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80004208:	c0 08       	rjmp	80004208 <_handle_Bus_Error_Data_Fetch>
	...

8000420c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000420c:	c0 08       	rjmp	8000420c <_handle_Bus_Error_Instruction_Fetch>
	...

80004210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80004210:	c0 08       	rjmp	80004210 <_handle_NMI>
	...

80004214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80004214:	c0 08       	rjmp	80004214 <_handle_Instruction_Address>
	...

80004218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80004218:	c0 08       	rjmp	80004218 <_handle_ITLB_Protection>
	...

8000421c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000421c:	c0 08       	rjmp	8000421c <_handle_Breakpoint>
	...

80004220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80004220:	c0 08       	rjmp	80004220 <_handle_Illegal_Opcode>
	...

80004224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80004224:	c0 08       	rjmp	80004224 <_handle_Unimplemented_Instruction>
	...

80004228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80004228:	c0 08       	rjmp	80004228 <_handle_Privilege_Violation>
	...

8000422c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000422c:	c0 08       	rjmp	8000422c <_handle_Floating_Point>
	...

80004230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80004230:	c0 08       	rjmp	80004230 <_handle_Coprocessor_Absent>
	...

80004234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80004234:	c0 08       	rjmp	80004234 <_handle_Data_Address_Read>
	...

80004238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80004238:	c0 08       	rjmp	80004238 <_handle_Data_Address_Write>
	...

8000423c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000423c:	c0 08       	rjmp	8000423c <_handle_DTLB_Protection_Read>
	...

80004240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80004240:	c0 08       	rjmp	80004240 <_handle_DTLB_Protection_Write>
	...

80004244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80004244:	c0 08       	rjmp	80004244 <_handle_DTLB_Modified>
	...

80004250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80004250:	c0 08       	rjmp	80004250 <_handle_ITLB_Miss>
	...

80004260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80004260:	c0 08       	rjmp	80004260 <_handle_DTLB_Miss_Read>
	...

80004270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80004270:	c0 08       	rjmp	80004270 <_handle_DTLB_Miss_Write>
	...

80004300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80004300:	c0 08       	rjmp	80004300 <_handle_Supervisor_Call>
80004302:	d7 03       	nop

80004304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004304:	30 0c       	mov	r12,0
80004306:	fe b0 f3 f7 	rcall	80002af4 <_get_interrupt_handler>
8000430a:	58 0c       	cp.w	r12,0
8000430c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80004310:	d6 03       	rete

80004312 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004312:	30 1c       	mov	r12,1
80004314:	fe b0 f3 f0 	rcall	80002af4 <_get_interrupt_handler>
80004318:	58 0c       	cp.w	r12,0
8000431a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000431e:	d6 03       	rete

80004320 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004320:	30 2c       	mov	r12,2
80004322:	fe b0 f3 e9 	rcall	80002af4 <_get_interrupt_handler>
80004326:	58 0c       	cp.w	r12,0
80004328:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000432c:	d6 03       	rete

8000432e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000432e:	30 3c       	mov	r12,3
80004330:	fe b0 f3 e2 	rcall	80002af4 <_get_interrupt_handler>
80004334:	58 0c       	cp.w	r12,0
80004336:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000433a:	d6 03       	rete
8000433c:	d7 03       	nop
8000433e:	d7 03       	nop
80004340:	d7 03       	nop
80004342:	d7 03       	nop
80004344:	d7 03       	nop
80004346:	d7 03       	nop
80004348:	d7 03       	nop
8000434a:	d7 03       	nop
8000434c:	d7 03       	nop
8000434e:	d7 03       	nop
80004350:	d7 03       	nop
80004352:	d7 03       	nop
80004354:	d7 03       	nop
80004356:	d7 03       	nop
80004358:	d7 03       	nop
8000435a:	d7 03       	nop
8000435c:	d7 03       	nop
8000435e:	d7 03       	nop
80004360:	d7 03       	nop
80004362:	d7 03       	nop
80004364:	d7 03       	nop
80004366:	d7 03       	nop
80004368:	d7 03       	nop
8000436a:	d7 03       	nop
8000436c:	d7 03       	nop
8000436e:	d7 03       	nop
80004370:	d7 03       	nop
80004372:	d7 03       	nop
80004374:	d7 03       	nop
80004376:	d7 03       	nop
80004378:	d7 03       	nop
8000437a:	d7 03       	nop
8000437c:	d7 03       	nop
8000437e:	d7 03       	nop
80004380:	d7 03       	nop
80004382:	d7 03       	nop
80004384:	d7 03       	nop
80004386:	d7 03       	nop
80004388:	d7 03       	nop
8000438a:	d7 03       	nop
8000438c:	d7 03       	nop
8000438e:	d7 03       	nop
80004390:	d7 03       	nop
80004392:	d7 03       	nop
80004394:	d7 03       	nop
80004396:	d7 03       	nop
80004398:	d7 03       	nop
8000439a:	d7 03       	nop
8000439c:	d7 03       	nop
8000439e:	d7 03       	nop
800043a0:	d7 03       	nop
800043a2:	d7 03       	nop
800043a4:	d7 03       	nop
800043a6:	d7 03       	nop
800043a8:	d7 03       	nop
800043aa:	d7 03       	nop
800043ac:	d7 03       	nop
800043ae:	d7 03       	nop
800043b0:	d7 03       	nop
800043b2:	d7 03       	nop
800043b4:	d7 03       	nop
800043b6:	d7 03       	nop
800043b8:	d7 03       	nop
800043ba:	d7 03       	nop
800043bc:	d7 03       	nop
800043be:	d7 03       	nop
800043c0:	d7 03       	nop
800043c2:	d7 03       	nop
800043c4:	d7 03       	nop
800043c6:	d7 03       	nop
800043c8:	d7 03       	nop
800043ca:	d7 03       	nop
800043cc:	d7 03       	nop
800043ce:	d7 03       	nop
800043d0:	d7 03       	nop
800043d2:	d7 03       	nop
800043d4:	d7 03       	nop
800043d6:	d7 03       	nop
800043d8:	d7 03       	nop
800043da:	d7 03       	nop
800043dc:	d7 03       	nop
800043de:	d7 03       	nop
800043e0:	d7 03       	nop
800043e2:	d7 03       	nop
800043e4:	d7 03       	nop
800043e6:	d7 03       	nop
800043e8:	d7 03       	nop
800043ea:	d7 03       	nop
800043ec:	d7 03       	nop
800043ee:	d7 03       	nop
800043f0:	d7 03       	nop
800043f2:	d7 03       	nop
800043f4:	d7 03       	nop
800043f6:	d7 03       	nop
800043f8:	d7 03       	nop
800043fa:	d7 03       	nop
800043fc:	d7 03       	nop
800043fe:	d7 03       	nop
