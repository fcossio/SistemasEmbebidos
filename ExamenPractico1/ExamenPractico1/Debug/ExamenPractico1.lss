
ExamenPractico1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000a50  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002c00  80002c00  00003000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000100  80002e00  80002e00  00003200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000001  00000008  80002f00  00003408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000007  00000009  80002f01  00003409  2**0
                  ALLOC
  8 .bss          000000f0  00000010  00000010  00000000  2**2
                  ALLOC
  9 .heap         0000ef00  00000100  00000100  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00003409  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000005c0  00000000  00000000  00003440  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00000fd5  00000000  00000000  00003a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00005e1a  00000000  00000000  000049d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000e01  00000000  00000000  0000a7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000038b3  00000000  00000000  0000b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000dec  00000000  00000000  0000eea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001cdb  00000000  00000000  0000fc90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00001de0  00000000  00000000  0001196b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00594f2a  00000000  00000000  0001374b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 000005c8  00000000  00000000  005a8678  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf db 48 	sub	pc,pc,-9400

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fb 4c 	sub	pc,pc,-1204

Disassembly of section .text:

80002008 <flashc_set_wait_state>:
80002008:	fe 68 14 00 	mov	r8,-125952
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000200c:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000200e:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002012:	91 09       	st.w	r8[0x0],r9
}
80002014:	5e fc       	retal	r12

80002016 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002016:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002018:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000201c:	99 a8       	st.w	r12[0x28],r8
}
8000201e:	5e fc       	retal	r12

80002020 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002020:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002022:	ec 5b bb 9f 	cp.w	r11,899999
80002026:	e0 8b 00 04 	brhi	8000202e <pm_enable_osc0_crystal+0xe>
8000202a:	30 4b       	mov	r11,4
8000202c:	c1 38       	rjmp	80002052 <pm_enable_osc0_crystal+0x32>
8000202e:	e0 68 c6 bf 	mov	r8,50879
80002032:	ea 18 00 2d 	orh	r8,0x2d
80002036:	10 3b       	cp.w	r11,r8
80002038:	e0 8b 00 04 	brhi	80002040 <pm_enable_osc0_crystal+0x20>
8000203c:	30 5b       	mov	r11,5
8000203e:	c0 a8       	rjmp	80002052 <pm_enable_osc0_crystal+0x32>
80002040:	e0 68 12 00 	mov	r8,4608
80002044:	ea 18 00 7a 	orh	r8,0x7a
80002048:	10 3b       	cp.w	r11,r8
8000204a:	f9 bb 03 06 	movlo	r11,6
8000204e:	f9 bb 02 07 	movhs	r11,7
80002052:	f0 1f 00 02 	mcall	80002058 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002056:	d8 02       	popm	pc
80002058:	80 00       	ld.sh	r0,r0[0x0]
8000205a:	20 16       	sub	r6,1

8000205c <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000205c:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000205e:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002062:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002064:	78 08       	ld.w	r8,r12[0x0]
80002066:	a3 a8       	sbr	r8,0x2
80002068:	99 08       	st.w	r12[0x0],r8
}
8000206a:	5e fc       	retal	r12

8000206c <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000206c:	79 58       	ld.w	r8,r12[0x54]
8000206e:	e2 18 00 80 	andl	r8,0x80,COH
80002072:	cf d0       	breq	8000206c <pm_wait_for_clk0_ready>
}
80002074:	5e fc       	retal	r12
80002076:	d7 03       	nop

80002078 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002078:	eb cd 40 80 	pushm	r7,lr
8000207c:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
8000207e:	f0 1f 00 04 	mcall	8000208c <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002082:	0e 9c       	mov	r12,r7
80002084:	f0 1f 00 03 	mcall	80002090 <pm_enable_clk0+0x18>
}
80002088:	e3 cd 80 80 	ldm	sp++,r7,pc
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	20 5c       	sub	r12,5
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	20 6c       	sub	r12,6

80002094 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002094:	eb cd 40 80 	pushm	r7,lr
80002098:	40 27       	lddsp	r7,sp[0x8]
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
8000209a:	30 0e       	mov	lr,0

  u_avr32_pm_pll.PLL.pllosc   = osc;
8000209c:	fd d8 d0 21 	bfins	lr,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
800020a0:	fd d9 d1 04 	bfins	lr,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
800020a4:	fd da d2 04 	bfins	lr,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
800020a8:	fd d7 d3 06 	bfins	lr,r7,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
800020ac:	2f 8b       	sub	r11,-8
800020ae:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
800020b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800020b6 <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
800020b6:	d4 01       	pushm	lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800020b8:	2f 8b       	sub	r11,-8
800020ba:	f8 0b 03 2e 	ld.w	lr,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800020be:	f5 e9 10 19 	or	r9,r10,r9<<0x1
800020c2:	f3 e8 10 28 	or	r8,r9,r8<<0x2
800020c6:	fd d8 d0 43 	bfins	lr,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
800020ca:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
800020ce:	d8 02       	popm	pc

800020d0 <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800020d0:	2f 8b       	sub	r11,-8
800020d2:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
800020d6:	a1 a8       	sbr	r8,0x0
800020d8:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
800020dc:	5e fc       	retal	r12

800020de <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800020de:	79 58       	ld.w	r8,r12[0x54]
800020e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020e4:	cf d0       	breq	800020de <pm_wait_for_pll0_locked>
}
800020e6:	5e fc       	retal	r12

800020e8 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800020e8:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800020ea:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800020ee:	99 08       	st.w	r12[0x0],r8
}
800020f0:	5e fc       	retal	r12
800020f2:	d7 03       	nop

800020f4 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
800020f4:	eb cd 40 c0 	pushm	r6-r7,lr
800020f8:	18 97       	mov	r7,r12
800020fa:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800020fc:	f0 1f 00 06 	mcall	80002114 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002100:	0c 9b       	mov	r11,r6
80002102:	0e 9c       	mov	r12,r7
80002104:	f0 1f 00 05 	mcall	80002118 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002108:	30 1b       	mov	r11,1
8000210a:	0e 9c       	mov	r12,r7
8000210c:	f0 1f 00 04 	mcall	8000211c <pm_switch_to_osc0+0x28>
}
80002110:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002114:	80 00       	ld.sh	r0,r0[0x0]
80002116:	20 20       	sub	r0,2
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	20 78       	sub	r8,7
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	20 e8       	sub	r8,14

80002120 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002120:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002122:	30 3b       	mov	r11,3
80002124:	33 bc       	mov	r12,59
80002126:	f0 1f 00 16 	mcall	8000217c <board_init+0x5c>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000212a:	30 3b       	mov	r11,3
8000212c:	33 cc       	mov	r12,60
8000212e:	f0 1f 00 14 	mcall	8000217c <board_init+0x5c>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002132:	30 3b       	mov	r11,3
80002134:	30 5c       	mov	r12,5
80002136:	f0 1f 00 12 	mcall	8000217c <board_init+0x5c>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000213a:	30 3b       	mov	r11,3
8000213c:	30 6c       	mov	r12,6
8000213e:	f0 1f 00 10 	mcall	8000217c <board_init+0x5c>

	gpio_configure_pin(QT1081_TOUCH_SENSOR_ENTER,GPIO_DIR_INPUT);
80002142:	30 0b       	mov	r11,0
80002144:	33 ac       	mov	r12,58
80002146:	f0 1f 00 0e 	mcall	8000217c <board_init+0x5c>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000214a:	30 4b       	mov	r11,4
8000214c:	48 dc       	lddpc	r12,80002180 <board_init+0x60>
8000214e:	f0 1f 00 0e 	mcall	80002184 <board_init+0x64>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80002152:	30 4b       	mov	r11,4
80002154:	48 dc       	lddpc	r12,80002188 <board_init+0x68>
80002156:	f0 1f 00 0c 	mcall	80002184 <board_init+0x64>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
8000215a:	30 0b       	mov	r11,0
8000215c:	30 2c       	mov	r12,2
8000215e:	f0 1f 00 08 	mcall	8000217c <board_init+0x5c>
80002162:	30 0b       	mov	r11,0
80002164:	31 2c       	mov	r12,18
80002166:	f0 1f 00 06 	mcall	8000217c <board_init+0x5c>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
8000216a:	30 2b       	mov	r11,2
8000216c:	48 8c       	lddpc	r12,8000218c <board_init+0x6c>
8000216e:	f0 1f 00 06 	mcall	80002184 <board_init+0x64>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION},
		{USART_TXD_PIN, USART_TXD_FUNCTION},
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
80002172:	30 2b       	mov	r11,2
80002174:	48 7c       	lddpc	r12,80002190 <board_init+0x70>
80002176:	f0 1f 00 04 	mcall	80002184 <board_init+0x64>
			sizeof(COMPORT_GPIO_MAP) / sizeof(COMPORT_GPIO_MAP[0]));
#endif
}
8000217a:	d8 02       	popm	pc
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	22 46       	sub	r6,36
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	2e 00       	sub	r0,-32
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	21 e8       	sub	r8,30
80002188:	80 00       	ld.sh	r0,r0[0x0]
8000218a:	2e 20       	sub	r0,-30
8000218c:	80 00       	ld.sh	r0,r0[0x0]
8000218e:	2e 50       	sub	r0,-27
80002190:	80 00       	ld.sh	r0,r0[0x0]
80002192:	2e 40       	sub	r0,-28

80002194 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002194:	f8 08 16 05 	lsr	r8,r12,0x5
80002198:	a9 68       	lsl	r8,0x8
8000219a:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000219e:	58 1b       	cp.w	r11,1
800021a0:	c0 d0       	breq	800021ba <gpio_enable_module_pin+0x26>
800021a2:	c0 63       	brcs	800021ae <gpio_enable_module_pin+0x1a>
800021a4:	58 2b       	cp.w	r11,2
800021a6:	c1 00       	breq	800021c6 <gpio_enable_module_pin+0x32>
800021a8:	58 3b       	cp.w	r11,3
800021aa:	c1 40       	breq	800021d2 <gpio_enable_module_pin+0x3e>
800021ac:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800021ae:	30 19       	mov	r9,1
800021b0:	f2 0c 09 49 	lsl	r9,r9,r12
800021b4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800021b6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021b8:	c1 28       	rjmp	800021dc <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800021ba:	30 19       	mov	r9,1
800021bc:	f2 0c 09 49 	lsl	r9,r9,r12
800021c0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800021c2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021c4:	c0 c8       	rjmp	800021dc <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800021c6:	30 19       	mov	r9,1
800021c8:	f2 0c 09 49 	lsl	r9,r9,r12
800021cc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800021ce:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021d0:	c0 68       	rjmp	800021dc <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800021d2:	30 19       	mov	r9,1
800021d4:	f2 0c 09 49 	lsl	r9,r9,r12
800021d8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800021da:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800021dc:	30 19       	mov	r9,1
800021de:	f2 0c 09 4c 	lsl	r12,r9,r12
800021e2:	91 2c       	st.w	r8[0x8],r12
800021e4:	5e fd       	retal	0
800021e6:	d7 03       	nop

800021e8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800021e8:	d4 21       	pushm	r4-r7,lr
800021ea:	18 97       	mov	r7,r12
800021ec:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800021ee:	58 0b       	cp.w	r11,0
800021f0:	c0 31       	brne	800021f6 <gpio_enable_module+0xe>
800021f2:	30 05       	mov	r5,0
800021f4:	c0 d8       	rjmp	8000220e <gpio_enable_module+0x26>
800021f6:	30 06       	mov	r6,0
800021f8:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800021fa:	6e 1b       	ld.w	r11,r7[0x4]
800021fc:	6e 0c       	ld.w	r12,r7[0x0]
800021fe:	f0 1f 00 06 	mcall	80002214 <gpio_enable_module+0x2c>
80002202:	18 45       	or	r5,r12
		gpiomap++;
80002204:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002206:	2f f6       	sub	r6,-1
80002208:	0c 34       	cp.w	r4,r6
8000220a:	fe 9b ff f8 	brhi	800021fa <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000220e:	0a 9c       	mov	r12,r5
80002210:	d8 22       	popm	r4-r7,pc
80002212:	00 00       	add	r0,r0
80002214:	80 00       	ld.sh	r0,r0[0x0]
80002216:	21 94       	sub	r4,25

80002218 <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002218:	f8 08 16 05 	lsr	r8,r12,0x5
8000221c:	a9 68       	lsl	r8,0x8
8000221e:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002222:	30 19       	mov	r9,1
80002224:	f2 0c 09 4c 	lsl	r12,r9,r12
80002228:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
8000222c:	91 1c       	st.w	r8[0x4],r12
}
8000222e:	5e fc       	retal	r12

80002230 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002230:	f8 08 16 05 	lsr	r8,r12,0x5
80002234:	a9 68       	lsl	r8,0x8
80002236:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->puers = 1 << (pin & 0x1F);
8000223a:	30 19       	mov	r9,1
8000223c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002240:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80002244:	5e fc       	retal	r12

80002246 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002246:	f8 08 16 05 	lsr	r8,r12,0x5
8000224a:	a9 68       	lsl	r8,0x8
8000224c:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002250:	16 99       	mov	r9,r11
80002252:	e2 19 00 04 	andl	r9,0x4,COH
80002256:	c0 70       	breq	80002264 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80002258:	30 19       	mov	r9,1
8000225a:	f2 0c 09 49 	lsl	r9,r9,r12
8000225e:	f1 49 00 74 	st.w	r8[116],r9
80002262:	c0 68       	rjmp	8000226e <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002264:	30 19       	mov	r9,1
80002266:	f2 0c 09 49 	lsl	r9,r9,r12
8000226a:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000226e:	16 99       	mov	r9,r11
80002270:	e2 19 00 80 	andl	r9,0x80,COH
80002274:	c2 40       	breq	800022bc <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002276:	16 99       	mov	r9,r11
80002278:	e2 19 01 80 	andl	r9,0x180,COH
8000227c:	c0 90       	breq	8000228e <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000227e:	30 19       	mov	r9,1
80002280:	f2 0c 09 49 	lsl	r9,r9,r12
80002284:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002288:	f1 49 00 b8 	st.w	r8[184],r9
8000228c:	c1 88       	rjmp	800022bc <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
8000228e:	16 99       	mov	r9,r11
80002290:	e2 19 02 80 	andl	r9,0x280,COH
80002294:	c0 90       	breq	800022a6 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002296:	30 19       	mov	r9,1
80002298:	f2 0c 09 49 	lsl	r9,r9,r12
8000229c:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800022a0:	f1 49 00 b8 	st.w	r8[184],r9
800022a4:	c0 c8       	rjmp	800022bc <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
800022a6:	16 99       	mov	r9,r11
800022a8:	e2 19 03 80 	andl	r9,0x380,COH
800022ac:	c0 80       	breq	800022bc <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800022ae:	30 19       	mov	r9,1
800022b0:	f2 0c 09 49 	lsl	r9,r9,r12
800022b4:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800022b8:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800022bc:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800022c0:	c1 50       	breq	800022ea <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
800022c2:	e2 1b 00 02 	andl	r11,0x2,COH
800022c6:	c0 70       	breq	800022d4 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800022c8:	30 19       	mov	r9,1
800022ca:	f2 0c 09 49 	lsl	r9,r9,r12
800022ce:	f1 49 00 54 	st.w	r8[84],r9
800022d2:	c0 68       	rjmp	800022de <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800022d4:	30 19       	mov	r9,1
800022d6:	f2 0c 09 49 	lsl	r9,r9,r12
800022da:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800022de:	30 19       	mov	r9,1
800022e0:	f2 0c 09 49 	lsl	r9,r9,r12
800022e4:	f1 49 00 44 	st.w	r8[68],r9
800022e8:	c0 68       	rjmp	800022f4 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800022ea:	30 19       	mov	r9,1
800022ec:	f2 0c 09 49 	lsl	r9,r9,r12
800022f0:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
800022f4:	30 19       	mov	r9,1
800022f6:	f2 0c 09 4c 	lsl	r12,r9,r12
800022fa:	91 1c       	st.w	r8[0x4],r12
}
800022fc:	5e fc       	retal	r12

800022fe <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800022fe:	f8 08 16 05 	lsr	r8,r12,0x5
80002302:	a9 68       	lsl	r8,0x8
80002304:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002308:	30 19       	mov	r9,1
8000230a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000230e:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002312:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002316:	91 1c       	st.w	r8[0x4],r12
}
80002318:	5e fc       	retal	r12

8000231a <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000231a:	f8 08 16 05 	lsr	r8,r12,0x5
8000231e:	a9 68       	lsl	r8,0x8
80002320:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002324:	30 19       	mov	r9,1
80002326:	f2 0c 09 4c 	lsl	r12,r9,r12
8000232a:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000232e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002332:	91 1c       	st.w	r8[0x4],r12
}
80002334:	5e fc       	retal	r12

80002336 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002336:	f8 08 16 05 	lsr	r8,r12,0x5
8000233a:	a9 68       	lsl	r8,0x8
8000233c:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80002340:	30 19       	mov	r9,1
80002342:	f2 0c 09 4c 	lsl	r12,r9,r12
80002346:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
8000234a:	12 3b       	cp.w	r11,r9
8000234c:	c0 a0       	breq	80002360 <gpio_enable_pin_interrupt+0x2a>
8000234e:	c0 43       	brcs	80002356 <gpio_enable_pin_interrupt+0x20>
80002350:	58 2b       	cp.w	r11,2
80002352:	c1 11       	brne	80002374 <gpio_enable_pin_interrupt+0x3e>
80002354:	c0 b8       	rjmp	8000236a <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002356:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
8000235a:	f1 4c 00 b8 	st.w	r8[184],r12
8000235e:	c0 c8       	rjmp	80002376 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80002360:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002364:	f1 4c 00 b8 	st.w	r8[184],r12
80002368:	c0 78       	rjmp	80002376 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000236a:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
8000236e:	f1 4c 00 b4 	st.w	r8[180],r12
80002372:	c0 28       	rjmp	80002376 <gpio_enable_pin_interrupt+0x40>
80002374:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80002376:	f1 4c 00 94 	st.w	r8[148],r12
8000237a:	5e fd       	retal	0

8000237c <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000237c:	f8 08 16 05 	lsr	r8,r12,0x5
80002380:	a9 68       	lsl	r8,0x8
80002382:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80002386:	f0 f8 00 d0 	ld.w	r8,r8[208]
8000238a:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000238e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002392:	5e fc       	retal	r12

80002394 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002394:	f8 08 16 05 	lsr	r8,r12,0x5
80002398:	a9 68       	lsl	r8,0x8
8000239a:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000239e:	30 19       	mov	r9,1
800023a0:	f2 0c 09 4c 	lsl	r12,r9,r12
800023a4:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
800023a8:	5e fc       	retal	r12

800023aa <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800023aa:	c0 08       	rjmp	800023aa <_unhandled_interrupt>

800023ac <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800023ac:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800023b0:	49 99       	lddpc	r9,80002414 <INTC_register_interrupt+0x68>
800023b2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800023b6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800023ba:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800023bc:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800023c0:	58 0a       	cp.w	r10,0
800023c2:	c0 91       	brne	800023d4 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800023c4:	49 59       	lddpc	r9,80002418 <INTC_register_interrupt+0x6c>
800023c6:	49 6a       	lddpc	r10,8000241c <INTC_register_interrupt+0x70>
800023c8:	12 1a       	sub	r10,r9
800023ca:	fe 79 08 00 	mov	r9,-63488
800023ce:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800023d2:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800023d4:	58 1a       	cp.w	r10,1
800023d6:	c0 a1       	brne	800023ea <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800023d8:	49 09       	lddpc	r9,80002418 <INTC_register_interrupt+0x6c>
800023da:	49 2a       	lddpc	r10,80002420 <INTC_register_interrupt+0x74>
800023dc:	12 1a       	sub	r10,r9
800023de:	bf aa       	sbr	r10,0x1e
800023e0:	fe 79 08 00 	mov	r9,-63488
800023e4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800023e8:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800023ea:	58 2a       	cp.w	r10,2
800023ec:	c0 a1       	brne	80002400 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800023ee:	48 b9       	lddpc	r9,80002418 <INTC_register_interrupt+0x6c>
800023f0:	48 da       	lddpc	r10,80002424 <INTC_register_interrupt+0x78>
800023f2:	12 1a       	sub	r10,r9
800023f4:	bf ba       	sbr	r10,0x1f
800023f6:	fe 79 08 00 	mov	r9,-63488
800023fa:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800023fe:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002400:	48 69       	lddpc	r9,80002418 <INTC_register_interrupt+0x6c>
80002402:	48 aa       	lddpc	r10,80002428 <INTC_register_interrupt+0x7c>
80002404:	12 1a       	sub	r10,r9
80002406:	ea 1a c0 00 	orh	r10,0xc000
8000240a:	fe 79 08 00 	mov	r9,-63488
8000240e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002412:	5e fc       	retal	r12
80002414:	80 00       	ld.sh	r0,r0[0x0]
80002416:	2e 60       	sub	r0,-26
80002418:	80 00       	ld.sh	r0,r0[0x0]
8000241a:	2c 00       	sub	r0,-64
8000241c:	80 00       	ld.sh	r0,r0[0x0]
8000241e:	2d 04       	sub	r4,-48
80002420:	80 00       	ld.sh	r0,r0[0x0]
80002422:	2d 12       	sub	r2,-47
80002424:	80 00       	ld.sh	r0,r0[0x0]
80002426:	2d 20       	sub	r0,-46
80002428:	80 00       	ld.sh	r0,r0[0x0]
8000242a:	2d 2e       	sub	lr,-46

8000242c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000242c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000242e:	49 18       	lddpc	r8,80002470 <INTC_init_interrupts+0x44>
80002430:	e3 b8 00 01 	mtsr	0x4,r8
80002434:	49 0e       	lddpc	lr,80002474 <INTC_init_interrupts+0x48>
80002436:	30 07       	mov	r7,0
80002438:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000243a:	49 0c       	lddpc	r12,80002478 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000243c:	49 05       	lddpc	r5,8000247c <INTC_init_interrupts+0x50>
8000243e:	10 15       	sub	r5,r8
80002440:	fe 76 08 00 	mov	r6,-63488
80002444:	c1 08       	rjmp	80002464 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002446:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002448:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000244a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000244c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002450:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002452:	10 3a       	cp.w	r10,r8
80002454:	fe 9b ff fc 	brhi	8000244c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002458:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000245c:	2f f7       	sub	r7,-1
8000245e:	2f 8e       	sub	lr,-8
80002460:	59 47       	cp.w	r7,20
80002462:	c0 50       	breq	8000246c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002464:	7c 08       	ld.w	r8,lr[0x0]
80002466:	58 08       	cp.w	r8,0
80002468:	ce f1       	brne	80002446 <INTC_init_interrupts+0x1a>
8000246a:	cf 7b       	rjmp	80002458 <INTC_init_interrupts+0x2c>
8000246c:	d8 22       	popm	r4-r7,pc
8000246e:	00 00       	add	r0,r0
80002470:	80 00       	ld.sh	r0,r0[0x0]
80002472:	2c 00       	sub	r0,-64
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	2e 60       	sub	r0,-26
80002478:	80 00       	ld.sh	r0,r0[0x0]
8000247a:	23 aa       	sub	r10,58
8000247c:	80 00       	ld.sh	r0,r0[0x0]
8000247e:	2d 04       	sub	r4,-48

80002480 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002480:	fe 78 08 00 	mov	r8,-63488
80002484:	e0 69 00 83 	mov	r9,131
80002488:	f2 0c 01 0c 	sub	r12,r9,r12
8000248c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002490:	f2 ca ff c0 	sub	r10,r9,-64
80002494:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002498:	58 08       	cp.w	r8,0
8000249a:	c0 21       	brne	8000249e <_get_interrupt_handler+0x1e>
8000249c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
8000249e:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800024a2:	48 5a       	lddpc	r10,800024b4 <_get_interrupt_handler+0x34>
800024a4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800024a8:	f0 08 11 1f 	rsub	r8,r8,31
800024ac:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800024ae:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800024b2:	5e fc       	retal	r12
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	2e 60       	sub	r0,-26

800024b8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800024b8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800024bc:	fe c0 f8 bc 	sub	r0,pc,-1860

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800024c0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800024c4:	d5 53       	csrf	0x15
  cp      r0, r1
800024c6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800024c8:	31 01       	mov	r1,16
  lda.w   r2, _data_lma
800024ca:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800024cc:	c0 72       	brcc	800024da <idata_load_loop_end>
  st.d    r0++, r4
800024ce:	fe c2 f5 ce 	sub	r2,pc,-2610

800024d2 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800024d2:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800024d4:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800024d6:	02 30       	cp.w	r0,r1
  cp      r0, r1
800024d8:	cf d3       	brcs	800024d2 <idata_load_loop>

800024da <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800024da:	31 00       	mov	r0,16
  mov     r2, 0
800024dc:	e0 61 01 00 	mov	r1,256
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800024e0:	02 30       	cp.w	r0,r1
  cp      r0, r1
800024e2:	c0 62       	brcc	800024ee <udata_clear_loop_end>
  brlo    udata_clear_loop
800024e4:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800024e6:	30 03       	mov	r3,0

800024e8 <udata_clear_loop>:
800024e8:	a1 22       	st.d	r0++,r2
800024ea:	02 30       	cp.w	r0,r1
800024ec:	cf e3       	brcs	800024e8 <udata_clear_loop>

800024ee <udata_clear_loop_end>:
800024ee:	fe cf fc 66 	sub	pc,pc,-922
800024f2:	d7 03       	nop

800024f4 <Inicializa_PLL>:
void inicializa_PM (void){
	pm_switch_to_osc0(&AVR32_PM,12000000,3); //fOSC= 12MHz, startup 18ms
	flashc_set_wait_state(1);
} //Fin PM

void Inicializa_PLL(uint8_t mul){
800024f4:	eb cd 40 80 	pushm	r7,lr
800024f8:	18 97       	mov	r7,r12
	pm_switch_to_osc0(&AVR32_PM, 12000000,3);
800024fa:	30 3a       	mov	r10,3
800024fc:	e0 6b 1b 00 	mov	r11,6912
80002500:	ea 1b 00 b7 	orh	r11,0xb7
80002504:	fe 7c 0c 00 	mov	r12,-62464
80002508:	f0 1f 00 14 	mcall	80002558 <Inicializa_PLL+0x64>
	pm_pll_setup(&AVR32_PM,0, mul, 0,0,16); //pll0, mul variable, sin div, 16 lockcount
8000250c:	31 08       	mov	r8,16
8000250e:	1a d8       	st.w	--sp,r8
80002510:	30 08       	mov	r8,0
80002512:	10 99       	mov	r9,r8
80002514:	0e 9a       	mov	r10,r7
80002516:	10 9b       	mov	r11,r8
80002518:	fe 7c 0c 00 	mov	r12,-62464
8000251c:	f0 1f 00 10 	mcall	8000255c <Inicializa_PLL+0x68>
	pm_pll_set_option(&AVR32_PM,0,1,0,0);  //pll0, 80-180, no divide/2, start normal
80002520:	30 08       	mov	r8,0
80002522:	10 99       	mov	r9,r8
80002524:	30 1a       	mov	r10,1
80002526:	10 9b       	mov	r11,r8
80002528:	fe 7c 0c 00 	mov	r12,-62464
8000252c:	f0 1f 00 0d 	mcall	80002560 <Inicializa_PLL+0x6c>
	pm_pll_enable(&AVR32_PM,0);
80002530:	30 0b       	mov	r11,0
80002532:	fe 7c 0c 00 	mov	r12,-62464
80002536:	f0 1f 00 0c 	mcall	80002564 <Inicializa_PLL+0x70>
	pm_wait_for_pll0_locked(&AVR32_PM);
8000253a:	fe 7c 0c 00 	mov	r12,-62464
8000253e:	f0 1f 00 0b 	mcall	80002568 <Inicializa_PLL+0x74>
	pm_switch_to_clock(&AVR32_PM,2);//PLL como MC
80002542:	30 2b       	mov	r11,2
80002544:	fe 7c 0c 00 	mov	r12,-62464
80002548:	f0 1f 00 09 	mcall	8000256c <Inicializa_PLL+0x78>
	flashc_set_wait_state(1);
8000254c:	30 1c       	mov	r12,1
8000254e:	f0 1f 00 09 	mcall	80002570 <Inicializa_PLL+0x7c>
80002552:	2f fd       	sub	sp,-4
}//Fin Fn
80002554:	e3 cd 80 80 	ldm	sp++,r7,pc
80002558:	80 00       	ld.sh	r0,r0[0x0]
8000255a:	20 f4       	sub	r4,15
8000255c:	80 00       	ld.sh	r0,r0[0x0]
8000255e:	20 94       	sub	r4,9
80002560:	80 00       	ld.sh	r0,r0[0x0]
80002562:	20 b6       	sub	r6,11
80002564:	80 00       	ld.sh	r0,r0[0x0]
80002566:	20 d0       	sub	r0,13
80002568:	80 00       	ld.sh	r0,r0[0x0]
8000256a:	20 de       	sub	lr,13
8000256c:	80 00       	ld.sh	r0,r0[0x0]
8000256e:	20 e8       	sub	r8,14
80002570:	80 00       	ld.sh	r0,r0[0x0]
80002572:	20 08       	sub	r8,0

80002574 <inicializa_PM>:
	
} //Fin Botones



void inicializa_PM (void){
80002574:	d4 01       	pushm	lr
	pm_switch_to_osc0(&AVR32_PM,12000000,3); //fOSC= 12MHz, startup 18ms
80002576:	30 3a       	mov	r10,3
80002578:	e0 6b 1b 00 	mov	r11,6912
8000257c:	ea 1b 00 b7 	orh	r11,0xb7
80002580:	fe 7c 0c 00 	mov	r12,-62464
80002584:	f0 1f 00 03 	mcall	80002590 <inicializa_PM+0x1c>
	flashc_set_wait_state(1);
80002588:	30 1c       	mov	r12,1
8000258a:	f0 1f 00 03 	mcall	80002594 <inicializa_PM+0x20>
} //Fin PM
8000258e:	d8 02       	popm	pc
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	20 f4       	sub	r4,15
80002594:	80 00       	ld.sh	r0,r0[0x0]
80002596:	20 08       	sub	r8,0

80002598 <Botones>:
	generalFlag=5;
}//Fin Fn



void Botones (void){
80002598:	d4 01       	pushm	lr
	
	if (gpio_get_pin_interrupt_flag(BTN_UP) == 1) {
8000259a:	33 6c       	mov	r12,54
8000259c:	f0 1f 00 1e 	mcall	80002614 <Botones+0x7c>
800025a0:	c0 70       	breq	800025ae <Botones+0x16>
		generalFlag=0;
800025a2:	30 09       	mov	r9,0
800025a4:	49 d8       	lddpc	r8,80002618 <Botones+0x80>
800025a6:	b0 89       	st.b	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_UP);
800025a8:	33 6c       	mov	r12,54
800025aa:	f0 1f 00 1d 	mcall	8000261c <Botones+0x84>
	}
	
	if (gpio_get_pin_interrupt_flag(BTN_DOWN)){
800025ae:	33 7c       	mov	r12,55
800025b0:	f0 1f 00 19 	mcall	80002614 <Botones+0x7c>
800025b4:	c0 70       	breq	800025c2 <Botones+0x2a>
		generalFlag=1;
800025b6:	30 19       	mov	r9,1
800025b8:	49 88       	lddpc	r8,80002618 <Botones+0x80>
800025ba:	b0 89       	st.b	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_DOWN);
800025bc:	33 7c       	mov	r12,55
800025be:	f0 1f 00 18 	mcall	8000261c <Botones+0x84>
	}
	
	if (gpio_get_pin_interrupt_flag(BTN_RIGHT)){
800025c2:	33 8c       	mov	r12,56
800025c4:	f0 1f 00 14 	mcall	80002614 <Botones+0x7c>
800025c8:	c0 70       	breq	800025d6 <Botones+0x3e>
		generalFlag=2;
800025ca:	30 29       	mov	r9,2
800025cc:	49 38       	lddpc	r8,80002618 <Botones+0x80>
800025ce:	b0 89       	st.b	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_RIGHT);
800025d0:	33 8c       	mov	r12,56
800025d2:	f0 1f 00 13 	mcall	8000261c <Botones+0x84>
	}
	
	if (gpio_get_pin_interrupt_flag(BTN_LEFT)){
800025d6:	33 9c       	mov	r12,57
800025d8:	f0 1f 00 0f 	mcall	80002614 <Botones+0x7c>
800025dc:	c0 70       	breq	800025ea <Botones+0x52>
		generalFlag=3;
800025de:	30 39       	mov	r9,3
800025e0:	48 e8       	lddpc	r8,80002618 <Botones+0x80>
800025e2:	b0 89       	st.b	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_LEFT);
800025e4:	33 9c       	mov	r12,57
800025e6:	f0 1f 00 0e 	mcall	8000261c <Botones+0x84>
	}
		
	if (gpio_get_pin_interrupt_flag(BTN_CENTER)){
800025ea:	33 ac       	mov	r12,58
800025ec:	f0 1f 00 0a 	mcall	80002614 <Botones+0x7c>
800025f0:	c0 70       	breq	800025fe <Botones+0x66>
		gpio_clear_pin_interrupt_flag(BTN_CENTER);
800025f2:	33 ac       	mov	r12,58
800025f4:	f0 1f 00 0a 	mcall	8000261c <Botones+0x84>
		generalFlag=4;
800025f8:	30 49       	mov	r9,4
800025fa:	48 88       	lddpc	r8,80002618 <Botones+0x80>
800025fc:	b0 89       	st.b	r8[0x0],r9
		}
		
	if (gpio_get_pin_interrupt_flag(BTN_CENTER)){
800025fe:	33 ac       	mov	r12,58
80002600:	f0 1f 00 05 	mcall	80002614 <Botones+0x7c>
80002604:	c0 70       	breq	80002612 <Botones+0x7a>
		gpio_clear_pin_interrupt_flag(BTN_CENTER);
80002606:	33 ac       	mov	r12,58
80002608:	f0 1f 00 05 	mcall	8000261c <Botones+0x84>
		generalFlag=4;
8000260c:	30 49       	mov	r9,4
8000260e:	48 38       	lddpc	r8,80002618 <Botones+0x80>
80002610:	b0 89       	st.b	r8[0x0],r9
80002612:	d8 02       	popm	pc
80002614:	80 00       	ld.sh	r0,r0[0x0]
80002616:	23 7c       	sub	r12,55
80002618:	00 00       	add	r0,r0
8000261a:	00 08       	add	r8,r0
8000261c:	80 00       	ld.sh	r0,r0[0x0]
8000261e:	23 94       	sub	r4,57

80002620 <Prender_Leds>:
		}//Fin FOR
	}//Fin de While
}//Fin IzqDer


void Prender_Leds(uint8_t value){
80002620:	eb cd 40 80 	pushm	r7,lr
80002624:	18 97       	mov	r7,r12
	
	uint8_t num=value;
	uint8_t result;
	
	gpio_set_gpio_pin(LED0);
80002626:	33 bc       	mov	r12,59
80002628:	f0 1f 00 1e 	mcall	800026a0 <Prender_Leds+0x80>
	gpio_set_gpio_pin(LED1);
8000262c:	33 cc       	mov	r12,60
8000262e:	f0 1f 00 1d 	mcall	800026a0 <Prender_Leds+0x80>
	gpio_set_gpio_pin(LED2);
80002632:	30 5c       	mov	r12,5
80002634:	f0 1f 00 1b 	mcall	800026a0 <Prender_Leds+0x80>
	gpio_set_gpio_pin(LED3);
80002638:	30 6c       	mov	r12,6
8000263a:	f0 1f 00 1a 	mcall	800026a0 <Prender_Leds+0x80>
	result= num % 2;
	if (result ==1){gpio_clr_gpio_pin(LED3);}else {gpio_set_gpio_pin(LED3);}
8000263e:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80002642:	c0 50       	breq	8000264c <Prender_Leds+0x2c>
80002644:	30 6c       	mov	r12,6
80002646:	f0 1f 00 18 	mcall	800026a4 <Prender_Leds+0x84>
8000264a:	c0 48       	rjmp	80002652 <Prender_Leds+0x32>
8000264c:	30 6c       	mov	r12,6
8000264e:	f0 1f 00 15 	mcall	800026a0 <Prender_Leds+0x80>
	num=(int) num/2;
80002652:	ef d7 c0 28 	bfextu	r7,r7,0x1,0x8
	result = num % 2;
	if (result ==1){gpio_clr_gpio_pin(LED2);}else {gpio_set_gpio_pin(LED2);}
80002656:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
8000265a:	c0 50       	breq	80002664 <Prender_Leds+0x44>
8000265c:	30 5c       	mov	r12,5
8000265e:	f0 1f 00 12 	mcall	800026a4 <Prender_Leds+0x84>
80002662:	c0 48       	rjmp	8000266a <Prender_Leds+0x4a>
80002664:	30 5c       	mov	r12,5
80002666:	f0 1f 00 0f 	mcall	800026a0 <Prender_Leds+0x80>
	num=(int)num/2;
8000266a:	a1 97       	lsr	r7,0x1
	result= num % 2;
	if (result ==1){gpio_clr_gpio_pin(LED1);}else {gpio_set_gpio_pin(LED1);}
8000266c:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80002670:	c0 50       	breq	8000267a <Prender_Leds+0x5a>
80002672:	33 cc       	mov	r12,60
80002674:	f0 1f 00 0c 	mcall	800026a4 <Prender_Leds+0x84>
80002678:	c0 48       	rjmp	80002680 <Prender_Leds+0x60>
8000267a:	33 cc       	mov	r12,60
8000267c:	f0 1f 00 09 	mcall	800026a0 <Prender_Leds+0x80>
	num=(int)num/2;
	result= num % 2;
	if (result ==1){gpio_clr_gpio_pin(LED0);}else {gpio_set_gpio_pin(LED0);}
80002680:	ef d7 c0 21 	bfextu	r7,r7,0x1,0x1
80002684:	c0 50       	breq	8000268e <Prender_Leds+0x6e>
80002686:	33 bc       	mov	r12,59
80002688:	f0 1f 00 07 	mcall	800026a4 <Prender_Leds+0x84>
8000268c:	c0 48       	rjmp	80002694 <Prender_Leds+0x74>
8000268e:	33 bc       	mov	r12,59
80002690:	f0 1f 00 04 	mcall	800026a0 <Prender_Leds+0x80>
	num=(int)num/2;
	generalFlag=5;
80002694:	30 59       	mov	r9,5
80002696:	48 58       	lddpc	r8,800026a8 <Prender_Leds+0x88>
80002698:	b0 89       	st.b	r8[0x0],r9
}//Fin Fn
8000269a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000269e:	00 00       	add	r0,r0
800026a0:	80 00       	ld.sh	r0,r0[0x0]
800026a2:	22 fe       	sub	lr,47
800026a4:	80 00       	ld.sh	r0,r0[0x0]
800026a6:	23 1a       	sub	r10,49
800026a8:	00 00       	add	r0,r0
800026aa:	00 08       	add	r8,r0

800026ac <Prender_Leds_Cero>:
		}//Fin FOR
	}//Fin de While
}//Fin Fn


void Prender_Leds_Cero(uint8_t value){
800026ac:	eb cd 40 80 	pushm	r7,lr
800026b0:	18 97       	mov	r7,r12

	uint8_t num = value;
	uint8_t result;
	gpio_set_gpio_pin(LED0);
800026b2:	33 bc       	mov	r12,59
800026b4:	f0 1f 00 1d 	mcall	80002728 <Prender_Leds_Cero+0x7c>
	gpio_set_gpio_pin(LED1);
800026b8:	33 cc       	mov	r12,60
800026ba:	f0 1f 00 1c 	mcall	80002728 <Prender_Leds_Cero+0x7c>
	gpio_set_gpio_pin(LED2);
800026be:	30 5c       	mov	r12,5
800026c0:	f0 1f 00 1a 	mcall	80002728 <Prender_Leds_Cero+0x7c>
	gpio_set_gpio_pin(LED3);
800026c4:	30 6c       	mov	r12,6
800026c6:	f0 1f 00 19 	mcall	80002728 <Prender_Leds_Cero+0x7c>
	result= num % 2;
	if (result ==1){gpio_set_gpio_pin(LED0);}else {gpio_clr_gpio_pin(LED0);} //Con Set apaga los LEDS!
800026ca:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
800026ce:	c0 50       	breq	800026d8 <Prender_Leds_Cero+0x2c>
800026d0:	33 bc       	mov	r12,59
800026d2:	f0 1f 00 16 	mcall	80002728 <Prender_Leds_Cero+0x7c>
800026d6:	c0 48       	rjmp	800026de <Prender_Leds_Cero+0x32>
800026d8:	33 bc       	mov	r12,59
800026da:	f0 1f 00 15 	mcall	8000272c <Prender_Leds_Cero+0x80>
	num=num/2;
800026de:	ef d7 c0 28 	bfextu	r7,r7,0x1,0x8
	result = num % 2;
	if (result ==1){gpio_set_gpio_pin(LED1);}else {gpio_clr_gpio_pin(LED1);}
800026e2:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
800026e6:	c0 50       	breq	800026f0 <Prender_Leds_Cero+0x44>
800026e8:	33 cc       	mov	r12,60
800026ea:	f0 1f 00 10 	mcall	80002728 <Prender_Leds_Cero+0x7c>
800026ee:	c0 48       	rjmp	800026f6 <Prender_Leds_Cero+0x4a>
800026f0:	33 cc       	mov	r12,60
800026f2:	f0 1f 00 0f 	mcall	8000272c <Prender_Leds_Cero+0x80>
	num=num/2;
800026f6:	a1 97       	lsr	r7,0x1
	result= num % 2;
	if (result ==1){gpio_set_gpio_pin(LED2);}else {gpio_clr_gpio_pin(LED2);}
800026f8:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
800026fc:	c0 50       	breq	80002706 <Prender_Leds_Cero+0x5a>
800026fe:	30 5c       	mov	r12,5
80002700:	f0 1f 00 0a 	mcall	80002728 <Prender_Leds_Cero+0x7c>
80002704:	c0 48       	rjmp	8000270c <Prender_Leds_Cero+0x60>
80002706:	30 5c       	mov	r12,5
80002708:	f0 1f 00 09 	mcall	8000272c <Prender_Leds_Cero+0x80>
	num=num/2;
	result= num % 2;
	if (result ==1){gpio_set_gpio_pin(LED3);}else {gpio_clr_gpio_pin(LED3);}
8000270c:	ef d7 c0 21 	bfextu	r7,r7,0x1,0x1
80002710:	c0 60       	breq	8000271c <Prender_Leds_Cero+0x70>
80002712:	30 6c       	mov	r12,6
80002714:	f0 1f 00 05 	mcall	80002728 <Prender_Leds_Cero+0x7c>
80002718:	e3 cd 80 80 	ldm	sp++,r7,pc
8000271c:	30 6c       	mov	r12,6
8000271e:	f0 1f 00 04 	mcall	8000272c <Prender_Leds_Cero+0x80>
80002722:	e3 cd 80 80 	ldm	sp++,r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	22 fe       	sub	lr,47
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	23 1a       	sub	r10,49

80002730 <Izq_Der>:
	num=num/2;
}//Fin Fn

void Izq_Der(void){
80002730:	eb cd 40 f8 	pushm	r3-r7,lr
80002734:	30 87       	mov	r7,8
	uint8_t numero=8;//Este numero en bin: 1000, 0100, 0010, 0001 (8,4,2,1) 
	uint8_t mul=3; //Para PLL0
	uint8_t back=0;
	
	while (center!=1){   //Mientras no haya entrado un Enter
80002736:	4a 46       	lddpc	r6,800027c4 <Izq_Der+0x94>
80002738:	30 15       	mov	r5,1
8000273a:	30 03       	mov	r3,0
8000273c:	c2 d8       	rjmp	80002796 <Izq_Der+0x66>
8000273e:	06 94       	mov	r4,r3
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002740:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002744:	e0 79 c2 00 	mov	r9,115200
80002748:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000274c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002750:	14 38       	cp.w	r8,r10
80002752:	e0 88 00 08 	brls	80002762 <Izq_Der+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002756:	12 38       	cp.w	r8,r9
80002758:	fe 98 ff fa 	brls	8000274c <Izq_Der+0x1c>
8000275c:	12 3a       	cp.w	r10,r9
8000275e:	c2 23       	brcs	800027a2 <Izq_Der+0x72>
80002760:	cf 6b       	rjmp	8000274c <Izq_Der+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002762:	12 38       	cp.w	r8,r9
80002764:	e0 8b 00 1f 	brhi	800027a2 <Izq_Der+0x72>
80002768:	12 3a       	cp.w	r10,r9
8000276a:	c1 c3       	brcs	800027a2 <Izq_Der+0x72>
8000276c:	cf 0b       	rjmp	8000274c <Izq_Der+0x1c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000276e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002772:	14 38       	cp.w	r8,r10
80002774:	e0 88 00 08 	brls	80002784 <Izq_Der+0x54>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002778:	12 38       	cp.w	r8,r9
8000277a:	fe 98 ff fa 	brls	8000276e <Izq_Der+0x3e>
8000277e:	12 3a       	cp.w	r10,r9
80002780:	c1 c3       	brcs	800027b8 <Izq_Der+0x88>
80002782:	cf 6b       	rjmp	8000276e <Izq_Der+0x3e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002784:	12 38       	cp.w	r8,r9
80002786:	e0 8b 00 19 	brhi	800027b8 <Izq_Der+0x88>
8000278a:	12 3a       	cp.w	r10,r9
8000278c:	c1 63       	brcs	800027b8 <Izq_Der+0x88>
8000278e:	cf 0b       	rjmp	8000276e <Izq_Der+0x3e>
		for (int i=0; i<4; i++){ //Prende de Izq a der
80002790:	2f f4       	sub	r4,-1
80002792:	58 44       	cp.w	r4,4
80002794:	cd 61       	brne	80002740 <Izq_Der+0x10>
void Izq_Der(void){
	uint8_t numero=8;//Este numero en bin: 1000, 0100, 0010, 0001 (8,4,2,1) 
	uint8_t mul=3; //Para PLL0
	uint8_t back=0;
	
	while (center!=1){   //Mientras no haya entrado un Enter
80002796:	0d 88       	ld.ub	r8,r6[0x0]
80002798:	ea 08 18 00 	cp.b	r8,r5
8000279c:	cd 11       	brne	8000273e <Izq_Der+0xe>
8000279e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
		for (int i=0; i<4; i++){ //Prende de Izq a der
			delay_ms(1000);
			Prender_Leds(numero); //Imprime la primera vez 1000
800027a2:	0e 9c       	mov	r12,r7
800027a4:	f0 1f 00 09 	mcall	800027c8 <Izq_Der+0x98>
			numero=numero/2;
800027a8:	a1 97       	lsr	r7,0x1
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800027aa:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800027ae:	e0 79 c2 00 	mov	r9,115200
800027b2:	f0 09 00 0a 	add	r10,r8,r9
800027b6:	cd cb       	rjmp	8000276e <Izq_Der+0x3e>
				if (back == 0){mul++;} else {mul --;}
				numero=8; //Empieza el corrimiento otra vez
				i=0;
			}//Fin IF
			*/
			if (center == 1){break;} //Si se PRESIONO LA TECLA CENTER, Sale de aqui y mantiene el valor que quedo
800027b8:	0d 88       	ld.ub	r8,r6[0x0]
800027ba:	ea 08 18 00 	cp.b	r8,r5
800027be:	ce c0       	breq	80002796 <Izq_Der+0x66>
800027c0:	ce 8b       	rjmp	80002790 <Izq_Der+0x60>
800027c2:	00 00       	add	r0,r0
800027c4:	00 00       	add	r0,r0
800027c6:	00 fc       	st.b	--r0,r12
800027c8:	80 00       	ld.sh	r0,r0[0x0]
800027ca:	26 20       	sub	r0,98

800027cc <Der_Izq>:
	} //Fin While
	
}//Fin de Main


void Der_Izq(void){
800027cc:	d4 31       	pushm	r0-r7,lr
800027ce:	20 2d       	sub	sp,8
800027d0:	30 09       	mov	r9,0
800027d2:	50 09       	stdsp	sp[0x0],r9
800027d4:	30 31       	mov	r1,3
800027d6:	30 13       	mov	r3,1
	uint8_t numero=1;
	uint8_t mul=3; //Para PLL0
	uint8_t back=0;
	
	while (center!=1){   //Mientras no haya entrado un Enter
800027d8:	12 94       	mov	r4,r9
				if (mul ==6){
					back=1;
					} else if (mul == 3){ //limite para Fout, tiene que ir de regreso
					back=0;
				}
				if (back == 0){mul++;} else {mul --;}
800027da:	12 90       	mov	r0,r9
800027dc:	50 19       	stdsp	sp[0x4],r9
void Der_Izq(void){
	uint8_t numero=1;
	uint8_t mul=3; //Para PLL0
	uint8_t back=0;
	
	while (center!=1){   //Mientras no haya entrado un Enter
800027de:	c4 18       	rjmp	80002860 <Der_Izq+0x94>
800027e0:	08 97       	mov	r7,r4
			if (i==3)
			{
				Inicializa_PLL(mul); //FN PARA CAMBIAR FRECUENCIA DE PLL
				if (mul ==6){
					back=1;
					} else if (mul == 3){ //limite para Fout, tiene que ir de regreso
800027e2:	30 32       	mov	r2,3
				}
				if (back == 0){mul++;} else {mul --;}
				numero=8; //Empieza el corrimiento otra vez
				i=0;
			}//Fin IF
			if (center == 1){break;}
800027e4:	4a 66       	lddpc	r6,8000287c <Der_Izq+0xb0>
800027e6:	30 15       	mov	r5,1
	uint8_t mul=3; //Para PLL0
	uint8_t back=0;
	
	while (center!=1){   //Mientras no haya entrado un Enter
		for (int i=0; i<4; i++){ //Prende de DER a IZQ
			Prender_Leds(numero);
800027e8:	06 9c       	mov	r12,r3
800027ea:	f0 1f 00 26 	mcall	80002880 <Der_Izq+0xb4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800027ee:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800027f2:	e0 69 e1 00 	mov	r9,57600
800027f6:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800027fa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800027fe:	14 38       	cp.w	r8,r10
80002800:	e0 88 00 08 	brls	80002810 <Der_Izq+0x44>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002804:	12 38       	cp.w	r8,r9
80002806:	fe 98 ff fa 	brls	800027fa <Der_Izq+0x2e>
8000280a:	12 3a       	cp.w	r10,r9
8000280c:	c3 13       	brcs	8000286e <Der_Izq+0xa2>
8000280e:	cf 6b       	rjmp	800027fa <Der_Izq+0x2e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002810:	12 38       	cp.w	r8,r9
80002812:	e0 8b 00 2e 	brhi	8000286e <Der_Izq+0xa2>
80002816:	12 3a       	cp.w	r10,r9
80002818:	c2 b3       	brcs	8000286e <Der_Izq+0xa2>
8000281a:	cf 0b       	rjmp	800027fa <Der_Izq+0x2e>
			numero=numero*2;
			delay_ms(500);
			if (i==3)
			{
				Inicializa_PLL(mul); //FN PARA CAMBIAR FRECUENCIA DE PLL
8000281c:	02 9c       	mov	r12,r1
8000281e:	f0 1f 00 1a 	mcall	80002884 <Der_Izq+0xb8>
				if (mul ==6){
80002822:	30 68       	mov	r8,6
80002824:	f0 01 18 00 	cp.b	r1,r8
80002828:	c0 e0       	breq	80002844 <Der_Izq+0x78>
					back=1;
					} else if (mul == 3){ //limite para Fout, tiene que ir de regreso
8000282a:	e4 01 18 00 	cp.b	r1,r2
8000282e:	c0 40       	breq	80002836 <Der_Izq+0x6a>
					back=0;
				}
				if (back == 0){mul++;} else {mul --;}
80002830:	40 09       	lddsp	r9,sp[0x0]
80002832:	58 09       	cp.w	r9,0
80002834:	c0 a1       	brne	80002848 <Der_Izq+0x7c>
80002836:	2f f1       	sub	r1,-1
80002838:	5c 51       	castu.b	r1
8000283a:	00 97       	mov	r7,r0
8000283c:	40 18       	lddsp	r8,sp[0x4]
8000283e:	50 08       	stdsp	sp[0x0],r8
80002840:	30 83       	mov	r3,8
80002842:	c0 78       	rjmp	80002850 <Der_Izq+0x84>
80002844:	30 19       	mov	r9,1
80002846:	50 09       	stdsp	sp[0x0],r9
80002848:	20 11       	sub	r1,1
8000284a:	5c 51       	castu.b	r1
8000284c:	00 97       	mov	r7,r0
8000284e:	30 83       	mov	r3,8
				numero=8; //Empieza el corrimiento otra vez
				i=0;
			}//Fin IF
			if (center == 1){break;}
80002850:	0d 88       	ld.ub	r8,r6[0x0]
80002852:	ea 08 18 00 	cp.b	r8,r5
80002856:	c0 50       	breq	80002860 <Der_Izq+0x94>
	uint8_t numero=1;
	uint8_t mul=3; //Para PLL0
	uint8_t back=0;
	
	while (center!=1){   //Mientras no haya entrado un Enter
		for (int i=0; i<4; i++){ //Prende de DER a IZQ
80002858:	2f f7       	sub	r7,-1
8000285a:	58 37       	cp.w	r7,3
8000285c:	fe 9a ff c6 	brle	800027e8 <Der_Izq+0x1c>
void Der_Izq(void){
	uint8_t numero=1;
	uint8_t mul=3; //Para PLL0
	uint8_t back=0;
	
	while (center!=1){   //Mientras no haya entrado un Enter
80002860:	48 78       	lddpc	r8,8000287c <Der_Izq+0xb0>
80002862:	11 89       	ld.ub	r9,r8[0x0]
80002864:	30 18       	mov	r8,1
80002866:	f0 09 18 00 	cp.b	r9,r8
8000286a:	cb b1       	brne	800027e0 <Der_Izq+0x14>
8000286c:	c0 68       	rjmp	80002878 <Der_Izq+0xac>
		for (int i=0; i<4; i++){ //Prende de DER a IZQ
			Prender_Leds(numero);
			numero=numero*2;
			delay_ms(500);
			if (i==3)
8000286e:	58 37       	cp.w	r7,3
80002870:	cd 60       	breq	8000281c <Der_Izq+0x50>
	uint8_t back=0;
	
	while (center!=1){   //Mientras no haya entrado un Enter
		for (int i=0; i<4; i++){ //Prende de DER a IZQ
			Prender_Leds(numero);
			numero=numero*2;
80002872:	a1 73       	lsl	r3,0x1
80002874:	5c 53       	castu.b	r3
80002876:	ce db       	rjmp	80002850 <Der_Izq+0x84>
				i=0;
			}//Fin IF
			if (center == 1){break;}
		}//Fin FOR
	}//Fin de While
}//Fin Fn
80002878:	2f ed       	sub	sp,-8
8000287a:	d8 32       	popm	r0-r7,pc
8000287c:	00 00       	add	r0,r0
8000287e:	00 fc       	st.b	--r0,r12
80002880:	80 00       	ld.sh	r0,r0[0x0]
80002882:	26 20       	sub	r0,98
80002884:	80 00       	ld.sh	r0,r0[0x0]
80002886:	24 f4       	sub	r4,79

80002888 <main>:
void Izq_Der(void);
void Der_Izq(void);
void Prender_Leds_Cero(uint8_t value);

int main (void)
{
80002888:	d4 31       	pushm	r0-r7,lr

	inicializa_PM();
8000288a:	f0 1f 00 64 	mcall	80002a18 <main+0x190>
	delay_init(12000000);
	
	board_init();
8000288e:	f0 1f 00 64 	mcall	80002a1c <main+0x194>
	
	Disable_global_interrupt();
80002892:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80002894:	f0 1f 00 63 	mcall	80002a20 <main+0x198>
	INTC_register_interrupt(&Botones, 70, 3);
80002898:	4e 37       	lddpc	r7,80002a24 <main+0x19c>
8000289a:	30 3a       	mov	r10,3
8000289c:	34 6b       	mov	r11,70
8000289e:	0e 9c       	mov	r12,r7
800028a0:	f0 1f 00 62 	mcall	80002a28 <main+0x1a0>
	INTC_register_interrupt(&Botones, 71, 3);
800028a4:	30 3a       	mov	r10,3
800028a6:	34 7b       	mov	r11,71
800028a8:	0e 9c       	mov	r12,r7
800028aa:	f0 1f 00 60 	mcall	80002a28 <main+0x1a0>
	
	gpio_enable_gpio_pin(BTN_UP);
800028ae:	33 6c       	mov	r12,54
800028b0:	f0 1f 00 5f 	mcall	80002a2c <main+0x1a4>
	gpio_enable_gpio_pin(BTN_DOWN);
800028b4:	33 7c       	mov	r12,55
800028b6:	f0 1f 00 5e 	mcall	80002a2c <main+0x1a4>
	gpio_enable_gpio_pin(BTN_RIGHT);
800028ba:	33 8c       	mov	r12,56
800028bc:	f0 1f 00 5c 	mcall	80002a2c <main+0x1a4>
	gpio_enable_gpio_pin(BTN_LEFT);
800028c0:	33 9c       	mov	r12,57
800028c2:	f0 1f 00 5b 	mcall	80002a2c <main+0x1a4>
	gpio_enable_gpio_pin(BTN_CENTER);
800028c6:	33 ac       	mov	r12,58
800028c8:	f0 1f 00 59 	mcall	80002a2c <main+0x1a4>
	
	gpio_enable_pin_pull_up(BTN_UP);
800028cc:	33 6c       	mov	r12,54
800028ce:	f0 1f 00 59 	mcall	80002a30 <main+0x1a8>
	gpio_enable_pin_pull_up(BTN_DOWN);
800028d2:	33 7c       	mov	r12,55
800028d4:	f0 1f 00 57 	mcall	80002a30 <main+0x1a8>
	gpio_enable_pin_pull_up(BTN_RIGHT);
800028d8:	33 8c       	mov	r12,56
800028da:	f0 1f 00 56 	mcall	80002a30 <main+0x1a8>
	gpio_enable_pin_pull_up(BTN_LEFT);
800028de:	33 9c       	mov	r12,57
800028e0:	f0 1f 00 54 	mcall	80002a30 <main+0x1a8>
	gpio_enable_pin_pull_up(BTN_CENTER);
800028e4:	33 ac       	mov	r12,58
800028e6:	f0 1f 00 53 	mcall	80002a30 <main+0x1a8>
	
	gpio_enable_pin_interrupt(BTN_UP,GPIO_FALLING_EDGE);
800028ea:	30 2b       	mov	r11,2
800028ec:	33 6c       	mov	r12,54
800028ee:	f0 1f 00 52 	mcall	80002a34 <main+0x1ac>
	gpio_enable_pin_interrupt(BTN_DOWN,GPIO_FALLING_EDGE);
800028f2:	30 2b       	mov	r11,2
800028f4:	33 7c       	mov	r12,55
800028f6:	f0 1f 00 50 	mcall	80002a34 <main+0x1ac>
	gpio_enable_pin_interrupt(BTN_RIGHT,GPIO_FALLING_EDGE);
800028fa:	30 2b       	mov	r11,2
800028fc:	33 8c       	mov	r12,56
800028fe:	f0 1f 00 4e 	mcall	80002a34 <main+0x1ac>
	gpio_enable_pin_interrupt(BTN_LEFT,GPIO_FALLING_EDGE);
80002902:	30 2b       	mov	r11,2
80002904:	33 9c       	mov	r12,57
80002906:	f0 1f 00 4c 	mcall	80002a34 <main+0x1ac>
	gpio_enable_pin_interrupt(BTN_CENTER,GPIO_FALLING_EDGE);
8000290a:	30 2b       	mov	r11,2
8000290c:	33 ac       	mov	r12,58
8000290e:	f0 1f 00 4a 	mcall	80002a34 <main+0x1ac>
	
	Enable_global_interrupt();
80002912:	d5 03       	csrf	0x10
	
	
	
	gpio_set_gpio_pin(LED0); //LEDS apagados
80002914:	33 bc       	mov	r12,59
80002916:	f0 1f 00 49 	mcall	80002a38 <main+0x1b0>
	gpio_set_gpio_pin(LED1);
8000291a:	33 cc       	mov	r12,60
8000291c:	f0 1f 00 47 	mcall	80002a38 <main+0x1b0>
	gpio_set_gpio_pin(LED2);
80002920:	30 5c       	mov	r12,5
80002922:	f0 1f 00 46 	mcall	80002a38 <main+0x1b0>
	gpio_set_gpio_pin(LED3);
80002926:	30 6c       	mov	r12,6
80002928:	f0 1f 00 44 	mcall	80002a38 <main+0x1b0>
	
	while (true)
	{
		//generalFlag=2;
		switch (generalFlag) {
8000292c:	4c 45       	lddpc	r5,80002a3c <main+0x1b4>
8000292e:	30 27       	mov	r7,2
			Prender_Leds(0);
			break;
			if (specificFlag==2){ center=1; } //En el caso de que se haya presionado la tecla RIGHT para corrimiento
			
			default: //Default
			specificFlag=0;
80002930:	4c 43       	lddpc	r3,80002a40 <main+0x1b8>
80002932:	30 04       	mov	r4,0
	gpio_set_gpio_pin(LED3);
	
	while (true)
	{
		//generalFlag=2;
		switch (generalFlag) {
80002934:	30 31       	mov	r1,3
			Izq_Der(); //Inicia Secuencia
			break;
			
			case 3: //LEFT
			specificFlag=3;
			Prender_Leds_Cero(0); //Todos los Leds Apagados
80002936:	30 00       	mov	r0,0
			Der_Izq(); //Inicia Secuencia
			break;
			
			case 4: //CENTER
			counter=0;
80002938:	4c 36       	lddpc	r6,80002a44 <main+0x1bc>
	{
		//generalFlag=2;
		switch (generalFlag) {
			
			case 0: //UP
			specificFlag=1;
8000293a:	30 12       	mov	r2,1
	gpio_set_gpio_pin(LED3);
	
	while (true)
	{
		//generalFlag=2;
		switch (generalFlag) {
8000293c:	0b 88       	ld.ub	r8,r5[0x0]
8000293e:	ee 08 18 00 	cp.b	r8,r7
80002942:	c2 a0       	breq	80002996 <main+0x10e>
80002944:	e0 8b 00 09 	brhi	80002956 <main+0xce>
80002948:	e8 08 18 00 	cp.b	r8,r4
8000294c:	c0 d0       	breq	80002966 <main+0xde>
8000294e:	e4 08 18 00 	cp.b	r8,r2
80002952:	c4 91       	brne	800029e4 <main+0x15c>
80002954:	c1 68       	rjmp	80002980 <main+0xf8>
80002956:	e2 08 18 00 	cp.b	r8,r1
8000295a:	c3 90       	breq	800029cc <main+0x144>
8000295c:	30 49       	mov	r9,4
8000295e:	f2 08 18 00 	cp.b	r8,r9
80002962:	c4 11       	brne	800029e4 <main+0x15c>
80002964:	c3 b8       	rjmp	800029da <main+0x152>
			
			case 0: //UP
			specificFlag=1;
80002966:	a6 82       	st.b	r3[0x0],r2
			if (counter !=15){counter ++; }
80002968:	0d 88       	ld.ub	r8,r6[0x0]
8000296a:	30 f9       	mov	r9,15
8000296c:	f2 08 18 00 	cp.b	r8,r9
80002970:	f7 b8 01 ff 	subne	r8,-1
80002974:	ed f8 1e 00 	st.bne	r6[0x0],r8
			Prender_Leds(counter);
80002978:	0d 8c       	ld.ub	r12,r6[0x0]
8000297a:	f0 1f 00 34 	mcall	80002a48 <main+0x1c0>
			break;
8000297e:	cd fb       	rjmp	8000293c <main+0xb4>
			
			case 1: //DOWN
			specificFlag=1;
80002980:	a6 82       	st.b	r3[0x0],r2
			if(counter != 0){ counter--;}
80002982:	0d 88       	ld.ub	r8,r6[0x0]
80002984:	58 08       	cp.w	r8,0
80002986:	f7 b8 01 01 	subne	r8,1
8000298a:	ed f8 1e 00 	st.bne	r6[0x0],r8
			Prender_Leds(counter);
8000298e:	0d 8c       	ld.ub	r12,r6[0x0]
80002990:	f0 1f 00 2e 	mcall	80002a48 <main+0x1c0>
			break;
80002994:	cd 4b       	rjmp	8000293c <main+0xb4>
			
			case 2: //RIGHT
			specificFlag=2;
80002996:	a6 87       	st.b	r3[0x0],r7
			Prender_Leds(0); //Todos los Leds Apagados
80002998:	00 9c       	mov	r12,r0
8000299a:	f0 1f 00 2c 	mcall	80002a48 <main+0x1c0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000299e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029a2:	e8 69 ca 00 	mov	r9,576000
800029a6:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800029aa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800029ae:	14 38       	cp.w	r8,r10
800029b0:	e0 88 00 08 	brls	800029c0 <main+0x138>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800029b4:	12 38       	cp.w	r8,r9
800029b6:	fe 98 ff fa 	brls	800029aa <main+0x122>
800029ba:	12 3a       	cp.w	r10,r9
800029bc:	c2 a3       	brcs	80002a10 <main+0x188>
800029be:	cf 6b       	rjmp	800029aa <main+0x122>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800029c0:	12 38       	cp.w	r8,r9
800029c2:	e0 8b 00 27 	brhi	80002a10 <main+0x188>
800029c6:	12 3a       	cp.w	r10,r9
800029c8:	c2 43       	brcs	80002a10 <main+0x188>
800029ca:	cf 0b       	rjmp	800029aa <main+0x122>
			delay_ms(5000);
			Izq_Der(); //Inicia Secuencia
			break;
			
			case 3: //LEFT
			specificFlag=3;
800029cc:	a6 81       	st.b	r3[0x0],r1
			Prender_Leds_Cero(0); //Todos los Leds Apagados
800029ce:	00 9c       	mov	r12,r0
800029d0:	f0 1f 00 1f 	mcall	80002a4c <main+0x1c4>
			Der_Izq(); //Inicia Secuencia
800029d4:	f0 1f 00 1f 	mcall	80002a50 <main+0x1c8>
			break;
800029d8:	cb 2b       	rjmp	8000293c <main+0xb4>
			
			case 4: //CENTER
			counter=0;
800029da:	ac 84       	st.b	r6[0x0],r4
			Prender_Leds(0);
800029dc:	00 9c       	mov	r12,r0
800029de:	f0 1f 00 1b 	mcall	80002a48 <main+0x1c0>
			break;
800029e2:	ca db       	rjmp	8000293c <main+0xb4>
			if (specificFlag==2){ center=1; } //En el caso de que se haya presionado la tecla RIGHT para corrimiento
			
			default: //Default
			specificFlag=0;
800029e4:	a6 84       	st.b	r3[0x0],r4
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029e6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029ea:	f0 ca fb 80 	sub	r10,r8,-1152
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800029ee:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800029f2:	14 38       	cp.w	r8,r10
800029f4:	e0 88 00 08 	brls	80002a04 <main+0x17c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800029f8:	12 38       	cp.w	r8,r9
800029fa:	fe 98 ff fa 	brls	800029ee <main+0x166>
800029fe:	12 3a       	cp.w	r10,r9
80002a00:	c9 e3       	brcs	8000293c <main+0xb4>
80002a02:	cf 6b       	rjmp	800029ee <main+0x166>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a04:	12 38       	cp.w	r8,r9
80002a06:	fe 9b ff 9b 	brhi	8000293c <main+0xb4>
80002a0a:	12 3a       	cp.w	r10,r9
80002a0c:	c9 83       	brcs	8000293c <main+0xb4>
80002a0e:	cf 0b       	rjmp	800029ee <main+0x166>
			
			case 2: //RIGHT
			specificFlag=2;
			Prender_Leds(0); //Todos los Leds Apagados
			delay_ms(5000);
			Izq_Der(); //Inicia Secuencia
80002a10:	f0 1f 00 11 	mcall	80002a54 <main+0x1cc>
80002a14:	c9 4b       	rjmp	8000293c <main+0xb4>
80002a16:	00 00       	add	r0,r0
80002a18:	80 00       	ld.sh	r0,r0[0x0]
80002a1a:	25 74       	sub	r4,87
80002a1c:	80 00       	ld.sh	r0,r0[0x0]
80002a1e:	21 20       	sub	r0,18
80002a20:	80 00       	ld.sh	r0,r0[0x0]
80002a22:	24 2c       	sub	r12,66
80002a24:	80 00       	ld.sh	r0,r0[0x0]
80002a26:	25 98       	sub	r8,89
80002a28:	80 00       	ld.sh	r0,r0[0x0]
80002a2a:	23 ac       	sub	r12,58
80002a2c:	80 00       	ld.sh	r0,r0[0x0]
80002a2e:	22 18       	sub	r8,33
80002a30:	80 00       	ld.sh	r0,r0[0x0]
80002a32:	22 30       	sub	r0,35
80002a34:	80 00       	ld.sh	r0,r0[0x0]
80002a36:	23 36       	sub	r6,51
80002a38:	80 00       	ld.sh	r0,r0[0x0]
80002a3a:	22 fe       	sub	lr,47
80002a3c:	00 00       	add	r0,r0
80002a3e:	00 08       	add	r8,r0
80002a40:	00 00       	add	r0,r0
80002a42:	00 fd       	st.b	--r0,sp
80002a44:	00 00       	add	r0,r0
80002a46:	00 fe       	st.b	--r0,lr
80002a48:	80 00       	ld.sh	r0,r0[0x0]
80002a4a:	26 20       	sub	r0,98
80002a4c:	80 00       	ld.sh	r0,r0[0x0]
80002a4e:	26 ac       	sub	r12,106
80002a50:	80 00       	ld.sh	r0,r0[0x0]
80002a52:	27 cc       	sub	r12,124
80002a54:	80 00       	ld.sh	r0,r0[0x0]
80002a56:	27 30       	sub	r0,115

Disassembly of section .exception:

80002c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002c00:	c0 08       	rjmp	80002c00 <_evba>
	...

80002c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002c04:	c0 08       	rjmp	80002c04 <_handle_TLB_Multiple_Hit>
	...

80002c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002c08:	c0 08       	rjmp	80002c08 <_handle_Bus_Error_Data_Fetch>
	...

80002c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80002c0c:	c0 08       	rjmp	80002c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002c10:	c0 08       	rjmp	80002c10 <_handle_NMI>
	...

80002c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002c14:	c0 08       	rjmp	80002c14 <_handle_Instruction_Address>
	...

80002c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002c18:	c0 08       	rjmp	80002c18 <_handle_ITLB_Protection>
	...

80002c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80002c1c:	c0 08       	rjmp	80002c1c <_handle_Breakpoint>
	...

80002c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002c20:	c0 08       	rjmp	80002c20 <_handle_Illegal_Opcode>
	...

80002c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002c24:	c0 08       	rjmp	80002c24 <_handle_Unimplemented_Instruction>
	...

80002c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002c28:	c0 08       	rjmp	80002c28 <_handle_Privilege_Violation>
	...

80002c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80002c2c:	c0 08       	rjmp	80002c2c <_handle_Floating_Point>
	...

80002c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002c30:	c0 08       	rjmp	80002c30 <_handle_Coprocessor_Absent>
	...

80002c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002c34:	c0 08       	rjmp	80002c34 <_handle_Data_Address_Read>
	...

80002c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002c38:	c0 08       	rjmp	80002c38 <_handle_Data_Address_Write>
	...

80002c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80002c3c:	c0 08       	rjmp	80002c3c <_handle_DTLB_Protection_Read>
	...

80002c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002c40:	c0 08       	rjmp	80002c40 <_handle_DTLB_Protection_Write>
	...

80002c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002c44:	c0 08       	rjmp	80002c44 <_handle_DTLB_Modified>
	...

80002c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002c50:	c0 08       	rjmp	80002c50 <_handle_ITLB_Miss>
	...

80002c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002c60:	c0 08       	rjmp	80002c60 <_handle_DTLB_Miss_Read>
	...

80002c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002c70:	c0 08       	rjmp	80002c70 <_handle_DTLB_Miss_Write>
	...

80002d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002d00:	c0 08       	rjmp	80002d00 <_handle_Supervisor_Call>
80002d02:	d7 03       	nop

80002d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d04:	30 0c       	mov	r12,0
80002d06:	fe b0 fb bd 	rcall	80002480 <_get_interrupt_handler>
80002d0a:	58 0c       	cp.w	r12,0
80002d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d10:	d6 03       	rete

80002d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d12:	30 1c       	mov	r12,1
80002d14:	fe b0 fb b6 	rcall	80002480 <_get_interrupt_handler>
80002d18:	58 0c       	cp.w	r12,0
80002d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d1e:	d6 03       	rete

80002d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d20:	30 2c       	mov	r12,2
80002d22:	fe b0 fb af 	rcall	80002480 <_get_interrupt_handler>
80002d26:	58 0c       	cp.w	r12,0
80002d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d2c:	d6 03       	rete

80002d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002d2e:	30 3c       	mov	r12,3
80002d30:	fe b0 fb a8 	rcall	80002480 <_get_interrupt_handler>
80002d34:	58 0c       	cp.w	r12,0
80002d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002d3a:	d6 03       	rete
80002d3c:	d7 03       	nop
80002d3e:	d7 03       	nop
80002d40:	d7 03       	nop
80002d42:	d7 03       	nop
80002d44:	d7 03       	nop
80002d46:	d7 03       	nop
80002d48:	d7 03       	nop
80002d4a:	d7 03       	nop
80002d4c:	d7 03       	nop
80002d4e:	d7 03       	nop
80002d50:	d7 03       	nop
80002d52:	d7 03       	nop
80002d54:	d7 03       	nop
80002d56:	d7 03       	nop
80002d58:	d7 03       	nop
80002d5a:	d7 03       	nop
80002d5c:	d7 03       	nop
80002d5e:	d7 03       	nop
80002d60:	d7 03       	nop
80002d62:	d7 03       	nop
80002d64:	d7 03       	nop
80002d66:	d7 03       	nop
80002d68:	d7 03       	nop
80002d6a:	d7 03       	nop
80002d6c:	d7 03       	nop
80002d6e:	d7 03       	nop
80002d70:	d7 03       	nop
80002d72:	d7 03       	nop
80002d74:	d7 03       	nop
80002d76:	d7 03       	nop
80002d78:	d7 03       	nop
80002d7a:	d7 03       	nop
80002d7c:	d7 03       	nop
80002d7e:	d7 03       	nop
80002d80:	d7 03       	nop
80002d82:	d7 03       	nop
80002d84:	d7 03       	nop
80002d86:	d7 03       	nop
80002d88:	d7 03       	nop
80002d8a:	d7 03       	nop
80002d8c:	d7 03       	nop
80002d8e:	d7 03       	nop
80002d90:	d7 03       	nop
80002d92:	d7 03       	nop
80002d94:	d7 03       	nop
80002d96:	d7 03       	nop
80002d98:	d7 03       	nop
80002d9a:	d7 03       	nop
80002d9c:	d7 03       	nop
80002d9e:	d7 03       	nop
80002da0:	d7 03       	nop
80002da2:	d7 03       	nop
80002da4:	d7 03       	nop
80002da6:	d7 03       	nop
80002da8:	d7 03       	nop
80002daa:	d7 03       	nop
80002dac:	d7 03       	nop
80002dae:	d7 03       	nop
80002db0:	d7 03       	nop
80002db2:	d7 03       	nop
80002db4:	d7 03       	nop
80002db6:	d7 03       	nop
80002db8:	d7 03       	nop
80002dba:	d7 03       	nop
80002dbc:	d7 03       	nop
80002dbe:	d7 03       	nop
80002dc0:	d7 03       	nop
80002dc2:	d7 03       	nop
80002dc4:	d7 03       	nop
80002dc6:	d7 03       	nop
80002dc8:	d7 03       	nop
80002dca:	d7 03       	nop
80002dcc:	d7 03       	nop
80002dce:	d7 03       	nop
80002dd0:	d7 03       	nop
80002dd2:	d7 03       	nop
80002dd4:	d7 03       	nop
80002dd6:	d7 03       	nop
80002dd8:	d7 03       	nop
80002dda:	d7 03       	nop
80002ddc:	d7 03       	nop
80002dde:	d7 03       	nop
80002de0:	d7 03       	nop
80002de2:	d7 03       	nop
80002de4:	d7 03       	nop
80002de6:	d7 03       	nop
80002de8:	d7 03       	nop
80002dea:	d7 03       	nop
80002dec:	d7 03       	nop
80002dee:	d7 03       	nop
80002df0:	d7 03       	nop
80002df2:	d7 03       	nop
80002df4:	d7 03       	nop
80002df6:	d7 03       	nop
80002df8:	d7 03       	nop
80002dfa:	d7 03       	nop
80002dfc:	d7 03       	nop
80002dfe:	d7 03       	nop
