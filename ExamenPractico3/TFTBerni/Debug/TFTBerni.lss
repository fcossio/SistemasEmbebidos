
TFTBerni.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d18  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004e00  80004e00  00005200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000262d4  80005000  80005000  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8002b2d4  8002b2d4  0002b6d4  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000020  00000008  8002b2d8  0002b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000007c8  00000028  00000028  00000000  2**2
                  ALLOC
  9 .heap         0000e810  000007f0  000007f0  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0002b828  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000850  00000000  00000000  0002b858  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001703  00000000  00000000  0002c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000e8f5  00000000  00000000  0002d7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001e84  00000000  00000000  0003c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000068cb  00000000  00000000  0003df24  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001694  00000000  00000000  000447f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000030e4  00000000  00000000  00045e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00004a1c  00000000  00000000  00048f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00a41748  00000000  00000000  0004d984  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000a48  00000000  00000000  00a8f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	fe cf c2 0c 	sub	pc,pc,-15860

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf e2 10 	sub	pc,pc,-7664

Disassembly of section .text:

80002008 <et024006_SetLimits>:
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	fc 1e c0 00 	movh	lr,0xc000
80002010:	30 28       	mov	r8,2
80002012:	bc 08       	st.h	lr[0x0],r8
80002014:	ef dc c1 08 	bfextu	r7,r12,0x8,0x8
80002018:	fc 18 c0 20 	movh	r8,0xc020
8000201c:	b0 07       	st.h	r8[0x0],r7
8000201e:	30 37       	mov	r7,3
80002020:	bc 07       	st.h	lr[0x0],r7
80002022:	b0 0c       	st.h	r8[0x0],r12
80002024:	30 4c       	mov	r12,4
80002026:	bc 0c       	st.h	lr[0x0],r12
80002028:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000202c:	b0 0c       	st.h	r8[0x0],r12
8000202e:	30 5c       	mov	r12,5
80002030:	bc 0c       	st.h	lr[0x0],r12
80002032:	b0 0a       	st.h	r8[0x0],r10
80002034:	30 6a       	mov	r10,6
80002036:	bc 0a       	st.h	lr[0x0],r10
80002038:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
8000203c:	b0 0a       	st.h	r8[0x0],r10
8000203e:	30 7a       	mov	r10,7
80002040:	bc 0a       	st.h	lr[0x0],r10
80002042:	b0 0b       	st.h	r8[0x0],r11
80002044:	30 8a       	mov	r10,8
80002046:	bc 0a       	st.h	lr[0x0],r10
80002048:	f5 d9 c1 08 	bfextu	r10,r9,0x8,0x8
8000204c:	b0 0a       	st.h	r8[0x0],r10
8000204e:	30 9a       	mov	r10,9
80002050:	bc 0a       	st.h	lr[0x0],r10
80002052:	b0 09       	st.h	r8[0x0],r9
80002054:	e3 cd 80 80 	ldm	sp++,r7,pc

80002058 <et024006_SetQuickLimits>:
80002058:	fc 19 c0 00 	movh	r9,0xc000
8000205c:	30 28       	mov	r8,2
8000205e:	b2 08       	st.h	r9[0x0],r8
80002060:	f5 dc c1 08 	bfextu	r10,r12,0x8,0x8
80002064:	fc 18 c0 20 	movh	r8,0xc020
80002068:	b0 0a       	st.h	r8[0x0],r10
8000206a:	30 3a       	mov	r10,3
8000206c:	b2 0a       	st.h	r9[0x0],r10
8000206e:	b0 0c       	st.h	r8[0x0],r12
80002070:	30 6a       	mov	r10,6
80002072:	b2 0a       	st.h	r9[0x0],r10
80002074:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
80002078:	b0 0a       	st.h	r8[0x0],r10
8000207a:	30 7a       	mov	r10,7
8000207c:	b2 0a       	st.h	r9[0x0],r10
8000207e:	b0 0b       	st.h	r8[0x0],r11
80002080:	5e fc       	retal	r12
80002082:	d7 03       	nop

80002084 <et024006_DrawQuickPixel>:
80002084:	eb cd 40 80 	pushm	r7,lr
80002088:	14 97       	mov	r7,r10
8000208a:	5c 7b       	castu.h	r11
8000208c:	5c 7c       	castu.h	r12
8000208e:	f0 1f 00 06 	mcall	800020a4 <et024006_DrawQuickPixel+0x20>
80002092:	32 29       	mov	r9,34
80002094:	fc 18 c0 00 	movh	r8,0xc000
80002098:	b0 09       	st.h	r8[0x0],r9
8000209a:	fc 18 c0 20 	movh	r8,0xc020
8000209e:	b0 07       	st.h	r8[0x0],r7
800020a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	20 58       	sub	r8,5

800020a8 <et024006_PrintString>:
800020a8:	d4 31       	pushm	r0-r7,lr
800020aa:	20 dd       	sub	sp,52
800020ac:	18 97       	mov	r7,r12
800020ae:	50 6b       	stdsp	sp[0x18],r11
800020b0:	50 8a       	stdsp	sp[0x20],r10
800020b2:	50 29       	stdsp	sp[0x8],r9
800020b4:	10 94       	mov	r4,r8
800020b6:	41 63       	lddsp	r3,sp[0x58]
800020b8:	19 89       	ld.ub	r9,r12[0x0]
800020ba:	30 08       	mov	r8,0
800020bc:	f0 09 18 00 	cp.b	r9,r8
800020c0:	e0 80 01 0c 	breq	800022d8 <et024006_PrintString+0x230>
800020c4:	16 98       	mov	r8,r11
800020c6:	11 3a       	ld.ub	r10,r8++
800020c8:	50 4a       	stdsp	sp[0x10],r10
800020ca:	11 89       	ld.ub	r9,r8[0x0]
800020cc:	50 39       	stdsp	sp[0xc],r9
800020ce:	11 98       	ld.ub	r8,r8[0x1]
800020d0:	50 58       	stdsp	sp[0x14],r8
800020d2:	5b f3       	cp.w	r3,-1
800020d4:	e0 81 00 8d 	brne	800021ee <et024006_PrintString+0x146>
800020d8:	e0 69 00 ef 	mov	r9,239
800020dc:	e0 6a 01 3f 	mov	r10,319
800020e0:	30 0b       	mov	r11,0
800020e2:	16 9c       	mov	r12,r11
800020e4:	f0 1f 00 7e 	mcall	800022dc <et024006_PrintString+0x234>
800020e8:	40 58       	lddsp	r8,sp[0x14]
800020ea:	50 c8       	stdsp	sp[0x30],r8
800020ec:	f0 08 00 18 	add	r8,r8,r8<<0x1
800020f0:	a5 78       	lsl	r8,0x5
800020f2:	40 69       	lddsp	r9,sp[0x18]
800020f4:	10 09       	add	r9,r8
800020f6:	50 b9       	stdsp	sp[0x2c],r9
800020f8:	ee c8 ff ff 	sub	r8,r7,-1
800020fc:	50 98       	stdsp	sp[0x24],r8
800020fe:	40 8a       	lddsp	r10,sp[0x20]
80002100:	5c 8a       	casts.h	r10
80002102:	50 aa       	stdsp	sp[0x28],r10
80002104:	30 03       	mov	r3,0
80002106:	08 90       	mov	r0,r4
80002108:	5c 70       	castu.h	r0
8000210a:	40 99       	lddsp	r9,sp[0x24]
8000210c:	f3 38 ff ff 	ld.ub	r8,r9[-1]
80002110:	30 aa       	mov	r10,10
80002112:	f4 08 18 00 	cp.b	r8,r10
80002116:	c0 b1       	brne	8000212c <et024006_PrintString+0x84>
80002118:	40 28       	lddsp	r8,sp[0x8]
8000211a:	40 39       	lddsp	r9,sp[0xc]
8000211c:	12 08       	add	r8,r9
8000211e:	5c 88       	casts.h	r8
80002120:	50 28       	stdsp	sp[0x8],r8
80002122:	40 98       	lddsp	r8,sp[0x24]
80002124:	40 8a       	lddsp	r10,sp[0x20]
80002126:	5c 8a       	casts.h	r10
80002128:	50 aa       	stdsp	sp[0x28],r10
8000212a:	c5 a8       	rjmp	800021de <et024006_PrintString+0x136>
8000212c:	30 99       	mov	r9,9
8000212e:	f2 08 18 00 	cp.b	r8,r9
80002132:	c0 81       	brne	80002142 <et024006_PrintString+0x9a>
80002134:	40 a8       	lddsp	r8,sp[0x28]
80002136:	40 49       	lddsp	r9,sp[0x10]
80002138:	12 08       	add	r8,r9
8000213a:	5c 88       	casts.h	r8
8000213c:	50 a8       	stdsp	sp[0x28],r8
8000213e:	40 98       	lddsp	r8,sp[0x24]
80002140:	c4 f8       	rjmp	800021de <et024006_PrintString+0x136>
80002142:	f0 ca 00 20 	sub	r10,r8,32
80002146:	35 f9       	mov	r9,95
80002148:	f2 0a 18 00 	cp.b	r10,r9
8000214c:	e0 88 00 04 	brls	80002154 <et024006_PrintString+0xac>
80002150:	40 b5       	lddsp	r5,sp[0x2c]
80002152:	c0 a8       	rjmp	80002166 <et024006_PrintString+0xbe>
80002154:	22 08       	sub	r8,32
80002156:	40 ca       	lddsp	r10,sp[0x30]
80002158:	f0 0a 02 45 	mul	r5,r8,r10
8000215c:	40 59       	lddsp	r9,sp[0x14]
8000215e:	12 05       	add	r5,r9
80002160:	40 68       	lddsp	r8,sp[0x18]
80002162:	f0 05 00 05 	add	r5,r8,r5
80002166:	40 22       	lddsp	r2,sp[0x8]
80002168:	5c 72       	castu.h	r2
8000216a:	40 3a       	lddsp	r10,sp[0xc]
8000216c:	e4 0a 00 0a 	add	r10,r2,r10
80002170:	50 1a       	stdsp	sp[0x4],r10
80002172:	04 3a       	cp.w	r10,r2
80002174:	e0 8a 00 2f 	brle	800021d2 <et024006_PrintString+0x12a>
80002178:	40 21       	lddsp	r1,sp[0x8]
8000217a:	5c 81       	casts.h	r1
8000217c:	40 a9       	lddsp	r9,sp[0x28]
8000217e:	5c 79       	castu.h	r9
80002180:	50 09       	stdsp	sp[0x0],r9
80002182:	12 94       	mov	r4,r9
80002184:	40 48       	lddsp	r8,sp[0x10]
80002186:	10 04       	add	r4,r8
80002188:	40 aa       	lddsp	r10,sp[0x28]
8000218a:	5c 8a       	casts.h	r10
8000218c:	50 7a       	stdsp	sp[0x1c],r10
8000218e:	c1 b8       	rjmp	800021c4 <et024006_PrintString+0x11c>
80002190:	a1 96       	lsr	r6,0x1
80002192:	0b 88       	ld.ub	r8,r5[0x0]
80002194:	ed e8 00 08 	and	r8,r6,r8
80002198:	e6 08 18 00 	cp.b	r8,r3
8000219c:	c0 50       	breq	800021a6 <et024006_PrintString+0xfe>
8000219e:	00 9a       	mov	r10,r0
800021a0:	04 9b       	mov	r11,r2
800021a2:	f0 1f 00 50 	mcall	800022e0 <et024006_PrintString+0x238>
800021a6:	2f f7       	sub	r7,-1
800021a8:	5c 87       	casts.h	r7
800021aa:	0e 9c       	mov	r12,r7
800021ac:	5c 7c       	castu.h	r12
800021ae:	08 3c       	cp.w	r12,r4
800021b0:	cf 05       	brlt	80002190 <et024006_PrintString+0xe8>
800021b2:	2f f1       	sub	r1,-1
800021b4:	5c 81       	casts.h	r1
800021b6:	e5 d1 c0 10 	bfextu	r2,r1,0x0,0x10
800021ba:	40 19       	lddsp	r9,sp[0x4]
800021bc:	04 39       	cp.w	r9,r2
800021be:	e0 8a 00 0a 	brle	800021d2 <et024006_PrintString+0x12a>
800021c2:	2f f5       	sub	r5,-1
800021c4:	40 0c       	lddsp	r12,sp[0x0]
800021c6:	08 3c       	cp.w	r12,r4
800021c8:	cf 54       	brge	800021b2 <et024006_PrintString+0x10a>
800021ca:	40 77       	lddsp	r7,sp[0x1c]
800021cc:	e0 66 00 80 	mov	r6,128
800021d0:	ce 1b       	rjmp	80002192 <et024006_PrintString+0xea>
800021d2:	40 a8       	lddsp	r8,sp[0x28]
800021d4:	40 4a       	lddsp	r10,sp[0x10]
800021d6:	14 08       	add	r8,r10
800021d8:	5c 88       	casts.h	r8
800021da:	50 a8       	stdsp	sp[0x28],r8
800021dc:	40 98       	lddsp	r8,sp[0x24]
800021de:	40 99       	lddsp	r9,sp[0x24]
800021e0:	2f f9       	sub	r9,-1
800021e2:	50 99       	stdsp	sp[0x24],r9
800021e4:	11 88       	ld.ub	r8,r8[0x0]
800021e6:	e6 08 18 00 	cp.b	r8,r3
800021ea:	c9 01       	brne	8000210a <et024006_PrintString+0x62>
800021ec:	c7 68       	rjmp	800022d8 <et024006_PrintString+0x230>
800021ee:	f8 c8 ff ff 	sub	r8,r12,-1
800021f2:	50 08       	stdsp	sp[0x0],r8
800021f4:	40 8c       	lddsp	r12,sp[0x20]
800021f6:	5c 8c       	casts.h	r12
800021f8:	30 06       	mov	r6,0
800021fa:	5c 83       	casts.h	r3
800021fc:	fc 15 c0 20 	movh	r5,0xc020
80002200:	40 0a       	lddsp	r10,sp[0x0]
80002202:	f5 31 ff ff 	ld.ub	r1,r10[-1]
80002206:	30 a8       	mov	r8,10
80002208:	f0 01 18 00 	cp.b	r1,r8
8000220c:	c0 b1       	brne	80002222 <et024006_PrintString+0x17a>
8000220e:	40 28       	lddsp	r8,sp[0x8]
80002210:	40 39       	lddsp	r9,sp[0xc]
80002212:	12 08       	add	r8,r9
80002214:	5c 88       	casts.h	r8
80002216:	50 28       	stdsp	sp[0x8],r8
80002218:	14 98       	mov	r8,r10
8000221a:	40 8a       	lddsp	r10,sp[0x20]
8000221c:	5c 8a       	casts.h	r10
8000221e:	50 1a       	stdsp	sp[0x4],r10
80002220:	c5 28       	rjmp	800022c4 <et024006_PrintString+0x21c>
80002222:	30 98       	mov	r8,9
80002224:	f0 01 18 00 	cp.b	r1,r8
80002228:	c0 71       	brne	80002236 <et024006_PrintString+0x18e>
8000222a:	40 49       	lddsp	r9,sp[0x10]
8000222c:	12 0c       	add	r12,r9
8000222e:	5c 8c       	casts.h	r12
80002230:	50 1c       	stdsp	sp[0x4],r12
80002232:	40 08       	lddsp	r8,sp[0x0]
80002234:	c4 88       	rjmp	800022c4 <et024006_PrintString+0x21c>
80002236:	40 32       	lddsp	r2,sp[0xc]
80002238:	40 47       	lddsp	r7,sp[0x10]
8000223a:	f8 07 00 08 	add	r8,r12,r7
8000223e:	5c 88       	casts.h	r8
80002240:	50 18       	stdsp	sp[0x4],r8
80002242:	04 99       	mov	r9,r2
80002244:	20 19       	sub	r9,1
80002246:	40 28       	lddsp	r8,sp[0x8]
80002248:	10 09       	add	r9,r8
8000224a:	40 1a       	lddsp	r10,sp[0x4]
8000224c:	20 1a       	sub	r10,1
8000224e:	5c 79       	castu.h	r9
80002250:	5c 7a       	castu.h	r10
80002252:	10 9b       	mov	r11,r8
80002254:	5c 7b       	castu.h	r11
80002256:	5c 7c       	castu.h	r12
80002258:	f0 1f 00 21 	mcall	800022dc <et024006_PrintString+0x234>
8000225c:	32 29       	mov	r9,34
8000225e:	fc 18 c0 00 	movh	r8,0xc000
80002262:	b0 09       	st.h	r8[0x0],r9
80002264:	40 3a       	lddsp	r10,sp[0xc]
80002266:	58 0a       	cp.w	r10,0
80002268:	c2 d0       	breq	800022c2 <et024006_PrintString+0x21a>
8000226a:	e2 ce 00 20 	sub	lr,r1,32
8000226e:	40 59       	lddsp	r9,sp[0x14]
80002270:	f2 0e 02 4e 	mul	lr,r9,lr
80002274:	12 0e       	add	lr,r9
80002276:	40 68       	lddsp	r8,sp[0x18]
80002278:	f0 0e 00 0e 	add	lr,r8,lr
8000227c:	30 0c       	mov	r12,0
8000227e:	e0 60 00 80 	mov	r0,128
80002282:	18 91       	mov	r1,r12
80002284:	c1 98       	rjmp	800022b6 <et024006_PrintString+0x20e>
80002286:	a1 99       	lsr	r9,0x1
80002288:	f3 eb 00 0a 	and	r10,r9,r11
8000228c:	ec 0a 18 00 	cp.b	r10,r6
80002290:	e8 0a 17 10 	movne	r10,r4
80002294:	eb fa 1c 00 	st.hne	r5[0x0],r10
80002298:	eb f3 0c 00 	st.heq	r5[0x0],r3
8000229c:	2f f8       	sub	r8,-1
8000229e:	5c 88       	casts.h	r8
800022a0:	f0 07 19 00 	cp.h	r7,r8
800022a4:	fe 9b ff f1 	brhi	80002286 <et024006_PrintString+0x1de>
800022a8:	2f fc       	sub	r12,-1
800022aa:	5c 8c       	casts.h	r12
800022ac:	f8 02 19 00 	cp.h	r2,r12
800022b0:	e0 88 00 09 	brls	800022c2 <et024006_PrintString+0x21a>
800022b4:	2f fe       	sub	lr,-1
800022b6:	58 07       	cp.w	r7,0
800022b8:	cf 80       	breq	800022a8 <et024006_PrintString+0x200>
800022ba:	1d 8b       	ld.ub	r11,lr[0x0]
800022bc:	00 99       	mov	r9,r0
800022be:	02 98       	mov	r8,r1
800022c0:	ce 4b       	rjmp	80002288 <et024006_PrintString+0x1e0>
800022c2:	40 08       	lddsp	r8,sp[0x0]
800022c4:	40 09       	lddsp	r9,sp[0x0]
800022c6:	2f f9       	sub	r9,-1
800022c8:	50 09       	stdsp	sp[0x0],r9
800022ca:	11 88       	ld.ub	r8,r8[0x0]
800022cc:	ec 08 18 00 	cp.b	r8,r6
800022d0:	c0 40       	breq	800022d8 <et024006_PrintString+0x230>
800022d2:	40 1c       	lddsp	r12,sp[0x4]
800022d4:	5c 8c       	casts.h	r12
800022d6:	c9 5b       	rjmp	80002200 <et024006_PrintString+0x158>
800022d8:	2f 3d       	sub	sp,-52
800022da:	d8 32       	popm	r0-r7,pc
800022dc:	80 00       	ld.sh	r0,r0[0x0]
800022de:	20 08       	sub	r8,0
800022e0:	80 00       	ld.sh	r0,r0[0x0]
800022e2:	20 84       	sub	r4,8

800022e4 <et024006_DuplicatePixel>:
800022e4:	32 29       	mov	r9,34
800022e6:	fc 18 c0 00 	movh	r8,0xc000
800022ea:	b0 09       	st.h	r8[0x0],r9
800022ec:	58 7b       	cp.w	r11,7
800022ee:	e0 88 00 13 	brls	80002314 <et024006_DuplicatePixel+0x30>
800022f2:	16 99       	mov	r9,r11
800022f4:	fc 18 c0 20 	movh	r8,0xc020
800022f8:	b0 0c       	st.h	r8[0x0],r12
800022fa:	b0 0c       	st.h	r8[0x0],r12
800022fc:	b0 0c       	st.h	r8[0x0],r12
800022fe:	b0 0c       	st.h	r8[0x0],r12
80002300:	b0 0c       	st.h	r8[0x0],r12
80002302:	b0 0c       	st.h	r8[0x0],r12
80002304:	b0 0c       	st.h	r8[0x0],r12
80002306:	b0 0c       	st.h	r8[0x0],r12
80002308:	20 89       	sub	r9,8
8000230a:	58 79       	cp.w	r9,7
8000230c:	fe 9b ff f6 	brhi	800022f8 <et024006_DuplicatePixel+0x14>
80002310:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
80002314:	58 0b       	cp.w	r11,0
80002316:	5e 0c       	reteq	r12
80002318:	fc 18 c0 20 	movh	r8,0xc020
8000231c:	b0 0c       	st.h	r8[0x0],r12
8000231e:	20 1b       	sub	r11,1
80002320:	cf e1       	brne	8000231c <et024006_DuplicatePixel+0x38>
80002322:	5e fc       	retal	r12

80002324 <et024006_DrawFilledRect>:
80002324:	eb cd 40 e0 	pushm	r5-r7,lr
80002328:	14 97       	mov	r7,r10
8000232a:	12 96       	mov	r6,r9
8000232c:	10 95       	mov	r5,r8
8000232e:	f6 c9 00 01 	sub	r9,r11,1
80002332:	0c 09       	add	r9,r6
80002334:	f8 ca 00 01 	sub	r10,r12,1
80002338:	0e 0a       	add	r10,r7
8000233a:	5c 79       	castu.h	r9
8000233c:	5c 7a       	castu.h	r10
8000233e:	5c 7b       	castu.h	r11
80002340:	5c 7c       	castu.h	r12
80002342:	f0 1f 00 07 	mcall	8000235c <et024006_DrawFilledRect+0x38>
80002346:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
8000234a:	5c 77       	castu.h	r7
8000234c:	af 3b       	mul	r11,r7
8000234e:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
80002352:	f0 1f 00 04 	mcall	80002360 <et024006_DrawFilledRect+0x3c>
80002356:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000235a:	00 00       	add	r0,r0
8000235c:	80 00       	ld.sh	r0,r0[0x0]
8000235e:	20 08       	sub	r8,0
80002360:	80 00       	ld.sh	r0,r0[0x0]
80002362:	22 e4       	sub	r4,46

80002364 <et024006_CopyPixelsToScreen>:
80002364:	eb cd 40 80 	pushm	r7,lr
80002368:	32 29       	mov	r9,34
8000236a:	fc 18 c0 00 	movh	r8,0xc000
8000236e:	b0 09       	st.h	r8[0x0],r9
80002370:	58 7b       	cp.w	r11,7
80002372:	e0 88 00 23 	brls	800023b8 <et024006_CopyPixelsToScreen+0x54>
80002376:	16 9a       	mov	r10,r11
80002378:	18 98       	mov	r8,r12
8000237a:	fc 19 c0 20 	movh	r9,0xc020
8000237e:	90 0e       	ld.sh	lr,r8[0x0]
80002380:	b2 0e       	st.h	r9[0x0],lr
80002382:	90 1e       	ld.sh	lr,r8[0x2]
80002384:	b2 0e       	st.h	r9[0x0],lr
80002386:	90 2e       	ld.sh	lr,r8[0x4]
80002388:	b2 0e       	st.h	r9[0x0],lr
8000238a:	90 3e       	ld.sh	lr,r8[0x6]
8000238c:	b2 0e       	st.h	r9[0x0],lr
8000238e:	90 4e       	ld.sh	lr,r8[0x8]
80002390:	b2 0e       	st.h	r9[0x0],lr
80002392:	90 5e       	ld.sh	lr,r8[0xa]
80002394:	b2 0e       	st.h	r9[0x0],lr
80002396:	90 6e       	ld.sh	lr,r8[0xc]
80002398:	b2 0e       	st.h	r9[0x0],lr
8000239a:	90 7e       	ld.sh	lr,r8[0xe]
8000239c:	b2 0e       	st.h	r9[0x0],lr
8000239e:	2f 08       	sub	r8,-16
800023a0:	20 8a       	sub	r10,8
800023a2:	58 7a       	cp.w	r10,7
800023a4:	fe 9b ff ed 	brhi	8000237e <et024006_CopyPixelsToScreen+0x1a>
800023a8:	20 8b       	sub	r11,8
800023aa:	f6 08 16 03 	lsr	r8,r11,0x3
800023ae:	2f f8       	sub	r8,-1
800023b0:	a5 68       	lsl	r8,0x4
800023b2:	10 0c       	add	r12,r8
800023b4:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
800023b8:	58 0b       	cp.w	r11,0
800023ba:	c0 70       	breq	800023c8 <et024006_CopyPixelsToScreen+0x64>
800023bc:	fc 18 c0 20 	movh	r8,0xc020
800023c0:	19 19       	ld.sh	r9,r12++
800023c2:	b0 09       	st.h	r8[0x0],r9
800023c4:	20 1b       	sub	r11,1
800023c6:	cf d1       	brne	800023c0 <et024006_CopyPixelsToScreen+0x5c>
800023c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800023cc <et024006_PutPixmap>:
800023cc:	eb cd 40 fe 	pushm	r1-r7,lr
800023d0:	fa c4 ff e0 	sub	r4,sp,-32
800023d4:	18 97       	mov	r7,r12
800023d6:	16 95       	mov	r5,r11
800023d8:	14 92       	mov	r2,r10
800023da:	12 91       	mov	r1,r9
800023dc:	68 0b       	ld.w	r11,r4[0x0]
800023de:	68 13       	ld.w	r3,r4[0x4]
800023e0:	68 26       	ld.w	r6,r4[0x8]
800023e2:	f6 c9 00 01 	sub	r9,r11,1
800023e6:	0c 09       	add	r9,r6
800023e8:	f0 ca 00 01 	sub	r10,r8,1
800023ec:	06 0a       	add	r10,r3
800023ee:	5c 79       	castu.h	r9
800023f0:	5c 7a       	castu.h	r10
800023f2:	5c 7b       	castu.h	r11
800023f4:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
800023f8:	f0 1f 00 1d 	mcall	8000246c <et024006_PutPixmap+0xa0>
800023fc:	f1 d2 c0 10 	bfextu	r8,r2,0x0,0x10
80002400:	ee 08 00 17 	add	r7,r7,r8<<0x1
80002404:	58 01       	cp.w	r1,0
80002406:	c0 70       	breq	80002414 <et024006_PutPixmap+0x48>
80002408:	f1 d5 c0 10 	bfextu	r8,r5,0x0,0x10
8000240c:	a1 78       	lsl	r8,0x1
8000240e:	5c 71       	castu.h	r1
80002410:	f0 01 03 47 	mac	r7,r8,r1
80002414:	32 29       	mov	r9,34
80002416:	fc 18 c0 00 	movh	r8,0xc000
8000241a:	b0 09       	st.h	r8[0x0],r9
8000241c:	e6 05 19 00 	cp.h	r5,r3
80002420:	5f 0a       	sreq	r10
80002422:	30 08       	mov	r8,0
80002424:	f0 02 19 00 	cp.h	r2,r8
80002428:	5f 09       	sreq	r9
8000242a:	f5 e9 00 09 	and	r9,r10,r9
8000242e:	f0 09 18 00 	cp.b	r9,r8
80002432:	c0 51       	brne	8000243c <et024006_PutPixmap+0x70>
80002434:	58 06       	cp.w	r6,0
80002436:	c0 c1       	brne	8000244e <et024006_PutPixmap+0x82>
80002438:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000243c:	5c 76       	castu.h	r6
8000243e:	5c 73       	castu.h	r3
80002440:	ec 03 02 4b 	mul	r11,r6,r3
80002444:	0e 9c       	mov	r12,r7
80002446:	f0 1f 00 0b 	mcall	80002470 <et024006_PutPixmap+0xa4>
8000244a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000244e:	5c 75       	castu.h	r5
80002450:	a1 75       	lsl	r5,0x1
80002452:	e9 d3 c0 10 	bfextu	r4,r3,0x0,0x10
80002456:	08 9b       	mov	r11,r4
80002458:	0e 9c       	mov	r12,r7
8000245a:	f0 1f 00 06 	mcall	80002470 <et024006_PutPixmap+0xa4>
8000245e:	0a 07       	add	r7,r5
80002460:	20 16       	sub	r6,1
80002462:	5c 86       	casts.h	r6
80002464:	cf 91       	brne	80002456 <et024006_PutPixmap+0x8a>
80002466:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000246a:	00 00       	add	r0,r0
8000246c:	80 00       	ld.sh	r0,r0[0x0]
8000246e:	20 08       	sub	r8,0
80002470:	80 00       	ld.sh	r0,r0[0x0]
80002472:	23 64       	sub	r4,54

80002474 <et024006_AdjustGamma>:
80002474:	fc 19 c0 00 	movh	r9,0xc000
80002478:	34 6a       	mov	r10,70
8000247a:	b2 0a       	st.h	r9[0x0],r10
8000247c:	fc 18 c0 20 	movh	r8,0xc020
80002480:	e0 6b 00 94 	mov	r11,148
80002484:	b0 0b       	st.h	r8[0x0],r11
80002486:	34 7b       	mov	r11,71
80002488:	b2 0b       	st.h	r9[0x0],r11
8000248a:	34 1b       	mov	r11,65
8000248c:	b0 0b       	st.h	r8[0x0],r11
8000248e:	34 8b       	mov	r11,72
80002490:	b2 0b       	st.h	r9[0x0],r11
80002492:	30 0b       	mov	r11,0
80002494:	b0 0b       	st.h	r8[0x0],r11
80002496:	34 9b       	mov	r11,73
80002498:	b2 0b       	st.h	r9[0x0],r11
8000249a:	33 3b       	mov	r11,51
8000249c:	b0 0b       	st.h	r8[0x0],r11
8000249e:	34 ab       	mov	r11,74
800024a0:	b2 0b       	st.h	r9[0x0],r11
800024a2:	32 5b       	mov	r11,37
800024a4:	b0 0b       	st.h	r8[0x0],r11
800024a6:	34 bb       	mov	r11,75
800024a8:	b2 0b       	st.h	r9[0x0],r11
800024aa:	34 5b       	mov	r11,69
800024ac:	b0 0b       	st.h	r8[0x0],r11
800024ae:	34 cb       	mov	r11,76
800024b0:	b2 0b       	st.h	r9[0x0],r11
800024b2:	34 4b       	mov	r11,68
800024b4:	b0 0b       	st.h	r8[0x0],r11
800024b6:	34 db       	mov	r11,77
800024b8:	b2 0b       	st.h	r9[0x0],r11
800024ba:	37 7b       	mov	r11,119
800024bc:	b0 0b       	st.h	r8[0x0],r11
800024be:	34 eb       	mov	r11,78
800024c0:	b2 0b       	st.h	r9[0x0],r11
800024c2:	31 2b       	mov	r11,18
800024c4:	b0 0b       	st.h	r8[0x0],r11
800024c6:	34 fb       	mov	r11,79
800024c8:	b2 0b       	st.h	r9[0x0],r11
800024ca:	e0 6b 00 cc 	mov	r11,204
800024ce:	b0 0b       	st.h	r8[0x0],r11
800024d0:	35 0b       	mov	r11,80
800024d2:	b2 0b       	st.h	r9[0x0],r11
800024d4:	b0 0a       	st.h	r8[0x0],r10
800024d6:	35 1a       	mov	r10,81
800024d8:	b2 0a       	st.h	r9[0x0],r10
800024da:	e0 69 00 82 	mov	r9,130
800024de:	b0 09       	st.h	r8[0x0],r9
800024e0:	5e fc       	retal	r12
800024e2:	d7 03       	nop

800024e4 <et024006_Init>:
800024e4:	eb cd 40 c0 	pushm	r6-r7,lr
800024e8:	fe f7 04 80 	ld.w	r7,pc[1152]
800024ec:	8f 0c       	st.w	r7[0x0],r12
800024ee:	8f 1b       	st.w	r7[0x4],r11
800024f0:	16 9c       	mov	r12,r11
800024f2:	f0 1f 01 1f 	mcall	8000296c <et024006_Init+0x488>
800024f6:	35 5c       	mov	r12,85
800024f8:	f0 1f 01 1e 	mcall	80002970 <et024006_Init+0x48c>
800024fc:	30 2b       	mov	r11,2
800024fe:	33 2c       	mov	r12,50
80002500:	f0 1f 01 1d 	mcall	80002974 <et024006_Init+0x490>
80002504:	35 2c       	mov	r12,82
80002506:	f0 1f 01 1d 	mcall	80002978 <et024006_Init+0x494>
8000250a:	35 2c       	mov	r12,82
8000250c:	f0 1f 01 1c 	mcall	8000297c <et024006_Init+0x498>
80002510:	6e 07       	ld.w	r7,r7[0x0]
80002512:	33 28       	mov	r8,50
80002514:	ee 08 06 46 	mulu.d	r6,r7,r8
80002518:	ee 78 42 40 	mov	r8,1000000
8000251c:	30 09       	mov	r9,0
8000251e:	ee 7a 42 3f 	mov	r10,999999
80002522:	30 0b       	mov	r11,0
80002524:	ec 0a 00 0a 	add	r10,r6,r10
80002528:	ee 0b 00 4b 	adc	r11,r7,r11
8000252c:	f0 1f 01 15 	mcall	80002980 <et024006_Init+0x49c>
80002530:	e1 b8 00 42 	mfsr	r8,0x108
80002534:	f0 0a 00 0a 	add	r10,r8,r10
80002538:	e1 b9 00 42 	mfsr	r9,0x108
8000253c:	14 38       	cp.w	r8,r10
8000253e:	e0 88 00 09 	brls	80002550 <et024006_Init+0x6c>
80002542:	12 38       	cp.w	r8,r9
80002544:	fe 98 ff fa 	brls	80002538 <et024006_Init+0x54>
80002548:	12 3a       	cp.w	r10,r9
8000254a:	e0 83 00 a2 	brlo	8000268e <et024006_Init+0x1aa>
8000254e:	cf 5b       	rjmp	80002538 <et024006_Init+0x54>
80002550:	12 38       	cp.w	r8,r9
80002552:	e0 8b 00 9e 	brhi	8000268e <et024006_Init+0x1aa>
80002556:	12 3a       	cp.w	r10,r9
80002558:	e0 83 00 9b 	brlo	8000268e <et024006_Init+0x1aa>
8000255c:	ce eb       	rjmp	80002538 <et024006_Init+0x54>
8000255e:	e1 b9 00 42 	mfsr	r9,0x108
80002562:	14 38       	cp.w	r8,r10
80002564:	e0 88 00 09 	brls	80002576 <et024006_Init+0x92>
80002568:	12 38       	cp.w	r8,r9
8000256a:	fe 98 ff fa 	brls	8000255e <et024006_Init+0x7a>
8000256e:	12 3a       	cp.w	r10,r9
80002570:	e0 83 00 a9 	brlo	800026c2 <et024006_Init+0x1de>
80002574:	cf 5b       	rjmp	8000255e <et024006_Init+0x7a>
80002576:	12 38       	cp.w	r8,r9
80002578:	e0 8b 00 a5 	brhi	800026c2 <et024006_Init+0x1de>
8000257c:	12 3a       	cp.w	r10,r9
8000257e:	e0 83 00 a2 	brlo	800026c2 <et024006_Init+0x1de>
80002582:	ce eb       	rjmp	8000255e <et024006_Init+0x7a>
80002584:	e1 b9 00 42 	mfsr	r9,0x108
80002588:	14 38       	cp.w	r8,r10
8000258a:	e0 88 00 09 	brls	8000259c <et024006_Init+0xb8>
8000258e:	12 38       	cp.w	r8,r9
80002590:	fe 98 ff fa 	brls	80002584 <et024006_Init+0xa0>
80002594:	12 3a       	cp.w	r10,r9
80002596:	e0 83 01 1e 	brlo	800027d2 <et024006_Init+0x2ee>
8000259a:	cf 5b       	rjmp	80002584 <et024006_Init+0xa0>
8000259c:	12 38       	cp.w	r8,r9
8000259e:	e0 8b 01 1a 	brhi	800027d2 <et024006_Init+0x2ee>
800025a2:	12 3a       	cp.w	r10,r9
800025a4:	e0 83 01 17 	brlo	800027d2 <et024006_Init+0x2ee>
800025a8:	ce eb       	rjmp	80002584 <et024006_Init+0xa0>
800025aa:	e1 b9 00 42 	mfsr	r9,0x108
800025ae:	14 38       	cp.w	r8,r10
800025b0:	e0 88 00 09 	brls	800025c2 <et024006_Init+0xde>
800025b4:	12 38       	cp.w	r8,r9
800025b6:	fe 98 ff fa 	brls	800025aa <et024006_Init+0xc6>
800025ba:	12 3a       	cp.w	r10,r9
800025bc:	e0 83 01 29 	brlo	8000280e <et024006_Init+0x32a>
800025c0:	cf 5b       	rjmp	800025aa <et024006_Init+0xc6>
800025c2:	12 38       	cp.w	r8,r9
800025c4:	e0 8b 01 25 	brhi	8000280e <et024006_Init+0x32a>
800025c8:	12 3a       	cp.w	r10,r9
800025ca:	e0 83 01 22 	brlo	8000280e <et024006_Init+0x32a>
800025ce:	ce eb       	rjmp	800025aa <et024006_Init+0xc6>
800025d0:	e1 b9 00 42 	mfsr	r9,0x108
800025d4:	14 38       	cp.w	r8,r10
800025d6:	e0 88 00 09 	brls	800025e8 <et024006_Init+0x104>
800025da:	12 38       	cp.w	r8,r9
800025dc:	fe 98 ff fa 	brls	800025d0 <et024006_Init+0xec>
800025e0:	12 3a       	cp.w	r10,r9
800025e2:	e0 83 01 35 	brlo	8000284c <et024006_Init+0x368>
800025e6:	cf 5b       	rjmp	800025d0 <et024006_Init+0xec>
800025e8:	12 38       	cp.w	r8,r9
800025ea:	e0 8b 01 31 	brhi	8000284c <et024006_Init+0x368>
800025ee:	12 3a       	cp.w	r10,r9
800025f0:	e0 83 01 2e 	brlo	8000284c <et024006_Init+0x368>
800025f4:	ce eb       	rjmp	800025d0 <et024006_Init+0xec>
800025f6:	e1 b9 00 42 	mfsr	r9,0x108
800025fa:	14 38       	cp.w	r8,r10
800025fc:	e0 88 00 09 	brls	8000260e <et024006_Init+0x12a>
80002600:	12 38       	cp.w	r8,r9
80002602:	fe 98 ff fa 	brls	800025f6 <et024006_Init+0x112>
80002606:	12 3a       	cp.w	r10,r9
80002608:	e0 83 01 40 	brlo	80002888 <et024006_Init+0x3a4>
8000260c:	cf 5b       	rjmp	800025f6 <et024006_Init+0x112>
8000260e:	12 38       	cp.w	r8,r9
80002610:	e0 8b 01 3c 	brhi	80002888 <et024006_Init+0x3a4>
80002614:	12 3a       	cp.w	r10,r9
80002616:	e0 83 01 39 	brlo	80002888 <et024006_Init+0x3a4>
8000261a:	ce eb       	rjmp	800025f6 <et024006_Init+0x112>
8000261c:	e1 b9 00 42 	mfsr	r9,0x108
80002620:	14 38       	cp.w	r8,r10
80002622:	e0 88 00 09 	brls	80002634 <et024006_Init+0x150>
80002626:	12 38       	cp.w	r8,r9
80002628:	fe 98 ff fa 	brls	8000261c <et024006_Init+0x138>
8000262c:	12 3a       	cp.w	r10,r9
8000262e:	e0 83 01 4b 	brlo	800028c4 <et024006_Init+0x3e0>
80002632:	cf 5b       	rjmp	8000261c <et024006_Init+0x138>
80002634:	12 38       	cp.w	r8,r9
80002636:	e0 8b 01 47 	brhi	800028c4 <et024006_Init+0x3e0>
8000263a:	12 3a       	cp.w	r10,r9
8000263c:	e0 83 01 44 	brlo	800028c4 <et024006_Init+0x3e0>
80002640:	ce eb       	rjmp	8000261c <et024006_Init+0x138>
80002642:	e1 b9 00 42 	mfsr	r9,0x108
80002646:	14 38       	cp.w	r8,r10
80002648:	e0 88 00 09 	brls	8000265a <et024006_Init+0x176>
8000264c:	12 38       	cp.w	r8,r9
8000264e:	fe 98 ff fa 	brls	80002642 <et024006_Init+0x15e>
80002652:	12 3a       	cp.w	r10,r9
80002654:	e0 83 01 56 	brlo	80002900 <et024006_Init+0x41c>
80002658:	cf 5b       	rjmp	80002642 <et024006_Init+0x15e>
8000265a:	12 38       	cp.w	r8,r9
8000265c:	e0 8b 01 52 	brhi	80002900 <et024006_Init+0x41c>
80002660:	12 3a       	cp.w	r10,r9
80002662:	e0 83 01 4f 	brlo	80002900 <et024006_Init+0x41c>
80002666:	ce eb       	rjmp	80002642 <et024006_Init+0x15e>
80002668:	e1 b9 00 42 	mfsr	r9,0x108
8000266c:	14 38       	cp.w	r8,r10
8000266e:	e0 88 00 09 	brls	80002680 <et024006_Init+0x19c>
80002672:	12 38       	cp.w	r8,r9
80002674:	fe 98 ff fa 	brls	80002668 <et024006_Init+0x184>
80002678:	12 3a       	cp.w	r10,r9
8000267a:	e0 83 01 64 	brlo	80002942 <et024006_Init+0x45e>
8000267e:	cf 5b       	rjmp	80002668 <et024006_Init+0x184>
80002680:	12 38       	cp.w	r8,r9
80002682:	e0 8b 01 60 	brhi	80002942 <et024006_Init+0x45e>
80002686:	12 3a       	cp.w	r10,r9
80002688:	e0 83 01 5d 	brlo	80002942 <et024006_Init+0x45e>
8000268c:	ce eb       	rjmp	80002668 <et024006_Init+0x184>
8000268e:	35 2c       	mov	r12,82
80002690:	f0 1f 00 ba 	mcall	80002978 <et024006_Init+0x494>
80002694:	fe f8 02 d4 	ld.w	r8,pc[724]
80002698:	70 07       	ld.w	r7,r8[0x0]
8000269a:	30 58       	mov	r8,5
8000269c:	ee 08 06 46 	mulu.d	r6,r7,r8
800026a0:	e0 68 03 e8 	mov	r8,1000
800026a4:	30 09       	mov	r9,0
800026a6:	e0 6a 03 e7 	mov	r10,999
800026aa:	30 0b       	mov	r11,0
800026ac:	ec 0a 00 0a 	add	r10,r6,r10
800026b0:	ee 0b 00 4b 	adc	r11,r7,r11
800026b4:	f0 1f 00 b3 	mcall	80002980 <et024006_Init+0x49c>
800026b8:	e1 b8 00 42 	mfsr	r8,0x108
800026bc:	f0 0a 00 0a 	add	r10,r8,r10
800026c0:	c4 fb       	rjmp	8000255e <et024006_Init+0x7a>
800026c2:	f0 1f 00 b1 	mcall	80002984 <et024006_Init+0x4a0>
800026c6:	fc 19 c0 00 	movh	r9,0xc000
800026ca:	30 1a       	mov	r10,1
800026cc:	b2 0a       	st.h	r9[0x0],r10
800026ce:	fc 18 c0 20 	movh	r8,0xc020
800026d2:	30 6b       	mov	r11,6
800026d4:	b0 0b       	st.h	r8[0x0],r11
800026d6:	33 ab       	mov	r11,58
800026d8:	b2 0b       	st.h	r9[0x0],r11
800026da:	b0 0a       	st.h	r8[0x0],r10
800026dc:	33 bb       	mov	r11,59
800026de:	b2 0b       	st.h	r9[0x0],r11
800026e0:	b0 0a       	st.h	r8[0x0],r10
800026e2:	33 ca       	mov	r10,60
800026e4:	b2 0a       	st.h	r9[0x0],r10
800026e6:	e0 6a 00 f0 	mov	r10,240
800026ea:	b0 0a       	st.h	r8[0x0],r10
800026ec:	33 db       	mov	r11,61
800026ee:	b2 0b       	st.h	r9[0x0],r11
800026f0:	30 07       	mov	r7,0
800026f2:	b0 07       	st.h	r8[0x0],r7
800026f4:	33 eb       	mov	r11,62
800026f6:	b2 0b       	st.h	r9[0x0],r11
800026f8:	33 8b       	mov	r11,56
800026fa:	b0 0b       	st.h	r8[0x0],r11
800026fc:	34 0c       	mov	r12,64
800026fe:	b2 0c       	st.h	r9[0x0],r12
80002700:	30 fe       	mov	lr,15
80002702:	b0 0e       	st.h	r8[0x0],lr
80002704:	34 1e       	mov	lr,65
80002706:	b2 0e       	st.h	r9[0x0],lr
80002708:	b0 0a       	st.h	r8[0x0],r10
8000270a:	32 7a       	mov	r10,39
8000270c:	b2 0a       	st.h	r9[0x0],r10
8000270e:	30 2a       	mov	r10,2
80002710:	b0 0a       	st.h	r8[0x0],r10
80002712:	32 8e       	mov	lr,40
80002714:	b2 0e       	st.h	r9[0x0],lr
80002716:	b0 0a       	st.h	r8[0x0],r10
80002718:	32 9e       	mov	lr,41
8000271a:	b2 0e       	st.h	r9[0x0],lr
8000271c:	b0 0a       	st.h	r8[0x0],r10
8000271e:	32 ae       	mov	lr,42
80002720:	b2 0e       	st.h	r9[0x0],lr
80002722:	b0 0a       	st.h	r8[0x0],r10
80002724:	32 ce       	mov	lr,44
80002726:	b2 0e       	st.h	r9[0x0],lr
80002728:	b0 0a       	st.h	r8[0x0],r10
8000272a:	32 de       	mov	lr,45
8000272c:	b2 0e       	st.h	r9[0x0],lr
8000272e:	b0 0a       	st.h	r8[0x0],r10
80002730:	31 9a       	mov	r10,25
80002732:	b2 0a       	st.h	r9[0x0],r10
80002734:	34 9a       	mov	r10,73
80002736:	b0 0a       	st.h	r8[0x0],r10
80002738:	e0 6a 00 93 	mov	r10,147
8000273c:	b2 0a       	st.h	r9[0x0],r10
8000273e:	30 8a       	mov	r10,8
80002740:	b0 0a       	st.h	r8[0x0],r10
80002742:	31 6a       	mov	r10,22
80002744:	b2 0a       	st.h	r9[0x0],r10
80002746:	36 8a       	mov	r10,104
80002748:	b0 0a       	st.h	r8[0x0],r10
8000274a:	32 3a       	mov	r10,35
8000274c:	b2 0a       	st.h	r9[0x0],r10
8000274e:	e0 6a 00 95 	mov	r10,149
80002752:	b0 0a       	st.h	r8[0x0],r10
80002754:	32 4e       	mov	lr,36
80002756:	b2 0e       	st.h	r9[0x0],lr
80002758:	b0 0a       	st.h	r8[0x0],r10
8000275a:	32 5a       	mov	r10,37
8000275c:	b2 0a       	st.h	r9[0x0],r10
8000275e:	e0 6a 00 ff 	mov	r10,255
80002762:	b0 0a       	st.h	r8[0x0],r10
80002764:	e0 6a 00 90 	mov	r10,144
80002768:	b2 0a       	st.h	r9[0x0],r10
8000276a:	37 fa       	mov	r10,127
8000276c:	b0 0a       	st.h	r8[0x0],r10
8000276e:	33 5a       	mov	r10,53
80002770:	b2 0a       	st.h	r9[0x0],r10
80002772:	b0 0b       	st.h	r8[0x0],r11
80002774:	33 6a       	mov	r10,54
80002776:	b2 0a       	st.h	r9[0x0],r10
80002778:	37 8a       	mov	r10,120
8000277a:	b0 0a       	st.h	r8[0x0],r10
8000277c:	31 da       	mov	r10,29
8000277e:	b2 0a       	st.h	r9[0x0],r10
80002780:	30 7a       	mov	r10,7
80002782:	b0 0a       	st.h	r8[0x0],r10
80002784:	31 ea       	mov	r10,30
80002786:	b2 0a       	st.h	r9[0x0],r10
80002788:	b0 07       	st.h	r8[0x0],r7
8000278a:	31 fa       	mov	r10,31
8000278c:	b2 0a       	st.h	r9[0x0],r10
8000278e:	30 4a       	mov	r10,4
80002790:	b0 0a       	st.h	r8[0x0],r10
80002792:	32 0a       	mov	r10,32
80002794:	b2 0a       	st.h	r9[0x0],r10
80002796:	b0 0c       	st.h	r8[0x0],r12
80002798:	34 4a       	mov	r10,68
8000279a:	b2 0a       	st.h	r9[0x0],r10
8000279c:	b0 0b       	st.h	r8[0x0],r11
8000279e:	34 5a       	mov	r10,69
800027a0:	b2 0a       	st.h	r9[0x0],r10
800027a2:	31 29       	mov	r9,18
800027a4:	b0 09       	st.h	r8[0x0],r9
800027a6:	4f 18       	lddpc	r8,80002968 <et024006_Init+0x484>
800027a8:	70 07       	ld.w	r7,r8[0x0]
800027aa:	30 a8       	mov	r8,10
800027ac:	ee 08 06 46 	mulu.d	r6,r7,r8
800027b0:	e0 68 03 e8 	mov	r8,1000
800027b4:	30 09       	mov	r9,0
800027b6:	e0 6a 03 e7 	mov	r10,999
800027ba:	30 0b       	mov	r11,0
800027bc:	ec 0a 00 0a 	add	r10,r6,r10
800027c0:	ee 0b 00 4b 	adc	r11,r7,r11
800027c4:	f0 1f 00 6f 	mcall	80002980 <et024006_Init+0x49c>
800027c8:	e1 b8 00 42 	mfsr	r8,0x108
800027cc:	f0 0a 00 0a 	add	r10,r8,r10
800027d0:	cd aa       	rjmp	80002584 <et024006_Init+0xa0>
800027d2:	31 c9       	mov	r9,28
800027d4:	fc 18 c0 00 	movh	r8,0xc000
800027d8:	b0 09       	st.h	r8[0x0],r9
800027da:	30 49       	mov	r9,4
800027dc:	fc 18 c0 20 	movh	r8,0xc020
800027e0:	b0 09       	st.h	r8[0x0],r9
800027e2:	4e 28       	lddpc	r8,80002968 <et024006_Init+0x484>
800027e4:	70 07       	ld.w	r7,r8[0x0]
800027e6:	31 48       	mov	r8,20
800027e8:	ee 08 06 46 	mulu.d	r6,r7,r8
800027ec:	e0 68 03 e8 	mov	r8,1000
800027f0:	30 09       	mov	r9,0
800027f2:	e0 6a 03 e7 	mov	r10,999
800027f6:	30 0b       	mov	r11,0
800027f8:	ec 0a 00 0a 	add	r10,r6,r10
800027fc:	ee 0b 00 4b 	adc	r11,r7,r11
80002800:	f0 1f 00 60 	mcall	80002980 <et024006_Init+0x49c>
80002804:	e1 b8 00 42 	mfsr	r8,0x108
80002808:	f0 0a 00 0a 	add	r10,r8,r10
8000280c:	cc fa       	rjmp	800025aa <et024006_Init+0xc6>
8000280e:	34 39       	mov	r9,67
80002810:	fc 18 c0 00 	movh	r8,0xc000
80002814:	b0 09       	st.h	r8[0x0],r9
80002816:	e0 69 00 80 	mov	r9,128
8000281a:	fc 18 c0 20 	movh	r8,0xc020
8000281e:	b0 09       	st.h	r8[0x0],r9
80002820:	4d 28       	lddpc	r8,80002968 <et024006_Init+0x484>
80002822:	70 07       	ld.w	r7,r8[0x0]
80002824:	30 58       	mov	r8,5
80002826:	ee 08 06 46 	mulu.d	r6,r7,r8
8000282a:	e0 68 03 e8 	mov	r8,1000
8000282e:	30 09       	mov	r9,0
80002830:	e0 6a 03 e7 	mov	r10,999
80002834:	30 0b       	mov	r11,0
80002836:	ec 0a 00 0a 	add	r10,r6,r10
8000283a:	ee 0b 00 4b 	adc	r11,r7,r11
8000283e:	f0 1f 00 51 	mcall	80002980 <et024006_Init+0x49c>
80002842:	e1 b8 00 42 	mfsr	r8,0x108
80002846:	f0 0a 00 0a 	add	r10,r8,r10
8000284a:	cc 3a       	rjmp	800025d0 <et024006_Init+0xec>
8000284c:	31 b9       	mov	r9,27
8000284e:	fc 18 c0 00 	movh	r8,0xc000
80002852:	b0 09       	st.h	r8[0x0],r9
80002854:	30 89       	mov	r9,8
80002856:	fc 18 c0 20 	movh	r8,0xc020
8000285a:	b0 09       	st.h	r8[0x0],r9
8000285c:	4c 38       	lddpc	r8,80002968 <et024006_Init+0x484>
8000285e:	70 07       	ld.w	r7,r8[0x0]
80002860:	32 88       	mov	r8,40
80002862:	ee 08 06 46 	mulu.d	r6,r7,r8
80002866:	e0 68 03 e8 	mov	r8,1000
8000286a:	30 09       	mov	r9,0
8000286c:	e0 6a 03 e7 	mov	r10,999
80002870:	30 0b       	mov	r11,0
80002872:	ec 0a 00 0a 	add	r10,r6,r10
80002876:	ee 0b 00 4b 	adc	r11,r7,r11
8000287a:	f0 1f 00 42 	mcall	80002980 <et024006_Init+0x49c>
8000287e:	e1 b8 00 42 	mfsr	r8,0x108
80002882:	f0 0a 00 0a 	add	r10,r8,r10
80002886:	cb 8a       	rjmp	800025f6 <et024006_Init+0x112>
80002888:	31 b9       	mov	r9,27
8000288a:	fc 18 c0 00 	movh	r8,0xc000
8000288e:	b0 09       	st.h	r8[0x0],r9
80002890:	31 09       	mov	r9,16
80002892:	fc 18 c0 20 	movh	r8,0xc020
80002896:	b0 09       	st.h	r8[0x0],r9
80002898:	4b 48       	lddpc	r8,80002968 <et024006_Init+0x484>
8000289a:	70 07       	ld.w	r7,r8[0x0]
8000289c:	32 88       	mov	r8,40
8000289e:	ee 08 06 46 	mulu.d	r6,r7,r8
800028a2:	e0 68 03 e8 	mov	r8,1000
800028a6:	30 09       	mov	r9,0
800028a8:	e0 6a 03 e7 	mov	r10,999
800028ac:	30 0b       	mov	r11,0
800028ae:	ec 0a 00 0a 	add	r10,r6,r10
800028b2:	ee 0b 00 4b 	adc	r11,r7,r11
800028b6:	f0 1f 00 33 	mcall	80002980 <et024006_Init+0x49c>
800028ba:	e1 b8 00 42 	mfsr	r8,0x108
800028be:	f0 0a 00 0a 	add	r10,r8,r10
800028c2:	ca da       	rjmp	8000261c <et024006_Init+0x138>
800028c4:	32 69       	mov	r9,38
800028c6:	fc 18 c0 00 	movh	r8,0xc000
800028ca:	b0 09       	st.h	r8[0x0],r9
800028cc:	30 49       	mov	r9,4
800028ce:	fc 18 c0 20 	movh	r8,0xc020
800028d2:	b0 09       	st.h	r8[0x0],r9
800028d4:	4a 58       	lddpc	r8,80002968 <et024006_Init+0x484>
800028d6:	70 07       	ld.w	r7,r8[0x0]
800028d8:	32 88       	mov	r8,40
800028da:	ee 08 06 46 	mulu.d	r6,r7,r8
800028de:	e0 68 03 e8 	mov	r8,1000
800028e2:	30 09       	mov	r9,0
800028e4:	e0 6a 03 e7 	mov	r10,999
800028e8:	30 0b       	mov	r11,0
800028ea:	ec 0a 00 0a 	add	r10,r6,r10
800028ee:	ee 0b 00 4b 	adc	r11,r7,r11
800028f2:	f0 1f 00 24 	mcall	80002980 <et024006_Init+0x49c>
800028f6:	e1 b8 00 42 	mfsr	r8,0x108
800028fa:	f0 0a 00 0a 	add	r10,r8,r10
800028fe:	ca 2a       	rjmp	80002642 <et024006_Init+0x15e>
80002900:	fc 19 c0 00 	movh	r9,0xc000
80002904:	32 6a       	mov	r10,38
80002906:	b2 0a       	st.h	r9[0x0],r10
80002908:	fc 18 c0 20 	movh	r8,0xc020
8000290c:	32 4b       	mov	r11,36
8000290e:	b0 0b       	st.h	r8[0x0],r11
80002910:	b2 0a       	st.h	r9[0x0],r10
80002912:	32 c9       	mov	r9,44
80002914:	b0 09       	st.h	r8[0x0],r9
80002916:	49 58       	lddpc	r8,80002968 <et024006_Init+0x484>
80002918:	70 07       	ld.w	r7,r8[0x0]
8000291a:	32 88       	mov	r8,40
8000291c:	ee 08 06 46 	mulu.d	r6,r7,r8
80002920:	e0 68 03 e8 	mov	r8,1000
80002924:	30 09       	mov	r9,0
80002926:	e0 6a 03 e7 	mov	r10,999
8000292a:	30 0b       	mov	r11,0
8000292c:	ec 0a 00 0a 	add	r10,r6,r10
80002930:	ee 0b 00 4b 	adc	r11,r7,r11
80002934:	f0 1f 00 13 	mcall	80002980 <et024006_Init+0x49c>
80002938:	e1 b8 00 42 	mfsr	r8,0x108
8000293c:	f0 0a 00 0a 	add	r10,r8,r10
80002940:	c9 4a       	rjmp	80002668 <et024006_Init+0x184>
80002942:	fc 19 c0 00 	movh	r9,0xc000
80002946:	32 68       	mov	r8,38
80002948:	b2 08       	st.h	r9[0x0],r8
8000294a:	fc 18 c0 20 	movh	r8,0xc020
8000294e:	33 ca       	mov	r10,60
80002950:	b0 0a       	st.h	r8[0x0],r10
80002952:	37 0a       	mov	r10,112
80002954:	b2 0a       	st.h	r9[0x0],r10
80002956:	90 0b       	ld.sh	r11,r8[0x0]
80002958:	5c 5b       	castu.b	r11
8000295a:	b2 0a       	st.h	r9[0x0],r10
8000295c:	16 99       	mov	r9,r11
8000295e:	a3 b9       	sbr	r9,0x3
80002960:	b0 09       	st.h	r8[0x0],r9
80002962:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002966:	00 00       	add	r0,r0
80002968:	00 00       	add	r0,r0
8000296a:	00 28       	rsub	r8,r0
8000296c:	80 00       	ld.sh	r0,r0[0x0]
8000296e:	34 90       	mov	r0,73
80002970:	80 00       	ld.sh	r0,r0[0x0]
80002972:	36 30       	mov	r0,99
80002974:	80 00       	ld.sh	r0,r0[0x0]
80002976:	35 ac       	mov	r12,90
80002978:	80 00       	ld.sh	r0,r0[0x0]
8000297a:	36 5e       	mov	lr,101
8000297c:	80 00       	ld.sh	r0,r0[0x0]
8000297e:	36 7a       	mov	r10,103
80002980:	80 00       	ld.sh	r0,r0[0x0]
80002982:	49 74       	lddpc	r4,800029dc <sd_mmc_spi_get_capacity+0x54>
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	24 74       	sub	r4,71

80002988 <sd_mmc_spi_get_capacity>:
80002988:	d4 01       	pushm	lr
8000298a:	4c 18       	lddpc	r8,80002a8c <sd_mmc_spi_get_capacity+0x104>
8000298c:	11 db       	ld.ub	r11,r8[0x5]
8000298e:	4c 18       	lddpc	r8,80002a90 <sd_mmc_spi_get_capacity+0x108>
80002990:	11 8a       	ld.ub	r10,r8[0x0]
80002992:	30 38       	mov	r8,3
80002994:	f0 0a 18 00 	cp.b	r10,r8
80002998:	c2 71       	brne	800029e6 <sd_mmc_spi_get_capacity+0x5e>
8000299a:	4b d8       	lddpc	r8,80002a8c <sd_mmc_spi_get_capacity+0x104>
8000299c:	f1 3a 00 08 	ld.ub	r10,r8[8]
800029a0:	f1 39 00 09 	ld.ub	r9,r8[9]
800029a4:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800029a8:	11 fa       	ld.ub	r10,r8[0x7]
800029aa:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
800029ae:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
800029b2:	2f fa       	sub	r10,-1
800029b4:	f4 0b 16 0d 	lsr	r11,r10,0xd
800029b8:	16 99       	mov	r9,r11
800029ba:	f4 08 15 13 	lsl	r8,r10,0x13
800029be:	4b 6a       	lddpc	r10,80002a94 <sd_mmc_spi_get_capacity+0x10c>
800029c0:	f4 e9 00 00 	st.d	r10[0],r8
800029c4:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800029c8:	4b 48       	lddpc	r8,80002a98 <sd_mmc_spi_get_capacity+0x110>
800029ca:	b0 0b       	st.h	r8[0x0],r11
800029cc:	f4 ea 00 00 	ld.d	r10,r10[0]
800029d0:	90 09       	ld.sh	r9,r8[0x0]
800029d2:	f4 08 16 09 	lsr	r8,r10,0x9
800029d6:	f1 eb 11 78 	or	r8,r8,r11<<0x17
800029da:	20 18       	sub	r8,1
800029dc:	b7 79       	lsl	r9,0x17
800029de:	12 08       	add	r8,r9
800029e0:	4a f9       	lddpc	r9,80002a9c <sd_mmc_spi_get_capacity+0x114>
800029e2:	93 08       	st.w	r9[0x0],r8
800029e4:	c4 28       	rjmp	80002a68 <sd_mmc_spi_get_capacity+0xe0>
800029e6:	4a a8       	lddpc	r8,80002a8c <sd_mmc_spi_get_capacity+0x104>
800029e8:	f1 3c 00 0a 	ld.ub	r12,r8[10]
800029ec:	f1 39 00 08 	ld.ub	r9,r8[8]
800029f0:	a7 89       	lsr	r9,0x6
800029f2:	11 fe       	ld.ub	lr,r8[0x7]
800029f4:	f2 0e 00 29 	add	r9,r9,lr<<0x2
800029f8:	11 ee       	ld.ub	lr,r8[0x6]
800029fa:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
800029fe:	ab 6e       	lsl	lr,0xa
80002a00:	1c 09       	add	r9,lr
80002a02:	2f f9       	sub	r9,-1
80002a04:	f1 38 00 09 	ld.ub	r8,r8[9]
80002a08:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002a0c:	f8 0e 16 07 	lsr	lr,r12,0x7
80002a10:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002a14:	2f e8       	sub	r8,-2
80002a16:	f2 08 09 49 	lsl	r9,r9,r8
80002a1a:	20 19       	sub	r9,1
80002a1c:	4a 08       	lddpc	r8,80002a9c <sd_mmc_spi_get_capacity+0x114>
80002a1e:	91 09       	st.w	r8[0x0],r9
80002a20:	70 0e       	ld.w	lr,r8[0x0]
80002a22:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
80002a26:	2f fe       	sub	lr,-1
80002a28:	fc 0b 09 48 	lsl	r8,lr,r11
80002a2c:	30 09       	mov	r9,0
80002a2e:	49 ae       	lddpc	lr,80002a94 <sd_mmc_spi_get_capacity+0x10c>
80002a30:	fc e9 00 00 	st.d	lr[0],r8
80002a34:	49 98       	lddpc	r8,80002a98 <sd_mmc_spi_get_capacity+0x110>
80002a36:	b0 09       	st.h	r8[0x0],r9
80002a38:	30 98       	mov	r8,9
80002a3a:	f0 0b 18 00 	cp.b	r11,r8
80002a3e:	e0 88 00 08 	brls	80002a4e <sd_mmc_spi_get_capacity+0xc6>
80002a42:	49 78       	lddpc	r8,80002a9c <sd_mmc_spi_get_capacity+0x114>
80002a44:	70 09       	ld.w	r9,r8[0x0]
80002a46:	20 9b       	sub	r11,9
80002a48:	f2 0b 09 4b 	lsl	r11,r9,r11
80002a4c:	91 0b       	st.w	r8[0x0],r11
80002a4e:	58 0a       	cp.w	r10,0
80002a50:	c0 c1       	brne	80002a68 <sd_mmc_spi_get_capacity+0xe0>
80002a52:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
80002a56:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
80002a5a:	48 d9       	lddpc	r9,80002a8c <sd_mmc_spi_get_capacity+0x104>
80002a5c:	f3 39 00 0b 	ld.ub	r9,r9[11]
80002a60:	a3 7c       	lsl	r12,0x3
80002a62:	f9 e9 12 59 	or	r9,r12,r9>>0x5
80002a66:	c0 c8       	rjmp	80002a7e <sd_mmc_spi_get_capacity+0xf6>
80002a68:	48 9a       	lddpc	r10,80002a8c <sd_mmc_spi_get_capacity+0x104>
80002a6a:	f5 39 00 0a 	ld.ub	r9,r10[10]
80002a6e:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
80002a72:	f5 38 00 0b 	ld.ub	r8,r10[11]
80002a76:	a7 98       	lsr	r8,0x7
80002a78:	f0 09 00 18 	add	r8,r8,r9<<0x1
80002a7c:	30 09       	mov	r9,0
80002a7e:	2f f9       	sub	r9,-1
80002a80:	2f f8       	sub	r8,-1
80002a82:	b1 39       	mul	r9,r8
80002a84:	48 78       	lddpc	r8,80002aa0 <sd_mmc_spi_get_capacity+0x118>
80002a86:	b0 09       	st.h	r8[0x0],r9
80002a88:	d8 02       	popm	pc
80002a8a:	00 00       	add	r0,r0
80002a8c:	00 00       	add	r0,r0
80002a8e:	03 74       	ld.ub	r4,--r1
80002a90:	00 00       	add	r0,r0
80002a92:	03 72       	ld.ub	r2,--r1
80002a94:	00 00       	add	r0,r0
80002a96:	03 60       	ld.uh	r0,--r1
80002a98:	00 00       	add	r0,r0
80002a9a:	03 68       	ld.uh	r8,--r1
80002a9c:	00 00       	add	r0,r0
80002a9e:	03 6c       	ld.uh	r12,--r1
80002aa0:	00 00       	add	r0,r0
80002aa2:	03 6a       	ld.uh	r10,--r1

80002aa4 <sd_mmc_spi_write_close>:
80002aa4:	5e fc       	retal	r12
80002aa6:	d7 03       	nop

80002aa8 <sd_mmc_spi_read_close_PDCA>:
80002aa8:	d4 01       	pushm	lr
80002aaa:	e0 6b 00 ff 	mov	r11,255
80002aae:	fe 7c 24 00 	mov	r12,-56320
80002ab2:	f0 1f 00 0e 	mcall	80002ae8 <sd_mmc_spi_read_close_PDCA+0x40>
80002ab6:	e0 6b 00 ff 	mov	r11,255
80002aba:	fe 7c 24 00 	mov	r12,-56320
80002abe:	f0 1f 00 0b 	mcall	80002ae8 <sd_mmc_spi_read_close_PDCA+0x40>
80002ac2:	e0 6b 00 ff 	mov	r11,255
80002ac6:	fe 7c 24 00 	mov	r12,-56320
80002aca:	f0 1f 00 08 	mcall	80002ae8 <sd_mmc_spi_read_close_PDCA+0x40>
80002ace:	e0 6b 00 ff 	mov	r11,255
80002ad2:	fe 7c 24 00 	mov	r12,-56320
80002ad6:	f0 1f 00 05 	mcall	80002ae8 <sd_mmc_spi_read_close_PDCA+0x40>
80002ada:	30 1b       	mov	r11,1
80002adc:	fe 7c 24 00 	mov	r12,-56320
80002ae0:	f0 1f 00 03 	mcall	80002aec <sd_mmc_spi_read_close_PDCA+0x44>
80002ae4:	d8 02       	popm	pc
80002ae6:	00 00       	add	r0,r0
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	3c 66       	mov	r6,-58
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	3b 82       	mov	r2,-72

80002af0 <sd_mmc_spi_send_and_read>:
80002af0:	d4 01       	pushm	lr
80002af2:	20 1d       	sub	sp,4
80002af4:	18 9b       	mov	r11,r12
80002af6:	fe 7c 24 00 	mov	r12,-56320
80002afa:	f0 1f 00 09 	mcall	80002b1c <sd_mmc_spi_send_and_read+0x2c>
80002afe:	fa cb ff fe 	sub	r11,sp,-2
80002b02:	fe 7c 24 00 	mov	r12,-56320
80002b06:	f0 1f 00 07 	mcall	80002b20 <sd_mmc_spi_send_and_read+0x30>
80002b0a:	58 1c       	cp.w	r12,1
80002b0c:	c0 41       	brne	80002b14 <sd_mmc_spi_send_and_read+0x24>
80002b0e:	e0 6c 00 ff 	mov	r12,255
80002b12:	c0 28       	rjmp	80002b16 <sd_mmc_spi_send_and_read+0x26>
80002b14:	1b bc       	ld.ub	r12,sp[0x3]
80002b16:	2f fd       	sub	sp,-4
80002b18:	d8 02       	popm	pc
80002b1a:	00 00       	add	r0,r0
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	3c 66       	mov	r6,-58
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	3c 82       	mov	r2,-56

80002b24 <sd_mmc_spi_wait_not_busy>:
80002b24:	d4 21       	pushm	r4-r7,lr
80002b26:	30 1b       	mov	r11,1
80002b28:	fe 7c 24 00 	mov	r12,-56320
80002b2c:	f0 1f 00 10 	mcall	80002b6c <sd_mmc_spi_wait_not_busy+0x48>
80002b30:	30 07       	mov	r7,0
80002b32:	e0 65 00 ff 	mov	r5,255
80002b36:	48 f4       	lddpc	r4,80002b70 <sd_mmc_spi_wait_not_busy+0x4c>
80002b38:	3f f6       	mov	r6,-1
80002b3a:	c0 b8       	rjmp	80002b50 <sd_mmc_spi_wait_not_busy+0x2c>
80002b3c:	2f f7       	sub	r7,-1
80002b3e:	e2 57 0d 40 	cp.w	r7,200000
80002b42:	c0 71       	brne	80002b50 <sd_mmc_spi_wait_not_busy+0x2c>
80002b44:	30 1b       	mov	r11,1
80002b46:	fe 7c 24 00 	mov	r12,-56320
80002b4a:	f0 1f 00 0b 	mcall	80002b74 <sd_mmc_spi_wait_not_busy+0x50>
80002b4e:	d8 2a       	popm	r4-r7,pc,r12=0
80002b50:	0a 9c       	mov	r12,r5
80002b52:	f0 1f 00 0a 	mcall	80002b78 <sd_mmc_spi_wait_not_busy+0x54>
80002b56:	a8 8c       	st.b	r4[0x0],r12
80002b58:	ec 0c 18 00 	cp.b	r12,r6
80002b5c:	cf 01       	brne	80002b3c <sd_mmc_spi_wait_not_busy+0x18>
80002b5e:	30 1b       	mov	r11,1
80002b60:	fe 7c 24 00 	mov	r12,-56320
80002b64:	f0 1f 00 04 	mcall	80002b74 <sd_mmc_spi_wait_not_busy+0x50>
80002b68:	da 2a       	popm	r4-r7,pc,r12=1
80002b6a:	00 00       	add	r0,r0
80002b6c:	80 00       	ld.sh	r0,r0[0x0]
80002b6e:	3b 36       	mov	r6,-77
80002b70:	00 00       	add	r0,r0
80002b72:	03 84       	ld.ub	r4,r1[0x0]
80002b74:	80 00       	ld.sh	r0,r0[0x0]
80002b76:	3b 82       	mov	r2,-72
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	2a f0       	sub	r0,-81

80002b7c <sd_mmc_spi_write_open>:
80002b7c:	d4 01       	pushm	lr
80002b7e:	48 58       	lddpc	r8,80002b90 <sd_mmc_spi_write_open+0x14>
80002b80:	f8 09 16 17 	lsr	r9,r12,0x17
80002b84:	91 09       	st.w	r8[0x0],r9
80002b86:	a9 7c       	lsl	r12,0x9
80002b88:	91 1c       	st.w	r8[0x4],r12
80002b8a:	f0 1f 00 03 	mcall	80002b94 <sd_mmc_spi_write_open+0x18>
80002b8e:	d8 02       	popm	pc
80002b90:	00 00       	add	r0,r0
80002b92:	00 30       	cp.w	r0,r0
80002b94:	80 00       	ld.sh	r0,r0[0x0]
80002b96:	2b 24       	sub	r4,-78

80002b98 <sd_mmc_spi_command>:
80002b98:	eb cd 40 f8 	pushm	r3-r7,lr
80002b9c:	18 96       	mov	r6,r12
80002b9e:	16 97       	mov	r7,r11
80002ba0:	e0 6b 00 ff 	mov	r11,255
80002ba4:	fe 7c 24 00 	mov	r12,-56320
80002ba8:	f0 1f 00 2b 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002bac:	0c 9b       	mov	r11,r6
80002bae:	a7 ab       	sbr	r11,0x6
80002bb0:	5c 5b       	castu.b	r11
80002bb2:	fe 7c 24 00 	mov	r12,-56320
80002bb6:	f0 1f 00 28 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002bba:	ee 0b 16 18 	lsr	r11,r7,0x18
80002bbe:	fe 7c 24 00 	mov	r12,-56320
80002bc2:	f0 1f 00 25 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002bc6:	ee 0b 16 10 	lsr	r11,r7,0x10
80002bca:	fe 7c 24 00 	mov	r12,-56320
80002bce:	f0 1f 00 22 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002bd2:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
80002bd6:	fe 7c 24 00 	mov	r12,-56320
80002bda:	f0 1f 00 1f 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002bde:	0e 9b       	mov	r11,r7
80002be0:	5c 7b       	castu.h	r11
80002be2:	fe 7c 24 00 	mov	r12,-56320
80002be6:	f0 1f 00 1c 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002bea:	30 08       	mov	r8,0
80002bec:	f0 06 18 00 	cp.b	r6,r8
80002bf0:	c0 60       	breq	80002bfc <sd_mmc_spi_command+0x64>
80002bf2:	30 88       	mov	r8,8
80002bf4:	f0 06 18 00 	cp.b	r6,r8
80002bf8:	c1 01       	brne	80002c18 <sd_mmc_spi_command+0x80>
80002bfa:	c0 88       	rjmp	80002c0a <sd_mmc_spi_command+0x72>
80002bfc:	e0 6b 00 95 	mov	r11,149
80002c00:	fe 7c 24 00 	mov	r12,-56320
80002c04:	f0 1f 00 14 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002c08:	c0 e8       	rjmp	80002c24 <sd_mmc_spi_command+0x8c>
80002c0a:	e0 6b 00 87 	mov	r11,135
80002c0e:	fe 7c 24 00 	mov	r12,-56320
80002c12:	f0 1f 00 11 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002c16:	c0 78       	rjmp	80002c24 <sd_mmc_spi_command+0x8c>
80002c18:	e0 6b 00 ff 	mov	r11,255
80002c1c:	fe 7c 24 00 	mov	r12,-56320
80002c20:	f0 1f 00 0d 	mcall	80002c54 <sd_mmc_spi_command+0xbc>
80002c24:	3f f9       	mov	r9,-1
80002c26:	48 d8       	lddpc	r8,80002c58 <sd_mmc_spi_command+0xc0>
80002c28:	b0 89       	st.b	r8[0x0],r9
80002c2a:	30 07       	mov	r7,0
80002c2c:	e0 64 00 ff 	mov	r4,255
80002c30:	10 93       	mov	r3,r8
80002c32:	12 96       	mov	r6,r9
80002c34:	30 b5       	mov	r5,11
80002c36:	c0 68       	rjmp	80002c42 <sd_mmc_spi_command+0xaa>
80002c38:	2f f7       	sub	r7,-1
80002c3a:	5c 57       	castu.b	r7
80002c3c:	ea 07 18 00 	cp.b	r7,r5
80002c40:	c0 80       	breq	80002c50 <sd_mmc_spi_command+0xb8>
80002c42:	08 9c       	mov	r12,r4
80002c44:	f0 1f 00 06 	mcall	80002c5c <sd_mmc_spi_command+0xc4>
80002c48:	a6 8c       	st.b	r3[0x0],r12
80002c4a:	ec 0c 18 00 	cp.b	r12,r6
80002c4e:	cf 50       	breq	80002c38 <sd_mmc_spi_command+0xa0>
80002c50:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002c54:	80 00       	ld.sh	r0,r0[0x0]
80002c56:	3c 66       	mov	r6,-58
80002c58:	00 00       	add	r0,r0
80002c5a:	03 84       	ld.ub	r4,r1[0x0]
80002c5c:	80 00       	ld.sh	r0,r0[0x0]
80002c5e:	2a f0       	sub	r0,-81

80002c60 <sd_mmc_spi_send_command>:
80002c60:	eb cd 40 c0 	pushm	r6-r7,lr
80002c64:	18 97       	mov	r7,r12
80002c66:	16 96       	mov	r6,r11
80002c68:	30 1b       	mov	r11,1
80002c6a:	fe 7c 24 00 	mov	r12,-56320
80002c6e:	f0 1f 00 09 	mcall	80002c90 <sd_mmc_spi_send_command+0x30>
80002c72:	0c 9b       	mov	r11,r6
80002c74:	0e 9c       	mov	r12,r7
80002c76:	f0 1f 00 08 	mcall	80002c94 <sd_mmc_spi_send_command+0x34>
80002c7a:	48 87       	lddpc	r7,80002c98 <sd_mmc_spi_send_command+0x38>
80002c7c:	ae 8c       	st.b	r7[0x0],r12
80002c7e:	30 1b       	mov	r11,1
80002c80:	fe 7c 24 00 	mov	r12,-56320
80002c84:	f0 1f 00 06 	mcall	80002c9c <sd_mmc_spi_send_command+0x3c>
80002c88:	0f 8c       	ld.ub	r12,r7[0x0]
80002c8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c8e:	00 00       	add	r0,r0
80002c90:	80 00       	ld.sh	r0,r0[0x0]
80002c92:	3b 36       	mov	r6,-77
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	2b 98       	sub	r8,-71
80002c98:	00 00       	add	r0,r0
80002c9a:	03 84       	ld.ub	r4,r1[0x0]
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	3b 82       	mov	r2,-72

80002ca0 <sd_mmc_spi_check_presence>:
80002ca0:	eb cd 40 fe 	pushm	r1-r7,lr
80002ca4:	49 a8       	lddpc	r8,80002d0c <sd_mmc_spi_check_presence+0x6c>
80002ca6:	11 89       	ld.ub	r9,r8[0x0]
80002ca8:	30 08       	mov	r8,0
80002caa:	f0 09 18 00 	cp.b	r9,r8
80002cae:	c1 f1       	brne	80002cec <sd_mmc_spi_check_presence+0x4c>
80002cb0:	30 07       	mov	r7,0
80002cb2:	0e 94       	mov	r4,r7
80002cb4:	49 73       	lddpc	r3,80002d10 <sd_mmc_spi_check_presence+0x70>
80002cb6:	30 16       	mov	r6,1
80002cb8:	e0 62 00 ff 	mov	r2,255
80002cbc:	fe 71 24 00 	mov	r1,-56320
80002cc0:	30 b5       	mov	r5,11
80002cc2:	c0 c8       	rjmp	80002cda <sd_mmc_spi_check_presence+0x3a>
80002cc4:	04 9b       	mov	r11,r2
80002cc6:	02 9c       	mov	r12,r1
80002cc8:	f0 1f 00 13 	mcall	80002d14 <sd_mmc_spi_check_presence+0x74>
80002ccc:	2f f7       	sub	r7,-1
80002cce:	5c 87       	casts.h	r7
80002cd0:	ea 07 19 00 	cp.h	r7,r5
80002cd4:	c0 31       	brne	80002cda <sd_mmc_spi_check_presence+0x3a>
80002cd6:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002cda:	08 9b       	mov	r11,r4
80002cdc:	08 9c       	mov	r12,r4
80002cde:	f0 1f 00 0f 	mcall	80002d18 <sd_mmc_spi_check_presence+0x78>
80002ce2:	a6 8c       	st.b	r3[0x0],r12
80002ce4:	ec 0c 18 00 	cp.b	r12,r6
80002ce8:	ce e1       	brne	80002cc4 <sd_mmc_spi_check_presence+0x24>
80002cea:	c0 e8       	rjmp	80002d06 <sd_mmc_spi_check_presence+0x66>
80002cec:	30 0b       	mov	r11,0
80002cee:	33 bc       	mov	r12,59
80002cf0:	f0 1f 00 0a 	mcall	80002d18 <sd_mmc_spi_check_presence+0x78>
80002cf4:	48 78       	lddpc	r8,80002d10 <sd_mmc_spi_check_presence+0x70>
80002cf6:	b0 8c       	st.b	r8[0x0],r12
80002cf8:	58 0c       	cp.w	r12,0
80002cfa:	c0 60       	breq	80002d06 <sd_mmc_spi_check_presence+0x66>
80002cfc:	30 09       	mov	r9,0
80002cfe:	48 48       	lddpc	r8,80002d0c <sd_mmc_spi_check_presence+0x6c>
80002d00:	b0 89       	st.b	r8[0x0],r9
80002d02:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002d06:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
80002d0a:	00 00       	add	r0,r0
80002d0c:	00 00       	add	r0,r0
80002d0e:	00 4c       	or	r12,r0
80002d10:	00 00       	add	r0,r0
80002d12:	03 84       	ld.ub	r4,r1[0x0]
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	3c 66       	mov	r6,-58
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	2c 60       	sub	r0,-58

80002d1c <sd_mmc_spi_write_sector_from_ram>:
80002d1c:	eb cd 40 e0 	pushm	r5-r7,lr
80002d20:	18 97       	mov	r7,r12
80002d22:	f0 1f 00 4e 	mcall	80002e58 <sd_mmc_spi_write_sector_from_ram+0x13c>
80002d26:	e0 80 00 96 	breq	80002e52 <sd_mmc_spi_write_sector_from_ram+0x136>
80002d2a:	30 1b       	mov	r11,1
80002d2c:	fe 7c 24 00 	mov	r12,-56320
80002d30:	f0 1f 00 4b 	mcall	80002e5c <sd_mmc_spi_write_sector_from_ram+0x140>
80002d34:	4c b8       	lddpc	r8,80002e60 <sd_mmc_spi_write_sector_from_ram+0x144>
80002d36:	11 89       	ld.ub	r9,r8[0x0]
80002d38:	30 38       	mov	r8,3
80002d3a:	f0 09 18 00 	cp.b	r9,r8
80002d3e:	c0 d1       	brne	80002d58 <sd_mmc_spi_write_sector_from_ram+0x3c>
80002d40:	4c 98       	lddpc	r8,80002e64 <sd_mmc_spi_write_sector_from_ram+0x148>
80002d42:	70 0b       	ld.w	r11,r8[0x0]
80002d44:	70 18       	ld.w	r8,r8[0x4]
80002d46:	a9 98       	lsr	r8,0x9
80002d48:	f1 eb 11 7b 	or	r11,r8,r11<<0x17
80002d4c:	31 8c       	mov	r12,24
80002d4e:	f0 1f 00 47 	mcall	80002e68 <sd_mmc_spi_write_sector_from_ram+0x14c>
80002d52:	4c 78       	lddpc	r8,80002e6c <sd_mmc_spi_write_sector_from_ram+0x150>
80002d54:	b0 8c       	st.b	r8[0x0],r12
80002d56:	c0 88       	rjmp	80002d66 <sd_mmc_spi_write_sector_from_ram+0x4a>
80002d58:	4c 38       	lddpc	r8,80002e64 <sd_mmc_spi_write_sector_from_ram+0x148>
80002d5a:	70 1b       	ld.w	r11,r8[0x4]
80002d5c:	31 8c       	mov	r12,24
80002d5e:	f0 1f 00 43 	mcall	80002e68 <sd_mmc_spi_write_sector_from_ram+0x14c>
80002d62:	4c 38       	lddpc	r8,80002e6c <sd_mmc_spi_write_sector_from_ram+0x150>
80002d64:	b0 8c       	st.b	r8[0x0],r12
80002d66:	4c 28       	lddpc	r8,80002e6c <sd_mmc_spi_write_sector_from_ram+0x150>
80002d68:	11 89       	ld.ub	r9,r8[0x0]
80002d6a:	30 08       	mov	r8,0
80002d6c:	f0 09 18 00 	cp.b	r9,r8
80002d70:	c0 80       	breq	80002d80 <sd_mmc_spi_write_sector_from_ram+0x64>
80002d72:	30 1b       	mov	r11,1
80002d74:	fe 7c 24 00 	mov	r12,-56320
80002d78:	f0 1f 00 3e 	mcall	80002e70 <sd_mmc_spi_write_sector_from_ram+0x154>
80002d7c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002d80:	e0 6b 00 ff 	mov	r11,255
80002d84:	fe 7c 24 00 	mov	r12,-56320
80002d88:	f0 1f 00 3b 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002d8c:	e0 6b 00 fe 	mov	r11,254
80002d90:	fe 7c 24 00 	mov	r12,-56320
80002d94:	f0 1f 00 38 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002d98:	ee c6 fe 00 	sub	r6,r7,-512
80002d9c:	fe 75 24 00 	mov	r5,-56320
80002da0:	0f 3b       	ld.ub	r11,r7++
80002da2:	0a 9c       	mov	r12,r5
80002da4:	f0 1f 00 34 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002da8:	0c 37       	cp.w	r7,r6
80002daa:	cf b1       	brne	80002da0 <sd_mmc_spi_write_sector_from_ram+0x84>
80002dac:	e0 6b 00 ff 	mov	r11,255
80002db0:	fe 7c 24 00 	mov	r12,-56320
80002db4:	f0 1f 00 30 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002db8:	e0 6b 00 ff 	mov	r11,255
80002dbc:	fe 7c 24 00 	mov	r12,-56320
80002dc0:	f0 1f 00 2d 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002dc4:	e0 6c 00 ff 	mov	r12,255
80002dc8:	f0 1f 00 2c 	mcall	80002e78 <sd_mmc_spi_write_sector_from_ram+0x15c>
80002dcc:	4a 88       	lddpc	r8,80002e6c <sd_mmc_spi_write_sector_from_ram+0x150>
80002dce:	b0 8c       	st.b	r8[0x0],r12
80002dd0:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002dd4:	58 5c       	cp.w	r12,5
80002dd6:	c1 40       	breq	80002dfe <sd_mmc_spi_write_sector_from_ram+0xe2>
80002dd8:	e0 6b 00 ff 	mov	r11,255
80002ddc:	fe 7c 24 00 	mov	r12,-56320
80002de0:	f0 1f 00 25 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002de4:	e0 6b 00 ff 	mov	r11,255
80002de8:	fe 7c 24 00 	mov	r12,-56320
80002dec:	f0 1f 00 22 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002df0:	30 1b       	mov	r11,1
80002df2:	fe 7c 24 00 	mov	r12,-56320
80002df6:	f0 1f 00 1f 	mcall	80002e70 <sd_mmc_spi_write_sector_from_ram+0x154>
80002dfa:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002dfe:	e0 6b 00 ff 	mov	r11,255
80002e02:	fe 7c 24 00 	mov	r12,-56320
80002e06:	f0 1f 00 1c 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002e0a:	e0 6b 00 ff 	mov	r11,255
80002e0e:	fe 7c 24 00 	mov	r12,-56320
80002e12:	f0 1f 00 19 	mcall	80002e74 <sd_mmc_spi_write_sector_from_ram+0x158>
80002e16:	30 1b       	mov	r11,1
80002e18:	fe 7c 24 00 	mov	r12,-56320
80002e1c:	f0 1f 00 15 	mcall	80002e70 <sd_mmc_spi_write_sector_from_ram+0x154>
80002e20:	49 18       	lddpc	r8,80002e64 <sd_mmc_spi_write_sector_from_ram+0x148>
80002e22:	f0 e6 00 00 	ld.d	r6,r8[0]
80002e26:	e0 6a 02 00 	mov	r10,512
80002e2a:	30 0b       	mov	r11,0
80002e2c:	ec 0a 00 0a 	add	r10,r6,r10
80002e30:	ee 0b 00 4b 	adc	r11,r7,r11
80002e34:	f0 eb 00 00 	st.d	r8[0],r10
80002e38:	30 07       	mov	r7,0
80002e3a:	30 a6       	mov	r6,10
80002e3c:	c0 68       	rjmp	80002e48 <sd_mmc_spi_write_sector_from_ram+0x12c>
80002e3e:	2f f7       	sub	r7,-1
80002e40:	5c 87       	casts.h	r7
80002e42:	ec 07 19 00 	cp.h	r7,r6
80002e46:	c0 60       	breq	80002e52 <sd_mmc_spi_write_sector_from_ram+0x136>
80002e48:	f0 1f 00 04 	mcall	80002e58 <sd_mmc_spi_write_sector_from_ram+0x13c>
80002e4c:	cf 90       	breq	80002e3e <sd_mmc_spi_write_sector_from_ram+0x122>
80002e4e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002e52:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002e56:	00 00       	add	r0,r0
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	2b 24       	sub	r4,-78
80002e5c:	80 00       	ld.sh	r0,r0[0x0]
80002e5e:	3b 36       	mov	r6,-77
80002e60:	00 00       	add	r0,r0
80002e62:	03 72       	ld.ub	r2,--r1
80002e64:	00 00       	add	r0,r0
80002e66:	00 30       	cp.w	r0,r0
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	2b 98       	sub	r8,-71
80002e6c:	00 00       	add	r0,r0
80002e6e:	03 84       	ld.ub	r4,r1[0x0]
80002e70:	80 00       	ld.sh	r0,r0[0x0]
80002e72:	3b 82       	mov	r2,-72
80002e74:	80 00       	ld.sh	r0,r0[0x0]
80002e76:	3c 66       	mov	r6,-58
80002e78:	80 00       	ld.sh	r0,r0[0x0]
80002e7a:	2a f0       	sub	r0,-81

80002e7c <sd_mmc_spi_read_open_PDCA>:
80002e7c:	d4 21       	pushm	r4-r7,lr
80002e7e:	4a e8       	lddpc	r8,80002f34 <sd_mmc_spi_read_open_PDCA+0xb8>
80002e80:	f8 09 16 17 	lsr	r9,r12,0x17
80002e84:	91 09       	st.w	r8[0x0],r9
80002e86:	a9 7c       	lsl	r12,0x9
80002e88:	91 1c       	st.w	r8[0x4],r12
80002e8a:	f0 1f 00 2c 	mcall	80002f38 <sd_mmc_spi_read_open_PDCA+0xbc>
80002e8e:	c5 20       	breq	80002f32 <sd_mmc_spi_read_open_PDCA+0xb6>
80002e90:	30 1b       	mov	r11,1
80002e92:	fe 7c 24 00 	mov	r12,-56320
80002e96:	f0 1f 00 2a 	mcall	80002f3c <sd_mmc_spi_read_open_PDCA+0xc0>
80002e9a:	4a a8       	lddpc	r8,80002f40 <sd_mmc_spi_read_open_PDCA+0xc4>
80002e9c:	11 89       	ld.ub	r9,r8[0x0]
80002e9e:	30 38       	mov	r8,3
80002ea0:	f0 09 18 00 	cp.b	r9,r8
80002ea4:	c0 d1       	brne	80002ebe <sd_mmc_spi_read_open_PDCA+0x42>
80002ea6:	4a 48       	lddpc	r8,80002f34 <sd_mmc_spi_read_open_PDCA+0xb8>
80002ea8:	70 0b       	ld.w	r11,r8[0x0]
80002eaa:	70 18       	ld.w	r8,r8[0x4]
80002eac:	a9 98       	lsr	r8,0x9
80002eae:	f1 eb 11 7b 	or	r11,r8,r11<<0x17
80002eb2:	31 1c       	mov	r12,17
80002eb4:	f0 1f 00 24 	mcall	80002f44 <sd_mmc_spi_read_open_PDCA+0xc8>
80002eb8:	4a 48       	lddpc	r8,80002f48 <sd_mmc_spi_read_open_PDCA+0xcc>
80002eba:	b0 8c       	st.b	r8[0x0],r12
80002ebc:	c0 88       	rjmp	80002ecc <sd_mmc_spi_read_open_PDCA+0x50>
80002ebe:	49 e8       	lddpc	r8,80002f34 <sd_mmc_spi_read_open_PDCA+0xb8>
80002ec0:	70 1b       	ld.w	r11,r8[0x4]
80002ec2:	31 1c       	mov	r12,17
80002ec4:	f0 1f 00 20 	mcall	80002f44 <sd_mmc_spi_read_open_PDCA+0xc8>
80002ec8:	4a 08       	lddpc	r8,80002f48 <sd_mmc_spi_read_open_PDCA+0xcc>
80002eca:	b0 8c       	st.b	r8[0x0],r12
80002ecc:	49 f8       	lddpc	r8,80002f48 <sd_mmc_spi_read_open_PDCA+0xcc>
80002ece:	11 89       	ld.ub	r9,r8[0x0]
80002ed0:	30 08       	mov	r8,0
80002ed2:	f0 09 18 00 	cp.b	r9,r8
80002ed6:	c1 00       	breq	80002ef6 <sd_mmc_spi_read_open_PDCA+0x7a>
80002ed8:	30 1b       	mov	r11,1
80002eda:	fe 7c 24 00 	mov	r12,-56320
80002ede:	f0 1f 00 1c 	mcall	80002f4c <sd_mmc_spi_read_open_PDCA+0xd0>
80002ee2:	d8 2a       	popm	r4-r7,pc,r12=0
80002ee4:	20 17       	sub	r7,1
80002ee6:	5c 87       	casts.h	r7
80002ee8:	c0 d1       	brne	80002f02 <sd_mmc_spi_read_open_PDCA+0x86>
80002eea:	30 1b       	mov	r11,1
80002eec:	fe 7c 24 00 	mov	r12,-56320
80002ef0:	f0 1f 00 17 	mcall	80002f4c <sd_mmc_spi_read_open_PDCA+0xd0>
80002ef4:	d8 2a       	popm	r4-r7,pc,r12=0
80002ef6:	e0 67 75 30 	mov	r7,30000
80002efa:	e0 65 00 ff 	mov	r5,255
80002efe:	49 34       	lddpc	r4,80002f48 <sd_mmc_spi_read_open_PDCA+0xcc>
80002f00:	3f f6       	mov	r6,-1
80002f02:	0a 9c       	mov	r12,r5
80002f04:	f0 1f 00 13 	mcall	80002f50 <sd_mmc_spi_read_open_PDCA+0xd4>
80002f08:	a8 8c       	st.b	r4[0x0],r12
80002f0a:	ec 0c 18 00 	cp.b	r12,r6
80002f0e:	ce b0       	breq	80002ee4 <sd_mmc_spi_read_open_PDCA+0x68>
80002f10:	3f e8       	mov	r8,-2
80002f12:	f0 0c 18 00 	cp.b	r12,r8
80002f16:	c0 21       	brne	80002f1a <sd_mmc_spi_read_open_PDCA+0x9e>
80002f18:	da 2a       	popm	r4-r7,pc,r12=1
80002f1a:	e0 6b 00 ff 	mov	r11,255
80002f1e:	fe 7c 24 00 	mov	r12,-56320
80002f22:	f0 1f 00 0d 	mcall	80002f54 <sd_mmc_spi_read_open_PDCA+0xd8>
80002f26:	30 1b       	mov	r11,1
80002f28:	fe 7c 24 00 	mov	r12,-56320
80002f2c:	f0 1f 00 08 	mcall	80002f4c <sd_mmc_spi_read_open_PDCA+0xd0>
80002f30:	30 0c       	mov	r12,0
80002f32:	d8 22       	popm	r4-r7,pc
80002f34:	00 00       	add	r0,r0
80002f36:	00 30       	cp.w	r0,r0
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	2b 24       	sub	r4,-78
80002f3c:	80 00       	ld.sh	r0,r0[0x0]
80002f3e:	3b 36       	mov	r6,-77
80002f40:	00 00       	add	r0,r0
80002f42:	03 72       	ld.ub	r2,--r1
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	2b 98       	sub	r8,-71
80002f48:	00 00       	add	r0,r0
80002f4a:	03 84       	ld.ub	r4,r1[0x0]
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	3b 82       	mov	r2,-72
80002f50:	80 00       	ld.sh	r0,r0[0x0]
80002f52:	2a f0       	sub	r0,-81
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	3c 66       	mov	r6,-58

80002f58 <sd_mmc_spi_check_hc>:
80002f58:	eb cd 40 c0 	pushm	r6-r7,lr
80002f5c:	f0 1f 00 1c 	mcall	80002fcc <sd_mmc_spi_check_hc+0x74>
80002f60:	c0 31       	brne	80002f66 <sd_mmc_spi_check_hc+0xe>
80002f62:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002f66:	30 1b       	mov	r11,1
80002f68:	fe 7c 24 00 	mov	r12,-56320
80002f6c:	f0 1f 00 19 	mcall	80002fd0 <sd_mmc_spi_check_hc+0x78>
80002f70:	30 0b       	mov	r11,0
80002f72:	33 ac       	mov	r12,58
80002f74:	f0 1f 00 18 	mcall	80002fd4 <sd_mmc_spi_check_hc+0x7c>
80002f78:	49 88       	lddpc	r8,80002fd8 <sd_mmc_spi_check_hc+0x80>
80002f7a:	b0 8c       	st.b	r8[0x0],r12
80002f7c:	58 0c       	cp.w	r12,0
80002f7e:	c0 80       	breq	80002f8e <sd_mmc_spi_check_hc+0x36>
80002f80:	30 1b       	mov	r11,1
80002f82:	fe 7c 24 00 	mov	r12,-56320
80002f86:	f0 1f 00 16 	mcall	80002fdc <sd_mmc_spi_check_hc+0x84>
80002f8a:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80002f8e:	e0 6c 00 ff 	mov	r12,255
80002f92:	f0 1f 00 14 	mcall	80002fe0 <sd_mmc_spi_check_hc+0x88>
80002f96:	18 96       	mov	r6,r12
80002f98:	e0 6c 00 ff 	mov	r12,255
80002f9c:	f0 1f 00 11 	mcall	80002fe0 <sd_mmc_spi_check_hc+0x88>
80002fa0:	48 e7       	lddpc	r7,80002fd8 <sd_mmc_spi_check_hc+0x80>
80002fa2:	ae 8c       	st.b	r7[0x0],r12
80002fa4:	e0 6c 00 ff 	mov	r12,255
80002fa8:	f0 1f 00 0e 	mcall	80002fe0 <sd_mmc_spi_check_hc+0x88>
80002fac:	ae 8c       	st.b	r7[0x0],r12
80002fae:	e0 6c 00 ff 	mov	r12,255
80002fb2:	f0 1f 00 0c 	mcall	80002fe0 <sd_mmc_spi_check_hc+0x88>
80002fb6:	ae 8c       	st.b	r7[0x0],r12
80002fb8:	30 1b       	mov	r11,1
80002fba:	fe 7c 24 00 	mov	r12,-56320
80002fbe:	f0 1f 00 08 	mcall	80002fdc <sd_mmc_spi_check_hc+0x84>
80002fc2:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
80002fc6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002fca:	00 00       	add	r0,r0
80002fcc:	80 00       	ld.sh	r0,r0[0x0]
80002fce:	2b 24       	sub	r4,-78
80002fd0:	80 00       	ld.sh	r0,r0[0x0]
80002fd2:	3b 36       	mov	r6,-77
80002fd4:	80 00       	ld.sh	r0,r0[0x0]
80002fd6:	2b 98       	sub	r8,-71
80002fd8:	00 00       	add	r0,r0
80002fda:	03 84       	ld.ub	r4,r1[0x0]
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	3b 82       	mov	r2,-72
80002fe0:	80 00       	ld.sh	r0,r0[0x0]
80002fe2:	2a f0       	sub	r0,-81

80002fe4 <sd_mmc_spi_get_if>:
80002fe4:	eb cd 40 80 	pushm	r7,lr
80002fe8:	f0 1f 00 27 	mcall	80003084 <sd_mmc_spi_get_if+0xa0>
80002fec:	c0 31       	brne	80002ff2 <sd_mmc_spi_get_if+0xe>
80002fee:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
80002ff2:	30 1b       	mov	r11,1
80002ff4:	fe 7c 24 00 	mov	r12,-56320
80002ff8:	f0 1f 00 24 	mcall	80003088 <sd_mmc_spi_get_if+0xa4>
80002ffc:	e0 6b 01 aa 	mov	r11,426
80003000:	30 8c       	mov	r12,8
80003002:	f0 1f 00 23 	mcall	8000308c <sd_mmc_spi_get_if+0xa8>
80003006:	4a 38       	lddpc	r8,80003090 <sd_mmc_spi_get_if+0xac>
80003008:	b0 8c       	st.b	r8[0x0],r12
8000300a:	e2 1c 00 04 	andl	r12,0x4,COH
8000300e:	c0 80       	breq	8000301e <sd_mmc_spi_get_if+0x3a>
80003010:	30 1b       	mov	r11,1
80003012:	fe 7c 24 00 	mov	r12,-56320
80003016:	f0 1f 00 20 	mcall	80003094 <sd_mmc_spi_get_if+0xb0>
8000301a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
8000301e:	e0 6c 00 ff 	mov	r12,255
80003022:	f0 1f 00 1e 	mcall	80003098 <sd_mmc_spi_get_if+0xb4>
80003026:	49 b7       	lddpc	r7,80003090 <sd_mmc_spi_get_if+0xac>
80003028:	ae 8c       	st.b	r7[0x0],r12
8000302a:	e0 6c 00 ff 	mov	r12,255
8000302e:	f0 1f 00 1b 	mcall	80003098 <sd_mmc_spi_get_if+0xb4>
80003032:	ae 8c       	st.b	r7[0x0],r12
80003034:	e0 6c 00 ff 	mov	r12,255
80003038:	f0 1f 00 18 	mcall	80003098 <sd_mmc_spi_get_if+0xb4>
8000303c:	ae 8c       	st.b	r7[0x0],r12
8000303e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003042:	c0 81       	brne	80003052 <sd_mmc_spi_get_if+0x6e>
80003044:	30 1b       	mov	r11,1
80003046:	fe 7c 24 00 	mov	r12,-56320
8000304a:	f0 1f 00 13 	mcall	80003094 <sd_mmc_spi_get_if+0xb0>
8000304e:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
80003052:	e0 6c 00 ff 	mov	r12,255
80003056:	f0 1f 00 11 	mcall	80003098 <sd_mmc_spi_get_if+0xb4>
8000305a:	48 e8       	lddpc	r8,80003090 <sd_mmc_spi_get_if+0xac>
8000305c:	b0 8c       	st.b	r8[0x0],r12
8000305e:	3a a8       	mov	r8,-86
80003060:	f0 0c 18 00 	cp.b	r12,r8
80003064:	c0 80       	breq	80003074 <sd_mmc_spi_get_if+0x90>
80003066:	30 1b       	mov	r11,1
80003068:	fe 7c 24 00 	mov	r12,-56320
8000306c:	f0 1f 00 0a 	mcall	80003094 <sd_mmc_spi_get_if+0xb0>
80003070:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
80003074:	30 1b       	mov	r11,1
80003076:	fe 7c 24 00 	mov	r12,-56320
8000307a:	f0 1f 00 07 	mcall	80003094 <sd_mmc_spi_get_if+0xb0>
8000307e:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80003082:	00 00       	add	r0,r0
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	2b 24       	sub	r4,-78
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	3b 36       	mov	r6,-77
8000308c:	80 00       	ld.sh	r0,r0[0x0]
8000308e:	2b 98       	sub	r8,-71
80003090:	00 00       	add	r0,r0
80003092:	03 84       	ld.ub	r4,r1[0x0]
80003094:	80 00       	ld.sh	r0,r0[0x0]
80003096:	3b 82       	mov	r2,-72
80003098:	80 00       	ld.sh	r0,r0[0x0]
8000309a:	2a f0       	sub	r0,-81

8000309c <sd_mmc_spi_get_csd>:
8000309c:	eb cd 40 fc 	pushm	r2-r7,lr
800030a0:	20 1d       	sub	sp,4
800030a2:	18 92       	mov	r2,r12
800030a4:	f0 1f 00 32 	mcall	8000316c <sd_mmc_spi_get_csd+0xd0>
800030a8:	c5 f0       	breq	80003166 <sd_mmc_spi_get_csd+0xca>
800030aa:	30 1b       	mov	r11,1
800030ac:	fe 7c 24 00 	mov	r12,-56320
800030b0:	f0 1f 00 30 	mcall	80003170 <sd_mmc_spi_get_csd+0xd4>
800030b4:	30 0b       	mov	r11,0
800030b6:	30 9c       	mov	r12,9
800030b8:	f0 1f 00 2f 	mcall	80003174 <sd_mmc_spi_get_csd+0xd8>
800030bc:	4a f8       	lddpc	r8,80003178 <sd_mmc_spi_get_csd+0xdc>
800030be:	b0 8c       	st.b	r8[0x0],r12
800030c0:	58 0c       	cp.w	r12,0
800030c2:	c0 81       	brne	800030d2 <sd_mmc_spi_get_csd+0x36>
800030c4:	30 07       	mov	r7,0
800030c6:	e0 64 00 ff 	mov	r4,255
800030ca:	10 93       	mov	r3,r8
800030cc:	3f e6       	mov	r6,-2
800030ce:	30 95       	mov	r5,9
800030d0:	c1 78       	rjmp	800030fe <sd_mmc_spi_get_csd+0x62>
800030d2:	30 1b       	mov	r11,1
800030d4:	fe 7c 24 00 	mov	r12,-56320
800030d8:	f0 1f 00 29 	mcall	8000317c <sd_mmc_spi_get_csd+0xe0>
800030dc:	30 09       	mov	r9,0
800030de:	4a 98       	lddpc	r8,80003180 <sd_mmc_spi_get_csd+0xe4>
800030e0:	b0 89       	st.b	r8[0x0],r9
800030e2:	30 0c       	mov	r12,0
800030e4:	c4 18       	rjmp	80003166 <sd_mmc_spi_get_csd+0xca>
800030e6:	ea 07 18 00 	cp.b	r7,r5
800030ea:	c0 81       	brne	800030fa <sd_mmc_spi_get_csd+0x5e>
800030ec:	30 1b       	mov	r11,1
800030ee:	fe 7c 24 00 	mov	r12,-56320
800030f2:	f0 1f 00 23 	mcall	8000317c <sd_mmc_spi_get_csd+0xe0>
800030f6:	30 0c       	mov	r12,0
800030f8:	c3 78       	rjmp	80003166 <sd_mmc_spi_get_csd+0xca>
800030fa:	2f f7       	sub	r7,-1
800030fc:	5c 57       	castu.b	r7
800030fe:	08 9c       	mov	r12,r4
80003100:	f0 1f 00 21 	mcall	80003184 <sd_mmc_spi_get_csd+0xe8>
80003104:	a6 8c       	st.b	r3[0x0],r12
80003106:	ec 0c 18 00 	cp.b	r12,r6
8000310a:	ce e1       	brne	800030e6 <sd_mmc_spi_get_csd+0x4a>
8000310c:	30 07       	mov	r7,0
8000310e:	e0 65 00 ff 	mov	r5,255
80003112:	fe 76 24 00 	mov	r6,-56320
80003116:	fa c4 ff fe 	sub	r4,sp,-2
8000311a:	0a 9b       	mov	r11,r5
8000311c:	0c 9c       	mov	r12,r6
8000311e:	f0 1f 00 1b 	mcall	80003188 <sd_mmc_spi_get_csd+0xec>
80003122:	08 9b       	mov	r11,r4
80003124:	0c 9c       	mov	r12,r6
80003126:	f0 1f 00 1a 	mcall	8000318c <sd_mmc_spi_get_csd+0xf0>
8000312a:	9a 18       	ld.sh	r8,sp[0x2]
8000312c:	e4 07 0b 08 	st.b	r2[r7],r8
80003130:	2f f7       	sub	r7,-1
80003132:	59 07       	cp.w	r7,16
80003134:	cf 31       	brne	8000311a <sd_mmc_spi_get_csd+0x7e>
80003136:	e0 6b 00 ff 	mov	r11,255
8000313a:	fe 7c 24 00 	mov	r12,-56320
8000313e:	f0 1f 00 13 	mcall	80003188 <sd_mmc_spi_get_csd+0xec>
80003142:	e0 6b 00 ff 	mov	r11,255
80003146:	fe 7c 24 00 	mov	r12,-56320
8000314a:	f0 1f 00 10 	mcall	80003188 <sd_mmc_spi_get_csd+0xec>
8000314e:	e0 6b 00 ff 	mov	r11,255
80003152:	fe 7c 24 00 	mov	r12,-56320
80003156:	f0 1f 00 0d 	mcall	80003188 <sd_mmc_spi_get_csd+0xec>
8000315a:	30 1b       	mov	r11,1
8000315c:	fe 7c 24 00 	mov	r12,-56320
80003160:	f0 1f 00 07 	mcall	8000317c <sd_mmc_spi_get_csd+0xe0>
80003164:	30 1c       	mov	r12,1
80003166:	2f fd       	sub	sp,-4
80003168:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000316c:	80 00       	ld.sh	r0,r0[0x0]
8000316e:	2b 24       	sub	r4,-78
80003170:	80 00       	ld.sh	r0,r0[0x0]
80003172:	3b 36       	mov	r6,-77
80003174:	80 00       	ld.sh	r0,r0[0x0]
80003176:	2b 98       	sub	r8,-71
80003178:	00 00       	add	r0,r0
8000317a:	03 84       	ld.ub	r4,r1[0x0]
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	3b 82       	mov	r2,-72
80003180:	00 00       	add	r0,r0
80003182:	00 4c       	or	r12,r0
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	2a f0       	sub	r0,-81
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	3c 66       	mov	r6,-58
8000318c:	80 00       	ld.sh	r0,r0[0x0]
8000318e:	3c 82       	mov	r2,-56

80003190 <sd_mmc_spi_internal_init>:
80003190:	d4 31       	pushm	r0-r7,lr
80003192:	fe fb 02 66 	ld.w	r11,pc[614]
80003196:	e6 68 1a 80 	mov	r8,400000
8000319a:	97 18       	st.w	r11[0x4],r8
8000319c:	fe f8 02 60 	ld.w	r8,pc[608]
800031a0:	70 0a       	ld.w	r10,r8[0x0]
800031a2:	fe 7c 24 00 	mov	r12,-56320
800031a6:	f0 1f 00 97 	mcall	80003400 <sd_mmc_spi_internal_init+0x270>
800031aa:	30 1b       	mov	r11,1
800031ac:	fe 7c 24 00 	mov	r12,-56320
800031b0:	f0 1f 00 95 	mcall	80003404 <sd_mmc_spi_internal_init+0x274>
800031b4:	30 07       	mov	r7,0
800031b6:	e0 66 00 ff 	mov	r6,255
800031ba:	fe 75 24 00 	mov	r5,-56320
800031be:	0c 9b       	mov	r11,r6
800031c0:	0a 9c       	mov	r12,r5
800031c2:	f0 1f 00 92 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
800031c6:	2f f7       	sub	r7,-1
800031c8:	58 a7       	cp.w	r7,10
800031ca:	cf a1       	brne	800031be <sd_mmc_spi_internal_init+0x2e>
800031cc:	30 1b       	mov	r11,1
800031ce:	fe 7c 24 00 	mov	r12,-56320
800031d2:	f0 1f 00 8f 	mcall	8000340c <sd_mmc_spi_internal_init+0x27c>
800031d6:	30 08       	mov	r8,0
800031d8:	fe f9 02 38 	ld.w	r9,pc[568]
800031dc:	b2 88       	st.b	r9[0x0],r8
800031de:	fe f9 02 36 	ld.w	r9,pc[566]
800031e2:	b2 88       	st.b	r9[0x0],r8
800031e4:	30 0b       	mov	r11,0
800031e6:	16 9c       	mov	r12,r11
800031e8:	f0 1f 00 8c 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
800031ec:	fe f8 02 30 	ld.w	r8,pc[560]
800031f0:	b0 8c       	st.b	r8[0x0],r12
800031f2:	e0 6b 00 ff 	mov	r11,255
800031f6:	fe 7c 24 00 	mov	r12,-56320
800031fa:	f0 1f 00 84 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
800031fe:	30 17       	mov	r7,1
80003200:	fe f6 02 1c 	ld.w	r6,pc[540]
80003204:	30 15       	mov	r5,1
80003206:	30 03       	mov	r3,0
80003208:	e0 62 00 ff 	mov	r2,255
8000320c:	fe 71 24 00 	mov	r1,-56320
80003210:	36 54       	mov	r4,101
80003212:	c1 08       	rjmp	80003232 <sd_mmc_spi_internal_init+0xa2>
80003214:	06 9b       	mov	r11,r3
80003216:	06 9c       	mov	r12,r3
80003218:	f0 1f 00 80 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
8000321c:	ac 8c       	st.b	r6[0x0],r12
8000321e:	04 9b       	mov	r11,r2
80003220:	02 9c       	mov	r12,r1
80003222:	f0 1f 00 7a 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
80003226:	2f f7       	sub	r7,-1
80003228:	5c 87       	casts.h	r7
8000322a:	e8 07 19 00 	cp.h	r7,r4
8000322e:	e0 80 00 e4 	breq	800033f6 <sd_mmc_spi_internal_init+0x266>
80003232:	0d 88       	ld.ub	r8,r6[0x0]
80003234:	ea 08 18 00 	cp.b	r8,r5
80003238:	ce e1       	brne	80003214 <sd_mmc_spi_internal_init+0x84>
8000323a:	f0 1f 00 7a 	mcall	80003420 <sd_mmc_spi_internal_init+0x290>
8000323e:	5b fc       	cp.w	r12,-1
80003240:	e0 80 00 db 	breq	800033f6 <sd_mmc_spi_internal_init+0x266>
80003244:	58 1c       	cp.w	r12,1
80003246:	c0 51       	brne	80003250 <sd_mmc_spi_internal_init+0xc0>
80003248:	30 29       	mov	r9,2
8000324a:	4f 38       	lddpc	r8,80003414 <sd_mmc_spi_internal_init+0x284>
8000324c:	b0 89       	st.b	r8[0x0],r9
8000324e:	c4 c8       	rjmp	800032e6 <sd_mmc_spi_internal_init+0x156>
80003250:	30 0b       	mov	r11,0
80003252:	33 7c       	mov	r12,55
80003254:	f0 1f 00 71 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
80003258:	4f 17       	lddpc	r7,8000341c <sd_mmc_spi_internal_init+0x28c>
8000325a:	ae 8c       	st.b	r7[0x0],r12
8000325c:	e0 6b 00 ff 	mov	r11,255
80003260:	fe 7c 24 00 	mov	r12,-56320
80003264:	f0 1f 00 69 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
80003268:	30 0b       	mov	r11,0
8000326a:	32 9c       	mov	r12,41
8000326c:	f0 1f 00 6b 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
80003270:	ae 8c       	st.b	r7[0x0],r12
80003272:	e0 6b 00 ff 	mov	r11,255
80003276:	fe 7c 24 00 	mov	r12,-56320
8000327a:	f0 1f 00 64 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
8000327e:	0f 88       	ld.ub	r8,r7[0x0]
80003280:	e2 18 00 fe 	andl	r8,0xfe,COH
80003284:	c0 51       	brne	8000328e <sd_mmc_spi_internal_init+0xfe>
80003286:	30 19       	mov	r9,1
80003288:	4e 38       	lddpc	r8,80003414 <sd_mmc_spi_internal_init+0x284>
8000328a:	b0 89       	st.b	r8[0x0],r9
8000328c:	c2 d8       	rjmp	800032e6 <sd_mmc_spi_internal_init+0x156>
8000328e:	30 09       	mov	r9,0
80003290:	4e 18       	lddpc	r8,80003414 <sd_mmc_spi_internal_init+0x284>
80003292:	b0 89       	st.b	r8[0x0],r9
80003294:	30 0b       	mov	r11,0
80003296:	16 9c       	mov	r12,r11
80003298:	f0 1f 00 60 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
8000329c:	4e 08       	lddpc	r8,8000341c <sd_mmc_spi_internal_init+0x28c>
8000329e:	b0 8c       	st.b	r8[0x0],r12
800032a0:	e0 6b 00 ff 	mov	r11,255
800032a4:	fe 7c 24 00 	mov	r12,-56320
800032a8:	f0 1f 00 58 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
800032ac:	30 17       	mov	r7,1
800032ae:	4d c6       	lddpc	r6,8000341c <sd_mmc_spi_internal_init+0x28c>
800032b0:	30 15       	mov	r5,1
800032b2:	30 03       	mov	r3,0
800032b4:	e0 62 00 ff 	mov	r2,255
800032b8:	fe 71 24 00 	mov	r1,-56320
800032bc:	36 54       	mov	r4,101
800032be:	c1 08       	rjmp	800032de <sd_mmc_spi_internal_init+0x14e>
800032c0:	06 9b       	mov	r11,r3
800032c2:	06 9c       	mov	r12,r3
800032c4:	f0 1f 00 55 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
800032c8:	ac 8c       	st.b	r6[0x0],r12
800032ca:	04 9b       	mov	r11,r2
800032cc:	02 9c       	mov	r12,r1
800032ce:	f0 1f 00 4f 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
800032d2:	2f f7       	sub	r7,-1
800032d4:	5c 87       	casts.h	r7
800032d6:	e8 07 19 00 	cp.h	r7,r4
800032da:	e0 80 00 8e 	breq	800033f6 <sd_mmc_spi_internal_init+0x266>
800032de:	0d 88       	ld.ub	r8,r6[0x0]
800032e0:	ea 08 18 00 	cp.b	r8,r5
800032e4:	ce e1       	brne	800032c0 <sd_mmc_spi_internal_init+0x130>
800032e6:	30 07       	mov	r7,0
800032e8:	4c b4       	lddpc	r4,80003414 <sd_mmc_spi_internal_init+0x284>
800032ea:	30 15       	mov	r5,1
800032ec:	0e 93       	mov	r3,r7
800032ee:	33 70       	mov	r0,55
800032f0:	4c b6       	lddpc	r6,8000341c <sd_mmc_spi_internal_init+0x28c>
800032f2:	e0 62 00 ff 	mov	r2,255
800032f6:	fe 71 24 00 	mov	r1,-56320
800032fa:	09 88       	ld.ub	r8,r4[0x0]
800032fc:	ea 08 18 00 	cp.b	r8,r5
80003300:	c1 10       	breq	80003322 <sd_mmc_spi_internal_init+0x192>
80003302:	c0 63       	brcs	8000330e <sd_mmc_spi_internal_init+0x17e>
80003304:	30 29       	mov	r9,2
80003306:	f2 08 18 00 	cp.b	r8,r9
8000330a:	c2 81       	brne	8000335a <sd_mmc_spi_internal_init+0x1ca>
8000330c:	c1 98       	rjmp	8000333e <sd_mmc_spi_internal_init+0x1ae>
8000330e:	06 9b       	mov	r11,r3
80003310:	30 1c       	mov	r12,1
80003312:	f0 1f 00 42 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
80003316:	ac 8c       	st.b	r6[0x0],r12
80003318:	04 9b       	mov	r11,r2
8000331a:	02 9c       	mov	r12,r1
8000331c:	f0 1f 00 3b 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
80003320:	c1 d8       	rjmp	8000335a <sd_mmc_spi_internal_init+0x1ca>
80003322:	06 9b       	mov	r11,r3
80003324:	00 9c       	mov	r12,r0
80003326:	f0 1f 00 3d 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
8000332a:	06 9b       	mov	r11,r3
8000332c:	32 9c       	mov	r12,41
8000332e:	f0 1f 00 3b 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
80003332:	ac 8c       	st.b	r6[0x0],r12
80003334:	04 9b       	mov	r11,r2
80003336:	02 9c       	mov	r12,r1
80003338:	f0 1f 00 34 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
8000333c:	c0 f8       	rjmp	8000335a <sd_mmc_spi_internal_init+0x1ca>
8000333e:	06 9b       	mov	r11,r3
80003340:	00 9c       	mov	r12,r0
80003342:	f0 1f 00 36 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
80003346:	fc 1b 40 00 	movh	r11,0x4000
8000334a:	32 9c       	mov	r12,41
8000334c:	f0 1f 00 33 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
80003350:	ac 8c       	st.b	r6[0x0],r12
80003352:	04 9b       	mov	r11,r2
80003354:	02 9c       	mov	r12,r1
80003356:	f0 1f 00 2d 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
8000335a:	2f f7       	sub	r7,-1
8000335c:	5c 87       	casts.h	r7
8000335e:	fe 78 c3 50 	mov	r8,-15536
80003362:	f0 07 19 00 	cp.h	r7,r8
80003366:	c4 80       	breq	800033f6 <sd_mmc_spi_internal_init+0x266>
80003368:	0d 89       	ld.ub	r9,r6[0x0]
8000336a:	30 08       	mov	r8,0
8000336c:	f0 09 18 00 	cp.b	r9,r8
80003370:	cc 51       	brne	800032fa <sd_mmc_spi_internal_init+0x16a>
80003372:	4a 98       	lddpc	r8,80003414 <sd_mmc_spi_internal_init+0x284>
80003374:	11 89       	ld.ub	r9,r8[0x0]
80003376:	30 28       	mov	r8,2
80003378:	f0 09 18 00 	cp.b	r9,r8
8000337c:	c0 a1       	brne	80003390 <sd_mmc_spi_internal_init+0x200>
8000337e:	f0 1f 00 2a 	mcall	80003424 <sd_mmc_spi_internal_init+0x294>
80003382:	5b fc       	cp.w	r12,-1
80003384:	c3 90       	breq	800033f6 <sd_mmc_spi_internal_init+0x266>
80003386:	58 1c       	cp.w	r12,1
80003388:	c0 41       	brne	80003390 <sd_mmc_spi_internal_init+0x200>
8000338a:	30 39       	mov	r9,3
8000338c:	4a 28       	lddpc	r8,80003414 <sd_mmc_spi_internal_init+0x284>
8000338e:	b0 89       	st.b	r8[0x0],r9
80003390:	30 0b       	mov	r11,0
80003392:	33 bc       	mov	r12,59
80003394:	f0 1f 00 21 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
80003398:	4a 17       	lddpc	r7,8000341c <sd_mmc_spi_internal_init+0x28c>
8000339a:	ae 8c       	st.b	r7[0x0],r12
8000339c:	e0 6b 00 ff 	mov	r11,255
800033a0:	fe 7c 24 00 	mov	r12,-56320
800033a4:	f0 1f 00 19 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
800033a8:	e0 6b 02 00 	mov	r11,512
800033ac:	31 0c       	mov	r12,16
800033ae:	f0 1f 00 1b 	mcall	80003418 <sd_mmc_spi_internal_init+0x288>
800033b2:	ae 8c       	st.b	r7[0x0],r12
800033b4:	e0 6b 00 ff 	mov	r11,255
800033b8:	fe 7c 24 00 	mov	r12,-56320
800033bc:	f0 1f 00 13 	mcall	80003408 <sd_mmc_spi_internal_init+0x278>
800033c0:	0f 89       	ld.ub	r9,r7[0x0]
800033c2:	30 08       	mov	r8,0
800033c4:	f0 09 18 00 	cp.b	r9,r8
800033c8:	c1 71       	brne	800033f6 <sd_mmc_spi_internal_init+0x266>
800033ca:	49 8c       	lddpc	r12,80003428 <sd_mmc_spi_internal_init+0x298>
800033cc:	f0 1f 00 18 	mcall	8000342c <sd_mmc_spi_internal_init+0x29c>
800033d0:	c1 30       	breq	800033f6 <sd_mmc_spi_internal_init+0x266>
800033d2:	f0 1f 00 18 	mcall	80003430 <sd_mmc_spi_internal_init+0x2a0>
800033d6:	30 19       	mov	r9,1
800033d8:	48 e8       	lddpc	r8,80003410 <sd_mmc_spi_internal_init+0x280>
800033da:	b0 89       	st.b	r8[0x0],r9
800033dc:	48 7b       	lddpc	r11,800033f8 <sd_mmc_spi_internal_init+0x268>
800033de:	e0 68 1b 00 	mov	r8,6912
800033e2:	ea 18 00 b7 	orh	r8,0xb7
800033e6:	97 18       	st.w	r11[0x4],r8
800033e8:	48 58       	lddpc	r8,800033fc <sd_mmc_spi_internal_init+0x26c>
800033ea:	70 0a       	ld.w	r10,r8[0x0]
800033ec:	fe 7c 24 00 	mov	r12,-56320
800033f0:	f0 1f 00 04 	mcall	80003400 <sd_mmc_spi_internal_init+0x270>
800033f4:	da 3a       	popm	r0-r7,pc,r12=1
800033f6:	d8 3a       	popm	r0-r7,pc,r12=0
800033f8:	00 00       	add	r0,r0
800033fa:	00 38       	cp.w	r8,r0
800033fc:	00 00       	add	r0,r0
800033fe:	00 48       	or	r8,r0
80003400:	80 00       	ld.sh	r0,r0[0x0]
80003402:	3b a8       	mov	r8,-70
80003404:	80 00       	ld.sh	r0,r0[0x0]
80003406:	3b 36       	mov	r6,-77
80003408:	80 00       	ld.sh	r0,r0[0x0]
8000340a:	3c 66       	mov	r6,-58
8000340c:	80 00       	ld.sh	r0,r0[0x0]
8000340e:	3b 82       	mov	r2,-72
80003410:	00 00       	add	r0,r0
80003412:	00 4c       	or	r12,r0
80003414:	00 00       	add	r0,r0
80003416:	03 72       	ld.ub	r2,--r1
80003418:	80 00       	ld.sh	r0,r0[0x0]
8000341a:	2c 60       	sub	r0,-58
8000341c:	00 00       	add	r0,r0
8000341e:	03 84       	ld.ub	r4,r1[0x0]
80003420:	80 00       	ld.sh	r0,r0[0x0]
80003422:	2f e4       	sub	r4,-2
80003424:	80 00       	ld.sh	r0,r0[0x0]
80003426:	2f 58       	sub	r8,-11
80003428:	00 00       	add	r0,r0
8000342a:	03 74       	ld.ub	r4,--r1
8000342c:	80 00       	ld.sh	r0,r0[0x0]
8000342e:	30 9c       	mov	r12,9
80003430:	80 00       	ld.sh	r0,r0[0x0]
80003432:	29 88       	sub	r8,-104

80003434 <sd_mmc_spi_mem_check>:
80003434:	d4 01       	pushm	lr
80003436:	f0 1f 00 07 	mcall	80003450 <sd_mmc_spi_mem_check+0x1c>
8000343a:	c0 a0       	breq	8000344e <sd_mmc_spi_mem_check+0x1a>
8000343c:	48 68       	lddpc	r8,80003454 <sd_mmc_spi_mem_check+0x20>
8000343e:	11 89       	ld.ub	r9,r8[0x0]
80003440:	30 08       	mov	r8,0
80003442:	f0 09 18 00 	cp.b	r9,r8
80003446:	c0 20       	breq	8000344a <sd_mmc_spi_mem_check+0x16>
80003448:	da 0a       	popm	pc,r12=1
8000344a:	f0 1f 00 04 	mcall	80003458 <sd_mmc_spi_mem_check+0x24>
8000344e:	d8 02       	popm	pc
80003450:	80 00       	ld.sh	r0,r0[0x0]
80003452:	2c a0       	sub	r0,-54
80003454:	00 00       	add	r0,r0
80003456:	00 4c       	or	r12,r0
80003458:	80 00       	ld.sh	r0,r0[0x0]
8000345a:	31 90       	mov	r0,25

8000345c <sd_mmc_spi_init>:
8000345c:	eb cd 40 10 	pushm	r4,lr
80003460:	fa c4 ff f8 	sub	r4,sp,-8
80003464:	48 88       	lddpc	r8,80003484 <sd_mmc_spi_init+0x28>
80003466:	91 0c       	st.w	r8[0x0],r12
80003468:	48 88       	lddpc	r8,80003488 <sd_mmc_spi_init+0x2c>
8000346a:	e8 ea 00 00 	ld.d	r10,r4[0]
8000346e:	f0 eb 00 00 	st.d	r8[0],r10
80003472:	e8 ea 00 08 	ld.d	r10,r4[8]
80003476:	f0 eb 00 08 	st.d	r8[8],r10
8000347a:	f0 1f 00 05 	mcall	8000348c <sd_mmc_spi_init+0x30>
8000347e:	e3 cd 80 10 	ldm	sp++,r4,pc
80003482:	00 00       	add	r0,r0
80003484:	00 00       	add	r0,r0
80003486:	00 48       	or	r8,r0
80003488:	00 00       	add	r0,r0
8000348a:	00 38       	cp.w	r8,r0
8000348c:	80 00       	ld.sh	r0,r0[0x0]
8000348e:	31 90       	mov	r0,25

80003490 <smc_init>:
80003490:	eb cd 40 fc 	pushm	r2-r7,lr
80003494:	ee 78 42 3f 	mov	r8,999999
80003498:	f8 08 00 09 	add	r9,r12,r8
8000349c:	e0 68 de 83 	mov	r8,56963
800034a0:	ea 18 43 1b 	orh	r8,0x431b
800034a4:	f2 08 06 48 	mulu.d	r8,r9,r8
800034a8:	f2 08 16 12 	lsr	r8,r9,0x12
800034ac:	f0 08 00 25 	add	r5,r8,r8<<0x2
800034b0:	a3 65       	lsl	r5,0x2
800034b2:	ea c5 fc 19 	sub	r5,r5,-999
800034b6:	e0 69 4d d3 	mov	r9,19923
800034ba:	ea 19 10 62 	orh	r9,0x1062
800034be:	ea 09 06 44 	mulu.d	r4,r5,r9
800034c2:	a7 85       	lsr	r5,0x6
800034c4:	f0 0a 15 04 	lsl	r10,r8,0x4
800034c8:	f4 08 01 07 	sub	r7,r10,r8
800034cc:	a1 77       	lsl	r7,0x1
800034ce:	ee c7 fc 19 	sub	r7,r7,-999
800034d2:	ee 09 06 46 	mulu.d	r6,r7,r9
800034d6:	0e 94       	mov	r4,r7
800034d8:	a7 84       	lsr	r4,0x6
800034da:	f4 08 01 07 	sub	r7,r10,r8
800034de:	a3 67       	lsl	r7,0x2
800034e0:	ee c7 fc 19 	sub	r7,r7,-999
800034e4:	ee 09 06 46 	mulu.d	r6,r7,r9
800034e8:	a7 87       	lsr	r7,0x6
800034ea:	f0 03 10 5a 	mul	r3,r8,90
800034ee:	e6 c3 fc 19 	sub	r3,r3,-999
800034f2:	e6 09 06 42 	mulu.d	r2,r3,r9
800034f6:	e6 0c 16 06 	lsr	r12,r3,0x6
800034fa:	e0 63 00 d2 	mov	r3,210
800034fe:	f0 03 02 43 	mul	r3,r8,r3
80003502:	e6 c3 fc 19 	sub	r3,r3,-999
80003506:	e6 09 06 42 	mulu.d	r2,r3,r9
8000350a:	e6 06 16 06 	lsr	r6,r3,0x6
8000350e:	f4 08 01 0b 	sub	r11,r10,r8
80003512:	a5 6b       	lsl	r11,0x4
80003514:	f6 cb fc 19 	sub	r11,r11,-999
80003518:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000351c:	f6 0e 16 06 	lsr	lr,r11,0x6
80003520:	f0 03 10 64 	mul	r3,r8,100
80003524:	e6 c3 fc 19 	sub	r3,r3,-999
80003528:	e6 09 06 42 	mulu.d	r2,r3,r9
8000352c:	a7 83       	lsr	r3,0x6
8000352e:	e0 6a 01 0e 	mov	r10,270
80003532:	b5 38       	mul	r8,r10
80003534:	f0 c8 fc 19 	sub	r8,r8,-999
80003538:	f0 09 06 48 	mulu.d	r8,r8,r9
8000353c:	a7 89       	lsr	r9,0x6
8000353e:	ec 04 00 0a 	add	r10,r6,r4
80003542:	1c 3a       	cp.w	r10,lr
80003544:	f4 0e 17 20 	movhs	lr,r10
80003548:	ee 05 00 0b 	add	r11,r7,r5
8000354c:	18 3b       	cp.w	r11,r12
8000354e:	f6 0c 17 20 	movhs	r12,r11
80003552:	06 3b       	cp.w	r11,r3
80003554:	e6 0b 17 30 	movlo	r11,r3
80003558:	12 3a       	cp.w	r10,r9
8000355a:	f4 09 17 20 	movhs	r9,r10
8000355e:	eb e4 11 05 	or	r5,r5,r4<<0x10
80003562:	fe 6a 1c 00 	mov	r10,-123904
80003566:	95 05       	st.w	r10[0x0],r5
80003568:	ef e6 11 07 	or	r7,r7,r6<<0x10
8000356c:	ef ec 10 87 	or	r7,r7,r12<<0x8
80003570:	ef ee 11 87 	or	r7,r7,lr<<0x18
80003574:	95 17       	st.w	r10[0x4],r7
80003576:	1c 39       	cp.w	r9,lr
80003578:	f2 0e 17 20 	movhs	lr,r9
8000357c:	18 3b       	cp.w	r11,r12
8000357e:	f8 0b 17 30 	movlo	r11,r12
80003582:	f7 ee 11 0b 	or	r11,r11,lr<<0x10
80003586:	95 2b       	st.w	r10[0x8],r11
80003588:	e0 68 10 03 	mov	r8,4099
8000358c:	95 38       	st.w	r10[0xc],r8
8000358e:	30 19       	mov	r9,1
80003590:	48 48       	lddpc	r8,800035a0 <smc_init+0x110>
80003592:	b0 89       	st.b	r8[0x0],r9
80003594:	31 4b       	mov	r11,20
80003596:	48 4c       	lddpc	r12,800035a4 <smc_init+0x114>
80003598:	f0 1f 00 04 	mcall	800035a8 <smc_init+0x118>
8000359c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800035a0:	00 00       	add	r0,r0
800035a2:	00 50       	eor	r0,r0
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	53 08       	stdsp	sp[0xc0],r8
800035a8:	80 00       	ld.sh	r0,r0[0x0]
800035aa:	36 00       	mov	r0,96

800035ac <gpio_enable_module_pin>:
800035ac:	f8 08 16 05 	lsr	r8,r12,0x5
800035b0:	a9 68       	lsl	r8,0x8
800035b2:	e0 28 f0 00 	sub	r8,61440
800035b6:	58 1b       	cp.w	r11,1
800035b8:	c0 d0       	breq	800035d2 <gpio_enable_module_pin+0x26>
800035ba:	c0 63       	brcs	800035c6 <gpio_enable_module_pin+0x1a>
800035bc:	58 2b       	cp.w	r11,2
800035be:	c1 00       	breq	800035de <gpio_enable_module_pin+0x32>
800035c0:	58 3b       	cp.w	r11,3
800035c2:	c1 40       	breq	800035ea <gpio_enable_module_pin+0x3e>
800035c4:	5e ff       	retal	1
800035c6:	30 19       	mov	r9,1
800035c8:	f2 0c 09 49 	lsl	r9,r9,r12
800035cc:	91 69       	st.w	r8[0x18],r9
800035ce:	91 a9       	st.w	r8[0x28],r9
800035d0:	c1 28       	rjmp	800035f4 <gpio_enable_module_pin+0x48>
800035d2:	30 19       	mov	r9,1
800035d4:	f2 0c 09 49 	lsl	r9,r9,r12
800035d8:	91 59       	st.w	r8[0x14],r9
800035da:	91 a9       	st.w	r8[0x28],r9
800035dc:	c0 c8       	rjmp	800035f4 <gpio_enable_module_pin+0x48>
800035de:	30 19       	mov	r9,1
800035e0:	f2 0c 09 49 	lsl	r9,r9,r12
800035e4:	91 69       	st.w	r8[0x18],r9
800035e6:	91 99       	st.w	r8[0x24],r9
800035e8:	c0 68       	rjmp	800035f4 <gpio_enable_module_pin+0x48>
800035ea:	30 19       	mov	r9,1
800035ec:	f2 0c 09 49 	lsl	r9,r9,r12
800035f0:	91 59       	st.w	r8[0x14],r9
800035f2:	91 99       	st.w	r8[0x24],r9
800035f4:	30 19       	mov	r9,1
800035f6:	f2 0c 09 4c 	lsl	r12,r9,r12
800035fa:	91 2c       	st.w	r8[0x8],r12
800035fc:	5e fd       	retal	0
800035fe:	d7 03       	nop

80003600 <gpio_enable_module>:
80003600:	d4 21       	pushm	r4-r7,lr
80003602:	18 97       	mov	r7,r12
80003604:	16 94       	mov	r4,r11
80003606:	58 0b       	cp.w	r11,0
80003608:	c0 31       	brne	8000360e <gpio_enable_module+0xe>
8000360a:	30 05       	mov	r5,0
8000360c:	c0 d8       	rjmp	80003626 <gpio_enable_module+0x26>
8000360e:	30 06       	mov	r6,0
80003610:	0c 95       	mov	r5,r6
80003612:	6e 1b       	ld.w	r11,r7[0x4]
80003614:	6e 0c       	ld.w	r12,r7[0x0]
80003616:	f0 1f 00 06 	mcall	8000362c <gpio_enable_module+0x2c>
8000361a:	18 45       	or	r5,r12
8000361c:	2f 87       	sub	r7,-8
8000361e:	2f f6       	sub	r6,-1
80003620:	0c 34       	cp.w	r4,r6
80003622:	fe 9b ff f8 	brhi	80003612 <gpio_enable_module+0x12>
80003626:	0a 9c       	mov	r12,r5
80003628:	d8 22       	popm	r4-r7,pc
8000362a:	00 00       	add	r0,r0
8000362c:	80 00       	ld.sh	r0,r0[0x0]
8000362e:	35 ac       	mov	r12,90

80003630 <gpio_enable_gpio_pin>:
80003630:	f8 08 16 05 	lsr	r8,r12,0x5
80003634:	a9 68       	lsl	r8,0x8
80003636:	e0 28 f0 00 	sub	r8,61440
8000363a:	30 19       	mov	r9,1
8000363c:	f2 0c 09 4c 	lsl	r12,r9,r12
80003640:	f1 4c 00 48 	st.w	r8[72],r12
80003644:	91 1c       	st.w	r8[0x4],r12
80003646:	5e fc       	retal	r12

80003648 <gpio_enable_pin_pull_up>:
80003648:	f8 08 16 05 	lsr	r8,r12,0x5
8000364c:	a9 68       	lsl	r8,0x8
8000364e:	e0 28 f0 00 	sub	r8,61440
80003652:	30 19       	mov	r9,1
80003654:	f2 0c 09 4c 	lsl	r12,r9,r12
80003658:	f1 4c 00 74 	st.w	r8[116],r12
8000365c:	5e fc       	retal	r12

8000365e <gpio_set_gpio_pin>:
8000365e:	f8 08 16 05 	lsr	r8,r12,0x5
80003662:	a9 68       	lsl	r8,0x8
80003664:	e0 28 f0 00 	sub	r8,61440
80003668:	30 19       	mov	r9,1
8000366a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000366e:	f1 4c 00 54 	st.w	r8[84],r12
80003672:	f1 4c 00 44 	st.w	r8[68],r12
80003676:	91 1c       	st.w	r8[0x4],r12
80003678:	5e fc       	retal	r12

8000367a <gpio_clr_gpio_pin>:
8000367a:	f8 08 16 05 	lsr	r8,r12,0x5
8000367e:	a9 68       	lsl	r8,0x8
80003680:	e0 28 f0 00 	sub	r8,61440
80003684:	30 19       	mov	r9,1
80003686:	f2 0c 09 4c 	lsl	r12,r9,r12
8000368a:	f1 4c 00 58 	st.w	r8[88],r12
8000368e:	f1 4c 00 44 	st.w	r8[68],r12
80003692:	91 1c       	st.w	r8[0x4],r12
80003694:	5e fc       	retal	r12

80003696 <gpio_enable_pin_interrupt>:
80003696:	f8 08 16 05 	lsr	r8,r12,0x5
8000369a:	a9 68       	lsl	r8,0x8
8000369c:	e0 28 f0 00 	sub	r8,61440
800036a0:	30 19       	mov	r9,1
800036a2:	f2 0c 09 4c 	lsl	r12,r9,r12
800036a6:	f1 4c 00 c4 	st.w	r8[196],r12
800036aa:	12 3b       	cp.w	r11,r9
800036ac:	c0 a0       	breq	800036c0 <gpio_enable_pin_interrupt+0x2a>
800036ae:	c0 43       	brcs	800036b6 <gpio_enable_pin_interrupt+0x20>
800036b0:	58 2b       	cp.w	r11,2
800036b2:	c1 11       	brne	800036d4 <gpio_enable_pin_interrupt+0x3e>
800036b4:	c0 b8       	rjmp	800036ca <gpio_enable_pin_interrupt+0x34>
800036b6:	f1 4c 00 a8 	st.w	r8[168],r12
800036ba:	f1 4c 00 b8 	st.w	r8[184],r12
800036be:	c0 c8       	rjmp	800036d6 <gpio_enable_pin_interrupt+0x40>
800036c0:	f1 4c 00 a4 	st.w	r8[164],r12
800036c4:	f1 4c 00 b8 	st.w	r8[184],r12
800036c8:	c0 78       	rjmp	800036d6 <gpio_enable_pin_interrupt+0x40>
800036ca:	f1 4c 00 a8 	st.w	r8[168],r12
800036ce:	f1 4c 00 b4 	st.w	r8[180],r12
800036d2:	c0 28       	rjmp	800036d6 <gpio_enable_pin_interrupt+0x40>
800036d4:	5e ff       	retal	1
800036d6:	f1 4c 00 94 	st.w	r8[148],r12
800036da:	5e fd       	retal	0

800036dc <gpio_get_pin_interrupt_flag>:
800036dc:	f8 08 16 05 	lsr	r8,r12,0x5
800036e0:	a9 68       	lsl	r8,0x8
800036e2:	e0 28 f0 00 	sub	r8,61440
800036e6:	f0 f8 00 d0 	ld.w	r8,r8[208]
800036ea:	f0 0c 0a 4c 	lsr	r12,r8,r12
800036ee:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800036f2:	5e fc       	retal	r12

800036f4 <gpio_clear_pin_interrupt_flag>:
800036f4:	f8 08 16 05 	lsr	r8,r12,0x5
800036f8:	a9 68       	lsl	r8,0x8
800036fa:	e0 28 f0 00 	sub	r8,61440
800036fe:	30 19       	mov	r9,1
80003700:	f2 0c 09 4c 	lsl	r12,r9,r12
80003704:	f1 4c 00 d8 	st.w	r8[216],r12
80003708:	5e fc       	retal	r12

8000370a <_unhandled_interrupt>:
8000370a:	c0 08       	rjmp	8000370a <_unhandled_interrupt>

8000370c <INTC_register_interrupt>:
8000370c:	f6 08 16 05 	lsr	r8,r11,0x5
80003710:	49 99       	lddpc	r9,80003774 <INTC_register_interrupt+0x68>
80003712:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003716:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000371a:	72 19       	ld.w	r9,r9[0x4]
8000371c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
80003720:	58 0a       	cp.w	r10,0
80003722:	c0 91       	brne	80003734 <INTC_register_interrupt+0x28>
80003724:	49 59       	lddpc	r9,80003778 <INTC_register_interrupt+0x6c>
80003726:	49 6a       	lddpc	r10,8000377c <INTC_register_interrupt+0x70>
80003728:	12 1a       	sub	r10,r9
8000372a:	fe 79 08 00 	mov	r9,-63488
8000372e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003732:	5e fc       	retal	r12
80003734:	58 1a       	cp.w	r10,1
80003736:	c0 a1       	brne	8000374a <INTC_register_interrupt+0x3e>
80003738:	49 09       	lddpc	r9,80003778 <INTC_register_interrupt+0x6c>
8000373a:	49 2a       	lddpc	r10,80003780 <INTC_register_interrupt+0x74>
8000373c:	12 1a       	sub	r10,r9
8000373e:	bf aa       	sbr	r10,0x1e
80003740:	fe 79 08 00 	mov	r9,-63488
80003744:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003748:	5e fc       	retal	r12
8000374a:	58 2a       	cp.w	r10,2
8000374c:	c0 a1       	brne	80003760 <INTC_register_interrupt+0x54>
8000374e:	48 b9       	lddpc	r9,80003778 <INTC_register_interrupt+0x6c>
80003750:	48 da       	lddpc	r10,80003784 <INTC_register_interrupt+0x78>
80003752:	12 1a       	sub	r10,r9
80003754:	bf ba       	sbr	r10,0x1f
80003756:	fe 79 08 00 	mov	r9,-63488
8000375a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000375e:	5e fc       	retal	r12
80003760:	48 69       	lddpc	r9,80003778 <INTC_register_interrupt+0x6c>
80003762:	48 aa       	lddpc	r10,80003788 <INTC_register_interrupt+0x7c>
80003764:	12 1a       	sub	r10,r9
80003766:	ea 1a c0 00 	orh	r10,0xc000
8000376a:	fe 79 08 00 	mov	r9,-63488
8000376e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003772:	5e fc       	retal	r12
80003774:	80 00       	ld.sh	r0,r0[0x0]
80003776:	53 a8       	stdsp	sp[0xe8],r8
80003778:	80 00       	ld.sh	r0,r0[0x0]
8000377a:	4e 00       	lddpc	r0,800038f8 <pdca_init_channel+0x14>
8000377c:	80 00       	ld.sh	r0,r0[0x0]
8000377e:	4f 04       	lddpc	r4,8000393c <pdca_init_channel+0x58>
80003780:	80 00       	ld.sh	r0,r0[0x0]
80003782:	4f 12       	lddpc	r2,80003944 <pm_set_osc0_mode>
80003784:	80 00       	ld.sh	r0,r0[0x0]
80003786:	4f 20       	lddpc	r0,8000394c <pm_set_osc0_mode+0x8>
80003788:	80 00       	ld.sh	r0,r0[0x0]
8000378a:	4f 2e       	lddpc	lr,80003950 <pm_enable_osc0_crystal>

8000378c <INTC_init_interrupts>:
8000378c:	d4 21       	pushm	r4-r7,lr
8000378e:	49 18       	lddpc	r8,800037d0 <INTC_init_interrupts+0x44>
80003790:	e3 b8 00 01 	mtsr	0x4,r8
80003794:	49 0e       	lddpc	lr,800037d4 <INTC_init_interrupts+0x48>
80003796:	30 07       	mov	r7,0
80003798:	0e 94       	mov	r4,r7
8000379a:	49 0c       	lddpc	r12,800037d8 <INTC_init_interrupts+0x4c>
8000379c:	49 05       	lddpc	r5,800037dc <INTC_init_interrupts+0x50>
8000379e:	10 15       	sub	r5,r8
800037a0:	fe 76 08 00 	mov	r6,-63488
800037a4:	c1 08       	rjmp	800037c4 <INTC_init_interrupts+0x38>
800037a6:	08 98       	mov	r8,r4
800037a8:	7c 1b       	ld.w	r11,lr[0x4]
800037aa:	7c 0a       	ld.w	r10,lr[0x0]
800037ac:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
800037b0:	2f f8       	sub	r8,-1
800037b2:	10 3a       	cp.w	r10,r8
800037b4:	fe 9b ff fc 	brhi	800037ac <INTC_init_interrupts+0x20>
800037b8:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
800037bc:	2f f7       	sub	r7,-1
800037be:	2f 8e       	sub	lr,-8
800037c0:	59 47       	cp.w	r7,20
800037c2:	c0 50       	breq	800037cc <INTC_init_interrupts+0x40>
800037c4:	7c 08       	ld.w	r8,lr[0x0]
800037c6:	58 08       	cp.w	r8,0
800037c8:	ce f1       	brne	800037a6 <INTC_init_interrupts+0x1a>
800037ca:	cf 7b       	rjmp	800037b8 <INTC_init_interrupts+0x2c>
800037cc:	d8 22       	popm	r4-r7,pc
800037ce:	00 00       	add	r0,r0
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	4e 00       	lddpc	r0,80003950 <pm_enable_osc0_crystal>
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	53 a8       	stdsp	sp[0xe8],r8
800037d8:	80 00       	ld.sh	r0,r0[0x0]
800037da:	37 0a       	mov	r10,112
800037dc:	80 00       	ld.sh	r0,r0[0x0]
800037de:	4f 04       	lddpc	r4,8000399c <pm_wait_for_clk0_ready>

800037e0 <_get_interrupt_handler>:
800037e0:	fe 78 08 00 	mov	r8,-63488
800037e4:	e0 69 00 83 	mov	r9,131
800037e8:	f2 0c 01 0c 	sub	r12,r9,r12
800037ec:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
800037f0:	f2 ca ff c0 	sub	r10,r9,-64
800037f4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800037f8:	58 08       	cp.w	r8,0
800037fa:	c0 21       	brne	800037fe <_get_interrupt_handler+0x1e>
800037fc:	5e fd       	retal	0
800037fe:	f0 08 12 00 	clz	r8,r8
80003802:	48 5a       	lddpc	r10,80003814 <_get_interrupt_handler+0x34>
80003804:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003808:	f0 08 11 1f 	rsub	r8,r8,31
8000380c:	72 19       	ld.w	r9,r9[0x4]
8000380e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
80003812:	5e fc       	retal	r12
80003814:	80 00       	ld.sh	r0,r0[0x0]
80003816:	53 a8       	stdsp	sp[0xe8],r8

80003818 <pdca_get_handler>:
80003818:	30 e8       	mov	r8,14
8000381a:	f0 0c 18 00 	cp.b	r12,r8
8000381e:	e0 88 00 03 	brls	80003824 <pdca_get_handler+0xc>
80003822:	5e fe       	retal	-1
80003824:	a7 6c       	lsl	r12,0x6
80003826:	e0 3c 00 00 	sub	r12,65536
8000382a:	5e fc       	retal	r12

8000382c <pdca_disable>:
8000382c:	d4 01       	pushm	lr
8000382e:	f0 1f 00 03 	mcall	80003838 <pdca_disable+0xc>
80003832:	30 28       	mov	r8,2
80003834:	99 58       	st.w	r12[0x14],r8
80003836:	d8 02       	popm	pc
80003838:	80 00       	ld.sh	r0,r0[0x0]
8000383a:	38 18       	mov	r8,-127

8000383c <pdca_enable>:
8000383c:	d4 01       	pushm	lr
8000383e:	f0 1f 00 03 	mcall	80003848 <pdca_enable+0xc>
80003842:	30 18       	mov	r8,1
80003844:	99 58       	st.w	r12[0x14],r8
80003846:	d8 02       	popm	pc
80003848:	80 00       	ld.sh	r0,r0[0x0]
8000384a:	38 18       	mov	r8,-127

8000384c <pdca_enable_interrupt_transfer_complete>:
8000384c:	d4 01       	pushm	lr
8000384e:	f0 1f 00 03 	mcall	80003858 <pdca_enable_interrupt_transfer_complete+0xc>
80003852:	30 28       	mov	r8,2
80003854:	99 88       	st.w	r12[0x20],r8
80003856:	d8 02       	popm	pc
80003858:	80 00       	ld.sh	r0,r0[0x0]
8000385a:	38 18       	mov	r8,-127

8000385c <pdca_disable_interrupt_reload_counter_zero>:
8000385c:	d4 01       	pushm	lr
8000385e:	20 1d       	sub	sp,4
80003860:	f0 1f 00 08 	mcall	80003880 <pdca_disable_interrupt_reload_counter_zero+0x24>
80003864:	e1 b8 00 00 	mfsr	r8,0x0
80003868:	50 08       	stdsp	sp[0x0],r8
8000386a:	d3 03       	ssrf	0x10
8000386c:	40 08       	lddsp	r8,sp[0x0]
8000386e:	30 19       	mov	r9,1
80003870:	99 99       	st.w	r12[0x24],r9
80003872:	78 b9       	ld.w	r9,r12[0x2c]
80003874:	e6 18 00 01 	andh	r8,0x1,COH
80003878:	c0 21       	brne	8000387c <pdca_disable_interrupt_reload_counter_zero+0x20>
8000387a:	d5 03       	csrf	0x10
8000387c:	2f fd       	sub	sp,-4
8000387e:	d8 02       	popm	pc
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	38 18       	mov	r8,-127

80003884 <pdca_disable_interrupt_transfer_complete>:
80003884:	d4 01       	pushm	lr
80003886:	20 1d       	sub	sp,4
80003888:	f0 1f 00 08 	mcall	800038a8 <pdca_disable_interrupt_transfer_complete+0x24>
8000388c:	e1 b8 00 00 	mfsr	r8,0x0
80003890:	50 08       	stdsp	sp[0x0],r8
80003892:	d3 03       	ssrf	0x10
80003894:	40 08       	lddsp	r8,sp[0x0]
80003896:	30 29       	mov	r9,2
80003898:	99 99       	st.w	r12[0x24],r9
8000389a:	78 b9       	ld.w	r9,r12[0x2c]
8000389c:	e6 18 00 01 	andh	r8,0x1,COH
800038a0:	c0 21       	brne	800038a4 <pdca_disable_interrupt_transfer_complete+0x20>
800038a2:	d5 03       	csrf	0x10
800038a4:	2f fd       	sub	sp,-4
800038a6:	d8 02       	popm	pc
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	38 18       	mov	r8,-127

800038ac <pdca_load_channel>:
800038ac:	eb cd 40 c0 	pushm	r6-r7,lr
800038b0:	20 1d       	sub	sp,4
800038b2:	16 96       	mov	r6,r11
800038b4:	14 97       	mov	r7,r10
800038b6:	f0 1f 00 0b 	mcall	800038e0 <pdca_load_channel+0x34>
800038ba:	e1 b8 00 00 	mfsr	r8,0x0
800038be:	50 08       	stdsp	sp[0x0],r8
800038c0:	d3 03       	ssrf	0x10
800038c2:	40 08       	lddsp	r8,sp[0x0]
800038c4:	99 06       	st.w	r12[0x0],r6
800038c6:	99 27       	st.w	r12[0x8],r7
800038c8:	e0 69 01 00 	mov	r9,256
800038cc:	99 59       	st.w	r12[0x14],r9
800038ce:	78 b9       	ld.w	r9,r12[0x2c]
800038d0:	e6 18 00 01 	andh	r8,0x1,COH
800038d4:	c0 21       	brne	800038d8 <pdca_load_channel+0x2c>
800038d6:	d5 03       	csrf	0x10
800038d8:	2f fd       	sub	sp,-4
800038da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800038de:	00 00       	add	r0,r0
800038e0:	80 00       	ld.sh	r0,r0[0x0]
800038e2:	38 18       	mov	r8,-127

800038e4 <pdca_init_channel>:
800038e4:	eb cd 40 e0 	pushm	r5-r7,lr
800038e8:	20 1d       	sub	sp,4
800038ea:	18 95       	mov	r5,r12
800038ec:	16 96       	mov	r6,r11
800038ee:	f0 1f 00 13 	mcall	80003938 <pdca_init_channel+0x54>
800038f2:	18 97       	mov	r7,r12
800038f4:	0a 9c       	mov	r12,r5
800038f6:	f0 1f 00 12 	mcall	8000393c <pdca_init_channel+0x58>
800038fa:	0a 9c       	mov	r12,r5
800038fc:	f0 1f 00 11 	mcall	80003940 <pdca_init_channel+0x5c>
80003900:	e1 b8 00 00 	mfsr	r8,0x0
80003904:	50 08       	stdsp	sp[0x0],r8
80003906:	d3 03       	ssrf	0x10
80003908:	40 08       	lddsp	r8,sp[0x0]
8000390a:	6c 09       	ld.w	r9,r6[0x0]
8000390c:	8f 09       	st.w	r7[0x0],r9
8000390e:	6c 19       	ld.w	r9,r6[0x4]
80003910:	8f 29       	st.w	r7[0x8],r9
80003912:	6c 49       	ld.w	r9,r6[0x10]
80003914:	8f 19       	st.w	r7[0x4],r9
80003916:	6c 29       	ld.w	r9,r6[0x8]
80003918:	8f 39       	st.w	r7[0xc],r9
8000391a:	6c 39       	ld.w	r9,r6[0xc]
8000391c:	8f 49       	st.w	r7[0x10],r9
8000391e:	6c 59       	ld.w	r9,r6[0x14]
80003920:	8f 69       	st.w	r7[0x18],r9
80003922:	e0 69 01 00 	mov	r9,256
80003926:	8f 59       	st.w	r7[0x14],r9
80003928:	6e b9       	ld.w	r9,r7[0x2c]
8000392a:	e6 18 00 01 	andh	r8,0x1,COH
8000392e:	c0 21       	brne	80003932 <pdca_init_channel+0x4e>
80003930:	d5 03       	csrf	0x10
80003932:	2f fd       	sub	sp,-4
80003934:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	38 18       	mov	r8,-127
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	38 84       	mov	r4,-120
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	38 5c       	mov	r12,-123

80003944 <pm_set_osc0_mode>:
80003944:	78 a8       	ld.w	r8,r12[0x28]
80003946:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
8000394a:	99 a8       	st.w	r12[0x28],r8
8000394c:	5e fc       	retal	r12
8000394e:	d7 03       	nop

80003950 <pm_enable_osc0_crystal>:
80003950:	d4 01       	pushm	lr
80003952:	ec 5b bb 9f 	cp.w	r11,899999
80003956:	e0 8b 00 04 	brhi	8000395e <pm_enable_osc0_crystal+0xe>
8000395a:	30 4b       	mov	r11,4
8000395c:	c1 38       	rjmp	80003982 <pm_enable_osc0_crystal+0x32>
8000395e:	e0 68 c6 bf 	mov	r8,50879
80003962:	ea 18 00 2d 	orh	r8,0x2d
80003966:	10 3b       	cp.w	r11,r8
80003968:	e0 8b 00 04 	brhi	80003970 <pm_enable_osc0_crystal+0x20>
8000396c:	30 5b       	mov	r11,5
8000396e:	c0 a8       	rjmp	80003982 <pm_enable_osc0_crystal+0x32>
80003970:	e0 68 12 00 	mov	r8,4608
80003974:	ea 18 00 7a 	orh	r8,0x7a
80003978:	10 3b       	cp.w	r11,r8
8000397a:	f9 bb 03 06 	movlo	r11,6
8000397e:	f9 bb 02 07 	movhs	r11,7
80003982:	f0 1f 00 02 	mcall	80003988 <pm_enable_osc0_crystal+0x38>
80003986:	d8 02       	popm	pc
80003988:	80 00       	ld.sh	r0,r0[0x0]
8000398a:	39 44       	mov	r4,-108

8000398c <pm_enable_clk0_no_wait>:
8000398c:	78 a8       	ld.w	r8,r12[0x28]
8000398e:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
80003992:	99 a8       	st.w	r12[0x28],r8
80003994:	78 08       	ld.w	r8,r12[0x0]
80003996:	a3 a8       	sbr	r8,0x2
80003998:	99 08       	st.w	r12[0x0],r8
8000399a:	5e fc       	retal	r12

8000399c <pm_wait_for_clk0_ready>:
8000399c:	79 58       	ld.w	r8,r12[0x54]
8000399e:	e2 18 00 80 	andl	r8,0x80,COH
800039a2:	cf d0       	breq	8000399c <pm_wait_for_clk0_ready>
800039a4:	5e fc       	retal	r12
800039a6:	d7 03       	nop

800039a8 <pm_enable_clk0>:
800039a8:	eb cd 40 80 	pushm	r7,lr
800039ac:	18 97       	mov	r7,r12
800039ae:	f0 1f 00 04 	mcall	800039bc <pm_enable_clk0+0x14>
800039b2:	0e 9c       	mov	r12,r7
800039b4:	f0 1f 00 03 	mcall	800039c0 <pm_enable_clk0+0x18>
800039b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800039bc:	80 00       	ld.sh	r0,r0[0x0]
800039be:	39 8c       	mov	r12,-104
800039c0:	80 00       	ld.sh	r0,r0[0x0]
800039c2:	39 9c       	mov	r12,-103

800039c4 <pm_switch_to_clock>:
800039c4:	78 08       	ld.w	r8,r12[0x0]
800039c6:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
800039ca:	99 08       	st.w	r12[0x0],r8
800039cc:	5e fc       	retal	r12
800039ce:	d7 03       	nop

800039d0 <pm_switch_to_osc0>:
800039d0:	eb cd 40 c0 	pushm	r6-r7,lr
800039d4:	18 97       	mov	r7,r12
800039d6:	14 96       	mov	r6,r10
800039d8:	f0 1f 00 06 	mcall	800039f0 <pm_switch_to_osc0+0x20>
800039dc:	0c 9b       	mov	r11,r6
800039de:	0e 9c       	mov	r12,r7
800039e0:	f0 1f 00 05 	mcall	800039f4 <pm_switch_to_osc0+0x24>
800039e4:	30 1b       	mov	r11,1
800039e6:	0e 9c       	mov	r12,r7
800039e8:	f0 1f 00 04 	mcall	800039f8 <pm_switch_to_osc0+0x28>
800039ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800039f0:	80 00       	ld.sh	r0,r0[0x0]
800039f2:	39 50       	mov	r0,-107
800039f4:	80 00       	ld.sh	r0,r0[0x0]
800039f6:	39 a8       	mov	r8,-102
800039f8:	80 00       	ld.sh	r0,r0[0x0]
800039fa:	39 c4       	mov	r4,-100

800039fc <pwm_channel_init>:
800039fc:	58 0b       	cp.w	r11,0
800039fe:	c1 90       	breq	80003a30 <pwm_channel_init+0x34>
80003a00:	58 6c       	cp.w	r12,6
80003a02:	e0 8b 00 17 	brhi	80003a30 <pwm_channel_init+0x34>
80003a06:	76 0a       	ld.w	r10,r11[0x0]
80003a08:	fe 78 30 00 	mov	r8,-53248
80003a0c:	f8 c9 ff f0 	sub	r9,r12,-16
80003a10:	a5 79       	lsl	r9,0x5
80003a12:	f0 09 00 09 	add	r9,r8,r9
80003a16:	93 0a       	st.w	r9[0x0],r10
80003a18:	76 19       	ld.w	r9,r11[0x4]
80003a1a:	a5 7c       	lsl	r12,0x5
80003a1c:	f0 0c 00 0c 	add	r12,r8,r12
80003a20:	f8 c8 fd fc 	sub	r8,r12,-516
80003a24:	91 09       	st.w	r8[0x0],r9
80003a26:	76 28       	ld.w	r8,r11[0x8]
80003a28:	f8 cc fd f8 	sub	r12,r12,-520
80003a2c:	99 08       	st.w	r12[0x0],r8
80003a2e:	5e fd       	retal	0
80003a30:	5e ff       	retal	1

80003a32 <pwm_start_channels>:
80003a32:	18 98       	mov	r8,r12
80003a34:	e0 18 ff 80 	andl	r8,0xff80
80003a38:	c0 20       	breq	80003a3c <pwm_start_channels+0xa>
80003a3a:	5e ff       	retal	1
80003a3c:	fe 78 30 00 	mov	r8,-53248
80003a40:	91 1c       	st.w	r8[0x4],r12
80003a42:	5e fd       	retal	0

80003a44 <pwm_async_update_channel>:
80003a44:	58 6c       	cp.w	r12,6
80003a46:	e0 88 00 03 	brls	80003a4c <pwm_async_update_channel+0x8>
80003a4a:	5e ff       	retal	1
80003a4c:	76 0a       	ld.w	r10,r11[0x0]
80003a4e:	fe 78 30 00 	mov	r8,-53248
80003a52:	f8 c9 ff f0 	sub	r9,r12,-16
80003a56:	a5 79       	lsl	r9,0x5
80003a58:	f0 09 00 09 	add	r9,r8,r9
80003a5c:	93 0a       	st.w	r9[0x0],r10
80003a5e:	76 49       	ld.w	r9,r11[0x10]
80003a60:	a5 7c       	lsl	r12,0x5
80003a62:	18 08       	add	r8,r12
80003a64:	f0 c8 fd f0 	sub	r8,r8,-528
80003a68:	91 09       	st.w	r8[0x0],r9
80003a6a:	5e fd       	retal	0

80003a6c <pwm_init>:
80003a6c:	e1 b8 00 00 	mfsr	r8,0x0
80003a70:	58 0c       	cp.w	r12,0
80003a72:	c0 21       	brne	80003a76 <pwm_init+0xa>
80003a74:	5e ff       	retal	1
80003a76:	e6 18 00 01 	andh	r8,0x1,COH
80003a7a:	c0 91       	brne	80003a8c <pwm_init+0x20>
80003a7c:	d3 03       	ssrf	0x10
80003a7e:	fe 78 30 00 	mov	r8,-53248
80003a82:	37 f9       	mov	r9,127
80003a84:	91 59       	st.w	r8[0x14],r9
80003a86:	70 78       	ld.w	r8,r8[0x1c]
80003a88:	d5 03       	csrf	0x10
80003a8a:	c0 68       	rjmp	80003a96 <pwm_init+0x2a>
80003a8c:	fe 78 30 00 	mov	r8,-53248
80003a90:	37 f9       	mov	r9,127
80003a92:	91 59       	st.w	r8[0x14],r9
80003a94:	70 78       	ld.w	r8,r8[0x1c]
80003a96:	78 08       	ld.w	r8,r12[0x0]
80003a98:	78 39       	ld.w	r9,r12[0xc]
80003a9a:	a9 69       	lsl	r9,0x8
80003a9c:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003aa0:	78 18       	ld.w	r8,r12[0x4]
80003aa2:	10 49       	or	r9,r8
80003aa4:	78 28       	ld.w	r8,r12[0x8]
80003aa6:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80003aaa:	fe 78 30 00 	mov	r8,-53248
80003aae:	91 09       	st.w	r8[0x0],r9
80003ab0:	5e fd       	retal	0

80003ab2 <getBaudDiv>:
80003ab2:	f8 c8 00 01 	sub	r8,r12,1
80003ab6:	f0 0b 00 0b 	add	r11,r8,r11
80003aba:	f6 0c 0d 0a 	divu	r10,r11,r12
80003abe:	14 9c       	mov	r12,r10
80003ac0:	f4 c8 00 01 	sub	r8,r10,1
80003ac4:	e0 48 00 fe 	cp.w	r8,254
80003ac8:	e0 88 00 03 	brls	80003ace <getBaudDiv+0x1c>
80003acc:	5e fe       	retal	-1
80003ace:	5c 8c       	casts.h	r12
80003ad0:	5e fc       	retal	r12

80003ad2 <spi_initMaster>:
80003ad2:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003ad6:	30 18       	mov	r8,1
80003ad8:	f0 09 18 00 	cp.b	r9,r8
80003adc:	e0 88 00 04 	brls	80003ae4 <spi_initMaster+0x12>
80003ae0:	30 2c       	mov	r12,2
80003ae2:	5e fc       	retal	r12
80003ae4:	e0 68 00 80 	mov	r8,128
80003ae8:	99 08       	st.w	r12[0x0],r8
80003aea:	78 18       	ld.w	r8,r12[0x4]
80003aec:	30 19       	mov	r9,1
80003aee:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003af2:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003af6:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003afa:	30 09       	mov	r9,0
80003afc:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80003b00:	30 fa       	mov	r10,15
80003b02:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
80003b06:	99 18       	st.w	r12[0x4],r8
80003b08:	5e f9       	retal	r9

80003b0a <spi_selectionMode>:
80003b0a:	d4 01       	pushm	lr
80003b0c:	30 18       	mov	r8,1
80003b0e:	f0 0b 18 00 	cp.b	r11,r8
80003b12:	5f be       	srhi	lr
80003b14:	f0 0a 18 00 	cp.b	r10,r8
80003b18:	5f b8       	srhi	r8
80003b1a:	fd e8 10 08 	or	r8,lr,r8
80003b1e:	c0 30       	breq	80003b24 <spi_selectionMode+0x1a>
80003b20:	30 2c       	mov	r12,2
80003b22:	d8 02       	popm	pc
80003b24:	78 18       	ld.w	r8,r12[0x4]
80003b26:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
80003b2a:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
80003b2e:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
80003b32:	99 18       	st.w	r12[0x4],r8
80003b34:	d8 0a       	popm	pc,r12=0

80003b36 <spi_selectChip>:
80003b36:	78 18       	ld.w	r8,r12[0x4]
80003b38:	ea 18 00 0f 	orh	r8,0xf
80003b3c:	99 18       	st.w	r12[0x4],r8
80003b3e:	78 18       	ld.w	r8,r12[0x4]
80003b40:	e2 18 00 04 	andl	r8,0x4,COH
80003b44:	c0 f0       	breq	80003b62 <spi_selectChip+0x2c>
80003b46:	30 e8       	mov	r8,14
80003b48:	f0 0b 18 00 	cp.b	r11,r8
80003b4c:	e0 8b 00 19 	brhi	80003b7e <spi_selectChip+0x48>
80003b50:	78 18       	ld.w	r8,r12[0x4]
80003b52:	b1 6b       	lsl	r11,0x10
80003b54:	ea 1b ff f0 	orh	r11,0xfff0
80003b58:	e8 1b ff ff 	orl	r11,0xffff
80003b5c:	10 6b       	and	r11,r8
80003b5e:	99 1b       	st.w	r12[0x4],r11
80003b60:	5e fd       	retal	0
80003b62:	30 38       	mov	r8,3
80003b64:	f0 0b 18 00 	cp.b	r11,r8
80003b68:	e0 8b 00 0b 	brhi	80003b7e <spi_selectChip+0x48>
80003b6c:	78 18       	ld.w	r8,r12[0x4]
80003b6e:	2f 0b       	sub	r11,-16
80003b70:	30 19       	mov	r9,1
80003b72:	f2 0b 09 4b 	lsl	r11,r9,r11
80003b76:	5c db       	com	r11
80003b78:	10 6b       	and	r11,r8
80003b7a:	99 1b       	st.w	r12[0x4],r11
80003b7c:	5e fd       	retal	0
80003b7e:	30 2c       	mov	r12,2
80003b80:	5e fc       	retal	r12

80003b82 <spi_unselectChip>:
80003b82:	e0 68 3a 98 	mov	r8,15000
80003b86:	c0 58       	rjmp	80003b90 <spi_unselectChip+0xe>
80003b88:	58 08       	cp.w	r8,0
80003b8a:	c0 21       	brne	80003b8e <spi_unselectChip+0xc>
80003b8c:	5e ff       	retal	1
80003b8e:	20 18       	sub	r8,1
80003b90:	78 49       	ld.w	r9,r12[0x10]
80003b92:	e2 19 02 00 	andl	r9,0x200,COH
80003b96:	cf 90       	breq	80003b88 <spi_unselectChip+0x6>
80003b98:	78 18       	ld.w	r8,r12[0x4]
80003b9a:	ea 18 00 0f 	orh	r8,0xf
80003b9e:	99 18       	st.w	r12[0x4],r8
80003ba0:	fc 18 01 00 	movh	r8,0x100
80003ba4:	99 08       	st.w	r12[0x0],r8
80003ba6:	5e fd       	retal	0

80003ba8 <spi_setupChipReg>:
80003ba8:	eb cd 40 f8 	pushm	r3-r7,lr
80003bac:	18 95       	mov	r5,r12
80003bae:	16 97       	mov	r7,r11
80003bb0:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003bb4:	30 38       	mov	r8,3
80003bb6:	f0 06 18 00 	cp.b	r6,r8
80003bba:	e0 8b 00 4d 	brhi	80003c54 <spi_setupChipReg+0xac>
80003bbe:	f7 34 00 0b 	ld.ub	r4,r11[11]
80003bc2:	30 18       	mov	r8,1
80003bc4:	f0 04 18 00 	cp.b	r4,r8
80003bc8:	e0 8b 00 46 	brhi	80003c54 <spi_setupChipReg+0xac>
80003bcc:	f7 33 00 08 	ld.ub	r3,r11[8]
80003bd0:	30 78       	mov	r8,7
80003bd2:	f0 03 18 00 	cp.b	r3,r8
80003bd6:	e0 88 00 3f 	brls	80003c54 <spi_setupChipReg+0xac>
80003bda:	31 08       	mov	r8,16
80003bdc:	f0 03 18 00 	cp.b	r3,r8
80003be0:	e0 8b 00 3a 	brhi	80003c54 <spi_setupChipReg+0xac>
80003be4:	14 9b       	mov	r11,r10
80003be6:	6e 1c       	ld.w	r12,r7[0x4]
80003be8:	f0 1f 00 1d 	mcall	80003c5c <spi_setupChipReg+0xb4>
80003bec:	c3 45       	brlt	80003c54 <spi_setupChipReg+0xac>
80003bee:	30 08       	mov	r8,0
80003bf0:	ec 09 16 01 	lsr	r9,r6,0x1
80003bf4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003bf8:	ec 16 00 01 	eorl	r6,0x1
80003bfc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
80003c00:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
80003c04:	20 83       	sub	r3,8
80003c06:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
80003c0a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
80003c0e:	ef 39 00 09 	ld.ub	r9,r7[9]
80003c12:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
80003c16:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003c1a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
80003c1e:	0f 89       	ld.ub	r9,r7[0x0]
80003c20:	30 1a       	mov	r10,1
80003c22:	f4 09 18 00 	cp.b	r9,r10
80003c26:	c0 e0       	breq	80003c42 <spi_setupChipReg+0x9a>
80003c28:	c0 a3       	brcs	80003c3c <spi_setupChipReg+0x94>
80003c2a:	30 2a       	mov	r10,2
80003c2c:	f4 09 18 00 	cp.b	r9,r10
80003c30:	c0 c0       	breq	80003c48 <spi_setupChipReg+0xa0>
80003c32:	30 3a       	mov	r10,3
80003c34:	f4 09 18 00 	cp.b	r9,r10
80003c38:	c0 e1       	brne	80003c54 <spi_setupChipReg+0xac>
80003c3a:	c0 a8       	rjmp	80003c4e <spi_setupChipReg+0xa6>
80003c3c:	8b c8       	st.w	r5[0x30],r8
80003c3e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80003c42:	8b d8       	st.w	r5[0x34],r8
80003c44:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80003c48:	8b e8       	st.w	r5[0x38],r8
80003c4a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80003c4e:	8b f8       	st.w	r5[0x3c],r8
80003c50:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80003c54:	30 2c       	mov	r12,2
80003c56:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003c5a:	00 00       	add	r0,r0
80003c5c:	80 00       	ld.sh	r0,r0[0x0]
80003c5e:	3a b2       	mov	r2,-85

80003c60 <spi_enable>:
80003c60:	30 18       	mov	r8,1
80003c62:	99 08       	st.w	r12[0x0],r8
80003c64:	5e fc       	retal	r12

80003c66 <spi_write>:
80003c66:	e0 68 3a 98 	mov	r8,15000
80003c6a:	c0 58       	rjmp	80003c74 <spi_write+0xe>
80003c6c:	58 08       	cp.w	r8,0
80003c6e:	c0 21       	brne	80003c72 <spi_write+0xc>
80003c70:	5e ff       	retal	1
80003c72:	20 18       	sub	r8,1
80003c74:	78 49       	ld.w	r9,r12[0x10]
80003c76:	e2 19 00 02 	andl	r9,0x2,COH
80003c7a:	cf 90       	breq	80003c6c <spi_write+0x6>
80003c7c:	5c 7b       	castu.h	r11
80003c7e:	99 3b       	st.w	r12[0xc],r11
80003c80:	5e fd       	retal	0

80003c82 <spi_read>:
80003c82:	e0 68 3a 98 	mov	r8,15000
80003c86:	c0 58       	rjmp	80003c90 <spi_read+0xe>
80003c88:	58 08       	cp.w	r8,0
80003c8a:	c0 21       	brne	80003c8e <spi_read+0xc>
80003c8c:	5e ff       	retal	1
80003c8e:	20 18       	sub	r8,1
80003c90:	78 49       	ld.w	r9,r12[0x10]
80003c92:	e2 19 02 01 	andl	r9,0x201,COH
80003c96:	e0 49 02 01 	cp.w	r9,513
80003c9a:	cf 71       	brne	80003c88 <spi_read+0x6>
80003c9c:	78 28       	ld.w	r8,r12[0x8]
80003c9e:	b6 08       	st.h	r11[0x0],r8
80003ca0:	5e fd       	retal	0

80003ca2 <usart_set_async_baudrate>:
80003ca2:	d4 01       	pushm	lr
80003ca4:	f6 08 15 04 	lsl	r8,r11,0x4
80003ca8:	14 38       	cp.w	r8,r10
80003caa:	f9 b8 08 10 	movls	r8,16
80003cae:	f9 b8 0b 08 	movhi	r8,8
80003cb2:	f0 0b 02 4b 	mul	r11,r8,r11
80003cb6:	f6 09 16 01 	lsr	r9,r11,0x1
80003cba:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003cbe:	f4 0b 0d 0a 	divu	r10,r10,r11
80003cc2:	f4 09 16 03 	lsr	r9,r10,0x3
80003cc6:	f2 cb 00 01 	sub	r11,r9,1
80003cca:	e0 4b ff fe 	cp.w	r11,65534
80003cce:	e0 88 00 03 	brls	80003cd4 <usart_set_async_baudrate+0x32>
80003cd2:	da 0a       	popm	pc,r12=1
80003cd4:	78 1b       	ld.w	r11,r12[0x4]
80003cd6:	e8 6e 00 00 	mov	lr,524288
80003cda:	59 08       	cp.w	r8,16
80003cdc:	fc 08 17 10 	movne	r8,lr
80003ce0:	f9 b8 00 00 	moveq	r8,0
80003ce4:	e4 1b ff f7 	andh	r11,0xfff7
80003ce8:	e0 1b fe cf 	andl	r11,0xfecf
80003cec:	16 48       	or	r8,r11
80003cee:	99 18       	st.w	r12[0x4],r8
80003cf0:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003cf4:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80003cf8:	99 89       	st.w	r12[0x20],r9
80003cfa:	d8 0a       	popm	pc,r12=0

80003cfc <usart_reset>:
80003cfc:	e1 b8 00 00 	mfsr	r8,0x0
80003d00:	e6 18 00 01 	andh	r8,0x1,COH
80003d04:	c0 71       	brne	80003d12 <usart_reset+0x16>
80003d06:	d3 03       	ssrf	0x10
80003d08:	3f f8       	mov	r8,-1
80003d0a:	99 38       	st.w	r12[0xc],r8
80003d0c:	78 58       	ld.w	r8,r12[0x14]
80003d0e:	d5 03       	csrf	0x10
80003d10:	c0 48       	rjmp	80003d18 <usart_reset+0x1c>
80003d12:	3f f8       	mov	r8,-1
80003d14:	99 38       	st.w	r12[0xc],r8
80003d16:	78 58       	ld.w	r8,r12[0x14]
80003d18:	30 08       	mov	r8,0
80003d1a:	99 18       	st.w	r12[0x4],r8
80003d1c:	99 98       	st.w	r12[0x24],r8
80003d1e:	99 a8       	st.w	r12[0x28],r8
80003d20:	ea 68 61 0c 	mov	r8,680204
80003d24:	99 08       	st.w	r12[0x0],r8
80003d26:	5e fc       	retal	r12

80003d28 <usart_init_rs232>:
80003d28:	eb cd 40 e0 	pushm	r5-r7,lr
80003d2c:	18 96       	mov	r6,r12
80003d2e:	16 97       	mov	r7,r11
80003d30:	14 95       	mov	r5,r10
80003d32:	f0 1f 00 2f 	mcall	80003dec <usart_init_rs232+0xc4>
80003d36:	58 07       	cp.w	r7,0
80003d38:	c5 80       	breq	80003de8 <usart_init_rs232+0xc0>
80003d3a:	0f c8       	ld.ub	r8,r7[0x4]
80003d3c:	30 49       	mov	r9,4
80003d3e:	f2 08 18 00 	cp.b	r8,r9
80003d42:	e0 88 00 53 	brls	80003de8 <usart_init_rs232+0xc0>
80003d46:	30 99       	mov	r9,9
80003d48:	f2 08 18 00 	cp.b	r8,r9
80003d4c:	e0 8b 00 4e 	brhi	80003de8 <usart_init_rs232+0xc0>
80003d50:	0f d9       	ld.ub	r9,r7[0x5]
80003d52:	30 78       	mov	r8,7
80003d54:	f0 09 18 00 	cp.b	r9,r8
80003d58:	e0 8b 00 48 	brhi	80003de8 <usart_init_rs232+0xc0>
80003d5c:	8e 39       	ld.sh	r9,r7[0x6]
80003d5e:	e0 68 01 01 	mov	r8,257
80003d62:	f0 09 19 00 	cp.h	r9,r8
80003d66:	e0 8b 00 41 	brhi	80003de8 <usart_init_rs232+0xc0>
80003d6a:	ef 39 00 08 	ld.ub	r9,r7[8]
80003d6e:	30 38       	mov	r8,3
80003d70:	f0 09 18 00 	cp.b	r9,r8
80003d74:	e0 8b 00 3a 	brhi	80003de8 <usart_init_rs232+0xc0>
80003d78:	0a 9a       	mov	r10,r5
80003d7a:	6e 0b       	ld.w	r11,r7[0x0]
80003d7c:	0c 9c       	mov	r12,r6
80003d7e:	f0 1f 00 1d 	mcall	80003df0 <usart_init_rs232+0xc8>
80003d82:	58 1c       	cp.w	r12,1
80003d84:	c3 20       	breq	80003de8 <usart_init_rs232+0xc0>
80003d86:	0f c8       	ld.ub	r8,r7[0x4]
80003d88:	30 99       	mov	r9,9
80003d8a:	f2 08 18 00 	cp.b	r8,r9
80003d8e:	c0 51       	brne	80003d98 <usart_init_rs232+0x70>
80003d90:	6c 18       	ld.w	r8,r6[0x4]
80003d92:	b1 b8       	sbr	r8,0x11
80003d94:	8d 18       	st.w	r6[0x4],r8
80003d96:	c0 68       	rjmp	80003da2 <usart_init_rs232+0x7a>
80003d98:	6c 19       	ld.w	r9,r6[0x4]
80003d9a:	20 58       	sub	r8,5
80003d9c:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003da0:	8d 18       	st.w	r6[0x4],r8
80003da2:	6c 19       	ld.w	r9,r6[0x4]
80003da4:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003da8:	0f d8       	ld.ub	r8,r7[0x5]
80003daa:	a9 78       	lsl	r8,0x9
80003dac:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003db0:	12 48       	or	r8,r9
80003db2:	8d 18       	st.w	r6[0x4],r8
80003db4:	8e 38       	ld.sh	r8,r7[0x6]
80003db6:	30 29       	mov	r9,2
80003db8:	f2 08 19 00 	cp.h	r8,r9
80003dbc:	e0 88 00 09 	brls	80003dce <usart_init_rs232+0xa6>
80003dc0:	6c 18       	ld.w	r8,r6[0x4]
80003dc2:	ad b8       	sbr	r8,0xd
80003dc4:	8d 18       	st.w	r6[0x4],r8
80003dc6:	8e b8       	ld.uh	r8,r7[0x6]
80003dc8:	20 28       	sub	r8,2
80003dca:	8d a8       	st.w	r6[0x28],r8
80003dcc:	c0 68       	rjmp	80003dd8 <usart_init_rs232+0xb0>
80003dce:	6c 19       	ld.w	r9,r6[0x4]
80003dd0:	5c 78       	castu.h	r8
80003dd2:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80003dd6:	8d 18       	st.w	r6[0x4],r8
80003dd8:	6c 18       	ld.w	r8,r6[0x4]
80003dda:	e0 18 ff f0 	andl	r8,0xfff0
80003dde:	8d 18       	st.w	r6[0x4],r8
80003de0:	35 08       	mov	r8,80
80003de2:	8d 08       	st.w	r6[0x0],r8
80003de4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003de8:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003dec:	80 00       	ld.sh	r0,r0[0x0]
80003dee:	3c fc       	mov	r12,-49
80003df0:	80 00       	ld.sh	r0,r0[0x0]
80003df2:	3c a2       	mov	r2,-54

80003df4 <_stext>:
80003df4:	e0 7d 00 00 	mov	sp,65536
80003df8:	fe c0 ef f8 	sub	r0,pc,-4104
80003dfc:	e3 b0 00 01 	mtsr	0x4,r0
80003e00:	d5 53       	csrf	0x15
80003e02:	30 80       	mov	r0,8
80003e04:	32 81       	mov	r1,40
80003e06:	02 30       	cp.w	r0,r1
80003e08:	c0 62       	brcc	80003e14 <idata_load_loop_end>
80003e0a:	48 92       	lddpc	r2,80003e2c <udata_clear_loop_end+0x4>

80003e0c <idata_load_loop>:
80003e0c:	a5 05       	ld.d	r4,r2++
80003e0e:	a1 24       	st.d	r0++,r4
80003e10:	02 30       	cp.w	r0,r1
80003e12:	cf d3       	brcs	80003e0c <idata_load_loop>

80003e14 <idata_load_loop_end>:
80003e14:	32 80       	mov	r0,40
80003e16:	e0 61 07 f0 	mov	r1,2032
80003e1a:	02 30       	cp.w	r0,r1
80003e1c:	c0 62       	brcc	80003e28 <udata_clear_loop_end>
80003e1e:	30 02       	mov	r2,0
80003e20:	30 03       	mov	r3,0

80003e22 <udata_clear_loop>:
80003e22:	a1 22       	st.d	r0++,r2
80003e24:	02 30       	cp.w	r0,r1
80003e26:	cf e3       	brcs	80003e22 <udata_clear_loop>

80003e28 <udata_clear_loop_end>:
80003e28:	fe cf fc e0 	sub	pc,pc,-800
80003e2c:	80 02       	ld.sh	r2,r0[0x0]
80003e2e:	b2 d8       	st.b	r9[0x5],r8

80003e30 <init_button_interrupt>:
	pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
	INTC_register_interrupt(&pdca_int_handler, AVR32_PDCA_IRQ_1, 3);  // FOR SPI (SD CARD)

} //local_pdca_init

void init_button_interrupt(void){//inicializar interrupciones de botones
80003e30:	d4 21       	pushm	r4-r7,lr
80003e32:	20 3d       	sub	sp,12
	Disable_global_interrupt();
80003e34:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80003e36:	f0 1f 00 14 	mcall	80003e84 <init_button_interrupt+0x54>
	INTC_register_interrupt(&btn_interrupt_routine, 70, 3);
80003e3a:	49 47       	lddpc	r7,80003e88 <init_button_interrupt+0x58>
80003e3c:	30 3a       	mov	r10,3
80003e3e:	34 6b       	mov	r11,70
80003e40:	0e 9c       	mov	r12,r7
80003e42:	f0 1f 00 13 	mcall	80003e8c <init_button_interrupt+0x5c>
	INTC_register_interrupt(&btn_interrupt_routine, 71, 3);
80003e46:	30 3a       	mov	r10,3
80003e48:	34 7b       	mov	r11,71
80003e4a:	0e 9c       	mov	r12,r7
80003e4c:	f0 1f 00 10 	mcall	80003e8c <init_button_interrupt+0x5c>
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
80003e50:	fa c6 ff fe 	sub	r6,sp,-2
80003e54:	30 aa       	mov	r10,10
80003e56:	48 fb       	lddpc	r11,80003e90 <init_button_interrupt+0x60>
80003e58:	0c 9c       	mov	r12,r6
80003e5a:	f0 1f 00 0f 	mcall	80003e94 <init_button_interrupt+0x64>
	pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
	INTC_register_interrupt(&pdca_int_handler, AVR32_PDCA_IRQ_1, 3);  // FOR SPI (SD CARD)

} //local_pdca_init

void init_button_interrupt(void){//inicializar interrupciones de botones
80003e5e:	fa c5 ff f4 	sub	r5,sp,-12
	INTC_register_interrupt(&btn_interrupt_routine, 71, 3);
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
		gpio_enable_gpio_pin(button_ref[i]);
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
80003e62:	30 24       	mov	r4,2
	INTC_init_interrupts();
	INTC_register_interrupt(&btn_interrupt_routine, 70, 3);
	INTC_register_interrupt(&btn_interrupt_routine, 71, 3);
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
		gpio_enable_gpio_pin(button_ref[i]);
80003e64:	0d 27       	ld.uh	r7,r6++
80003e66:	0e 9c       	mov	r12,r7
80003e68:	f0 1f 00 0c 	mcall	80003e98 <init_button_interrupt+0x68>
		gpio_enable_pin_pull_up(button_ref[i]);
80003e6c:	0e 9c       	mov	r12,r7
80003e6e:	f0 1f 00 0c 	mcall	80003e9c <init_button_interrupt+0x6c>
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
80003e72:	08 9b       	mov	r11,r4
80003e74:	0e 9c       	mov	r12,r7
80003e76:	f0 1f 00 0b 	mcall	80003ea0 <init_button_interrupt+0x70>
	Disable_global_interrupt();
	INTC_init_interrupts();
	INTC_register_interrupt(&btn_interrupt_routine, 70, 3);
	INTC_register_interrupt(&btn_interrupt_routine, 71, 3);
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
80003e7a:	0a 36       	cp.w	r6,r5
80003e7c:	cf 41       	brne	80003e64 <init_button_interrupt+0x34>
		gpio_enable_gpio_pin(button_ref[i]);
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
	}//For
	Enable_global_interrupt();
80003e7e:	d5 03       	csrf	0x10
}//init_button_interrupt
80003e80:	2f dd       	sub	sp,-12
80003e82:	d8 22       	popm	r4-r7,pc
80003e84:	80 00       	ld.sh	r0,r0[0x0]
80003e86:	37 8c       	mov	r12,120
80003e88:	80 00       	ld.sh	r0,r0[0x0]
80003e8a:	40 a8       	lddsp	r8,sp[0x28]
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	37 0c       	mov	r12,112
80003e90:	80 02       	ld.sh	r2,r0[0x0]
80003e92:	b2 90       	st.b	r9[0x1],r0
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	4b d8       	lddpc	r8,80003f88 <local_pdca_init_usart+0x10>
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	36 30       	mov	r0,99
80003e9c:	80 00       	ld.sh	r0,r0[0x0]
80003e9e:	36 48       	mov	r8,100
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	36 96       	mov	r6,105

80003ea4 <local_pdca_init>:
	pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_USART_RX); //Enable DMA and its RX intertupt
	pdca_enable (AVR32_PDCA_CHANNEL_USART_RX);

}

void local_pdca_init(void){
80003ea4:	eb cd 40 b0 	pushm	r4-r5,r7,lr
80003ea8:	20 cd       	sub	sp,48
		.size = 512,                              // transfer counter: here the size of the string
		.r_addr = NULL,                           // next memory address after 1st transfer complete
		.r_size = 0,                              // next transfer counter not used here
		.pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - data are on reception from SPI1 RX line
		.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
	};//pdca_options_SPI_RX
80003eaa:	49 78       	lddpc	r8,80003f04 <local_pdca_init+0x60>
80003eac:	fa c7 ff e8 	sub	r7,sp,-24
80003eb0:	f0 ea 00 00 	ld.d	r10,r8[0]
80003eb4:	ee eb 00 00 	st.d	r7[0],r10
80003eb8:	f0 ea 00 08 	ld.d	r10,r8[8]
80003ebc:	ee eb 00 08 	st.d	r7[8],r10
80003ec0:	f0 e8 00 10 	ld.d	r8,r8[16]
80003ec4:	ee e9 00 10 	st.d	r7[16],r8
		.size = 512,                              // transfer counter: here the size of the string
		.r_addr = NULL,                           // next memory address after 1st transfer complete
		.r_size = 0,                              // next transfer counter not used here
		.pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
		.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
	};//pdca_options_SPI_TX
80003ec8:	49 08       	lddpc	r8,80003f08 <local_pdca_init+0x64>
80003eca:	1a 9b       	mov	r11,sp
80003ecc:	f0 e4 00 00 	ld.d	r4,r8[0]
80003ed0:	fa e5 00 00 	st.d	sp[0],r4
80003ed4:	f0 e4 00 08 	ld.d	r4,r8[8]
80003ed8:	fa e5 00 08 	st.d	sp[8],r4
80003edc:	f0 e8 00 10 	ld.d	r8,r8[16]
80003ee0:	fa e9 00 10 	st.d	sp[16],r8

	pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80003ee4:	30 2c       	mov	r12,2
80003ee6:	f0 1f 00 0a 	mcall	80003f0c <local_pdca_init+0x68>
	pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
80003eea:	0e 9b       	mov	r11,r7
80003eec:	30 1c       	mov	r12,1
80003eee:	f0 1f 00 08 	mcall	80003f0c <local_pdca_init+0x68>
	INTC_register_interrupt(&pdca_int_handler, AVR32_PDCA_IRQ_1, 3);  // FOR SPI (SD CARD)
80003ef2:	30 3a       	mov	r10,3
80003ef4:	36 1b       	mov	r11,97
80003ef6:	48 7c       	lddpc	r12,80003f10 <local_pdca_init+0x6c>
80003ef8:	f0 1f 00 07 	mcall	80003f14 <local_pdca_init+0x70>

} //local_pdca_init
80003efc:	2f 4d       	sub	sp,-48
80003efe:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc
80003f02:	00 00       	add	r0,r0
80003f04:	80 02       	ld.sh	r2,r0[0x0]
80003f06:	b2 9c       	st.b	r9[0x1],r12
80003f08:	80 02       	ld.sh	r2,r0[0x0]
80003f0a:	b0 5c       	st.h	r8[0xa],r12
80003f0c:	80 00       	ld.sh	r0,r0[0x0]
80003f0e:	38 e4       	mov	r4,-114
80003f10:	80 00       	ld.sh	r0,r0[0x0]
80003f12:	3f 18       	mov	r8,-15
80003f14:	80 00       	ld.sh	r0,r0[0x0]
80003f16:	37 0c       	mov	r12,112

80003f18 <pdca_int_handler>:
void CLR_disp(void){
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
	et024006_PutPixmap(avr32_logo, 320, 0, 0, 0, 0, 320, 240);
}//CLR_disp

static void pdca_int_handler(void){
80003f18:	d4 01       	pushm	lr
	Disable_global_interrupt();
80003f1a:	d3 03       	ssrf	0x10
	pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
80003f1c:	30 1c       	mov	r12,1
80003f1e:	f0 1f 00 13 	mcall	80003f68 <pdca_int_handler+0x50>
	sd_mmc_spi_read_close_PDCA();
80003f22:	f0 1f 00 13 	mcall	80003f6c <pdca_int_handler+0x54>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003f26:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003f2a:	f0 ca ff 88 	sub	r10,r8,-120
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003f2e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003f32:	14 38       	cp.w	r8,r10
80003f34:	e0 88 00 08 	brls	80003f44 <pdca_int_handler+0x2c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003f38:	12 38       	cp.w	r8,r9
80003f3a:	fe 98 ff fa 	brls	80003f2e <pdca_int_handler+0x16>
80003f3e:	12 3a       	cp.w	r10,r9
80003f40:	c0 73       	brcs	80003f4e <pdca_int_handler+0x36>
80003f42:	cf 6b       	rjmp	80003f2e <pdca_int_handler+0x16>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003f44:	12 38       	cp.w	r8,r9
80003f46:	e0 8b 00 04 	brhi	80003f4e <pdca_int_handler+0x36>
80003f4a:	12 3a       	cp.w	r10,r9
80003f4c:	cf 12       	brcc	80003f2e <pdca_int_handler+0x16>
	delay_us(10);
	pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
80003f4e:	30 2c       	mov	r12,2
80003f50:	f0 1f 00 08 	mcall	80003f70 <pdca_int_handler+0x58>
	pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);
80003f54:	30 1c       	mov	r12,1
80003f56:	f0 1f 00 07 	mcall	80003f70 <pdca_int_handler+0x58>
	Enable_global_interrupt();
80003f5a:	d5 03       	csrf	0x10
	end_of_transfer = true;
80003f5c:	30 19       	mov	r9,1
80003f5e:	48 68       	lddpc	r8,80003f74 <pdca_int_handler+0x5c>
80003f60:	b0 89       	st.b	r8[0x0],r9

}//pdca_int_handler
80003f62:	d4 02       	popm	lr
80003f64:	d6 03       	rete
80003f66:	00 00       	add	r0,r0
80003f68:	80 00       	ld.sh	r0,r0[0x0]
80003f6a:	38 84       	mov	r4,-120
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	2a a8       	sub	r8,-86
80003f70:	80 00       	ld.sh	r0,r0[0x0]
80003f72:	38 2c       	mov	r12,-126
80003f74:	00 00       	add	r0,r0
80003f76:	03 88       	ld.ub	r8,r1[0x0]

80003f78 <local_pdca_init_usart>:
	spi_enable(SD_MMC_SPI);
	sd_mmc_spi_init(spiOptions, PBA_HZ);

}//sd_mmc_resources_init

void local_pdca_init_usart(void){
80003f78:	eb cd 40 c0 	pushm	r6-r7,lr
80003f7c:	20 6d       	sub	sp,24
		.size = 1,                              // transfer counter: here the size of the string
		.r_addr = NULL,                           // next memory address after 1st transfer complete
		.r_size = 0,                              // next transfer counter not used here
		.pid = AVR32_PDCA_CHANNEL_USED_RX_USART,        // select peripheral ID - data are on reception from USART0
		.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
	};//pdca_options_SPI_TX
80003f7e:	49 08       	lddpc	r8,80003fbc <local_pdca_init_usart+0x44>
80003f80:	1a 9b       	mov	r11,sp
80003f82:	f0 e6 00 00 	ld.d	r6,r8[0]
80003f86:	fa e7 00 00 	st.d	sp[0],r6
80003f8a:	f0 e6 00 08 	ld.d	r6,r8[8]
80003f8e:	fa e7 00 08 	st.d	sp[8],r6
80003f92:	f0 e8 00 10 	ld.d	r8,r8[16]
80003f96:	fa e9 00 10 	st.d	sp[16],r8

	pdca_init_channel(AVR32_PDCA_CHANNEL_USART_RX, &pdca_options_USART_RX);
80003f9a:	30 0c       	mov	r12,0
80003f9c:	f0 1f 00 09 	mcall	80003fc0 <local_pdca_init_usart+0x48>
	INTC_register_interrupt(&pdca_int_handler_usart, 96, 3);  // pdca_channel_usart_RX = 0 irq 96
80003fa0:	30 3a       	mov	r10,3
80003fa2:	36 0b       	mov	r11,96
80003fa4:	48 8c       	lddpc	r12,80003fc4 <local_pdca_init_usart+0x4c>
80003fa6:	f0 1f 00 09 	mcall	80003fc8 <local_pdca_init_usart+0x50>
	pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_USART_RX); //Enable DMA and its RX intertupt
80003faa:	30 0c       	mov	r12,0
80003fac:	f0 1f 00 08 	mcall	80003fcc <local_pdca_init_usart+0x54>
	pdca_enable (AVR32_PDCA_CHANNEL_USART_RX);
80003fb0:	30 0c       	mov	r12,0
80003fb2:	f0 1f 00 08 	mcall	80003fd0 <local_pdca_init_usart+0x58>

}
80003fb6:	2f ad       	sub	sp,-24
80003fb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003fbc:	80 02       	ld.sh	r2,r0[0x0]
80003fbe:	b0 74       	st.h	r8[0xe],r4
80003fc0:	80 00       	ld.sh	r0,r0[0x0]
80003fc2:	38 e4       	mov	r4,-114
80003fc4:	80 00       	ld.sh	r0,r0[0x0]
80003fc6:	3f d4       	mov	r4,-3
80003fc8:	80 00       	ld.sh	r0,r0[0x0]
80003fca:	37 0c       	mov	r12,112
80003fcc:	80 00       	ld.sh	r0,r0[0x0]
80003fce:	38 4c       	mov	r12,-124
80003fd0:	80 00       	ld.sh	r0,r0[0x0]
80003fd2:	38 3c       	mov	r12,-125

80003fd4 <pdca_int_handler_usart>:
	Enable_global_interrupt();
	end_of_transfer = true;

}//pdca_int_handler

static void pdca_int_handler_usart(void){
80003fd4:	eb cd 40 c0 	pushm	r6-r7,lr

	et024006_PrintString("int", (const unsigned char *)&FONT8x8, 100, 120, WHITE, -1);
80003fd8:	49 b7       	lddpc	r7,80004044 <pdca_int_handler_usart+0x70>
80003fda:	3f f6       	mov	r6,-1
80003fdc:	1a d6       	st.w	--sp,r6
80003fde:	e0 68 ff ff 	mov	r8,65535
80003fe2:	37 89       	mov	r9,120
80003fe4:	36 4a       	mov	r10,100
80003fe6:	0e 9b       	mov	r11,r7
80003fe8:	49 8c       	lddpc	r12,80004048 <pdca_int_handler_usart+0x74>
80003fea:	f0 1f 00 19 	mcall	8000404c <pdca_int_handler_usart+0x78>
	debug_counter++;
80003fee:	49 98       	lddpc	r8,80004050 <pdca_int_handler_usart+0x7c>
80003ff0:	70 09       	ld.w	r9,r8[0x0]
80003ff2:	2f f9       	sub	r9,-1
80003ff4:	91 09       	st.w	r8[0x0],r9
	debug_print[0] = usart_char + '0';
80003ff6:	49 89       	lddpc	r9,80004054 <pdca_int_handler_usart+0x80>
80003ff8:	72 09       	ld.w	r9,r9[0x0]
80003ffa:	2d 09       	sub	r9,-48
80003ffc:	49 7c       	lddpc	r12,80004058 <pdca_int_handler_usart+0x84>
80003ffe:	b8 89       	st.b	r12[0x0],r9
	et024006_PrintString(debug_print, (const unsigned char *)&FONT8x8, 150+debug_counter*5, 120+debug_counter*5, WHITE, -1);
80004000:	70 09       	ld.w	r9,r8[0x0]
80004002:	70 08       	ld.w	r8,r8[0x0]
80004004:	f2 0a 15 02 	lsl	r10,r9,0x2
80004008:	f4 09 00 09 	add	r9,r10,r9
8000400c:	28 89       	sub	r9,-120
8000400e:	f0 0a 15 02 	lsl	r10,r8,0x2
80004012:	10 0a       	add	r10,r8
80004014:	f4 ca ff 6a 	sub	r10,r10,-150
80004018:	1a d6       	st.w	--sp,r6
8000401a:	e0 68 ff ff 	mov	r8,65535
8000401e:	5c 79       	castu.h	r9
80004020:	5c 7a       	castu.h	r10
80004022:	0e 9b       	mov	r11,r7
80004024:	f0 1f 00 0a 	mcall	8000404c <pdca_int_handler_usart+0x78>
	//Disable_global_interrupt();
	pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_USART_RX);
80004028:	30 0c       	mov	r12,0
8000402a:	f0 1f 00 0d 	mcall	8000405c <pdca_int_handler_usart+0x88>
	pdca_disable(AVR32_PDCA_CHANNEL_USART_RX);
8000402e:	30 0c       	mov	r12,0
80004030:	f0 1f 00 0c 	mcall	80004060 <pdca_int_handler_usart+0x8c>
	//Enable_global_interrupt();
	usart_char_rx_complete=1;
80004034:	30 19       	mov	r9,1
80004036:	48 c8       	lddpc	r8,80004064 <pdca_int_handler_usart+0x90>
80004038:	b0 89       	st.b	r8[0x0],r9
8000403a:	2f ed       	sub	sp,-8

}//pdca_int_handler_usart
8000403c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80004040:	d6 03       	rete
80004042:	00 00       	add	r0,r0
80004044:	80 00       	ld.sh	r0,r0[0x0]
80004046:	50 00       	stdsp	sp[0x0],r0
80004048:	80 02       	ld.sh	r2,r0[0x0]
8000404a:	b0 94       	st.b	r8[0x1],r4
8000404c:	80 00       	ld.sh	r0,r0[0x0]
8000404e:	20 a8       	sub	r8,10
80004050:	00 00       	add	r0,r0
80004052:	01 54       	ld.sh	r4,--r0
80004054:	00 00       	add	r0,r0
80004056:	07 b4       	ld.ub	r4,r3[0x3]
80004058:	00 00       	add	r0,r0
8000405a:	07 7c       	ld.ub	r12,--r3
8000405c:	80 00       	ld.sh	r0,r0[0x0]
8000405e:	38 84       	mov	r4,-120
80004060:	80 00       	ld.sh	r0,r0[0x0]
80004062:	38 2c       	mov	r12,-126
80004064:	00 00       	add	r0,r0
80004066:	01 4c       	ld.w	r12,--r0

80004068 <CLR_disp>:
  pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
  pwm_channel_init(6, &pwm_channel6);
  pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
}//tft_bl_init

void CLR_disp(void){
80004068:	d4 01       	pushm	lr
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
8000406a:	30 08       	mov	r8,0
8000406c:	e0 69 00 f0 	mov	r9,240
80004070:	e0 6a 01 40 	mov	r10,320
80004074:	10 9b       	mov	r11,r8
80004076:	10 9c       	mov	r12,r8
80004078:	f0 1f 00 09 	mcall	8000409c <CLR_disp+0x34>
	et024006_PutPixmap(avr32_logo, 320, 0, 0, 0, 0, 320, 240);
8000407c:	e0 68 00 f0 	mov	r8,240
80004080:	1a d8       	st.w	--sp,r8
80004082:	e0 6b 01 40 	mov	r11,320
80004086:	1a db       	st.w	--sp,r11
80004088:	30 0a       	mov	r10,0
8000408a:	1a da       	st.w	--sp,r10
8000408c:	14 98       	mov	r8,r10
8000408e:	14 99       	mov	r9,r10
80004090:	48 4c       	lddpc	r12,800040a0 <CLR_disp+0x38>
80004092:	f0 1f 00 05 	mcall	800040a4 <CLR_disp+0x3c>
80004096:	2f dd       	sub	sp,-12
}//CLR_disp
80004098:	d8 02       	popm	pc
8000409a:	00 00       	add	r0,r0
8000409c:	80 00       	ld.sh	r0,r0[0x0]
8000409e:	23 24       	sub	r4,50
800040a0:	80 00       	ld.sh	r0,r0[0x0]
800040a2:	54 48       	stdsp	sp[0x110],r8
800040a4:	80 00       	ld.sh	r0,r0[0x0]
800040a6:	23 cc       	sub	r12,60

800040a8 <btn_interrupt_routine>:
	if ((value & 0b0100)>>2)gpio_clr_gpio_pin(LED1); else gpio_set_gpio_pin(LED1);
	if ((value & 0b0010)>>1)gpio_clr_gpio_pin(LED2); else gpio_set_gpio_pin(LED2);
	if (value & 0b0001)gpio_clr_gpio_pin(LED3); else gpio_set_gpio_pin(LED3);
}//Fin Fn

void btn_interrupt_routine (void){
800040a8:	d4 01       	pushm	lr
	CLR_disp();
800040aa:	f0 1f 00 23 	mcall	80004134 <btn_interrupt_routine+0x8c>
	if (gpio_get_pin_interrupt_flag(BTN_UP)) {
800040ae:	33 6c       	mov	r12,54
800040b0:	f0 1f 00 22 	mcall	80004138 <btn_interrupt_routine+0x90>
800040b4:	c0 90       	breq	800040c6 <btn_interrupt_routine+0x1e>
		btn_pressed=UP;
800040b6:	30 18       	mov	r8,1
800040b8:	4a 19       	lddpc	r9,8000413c <btn_interrupt_routine+0x94>
800040ba:	93 08       	st.w	r9[0x0],r8
		state = 1;
800040bc:	4a 19       	lddpc	r9,80004140 <btn_interrupt_routine+0x98>
800040be:	93 08       	st.w	r9[0x0],r8
		gpio_clear_pin_interrupt_flag(BTN_UP);
800040c0:	33 6c       	mov	r12,54
800040c2:	f0 1f 00 21 	mcall	80004144 <btn_interrupt_routine+0x9c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_DOWN)){
800040c6:	33 7c       	mov	r12,55
800040c8:	f0 1f 00 1c 	mcall	80004138 <btn_interrupt_routine+0x90>
800040cc:	c0 90       	breq	800040de <btn_interrupt_routine+0x36>
		btn_pressed=DOWN;
800040ce:	30 28       	mov	r8,2
800040d0:	49 b9       	lddpc	r9,8000413c <btn_interrupt_routine+0x94>
800040d2:	93 08       	st.w	r9[0x0],r8
		state=2;
800040d4:	49 b9       	lddpc	r9,80004140 <btn_interrupt_routine+0x98>
800040d6:	93 08       	st.w	r9[0x0],r8
		gpio_clear_pin_interrupt_flag(BTN_DOWN);
800040d8:	33 7c       	mov	r12,55
800040da:	f0 1f 00 1b 	mcall	80004144 <btn_interrupt_routine+0x9c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_RIGHT)){
800040de:	33 8c       	mov	r12,56
800040e0:	f0 1f 00 16 	mcall	80004138 <btn_interrupt_routine+0x90>
800040e4:	c0 a0       	breq	800040f8 <btn_interrupt_routine+0x50>
		btn_pressed=RIGHT;
800040e6:	30 49       	mov	r9,4
800040e8:	49 58       	lddpc	r8,8000413c <btn_interrupt_routine+0x94>
800040ea:	91 09       	st.w	r8[0x0],r9
		state=3;
800040ec:	30 39       	mov	r9,3
800040ee:	49 58       	lddpc	r8,80004140 <btn_interrupt_routine+0x98>
800040f0:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_RIGHT);
800040f2:	33 8c       	mov	r12,56
800040f4:	f0 1f 00 14 	mcall	80004144 <btn_interrupt_routine+0x9c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_LEFT)){
800040f8:	33 9c       	mov	r12,57
800040fa:	f0 1f 00 10 	mcall	80004138 <btn_interrupt_routine+0x90>
800040fe:	c0 a0       	breq	80004112 <btn_interrupt_routine+0x6a>
		btn_pressed=LEFT;
80004100:	30 39       	mov	r9,3
80004102:	48 f8       	lddpc	r8,8000413c <btn_interrupt_routine+0x94>
80004104:	91 09       	st.w	r8[0x0],r9
		state=4;
80004106:	30 49       	mov	r9,4
80004108:	48 e8       	lddpc	r8,80004140 <btn_interrupt_routine+0x98>
8000410a:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(BTN_LEFT);
8000410c:	33 9c       	mov	r12,57
8000410e:	f0 1f 00 0e 	mcall	80004144 <btn_interrupt_routine+0x9c>
	}
	if (gpio_get_pin_interrupt_flag(BTN_CENTER)){
80004112:	33 ac       	mov	r12,58
80004114:	f0 1f 00 09 	mcall	80004138 <btn_interrupt_routine+0x90>
80004118:	c0 90       	breq	8000412a <btn_interrupt_routine+0x82>
		btn_pressed=CENTER;
8000411a:	30 58       	mov	r8,5
8000411c:	48 89       	lddpc	r9,8000413c <btn_interrupt_routine+0x94>
8000411e:	93 08       	st.w	r9[0x0],r8
		state=5;
80004120:	48 89       	lddpc	r9,80004140 <btn_interrupt_routine+0x98>
80004122:	93 08       	st.w	r9[0x0],r8
		gpio_clear_pin_interrupt_flag(BTN_CENTER);
80004124:	33 ac       	mov	r12,58
80004126:	f0 1f 00 08 	mcall	80004144 <btn_interrupt_routine+0x9c>
	}
	gpio_get_pin_interrupt_flag(BTN_CENTER);
8000412a:	33 ac       	mov	r12,58
8000412c:	f0 1f 00 03 	mcall	80004138 <btn_interrupt_routine+0x90>
} //Fin Botones
80004130:	d4 02       	popm	lr
80004132:	d6 03       	rete
80004134:	80 00       	ld.sh	r0,r0[0x0]
80004136:	40 68       	lddsp	r8,sp[0x18]
80004138:	80 00       	ld.sh	r0,r0[0x0]
8000413a:	36 dc       	mov	r12,109
8000413c:	00 00       	add	r0,r0
8000413e:	01 48       	ld.w	r8,--r0
80004140:	00 00       	add	r0,r0
80004142:	01 50       	ld.sh	r0,--r0
80004144:	80 00       	ld.sh	r0,r0[0x0]
80004146:	36 f4       	mov	r4,111

80004148 <main>:
void init_button_interrupt(void);


/**************************************************************************/

int main(void){
80004148:	d4 31       	pushm	r0-r7,lr
8000414a:	20 6d       	sub	sp,24
	state = 0;
8000414c:	30 06       	mov	r6,0
8000414e:	fe f8 07 12 	ld.w	r8,pc[1810]
80004152:	91 06       	st.w	r8[0x0],r6
	int i, j; //j for sectors, i for bytes

	//PM
	pm_switch_to_osc0(&AVR32_PM, PBA_HZ, 3);
80004154:	30 3a       	mov	r10,3
80004156:	e0 6b 1b 00 	mov	r11,6912
8000415a:	ea 1b 00 b7 	orh	r11,0xb7
8000415e:	fe 7c 0c 00 	mov	r12,-62464
80004162:	f0 1f 01 c1 	mcall	80004864 <main+0x71c>

	//Key interrupts
	init_button_interrupt();
80004166:	f0 1f 01 c1 	mcall	80004868 <main+0x720>
	  .charlength   = 8,
	  .paritytype   = USART_NO_PARITY,
	  .stopbits     = USART_1_STOPBIT,
	  .channelmode  = USART_NORMAL_CHMODE
	};// USART options
	gpio_enable_module(USART_GPIO_MAP,sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
8000416a:	30 1b       	mov	r11,1
8000416c:	fe fc 07 00 	ld.w	r12,pc[1792]
80004170:	f0 1f 01 c0 	mcall	80004870 <main+0x728>
	usart_init_rs232(&AVR32_USART0, &USART_OPTIONS, 12000000);
80004174:	e0 6a 1b 00 	mov	r10,6912
80004178:	ea 1a 00 b7 	orh	r10,0xb7
8000417c:	fe fb 06 f8 	ld.w	r11,pc[1784]
80004180:	fe 7c 14 00 	mov	r12,-60416
80004184:	f0 1f 01 bd 	mcall	80004878 <main+0x730>
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};//SPI Options
80004188:	fe f8 06 f4 	ld.w	r8,pc[1780]
8000418c:	fa c7 ff f8 	sub	r7,sp,-8
80004190:	f0 ea 00 00 	ld.d	r10,r8[0]
80004194:	ee eb 00 00 	st.d	r7[0],r10
80004198:	f0 e8 00 08 	ld.d	r8,r8[8]
8000419c:	ee e9 00 08 	st.d	r7[8],r8

	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
800041a0:	30 4b       	mov	r11,4
800041a2:	fe fc 06 de 	ld.w	r12,pc[1758]
800041a6:	f0 1f 01 b3 	mcall	80004870 <main+0x728>
	sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
	spi_initMaster(SD_MMC_SPI, &spiOptions);
800041aa:	0e 9b       	mov	r11,r7
800041ac:	fe 7c 24 00 	mov	r12,-56320
800041b0:	f0 1f 01 b5 	mcall	80004884 <main+0x73c>
	spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
800041b4:	0c 99       	mov	r9,r6
800041b6:	0c 9a       	mov	r10,r6
800041b8:	0c 9b       	mov	r11,r6
800041ba:	fe 7c 24 00 	mov	r12,-56320
800041be:	f0 1f 01 b3 	mcall	80004888 <main+0x740>
	spi_enable(SD_MMC_SPI);
800041c2:	fe 7c 24 00 	mov	r12,-56320
800041c6:	f0 1f 01 b2 	mcall	8000488c <main+0x744>
	sd_mmc_spi_init(spiOptions, PBA_HZ);
800041ca:	20 4d       	sub	sp,16
800041cc:	ee e8 00 00 	ld.d	r8,r7[0]
800041d0:	fa e9 00 00 	st.d	sp[0],r8
800041d4:	ee e8 00 08 	ld.d	r8,r7[8]
800041d8:	fa e9 00 08 	st.d	sp[8],r8
800041dc:	e0 6c 1b 00 	mov	r12,6912
800041e0:	ea 1c 00 b7 	orh	r12,0xb7
800041e4:	f0 1f 01 ab 	mcall	80004890 <main+0x748>
800041e8:	2f cd       	sub	sp,-16
				et024006_PrintString("Message:", (const unsigned char *)&FONT8x8, 30, 50, WHITE, -1);

				//Read SD
				pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_RX, &ram_buffer,512);
				pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_TX,(void *)&dummy_data,512); //send dummy
				end_of_transfer = false;
800041ea:	fe f3 06 aa 	ld.w	r3,pc[1706]
					pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
					pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
					pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
					while(!end_of_transfer);
					for( i = 0; i < 25; i++){ //First 50 chars
						usart_message_print[i] = (U8)(*(ram_buffer + i));
800041ee:	fe f6 06 aa 	ld.w	r6,pc[1706]
						pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
						pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
						pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
						while(!end_of_transfer);
						for( i = 0; i < 25; i++){ //First 50 chars
							usart_message_print[i] = (U8)(*(ram_buffer + i));
800041f2:	50 16       	stdsp	sp[0x4],r6
800041f4:	50 06       	stdsp	sp[0x0],r6
	gpio_enable_module(USART_GPIO_MAP,sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	usart_init_rs232(&AVR32_USART0, &USART_OPTIONS, 12000000);

	//SDCARD
	sd_mmc_resources_init();
	REINIT: while (!sd_mmc_spi_mem_check());
800041f6:	f0 1f 01 aa 	mcall	8000489c <main+0x754>
800041fa:	cf e0       	breq	800041f6 <main+0xae>

	//DMA for SDCARD
	Enable_global_interrupt();
800041fc:	d5 03       	csrf	0x10
	local_pdca_init(); //DMA initialization SPI
800041fe:	f0 1f 01 a9 	mcall	800048a0 <main+0x758>

	//TFT
	et024006_Init( FOSC0, FOSC0 );
80004202:	e0 6b 1b 00 	mov	r11,6912
80004206:	ea 1b 00 b7 	orh	r11,0xb7
8000420a:	16 9c       	mov	r12,r11
8000420c:	f0 1f 01 a6 	mcall	800048a4 <main+0x75c>
		}//Switch
	}//While
}//Main

static void tft_bl_init(void){
  pwm_opt_t opt = {.diva = 0,.divb = 0,.prea = 0,.preb = 0};
80004210:	30 08       	mov	r8,0
80004212:	50 28       	stdsp	sp[0x8],r8
80004214:	50 38       	stdsp	sp[0xc],r8
80004216:	50 48       	stdsp	sp[0x10],r8
80004218:	50 58       	stdsp	sp[0x14],r8
  pwm_init(&opt);
8000421a:	fa cc ff f8 	sub	r12,sp,-8
8000421e:	f0 1f 01 a3 	mcall	800048a8 <main+0x760>
  pwm_channel6.CMR.calg = PWM_MODE_LEFT_ALIGNED;
80004222:	fe fb 06 8a 	ld.w	r11,pc[1674]
80004226:	76 08       	ld.w	r8,r11[0x0]
  pwm_channel6.CMR.cpol = PWM_POLARITY_HIGH; //PWM_POLARITY_LOW;//PWM_POLARITY_HIGH;
  pwm_channel6.CMR.cpd = PWM_UPDATE_DUTY;
80004228:	e0 18 f8 ff 	andl	r8,0xf8ff
  pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
8000422c:	a9 b8       	sbr	r8,0x9
8000422e:	30 19       	mov	r9,1
80004230:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80004234:	97 08       	st.w	r11[0x0],r8
  pwm_channel_init(6, &pwm_channel6);
80004236:	30 6c       	mov	r12,6
80004238:	f0 1f 01 9e 	mcall	800048b0 <main+0x768>
  pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
8000423c:	34 0c       	mov	r12,64
8000423e:	f0 1f 01 9e 	mcall	800048b4 <main+0x76c>
	local_pdca_init(); //DMA initialization SPI

	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	CLR_disp();
80004242:	f0 1f 01 9e 	mcall	800048b8 <main+0x770>

	while(pwm_channel6.cdty < pwm_channel6.cprd){
80004246:	fe f7 06 66 	ld.w	r7,pc[1638]
		pwm_channel6.cdty++;
		pwm_channel6.cupd = pwm_channel6.cdty;
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
8000424a:	30 65       	mov	r5,6
	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	CLR_disp();

	while(pwm_channel6.cdty < pwm_channel6.cprd){
8000424c:	c1 c8       	rjmp	80004284 <main+0x13c>
		pwm_channel6.cdty++;
8000424e:	2f f8       	sub	r8,-1
80004250:	8f 18       	st.w	r7[0x4],r8
		pwm_channel6.cupd = pwm_channel6.cdty;
80004252:	8f 48       	st.w	r7[0x10],r8
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
80004254:	0e 9b       	mov	r11,r7
80004256:	0a 9c       	mov	r12,r5
80004258:	f0 1f 01 99 	mcall	800048bc <main+0x774>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000425c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004260:	f0 c9 d1 20 	sub	r9,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004264:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004268:	12 38       	cp.w	r8,r9
8000426a:	e0 88 00 08 	brls	8000427a <main+0x132>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000426e:	14 38       	cp.w	r8,r10
80004270:	fe 98 ff fa 	brls	80004264 <main+0x11c>
80004274:	14 39       	cp.w	r9,r10
80004276:	c0 73       	brcs	80004284 <main+0x13c>
80004278:	cf 6b       	rjmp	80004264 <main+0x11c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000427a:	14 38       	cp.w	r8,r10
8000427c:	e0 8b 00 04 	brhi	80004284 <main+0x13c>
80004280:	14 39       	cp.w	r9,r10
80004282:	cf 12       	brcc	80004264 <main+0x11c>
	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	CLR_disp();

	while(pwm_channel6.cdty < pwm_channel6.cprd){
80004284:	6e 18       	ld.w	r8,r7[0x4]
80004286:	6e 29       	ld.w	r9,r7[0x8]
80004288:	12 38       	cp.w	r8,r9
8000428a:	ce 23       	brcs	8000424e <main+0x106>
		pwm_channel6.cupd = pwm_channel6.cdty;
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
		delay_ms(1);
	}//PWM

	CLR_disp();
8000428c:	f0 1f 01 8b 	mcall	800048b8 <main+0x770>
	et024006_PrintString("Welcome", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80004290:	fe f4 06 30 	ld.w	r4,pc[1584]
80004294:	3f f7       	mov	r7,-1
80004296:	1a d7       	st.w	--sp,r7
80004298:	e0 68 ff ff 	mov	r8,65535
8000429c:	31 e9       	mov	r9,30
8000429e:	12 9a       	mov	r10,r9
800042a0:	08 9b       	mov	r11,r4
800042a2:	fe fc 06 22 	ld.w	r12,pc[1570]
800042a6:	f0 1f 01 89 	mcall	800048c8 <main+0x780>
	et024006_PrintString("No keys pressed yet", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
800042aa:	1a d7       	st.w	--sp,r7
800042ac:	e0 68 ff ff 	mov	r8,65535
800042b0:	e0 69 00 c8 	mov	r9,200
800042b4:	31 ea       	mov	r10,30
800042b6:	08 9b       	mov	r11,r4
800042b8:	fe fc 06 14 	ld.w	r12,pc[1556]
800042bc:	f0 1f 01 83 	mcall	800048c8 <main+0x780>
800042c0:	2f ed       	sub	sp,-8
				//usart_char = '0';
				usart_message_rx_complete=0;

				for (short i = 0; i<50; i++){
					local_pdca_init_usart();//hace configuracion USART DMA y activa con enable
					while (usart_char_rx_complete); //waits for char.  activated by the handler
800042c2:	fe f7 06 0e 	ld.w	r7,pc[1550]
	CLR_disp();
	et024006_PrintString("Welcome", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
	et024006_PrintString("No keys pressed yet", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);

	while (1){
		switch (state){
800042c6:	fe f8 05 9a 	ld.w	r8,pc[1434]
800042ca:	70 08       	ld.w	r8,r8[0x0]
800042cc:	58 38       	cp.w	r8,3
800042ce:	e0 80 00 a4 	breq	80004416 <main+0x2ce>
800042d2:	e0 89 00 07 	brgt	800042e0 <main+0x198>
800042d6:	58 18       	cp.w	r8,1
800042d8:	c0 b0       	breq	800042ee <main+0x1a6>
800042da:	58 28       	cp.w	r8,2
800042dc:	cf 51       	brne	800042c6 <main+0x17e>
800042de:	c7 48       	rjmp	800043c6 <main+0x27e>
800042e0:	58 48       	cp.w	r8,4
800042e2:	e0 80 01 57 	breq	80004590 <main+0x448>
800042e6:	58 58       	cp.w	r8,5
800042e8:	ce f1       	brne	800042c6 <main+0x17e>
800042ea:	e0 8f 01 fa 	bral	800046de <main+0x596>

			case 0://Do nothing
			break;

			case 1:
				CLR_disp();
800042ee:	f0 1f 01 73 	mcall	800048b8 <main+0x770>
				et024006_PrintString("Getting Message ... ", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
800042f2:	3f f5       	mov	r5,-1
800042f4:	1a d5       	st.w	--sp,r5
800042f6:	e0 68 ff ff 	mov	r8,65535
800042fa:	31 e9       	mov	r9,30
800042fc:	12 9a       	mov	r10,r9
800042fe:	08 9b       	mov	r11,r4
80004300:	fe fc 05 d4 	ld.w	r12,pc[1492]
80004304:	f0 1f 01 71 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Last key pressed: UP", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
80004308:	1a d5       	st.w	--sp,r5
8000430a:	e0 68 ff ff 	mov	r8,65535
8000430e:	e0 69 00 c8 	mov	r9,200
80004312:	31 ea       	mov	r10,30
80004314:	08 9b       	mov	r11,r4
80004316:	fe fc 05 c2 	ld.w	r12,pc[1474]
8000431a:	f0 1f 01 6c 	mcall	800048c8 <main+0x780>
8000431e:	30 08       	mov	r8,0
80004320:	2f ed       	sub	sp,-8

				for(short i=0; i<sizeof(usart_message);i++){
					usart_message[i] = 0x000;
80004322:	fe fa 05 ba 	ld.w	r10,pc[1466]
80004326:	30 09       	mov	r9,0
80004328:	f4 08 0b 09 	st.b	r10[r8],r9
8000432c:	2f f8       	sub	r8,-1
			case 1:
				CLR_disp();
				et024006_PrintString("Getting Message ... ", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
				et024006_PrintString("Last key pressed: UP", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);

				for(short i=0; i<sizeof(usart_message);i++){
8000432e:	e0 48 00 32 	cp.w	r8,50
80004332:	cf b1       	brne	80004328 <main+0x1e0>
					usart_message[i] = 0x000;
				}//For

				//usart_char = '0';
				usart_message_rx_complete=0;
80004334:	30 09       	mov	r9,0
80004336:	fe f8 05 aa 	ld.w	r8,pc[1450]
8000433a:	b0 89       	st.b	r8[0x0],r9
8000433c:	30 05       	mov	r5,0

				for (short i = 0; i<50; i++){
					local_pdca_init_usart();//hace configuracion USART DMA y activa con enable
					while (usart_char_rx_complete); //waits for char.  activated by the handler
					usart_char_rx_complete=0;
8000433e:	12 91       	mov	r1,r9

					if (usart_char == '0'){
80004340:	fe f2 05 a4 	ld.w	r2,pc[1444]
						et024006_PrintString("char0", (const unsigned char *)&FONT8x8, 100, 190, WHITE, -1);
						break;
					}//If

					et024006_PrintString("bfnull", (const unsigned char *)&FONT8x8, 100, 100, WHITE, -1);
80004344:	3f f0       	mov	r0,-1

				//usart_char = '0';
				usart_message_rx_complete=0;

				for (short i = 0; i<50; i++){
					local_pdca_init_usart();//hace configuracion USART DMA y activa con enable
80004346:	f0 1f 01 69 	mcall	800048e8 <main+0x7a0>
					while (usart_char_rx_complete); //waits for char.  activated by the handler
8000434a:	0f 88       	ld.ub	r8,r7[0x0]
8000434c:	58 08       	cp.w	r8,0
8000434e:	cf e1       	brne	8000434a <main+0x202>
					usart_char_rx_complete=0;
80004350:	ae 81       	st.b	r7[0x0],r1

					if (usart_char == '0'){
80004352:	64 08       	ld.w	r8,r2[0x0]
80004354:	e0 48 00 30 	cp.w	r8,48
80004358:	c0 f1       	brne	80004376 <main+0x22e>
						et024006_PrintString("char0", (const unsigned char *)&FONT8x8, 100, 190, WHITE, -1);
8000435a:	3f f8       	mov	r8,-1
8000435c:	1a d8       	st.w	--sp,r8
8000435e:	e0 68 ff ff 	mov	r8,65535
80004362:	e0 69 00 be 	mov	r9,190
80004366:	36 4a       	mov	r10,100
80004368:	08 9b       	mov	r11,r4
8000436a:	fe fc 05 82 	ld.w	r12,pc[1410]
8000436e:	f0 1f 01 57 	mcall	800048c8 <main+0x780>
						break;
80004372:	2f fd       	sub	sp,-4
80004374:	c2 48       	rjmp	800043bc <main+0x274>
					}//If

					et024006_PrintString("bfnull", (const unsigned char *)&FONT8x8, 100, 100, WHITE, -1);
80004376:	1a d0       	st.w	--sp,r0
80004378:	e0 68 ff ff 	mov	r8,65535
8000437c:	36 49       	mov	r9,100
8000437e:	12 9a       	mov	r10,r9
80004380:	08 9b       	mov	r11,r4
80004382:	fe fc 05 6e 	ld.w	r12,pc[1390]
80004386:	f0 1f 01 51 	mcall	800048c8 <main+0x780>

					if (usart_char != 0x000){ //if it is not null
8000438a:	64 08       	ld.w	r8,r2[0x0]
8000438c:	2f fd       	sub	sp,-4
8000438e:	58 08       	cp.w	r8,0
80004390:	c1 20       	breq	800043b4 <main+0x26c>
						usart_message [i]= usart_char;
80004392:	64 08       	ld.w	r8,r2[0x0]
80004394:	fe f9 05 48 	ld.w	r9,pc[1352]
80004398:	f2 05 0b 08 	st.b	r9[r5],r8
						et024006_PrintString("nonull", (const unsigned char *)&FONT8x8, 100, 170, WHITE, -1);
8000439c:	1a d0       	st.w	--sp,r0
8000439e:	e0 68 ff ff 	mov	r8,65535
800043a2:	e0 69 00 aa 	mov	r9,170
800043a6:	36 4a       	mov	r10,100
800043a8:	08 9b       	mov	r11,r4
800043aa:	fe fc 05 4a 	ld.w	r12,pc[1354]
800043ae:	f0 1f 01 47 	mcall	800048c8 <main+0x780>
800043b2:	2f fd       	sub	sp,-4
800043b4:	2f f5       	sub	r5,-1
				}//For

				//usart_char = '0';
				usart_message_rx_complete=0;

				for (short i = 0; i<50; i++){
800043b6:	e0 45 00 32 	cp.w	r5,50
800043ba:	cc 61       	brne	80004346 <main+0x1fe>
					}//if

				}//for

				//usart_message_rx_complete=1; // there are 50 chars
				state = 0;
800043bc:	30 09       	mov	r9,0
800043be:	fe f8 04 a2 	ld.w	r8,pc[1186]
800043c2:	91 09       	st.w	r8[0x0],r9

			break;
800043c4:	c8 1b       	rjmp	800042c6 <main+0x17e>

			case 2://Show the received message
				CLR_disp();
800043c6:	f0 1f 01 3d 	mcall	800048b8 <main+0x770>
				et024006_PrintString("Received Message:", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
800043ca:	3f f5       	mov	r5,-1
800043cc:	1a d5       	st.w	--sp,r5
800043ce:	e0 68 ff ff 	mov	r8,65535
800043d2:	31 e9       	mov	r9,30
800043d4:	12 9a       	mov	r10,r9
800043d6:	08 9b       	mov	r11,r4
800043d8:	fe fc 05 20 	ld.w	r12,pc[1312]
800043dc:	f0 1f 01 3b 	mcall	800048c8 <main+0x780>
				et024006_PrintString(usart_message, (const unsigned char *)&FONT8x8, 30, 50, WHITE, -1);
800043e0:	1a d5       	st.w	--sp,r5
800043e2:	e0 68 ff ff 	mov	r8,65535
800043e6:	33 29       	mov	r9,50
800043e8:	31 ea       	mov	r10,30
800043ea:	08 9b       	mov	r11,r4
800043ec:	fe fc 04 f0 	ld.w	r12,pc[1264]
800043f0:	f0 1f 01 36 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Last key pressed: DOWN", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
800043f4:	1a d5       	st.w	--sp,r5
800043f6:	e0 68 ff ff 	mov	r8,65535
800043fa:	e0 69 00 c8 	mov	r9,200
800043fe:	31 ea       	mov	r10,30
80004400:	08 9b       	mov	r11,r4
80004402:	fe fc 04 fa 	ld.w	r12,pc[1274]
80004406:	f0 1f 01 31 	mcall	800048c8 <main+0x780>
				state = 0;
8000440a:	30 09       	mov	r9,0
8000440c:	fe f8 04 54 	ld.w	r8,pc[1108]
80004410:	91 09       	st.w	r8[0x0],r9
			break;
80004412:	2f dd       	sub	sp,-12
80004414:	c5 9b       	rjmp	800042c6 <main+0x17e>

			case 3://Store message in SD
				CLR_disp();
80004416:	f0 1f 01 29 	mcall	800048b8 <main+0x770>
				et024006_PrintString("Last key pressed: RIGHT", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
8000441a:	3f f8       	mov	r8,-1
8000441c:	1a d8       	st.w	--sp,r8
8000441e:	e0 68 ff ff 	mov	r8,65535
80004422:	e0 69 00 c8 	mov	r9,200
80004426:	31 ea       	mov	r10,30
80004428:	08 9b       	mov	r11,r4
8000442a:	fe fc 04 d6 	ld.w	r12,pc[1238]
8000442e:	f0 1f 01 27 	mcall	800048c8 <main+0x780>
				if(sd_mmc_spi_mem_check()){
80004432:	f0 1f 01 1b 	mcall	8000489c <main+0x754>
80004436:	2f fd       	sub	sp,-4
80004438:	58 0c       	cp.w	r12,0
8000443a:	c7 20       	breq	8000451e <main+0x3d6>
					if(usart_message_rx_complete){
8000443c:	fe f8 04 a4 	ld.w	r8,pc[1188]
80004440:	11 88       	ld.ub	r8,r8[0x0]
80004442:	58 08       	cp.w	r8,0
80004444:	c5 30       	breq	800044ea <main+0x3a2>
						Sector_Counter=(Sector_Counter % 5)+1;//Increase current sector
80004446:	fe f2 04 be 	ld.w	r2,pc[1214]
8000444a:	05 88       	ld.ub	r8,r2[0x0]
8000444c:	e0 6b cc cd 	mov	r11,52429
80004450:	ea 1b cc cc 	orh	r11,0xcccc
80004454:	f0 0b 06 4a 	mulu.d	r10,r8,r11
80004458:	f6 09 16 02 	lsr	r9,r11,0x2
8000445c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004460:	12 18       	sub	r8,r9
80004462:	2f f8       	sub	r8,-1
80004464:	a4 88       	st.b	r2[0x0],r8
						sd_mmc_spi_write_open (Sector_Counter); //Write in a Sector
80004466:	05 8c       	ld.ub	r12,r2[0x0]
80004468:	f0 1f 01 28 	mcall	80004908 <main+0x7c0>
						sd_mmc_spi_write_sector_from_ram(&usart_message);
8000446c:	fe f1 04 70 	ld.w	r1,pc[1136]
80004470:	02 9c       	mov	r12,r1
80004472:	f0 1f 01 27 	mcall	8000490c <main+0x7c4>
						sd_mmc_spi_write_close ();
80004476:	f0 1f 01 27 	mcall	80004910 <main+0x7c8>
						et024006_PrintString("Message successfully stored", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
8000447a:	3f f5       	mov	r5,-1
8000447c:	1a d5       	st.w	--sp,r5
8000447e:	e0 68 ff ff 	mov	r8,65535
80004482:	31 e9       	mov	r9,30
80004484:	12 9a       	mov	r10,r9
80004486:	08 9b       	mov	r11,r4
80004488:	fe fc 04 8c 	ld.w	r12,pc[1164]
8000448c:	f0 1f 01 0f 	mcall	800048c8 <main+0x780>
						sector_counter_print[0] = Sector_Counter+'0';
80004490:	05 88       	ld.ub	r8,r2[0x0]
80004492:	fe f2 04 86 	ld.w	r2,pc[1158]
80004496:	2d 08       	sub	r8,-48
80004498:	a4 88       	st.b	r2[0x0],r8
						et024006_PrintString("Sector:", (const unsigned char *)&FONT8x8, 30, 50, WHITE, -1);
8000449a:	1a d5       	st.w	--sp,r5
8000449c:	e0 68 ff ff 	mov	r8,65535
800044a0:	33 29       	mov	r9,50
800044a2:	31 ea       	mov	r10,30
800044a4:	08 9b       	mov	r11,r4
800044a6:	fe fc 04 76 	ld.w	r12,pc[1142]
800044aa:	f0 1f 01 08 	mcall	800048c8 <main+0x780>
						et024006_PrintString(sector_counter_print, (const unsigned char *)&FONT8x8, 100, 50, WHITE, -1);
800044ae:	1a d5       	st.w	--sp,r5
800044b0:	e0 68 ff ff 	mov	r8,65535
800044b4:	33 29       	mov	r9,50
800044b6:	36 4a       	mov	r10,100
800044b8:	08 9b       	mov	r11,r4
800044ba:	04 9c       	mov	r12,r2
800044bc:	f0 1f 01 03 	mcall	800048c8 <main+0x780>
						et024006_PrintString("Message:", (const unsigned char *)&FONT8x8, 30, 70, WHITE, -1);
800044c0:	1a d5       	st.w	--sp,r5
800044c2:	e0 68 ff ff 	mov	r8,65535
800044c6:	34 69       	mov	r9,70
800044c8:	31 ea       	mov	r10,30
800044ca:	08 9b       	mov	r11,r4
800044cc:	fe fc 04 54 	ld.w	r12,pc[1108]
800044d0:	f0 1f 00 fe 	mcall	800048c8 <main+0x780>
						et024006_PrintString(usart_message, (const unsigned char *)&FONT8x8, 30, 90, WHITE, -1);
800044d4:	1a d5       	st.w	--sp,r5
800044d6:	e0 68 ff ff 	mov	r8,65535
800044da:	35 a9       	mov	r9,90
800044dc:	31 ea       	mov	r10,30
800044de:	08 9b       	mov	r11,r4
800044e0:	02 9c       	mov	r12,r1
800044e2:	f0 1f 00 fa 	mcall	800048c8 <main+0x780>
800044e6:	2f bd       	sub	sp,-20
800044e8:	c4 e8       	rjmp	80004584 <main+0x43c>
					} else {
						CLR_disp();
800044ea:	f0 1f 00 f4 	mcall	800048b8 <main+0x770>
						et024006_PrintString("Last key pressed: RIGHT", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
800044ee:	3f f5       	mov	r5,-1
800044f0:	1a d5       	st.w	--sp,r5
800044f2:	e0 68 ff ff 	mov	r8,65535
800044f6:	e0 69 00 c8 	mov	r9,200
800044fa:	31 ea       	mov	r10,30
800044fc:	08 9b       	mov	r11,r4
800044fe:	fe fc 04 02 	ld.w	r12,pc[1026]
80004502:	f0 1f 00 f2 	mcall	800048c8 <main+0x780>
						et024006_PrintString("Message has not been received", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80004506:	1a d5       	st.w	--sp,r5
80004508:	e0 68 ff ff 	mov	r8,65535
8000450c:	31 e9       	mov	r9,30
8000450e:	12 9a       	mov	r10,r9
80004510:	08 9b       	mov	r11,r4
80004512:	fe fc 04 12 	ld.w	r12,pc[1042]
80004516:	f0 1f 00 ed 	mcall	800048c8 <main+0x780>
8000451a:	2f ed       	sub	sp,-8
8000451c:	c3 48       	rjmp	80004584 <main+0x43c>
					}//If empty message
				} else {
					CLR_disp();
8000451e:	f0 1f 00 e7 	mcall	800048b8 <main+0x770>
					et024006_PrintString("Last key pressed: RIGHT", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
80004522:	3f f7       	mov	r7,-1
80004524:	1a d7       	st.w	--sp,r7
80004526:	e0 68 ff ff 	mov	r8,65535
8000452a:	e0 69 00 c8 	mov	r9,200
8000452e:	31 ea       	mov	r10,30
80004530:	08 9b       	mov	r11,r4
80004532:	fe fc 03 ce 	ld.w	r12,pc[974]
80004536:	f0 1f 00 e5 	mcall	800048c8 <main+0x780>
					et024006_PrintString("No SD card detected: ", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
8000453a:	1a d7       	st.w	--sp,r7
8000453c:	e0 68 ff ff 	mov	r8,65535
80004540:	31 e9       	mov	r9,30
80004542:	12 9a       	mov	r10,r9
80004544:	08 9b       	mov	r11,r4
80004546:	fe fc 03 e2 	ld.w	r12,pc[994]
8000454a:	f0 1f 00 e0 	mcall	800048c8 <main+0x780>
					et024006_PrintString("Will reinit the system ", (const unsigned char *)&FONT8x8, 30, 50, WHITE, -1);
8000454e:	1a d7       	st.w	--sp,r7
80004550:	e0 68 ff ff 	mov	r8,65535
80004554:	33 29       	mov	r9,50
80004556:	31 ea       	mov	r10,30
80004558:	08 9b       	mov	r11,r4
8000455a:	fe fc 03 d2 	ld.w	r12,pc[978]
8000455e:	f0 1f 00 db 	mcall	800048c8 <main+0x780>
					et024006_PrintString("Waiting for SD card ...", (const unsigned char *)&FONT8x8, 30, 70, WHITE, -1);
80004562:	1a d7       	st.w	--sp,r7
80004564:	e0 68 ff ff 	mov	r8,65535
80004568:	34 69       	mov	r9,70
8000456a:	31 ea       	mov	r10,30
8000456c:	08 9b       	mov	r11,r4
8000456e:	fe fc 03 c2 	ld.w	r12,pc[962]
80004572:	f0 1f 00 d6 	mcall	800048c8 <main+0x780>
					state = 0;
80004576:	30 09       	mov	r9,0
80004578:	fe f8 02 e8 	ld.w	r8,pc[744]
8000457c:	91 09       	st.w	r8[0x0],r9
					goto REINIT;//wait for SD to be reinserted Re-init everything
8000457e:	2f cd       	sub	sp,-16
80004580:	fe 9f fe 3b 	bral	800041f6 <main+0xae>
				}//If check mem
				state=0;
80004584:	30 09       	mov	r9,0
80004586:	fe f8 02 da 	ld.w	r8,pc[730]
8000458a:	91 09       	st.w	r8[0x0],r9
			break;
8000458c:	fe 9f fe 9d 	bral	800042c6 <main+0x17e>

			case 4://Swhow last stored value and its sector

				CLR_disp();
80004590:	f0 1f 00 ca 	mcall	800048b8 <main+0x770>
				et024006_PrintString("Last key pressed: LEFT", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
80004594:	3f f5       	mov	r5,-1
80004596:	1a d5       	st.w	--sp,r5
80004598:	e0 68 ff ff 	mov	r8,65535
8000459c:	e0 69 00 c8 	mov	r9,200
800045a0:	31 ea       	mov	r10,30
800045a2:	08 9b       	mov	r11,r4
800045a4:	fe fc 03 90 	ld.w	r12,pc[912]
800045a8:	f0 1f 00 c8 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Last written sector:", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
800045ac:	1a d5       	st.w	--sp,r5
800045ae:	e0 68 ff ff 	mov	r8,65535
800045b2:	31 e9       	mov	r9,30
800045b4:	12 9a       	mov	r10,r9
800045b6:	08 9b       	mov	r11,r4
800045b8:	fe fc 03 80 	ld.w	r12,pc[896]
800045bc:	f0 1f 00 c3 	mcall	800048c8 <main+0x780>
				sector_counter_print[0] = Sector_Counter+'0';
800045c0:	fe f2 03 44 	ld.w	r2,pc[836]
800045c4:	05 88       	ld.ub	r8,r2[0x0]
800045c6:	fe fc 03 52 	ld.w	r12,pc[850]
800045ca:	2d 08       	sub	r8,-48
800045cc:	b8 88       	st.b	r12[0x0],r8
				et024006_PrintString(sector_counter_print, (const unsigned char *)&FONT8x8, 200, 30, WHITE, -1);
800045ce:	1a d5       	st.w	--sp,r5
800045d0:	e0 68 ff ff 	mov	r8,65535
800045d4:	31 e9       	mov	r9,30
800045d6:	e0 6a 00 c8 	mov	r10,200
800045da:	08 9b       	mov	r11,r4
800045dc:	f0 1f 00 bb 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Message:", (const unsigned char *)&FONT8x8, 30, 50, WHITE, -1);
800045e0:	1a d5       	st.w	--sp,r5
800045e2:	e0 68 ff ff 	mov	r8,65535
800045e6:	33 29       	mov	r9,50
800045e8:	31 ea       	mov	r10,30
800045ea:	08 9b       	mov	r11,r4
800045ec:	fe fc 03 34 	ld.w	r12,pc[820]
800045f0:	f0 1f 00 b6 	mcall	800048c8 <main+0x780>

				//Read SD
				pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_RX, &ram_buffer,512);
800045f4:	e0 6a 02 00 	mov	r10,512
800045f8:	fe fb 03 44 	ld.w	r11,pc[836]
800045fc:	30 1c       	mov	r12,1
800045fe:	f0 1f 00 d1 	mcall	80004940 <main+0x7f8>
				pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_TX,(void *)&dummy_data,512); //send dummy
80004602:	e0 6a 02 00 	mov	r10,512
80004606:	fe fb 03 3e 	ld.w	r11,pc[830]
8000460a:	30 2c       	mov	r12,2
8000460c:	f0 1f 00 cd 	mcall	80004940 <main+0x7f8>
				end_of_transfer = false;
80004610:	30 08       	mov	r8,0
80004612:	a6 88       	st.b	r3[0x0],r8
				if(sd_mmc_spi_read_open_PDCA (Sector_Counter)){
80004614:	05 8c       	ld.ub	r12,r2[0x0]
80004616:	f0 1f 00 cd 	mcall	80004948 <main+0x800>
8000461a:	2f cd       	sub	sp,-16
8000461c:	58 0c       	cp.w	r12,0
8000461e:	c2 e0       	breq	8000467a <main+0x532>
					spi_write(SD_MMC_SPI,0xFF); // Write a first dummy data to synchronize transfer
80004620:	e0 6b 00 ff 	mov	r11,255
80004624:	fe 7c 24 00 	mov	r12,-56320
80004628:	f0 1f 00 c9 	mcall	8000494c <main+0x804>
					pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
8000462c:	30 1c       	mov	r12,1
8000462e:	f0 1f 00 c9 	mcall	80004950 <main+0x808>
					pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
80004632:	30 1c       	mov	r12,1
80004634:	f0 1f 00 c8 	mcall	80004954 <main+0x80c>
					pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
80004638:	30 2c       	mov	r12,2
8000463a:	f0 1f 00 c7 	mcall	80004954 <main+0x80c>
					while(!end_of_transfer);
8000463e:	07 88       	ld.ub	r8,r3[0x0]
80004640:	58 08       	cp.w	r8,0
80004642:	cf e0       	breq	8000463e <main+0x4f6>
80004644:	30 08       	mov	r8,0
void init_button_interrupt(void);


/**************************************************************************/

int main(void){
80004646:	fe fa 02 f6 	ld.w	r10,pc[758]
8000464a:	f0 0a 00 09 	add	r9,r8,r10
					pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
					pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
					pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
					while(!end_of_transfer);
					for( i = 0; i < 25; i++){ //First 50 chars
						usart_message_print[i] = (U8)(*(ram_buffer + i));
8000464e:	13 89       	ld.ub	r9,r9[0x0]
80004650:	ec 08 0b 09 	st.b	r6[r8],r9
					spi_write(SD_MMC_SPI,0xFF); // Write a first dummy data to synchronize transfer
					pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
					pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
					pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
					while(!end_of_transfer);
					for( i = 0; i < 25; i++){ //First 50 chars
80004654:	2f f8       	sub	r8,-1
80004656:	59 98       	cp.w	r8,25
80004658:	cf 91       	brne	8000464a <main+0x502>
						usart_message_print[i] = (U8)(*(ram_buffer + i));
					}//For
					et024006_PrintString(usart_message_print, (const unsigned char *)&FONT8x8, 30, 70, WHITE, -1);
8000465a:	3f f8       	mov	r8,-1
8000465c:	1a d8       	st.w	--sp,r8
8000465e:	e0 68 ff ff 	mov	r8,65535
80004662:	34 69       	mov	r9,70
80004664:	31 ea       	mov	r10,30
80004666:	08 9b       	mov	r11,r4
80004668:	40 2c       	lddsp	r12,sp[0x8]
8000466a:	f0 1f 00 98 	mcall	800048c8 <main+0x780>
					et024006_PrintString("Waiting for SD card ...", (const unsigned char *)&FONT8x8, 30, 70, WHITE, -1);
					state = 0;
					goto REINIT;//wait for SD to be reinserted Re-init everything
				}//IF

				state = 0;
8000466e:	30 09       	mov	r9,0
80004670:	4f c8       	lddpc	r8,80004860 <main+0x718>
80004672:	91 09       	st.w	r8[0x0],r9
			break;
80004674:	2f fd       	sub	sp,-4
80004676:	fe 9f fe 28 	bral	800042c6 <main+0x17e>
					for( i = 0; i < 25; i++){ //First 50 chars
						usart_message_print[i] = (U8)(*(ram_buffer + i));
					}//For
					et024006_PrintString(usart_message_print, (const unsigned char *)&FONT8x8, 30, 70, WHITE, -1);
				}else{
					CLR_disp();
8000467a:	f0 1f 00 90 	mcall	800048b8 <main+0x770>
					et024006_PrintString("Last key pressed: LEFT", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
8000467e:	3f f7       	mov	r7,-1
80004680:	1a d7       	st.w	--sp,r7
80004682:	e0 68 ff ff 	mov	r8,65535
80004686:	e0 69 00 c8 	mov	r9,200
8000468a:	31 ea       	mov	r10,30
8000468c:	08 9b       	mov	r11,r4
8000468e:	fe fc 02 a6 	ld.w	r12,pc[678]
80004692:	f0 1f 00 8e 	mcall	800048c8 <main+0x780>
					et024006_PrintString("No SD card detected: ", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80004696:	1a d7       	st.w	--sp,r7
80004698:	e0 68 ff ff 	mov	r8,65535
8000469c:	31 e9       	mov	r9,30
8000469e:	12 9a       	mov	r10,r9
800046a0:	08 9b       	mov	r11,r4
800046a2:	fe fc 02 86 	ld.w	r12,pc[646]
800046a6:	f0 1f 00 89 	mcall	800048c8 <main+0x780>
					et024006_PrintString("Will reinit the system ", (const unsigned char *)&FONT8x8, 30, 50, WHITE, -1);
800046aa:	1a d7       	st.w	--sp,r7
800046ac:	e0 68 ff ff 	mov	r8,65535
800046b0:	33 29       	mov	r9,50
800046b2:	31 ea       	mov	r10,30
800046b4:	08 9b       	mov	r11,r4
800046b6:	fe fc 02 76 	ld.w	r12,pc[630]
800046ba:	f0 1f 00 84 	mcall	800048c8 <main+0x780>
					et024006_PrintString("Waiting for SD card ...", (const unsigned char *)&FONT8x8, 30, 70, WHITE, -1);
800046be:	1a d7       	st.w	--sp,r7
800046c0:	e0 68 ff ff 	mov	r8,65535
800046c4:	34 69       	mov	r9,70
800046c6:	31 ea       	mov	r10,30
800046c8:	08 9b       	mov	r11,r4
800046ca:	fe fc 02 66 	ld.w	r12,pc[614]
800046ce:	f0 1f 00 7f 	mcall	800048c8 <main+0x780>
					state = 0;
800046d2:	30 09       	mov	r9,0
800046d4:	4e 38       	lddpc	r8,80004860 <main+0x718>
800046d6:	91 09       	st.w	r8[0x0],r9
					goto REINIT;//wait for SD to be reinserted Re-init everything
800046d8:	2f cd       	sub	sp,-16
800046da:	fe 9f fd 8e 	bral	800041f6 <main+0xae>

				state = 0;
			break;

			case 5://Show stored messages
			  CLR_disp();
800046de:	f0 1f 00 77 	mcall	800048b8 <main+0x770>
				et024006_PrintString("Last key pressed: CENTER", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
800046e2:	3f f5       	mov	r5,-1
800046e4:	1a d5       	st.w	--sp,r5
800046e6:	e0 68 ff ff 	mov	r8,65535
800046ea:	e0 69 00 c8 	mov	r9,200
800046ee:	31 ea       	mov	r10,30
800046f0:	08 9b       	mov	r11,r4
800046f2:	fe fc 02 66 	ld.w	r12,pc[614]
800046f6:	f0 1f 00 75 	mcall	800048c8 <main+0x780>
				et024006_PrintString("The SD card data is shown below:", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
800046fa:	1a d5       	st.w	--sp,r5
800046fc:	e0 68 ff ff 	mov	r8,65535
80004700:	31 e9       	mov	r9,30
80004702:	12 9a       	mov	r10,r9
80004704:	08 9b       	mov	r11,r4
80004706:	fe fc 02 56 	ld.w	r12,pc[598]
8000470a:	f0 1f 00 70 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Sector 1:", (const unsigned char *)&FONT8x8, 30, 50, WHITE, -1);
8000470e:	1a d5       	st.w	--sp,r5
80004710:	e0 68 ff ff 	mov	r8,65535
80004714:	33 29       	mov	r9,50
80004716:	31 ea       	mov	r10,30
80004718:	08 9b       	mov	r11,r4
8000471a:	fe fc 02 46 	ld.w	r12,pc[582]
8000471e:	f0 1f 00 6b 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Sector 2:", (const unsigned char *)&FONT8x8, 30, 70, WHITE, -1);
80004722:	1a d5       	st.w	--sp,r5
80004724:	e0 68 ff ff 	mov	r8,65535
80004728:	34 69       	mov	r9,70
8000472a:	31 ea       	mov	r10,30
8000472c:	08 9b       	mov	r11,r4
8000472e:	fe fc 02 36 	ld.w	r12,pc[566]
80004732:	f0 1f 00 66 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Sector 3:", (const unsigned char *)&FONT8x8, 30, 90, WHITE, -1);
80004736:	1a d5       	st.w	--sp,r5
80004738:	e0 68 ff ff 	mov	r8,65535
8000473c:	35 a9       	mov	r9,90
8000473e:	31 ea       	mov	r10,30
80004740:	08 9b       	mov	r11,r4
80004742:	fe fc 02 26 	ld.w	r12,pc[550]
80004746:	f0 1f 00 61 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Sector 4:", (const unsigned char *)&FONT8x8, 30, 110, WHITE, -1);
8000474a:	1a d5       	st.w	--sp,r5
8000474c:	e0 68 ff ff 	mov	r8,65535
80004750:	36 e9       	mov	r9,110
80004752:	31 ea       	mov	r10,30
80004754:	08 9b       	mov	r11,r4
80004756:	fe fc 02 16 	ld.w	r12,pc[534]
8000475a:	f0 1f 00 5c 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Sector 5:", (const unsigned char *)&FONT8x8, 30, 130, WHITE, -1);
8000475e:	1a d5       	st.w	--sp,r5
80004760:	e0 68 ff ff 	mov	r8,65535
80004764:	e0 69 00 82 	mov	r9,130
80004768:	31 ea       	mov	r10,30
8000476a:	08 9b       	mov	r11,r4
8000476c:	fe fc 02 04 	ld.w	r12,pc[516]
80004770:	f0 1f 00 56 	mcall	800048c8 <main+0x780>
80004774:	33 20       	mov	r0,50
80004776:	30 12       	mov	r2,1
80004778:	2f 9d       	sub	sp,-28

				//Read SD
				for(j = 1; j <= 5; j++){ //5 Sectors
					pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_RX, &ram_buffer,512);
8000477a:	4f 15       	lddpc	r5,8000493c <main+0x7f4>
8000477c:	04 91       	mov	r1,r2
8000477e:	e0 6a 02 00 	mov	r10,512
80004782:	0a 9b       	mov	r11,r5
80004784:	02 9c       	mov	r12,r1
80004786:	f0 1f 00 6f 	mcall	80004940 <main+0x7f8>
					pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_TX,(void *)&dummy_data,512); //send dummy
8000478a:	e0 6a 02 00 	mov	r10,512
8000478e:	4e eb       	lddpc	r11,80004944 <main+0x7fc>
80004790:	30 2c       	mov	r12,2
80004792:	f0 1f 00 6c 	mcall	80004940 <main+0x7f8>
					end_of_transfer = false;
80004796:	30 08       	mov	r8,0
80004798:	a6 88       	st.b	r3[0x0],r8
					if(sd_mmc_spi_read_open_PDCA (j)){
8000479a:	04 9c       	mov	r12,r2
8000479c:	f0 1f 00 6b 	mcall	80004948 <main+0x800>
800047a0:	c2 c0       	breq	800047f8 <main+0x6b0>
						spi_write(SD_MMC_SPI,0xFF); // Write a first dummy data to synchronize transfer
800047a2:	e0 6b 00 ff 	mov	r11,255
800047a6:	fe 7c 24 00 	mov	r12,-56320
800047aa:	f0 1f 00 69 	mcall	8000494c <main+0x804>
						pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
800047ae:	02 9c       	mov	r12,r1
800047b0:	f0 1f 00 68 	mcall	80004950 <main+0x808>
						pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
800047b4:	02 9c       	mov	r12,r1
800047b6:	f0 1f 00 68 	mcall	80004954 <main+0x80c>
						pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
800047ba:	30 2c       	mov	r12,2
800047bc:	f0 1f 00 66 	mcall	80004954 <main+0x80c>
						while(!end_of_transfer);
800047c0:	07 88       	ld.ub	r8,r3[0x0]
800047c2:	58 08       	cp.w	r8,0
800047c4:	cf e0       	breq	800047c0 <main+0x678>
800047c6:	30 08       	mov	r8,0
void init_button_interrupt(void);


/**************************************************************************/

int main(void){
800047c8:	f0 05 00 09 	add	r9,r8,r5
						pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
						pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
						pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
						while(!end_of_transfer);
						for( i = 0; i < 25; i++){ //First 50 chars
							usart_message_print[i] = (U8)(*(ram_buffer + i));
800047cc:	13 89       	ld.ub	r9,r9[0x0]
800047ce:	ec 08 0b 09 	st.b	r6[r8],r9
						spi_write(SD_MMC_SPI,0xFF); // Write a first dummy data to synchronize transfer
						pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
						pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
						pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
						while(!end_of_transfer);
						for( i = 0; i < 25; i++){ //First 50 chars
800047d2:	2f f8       	sub	r8,-1
800047d4:	59 98       	cp.w	r8,25
800047d6:	cf 91       	brne	800047c8 <main+0x680>
							usart_message_print[i] = (U8)(*(ram_buffer + i));
						}//For
						et024006_PrintString(usart_message_print, (const unsigned char *)&FONT8x8, 100, 30+20*j, WHITE, -1);
800047d8:	3f f8       	mov	r8,-1
800047da:	1a d8       	st.w	--sp,r8
800047dc:	e0 68 ff ff 	mov	r8,65535
800047e0:	00 99       	mov	r9,r0
800047e2:	36 4a       	mov	r10,100
800047e4:	08 9b       	mov	r11,r4
800047e6:	40 1c       	lddsp	r12,sp[0x4]
800047e8:	f0 1f 00 38 	mcall	800048c8 <main+0x780>
				et024006_PrintString("Sector 3:", (const unsigned char *)&FONT8x8, 30, 90, WHITE, -1);
				et024006_PrintString("Sector 4:", (const unsigned char *)&FONT8x8, 30, 110, WHITE, -1);
				et024006_PrintString("Sector 5:", (const unsigned char *)&FONT8x8, 30, 130, WHITE, -1);

				//Read SD
				for(j = 1; j <= 5; j++){ //5 Sectors
800047ec:	2f f2       	sub	r2,-1
800047ee:	2e c0       	sub	r0,-20
800047f0:	2f fd       	sub	sp,-4
800047f2:	58 62       	cp.w	r2,6
800047f4:	cc 51       	brne	8000477e <main+0x636>
800047f6:	c2 f8       	rjmp	80004854 <main+0x70c>
						for( i = 0; i < 25; i++){ //First 50 chars
							usart_message_print[i] = (U8)(*(ram_buffer + i));
						}//For
						et024006_PrintString(usart_message_print, (const unsigned char *)&FONT8x8, 100, 30+20*j, WHITE, -1);
					}else{
						CLR_disp();
800047f8:	f0 1f 00 30 	mcall	800048b8 <main+0x770>
						et024006_PrintString("Last key pressed: CENTER", (const unsigned char *)&FONT8x8, 30, 200, WHITE, -1);
800047fc:	3f f7       	mov	r7,-1
800047fe:	1a d7       	st.w	--sp,r7
80004800:	e0 68 ff ff 	mov	r8,65535
80004804:	e0 69 00 c8 	mov	r9,200
80004808:	31 ea       	mov	r10,30
8000480a:	08 9b       	mov	r11,r4
8000480c:	4d 3c       	lddpc	r12,80004958 <main+0x810>
8000480e:	f0 1f 00 2f 	mcall	800048c8 <main+0x780>
						et024006_PrintString("No SD card detected: ", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80004812:	1a d7       	st.w	--sp,r7
80004814:	e0 68 ff ff 	mov	r8,65535
80004818:	31 e9       	mov	r9,30
8000481a:	12 9a       	mov	r10,r9
8000481c:	08 9b       	mov	r11,r4
8000481e:	4c 3c       	lddpc	r12,80004928 <main+0x7e0>
80004820:	f0 1f 00 2a 	mcall	800048c8 <main+0x780>
						et024006_PrintString("Will reinit the system ", (const unsigned char *)&FONT8x8, 30, 50, WHITE, -1);
80004824:	1a d7       	st.w	--sp,r7
80004826:	e0 68 ff ff 	mov	r8,65535
8000482a:	33 29       	mov	r9,50
8000482c:	31 ea       	mov	r10,30
8000482e:	08 9b       	mov	r11,r4
80004830:	4b fc       	lddpc	r12,8000492c <main+0x7e4>
80004832:	f0 1f 00 26 	mcall	800048c8 <main+0x780>
						et024006_PrintString("Waiting for SD card ...", (const unsigned char *)&FONT8x8, 30, 70, WHITE, -1);
80004836:	1a d7       	st.w	--sp,r7
80004838:	e0 68 ff ff 	mov	r8,65535
8000483c:	34 69       	mov	r9,70
8000483e:	31 ea       	mov	r10,30
80004840:	08 9b       	mov	r11,r4
80004842:	4b cc       	lddpc	r12,80004930 <main+0x7e8>
80004844:	f0 1f 00 21 	mcall	800048c8 <main+0x780>
						state = 0;
80004848:	30 09       	mov	r9,0
8000484a:	48 68       	lddpc	r8,80004860 <main+0x718>
8000484c:	91 09       	st.w	r8[0x0],r9
						goto REINIT;//wait for SD to be reinserted Re-init everything
8000484e:	2f cd       	sub	sp,-16
80004850:	fe 9f fc d3 	bral	800041f6 <main+0xae>
					}//IF
				}//For

				state = 0;
80004854:	30 09       	mov	r9,0
80004856:	48 38       	lddpc	r8,80004860 <main+0x718>
80004858:	91 09       	st.w	r8[0x0],r9
8000485a:	fe 9f fd 36 	bral	800042c6 <main+0x17e>
8000485e:	00 00       	add	r0,r0
80004860:	00 00       	add	r0,r0
80004862:	01 50       	ld.sh	r0,--r0
80004864:	80 00       	ld.sh	r0,r0[0x0]
80004866:	39 d0       	mov	r0,-99
80004868:	80 00       	ld.sh	r0,r0[0x0]
8000486a:	3e 30       	mov	r0,-29
8000486c:	80 02       	ld.sh	r2,r0[0x0]
8000486e:	b0 8c       	st.b	r8[0x0],r12
80004870:	80 00       	ld.sh	r0,r0[0x0]
80004872:	36 00       	mov	r0,96
80004874:	80 02       	ld.sh	r2,r0[0x0]
80004876:	b2 84       	st.b	r9[0x0],r4
80004878:	80 00       	ld.sh	r0,r0[0x0]
8000487a:	3d 28       	mov	r8,-46
8000487c:	80 02       	ld.sh	r2,r0[0x0]
8000487e:	b0 4c       	st.h	r8[0x8],r12
80004880:	80 02       	ld.sh	r2,r0[0x0]
80004882:	b2 b4       	st.b	r9[0x3],r4
80004884:	80 00       	ld.sh	r0,r0[0x0]
80004886:	3a d2       	mov	r2,-83
80004888:	80 00       	ld.sh	r0,r0[0x0]
8000488a:	3b 0a       	mov	r10,-80
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	3c 60       	mov	r0,-58
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	34 5c       	mov	r12,69
80004894:	00 00       	add	r0,r0
80004896:	03 88       	ld.ub	r8,r1[0x0]
80004898:	00 00       	add	r0,r0
8000489a:	07 bc       	ld.ub	r12,r3[0x3]
8000489c:	80 00       	ld.sh	r0,r0[0x0]
8000489e:	34 34       	mov	r4,67
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	3e a4       	mov	r4,-22
800048a4:	80 00       	ld.sh	r0,r0[0x0]
800048a6:	24 e4       	sub	r4,78
800048a8:	80 00       	ld.sh	r0,r0[0x0]
800048aa:	3a 6c       	mov	r12,-90
800048ac:	00 00       	add	r0,r0
800048ae:	00 08       	add	r8,r0
800048b0:	80 00       	ld.sh	r0,r0[0x0]
800048b2:	39 fc       	mov	r12,-97
800048b4:	80 00       	ld.sh	r0,r0[0x0]
800048b6:	3a 32       	mov	r2,-93
800048b8:	80 00       	ld.sh	r0,r0[0x0]
800048ba:	40 68       	lddsp	r8,sp[0x18]
800048bc:	80 00       	ld.sh	r0,r0[0x0]
800048be:	3a 44       	mov	r4,-92
800048c0:	80 00       	ld.sh	r0,r0[0x0]
800048c2:	50 00       	stdsp	sp[0x0],r0
800048c4:	80 02       	ld.sh	r2,r0[0x0]
800048c6:	b0 98       	st.b	r8[0x1],r8
800048c8:	80 00       	ld.sh	r0,r0[0x0]
800048ca:	20 a8       	sub	r8,10
800048cc:	80 02       	ld.sh	r2,r0[0x0]
800048ce:	b0 a0       	st.b	r8[0x2],r0
800048d0:	00 00       	add	r0,r0
800048d2:	01 4c       	ld.w	r12,--r0
800048d4:	80 02       	ld.sh	r2,r0[0x0]
800048d6:	b0 b4       	st.b	r8[0x3],r4
800048d8:	80 02       	ld.sh	r2,r0[0x0]
800048da:	b0 cc       	st.b	r8[0x4],r12
800048dc:	00 00       	add	r0,r0
800048de:	07 80       	ld.ub	r0,r3[0x0]
800048e0:	00 00       	add	r0,r0
800048e2:	01 44       	ld.w	r4,--r0
800048e4:	00 00       	add	r0,r0
800048e6:	07 b4       	ld.ub	r4,r3[0x3]
800048e8:	80 00       	ld.sh	r0,r0[0x0]
800048ea:	3f 78       	mov	r8,-9
800048ec:	80 02       	ld.sh	r2,r0[0x0]
800048ee:	b0 e4       	st.b	r8[0x6],r4
800048f0:	80 02       	ld.sh	r2,r0[0x0]
800048f2:	b0 ec       	st.b	r8[0x6],r12
800048f4:	80 02       	ld.sh	r2,r0[0x0]
800048f6:	b0 f4       	st.b	r8[0x7],r4
800048f8:	80 02       	ld.sh	r2,r0[0x0]
800048fa:	b0 fc       	st.b	r8[0x7],r12
800048fc:	80 02       	ld.sh	r2,r0[0x0]
800048fe:	b1 10       	ld.d	r0,--r8
80004900:	80 02       	ld.sh	r2,r0[0x0]
80004902:	b1 28       	st.d	r8++,r8
80004904:	00 00       	add	r0,r0
80004906:	01 58       	ld.sh	r8,--r0
80004908:	80 00       	ld.sh	r0,r0[0x0]
8000490a:	2b 7c       	sub	r12,-73
8000490c:	80 00       	ld.sh	r0,r0[0x0]
8000490e:	2d 1c       	sub	r12,-47
80004910:	80 00       	ld.sh	r0,r0[0x0]
80004912:	2a a4       	sub	r4,-86
80004914:	80 02       	ld.sh	r2,r0[0x0]
80004916:	b1 40       	asr	r0,0x10
80004918:	00 00       	add	r0,r0
8000491a:	07 b8       	ld.ub	r8,r3[0x3]
8000491c:	80 02       	ld.sh	r2,r0[0x0]
8000491e:	b1 5c       	asr	r12,0x11
80004920:	80 02       	ld.sh	r2,r0[0x0]
80004922:	b1 64       	lsl	r4,0x10
80004924:	80 02       	ld.sh	r2,r0[0x0]
80004926:	b1 70       	lsl	r0,0x11
80004928:	80 02       	ld.sh	r2,r0[0x0]
8000492a:	b1 90       	lsr	r0,0x11
8000492c:	80 02       	ld.sh	r2,r0[0x0]
8000492e:	b1 a8       	sbr	r8,0x10
80004930:	80 02       	ld.sh	r2,r0[0x0]
80004932:	b1 c0       	cbr	r0,0x10
80004934:	80 02       	ld.sh	r2,r0[0x0]
80004936:	b1 d8       	cbr	r8,0x11
80004938:	80 02       	ld.sh	r2,r0[0x0]
8000493a:	b1 f0       	*unknown*
8000493c:	00 00       	add	r0,r0
8000493e:	03 94       	ld.ub	r4,r1[0x1]
80004940:	80 00       	ld.sh	r0,r0[0x0]
80004942:	38 ac       	mov	r12,-118
80004944:	80 02       	ld.sh	r2,r0[0x0]
80004946:	ac 48       	st.h	r6[0x8],r8
80004948:	80 00       	ld.sh	r0,r0[0x0]
8000494a:	2e 7c       	sub	r12,-25
8000494c:	80 00       	ld.sh	r0,r0[0x0]
8000494e:	3c 66       	mov	r6,-58
80004950:	80 00       	ld.sh	r0,r0[0x0]
80004952:	38 4c       	mov	r12,-124
80004954:	80 00       	ld.sh	r0,r0[0x0]
80004956:	38 3c       	mov	r12,-125
80004958:	80 02       	ld.sh	r2,r0[0x0]
8000495a:	b2 08       	st.h	r9[0x0],r8
8000495c:	80 02       	ld.sh	r2,r0[0x0]
8000495e:	b2 24       	st.h	r9[0x4],r4
80004960:	80 02       	ld.sh	r2,r0[0x0]
80004962:	b2 48       	st.h	r9[0x8],r8
80004964:	80 02       	ld.sh	r2,r0[0x0]
80004966:	b2 54       	st.h	r9[0xa],r4
80004968:	80 02       	ld.sh	r2,r0[0x0]
8000496a:	b2 60       	st.h	r9[0xc],r0
8000496c:	80 02       	ld.sh	r2,r0[0x0]
8000496e:	b2 6c       	st.h	r9[0xc],r12
80004970:	80 02       	ld.sh	r2,r0[0x0]
80004972:	b2 78       	st.h	r9[0xe],r8

80004974 <__avr32_udiv64>:
80004974:	d4 31       	pushm	r0-r7,lr
80004976:	1a 97       	mov	r7,sp
80004978:	20 3d       	sub	sp,12
8000497a:	10 9c       	mov	r12,r8
8000497c:	12 9e       	mov	lr,r9
8000497e:	14 93       	mov	r3,r10
80004980:	58 09       	cp.w	r9,0
80004982:	e0 81 00 bd 	brne	80004afc <__avr32_udiv64+0x188>
80004986:	16 38       	cp.w	r8,r11
80004988:	e0 88 00 40 	brls	80004a08 <__avr32_udiv64+0x94>
8000498c:	f0 08 12 00 	clz	r8,r8
80004990:	c0 d0       	breq	800049aa <__avr32_udiv64+0x36>
80004992:	f6 08 09 4b 	lsl	r11,r11,r8
80004996:	f0 09 11 20 	rsub	r9,r8,32
8000499a:	f8 08 09 4c 	lsl	r12,r12,r8
8000499e:	f4 09 0a 49 	lsr	r9,r10,r9
800049a2:	f4 08 09 43 	lsl	r3,r10,r8
800049a6:	f3 eb 10 0b 	or	r11,r9,r11
800049aa:	f8 0e 16 10 	lsr	lr,r12,0x10
800049ae:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800049b2:	f6 0e 0d 00 	divu	r0,r11,lr
800049b6:	e6 0b 16 10 	lsr	r11,r3,0x10
800049ba:	00 99       	mov	r9,r0
800049bc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800049c0:	e0 0a 02 48 	mul	r8,r0,r10
800049c4:	10 3b       	cp.w	r11,r8
800049c6:	c0 a2       	brcc	800049da <__avr32_udiv64+0x66>
800049c8:	20 19       	sub	r9,1
800049ca:	18 0b       	add	r11,r12
800049cc:	18 3b       	cp.w	r11,r12
800049ce:	c0 63       	brcs	800049da <__avr32_udiv64+0x66>
800049d0:	10 3b       	cp.w	r11,r8
800049d2:	f7 b9 03 01 	sublo	r9,1
800049d6:	f7 dc e3 0b 	addcs	r11,r11,r12
800049da:	f6 08 01 01 	sub	r1,r11,r8
800049de:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800049e2:	e2 0e 0d 00 	divu	r0,r1,lr
800049e6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800049ea:	00 98       	mov	r8,r0
800049ec:	e0 0a 02 4a 	mul	r10,r0,r10
800049f0:	14 33       	cp.w	r3,r10
800049f2:	c0 82       	brcc	80004a02 <__avr32_udiv64+0x8e>
800049f4:	20 18       	sub	r8,1
800049f6:	18 03       	add	r3,r12
800049f8:	18 33       	cp.w	r3,r12
800049fa:	c0 43       	brcs	80004a02 <__avr32_udiv64+0x8e>
800049fc:	14 33       	cp.w	r3,r10
800049fe:	f7 b8 03 01 	sublo	r8,1
80004a02:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80004a06:	cd f8       	rjmp	80004bc4 <__avr32_udiv64+0x250>
80004a08:	58 08       	cp.w	r8,0
80004a0a:	c0 51       	brne	80004a14 <__avr32_udiv64+0xa0>
80004a0c:	30 19       	mov	r9,1
80004a0e:	f2 08 0d 08 	divu	r8,r9,r8
80004a12:	10 9c       	mov	r12,r8
80004a14:	f8 06 12 00 	clz	r6,r12
80004a18:	c0 41       	brne	80004a20 <__avr32_udiv64+0xac>
80004a1a:	18 1b       	sub	r11,r12
80004a1c:	30 19       	mov	r9,1
80004a1e:	c4 08       	rjmp	80004a9e <__avr32_udiv64+0x12a>
80004a20:	ec 01 11 20 	rsub	r1,r6,32
80004a24:	f4 01 0a 49 	lsr	r9,r10,r1
80004a28:	f8 06 09 4c 	lsl	r12,r12,r6
80004a2c:	f6 06 09 48 	lsl	r8,r11,r6
80004a30:	f6 01 0a 41 	lsr	r1,r11,r1
80004a34:	f3 e8 10 08 	or	r8,r9,r8
80004a38:	f8 03 16 10 	lsr	r3,r12,0x10
80004a3c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80004a40:	e2 03 0d 00 	divu	r0,r1,r3
80004a44:	f0 0b 16 10 	lsr	r11,r8,0x10
80004a48:	00 9e       	mov	lr,r0
80004a4a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004a4e:	e0 05 02 49 	mul	r9,r0,r5
80004a52:	12 3b       	cp.w	r11,r9
80004a54:	c0 a2       	brcc	80004a68 <__avr32_udiv64+0xf4>
80004a56:	20 1e       	sub	lr,1
80004a58:	18 0b       	add	r11,r12
80004a5a:	18 3b       	cp.w	r11,r12
80004a5c:	c0 63       	brcs	80004a68 <__avr32_udiv64+0xf4>
80004a5e:	12 3b       	cp.w	r11,r9
80004a60:	f7 be 03 01 	sublo	lr,1
80004a64:	f7 dc e3 0b 	addcs	r11,r11,r12
80004a68:	12 1b       	sub	r11,r9
80004a6a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80004a6e:	f6 03 0d 02 	divu	r2,r11,r3
80004a72:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80004a76:	04 99       	mov	r9,r2
80004a78:	e4 05 02 4b 	mul	r11,r2,r5
80004a7c:	16 38       	cp.w	r8,r11
80004a7e:	c0 a2       	brcc	80004a92 <__avr32_udiv64+0x11e>
80004a80:	20 19       	sub	r9,1
80004a82:	18 08       	add	r8,r12
80004a84:	18 38       	cp.w	r8,r12
80004a86:	c0 63       	brcs	80004a92 <__avr32_udiv64+0x11e>
80004a88:	16 38       	cp.w	r8,r11
80004a8a:	f7 b9 03 01 	sublo	r9,1
80004a8e:	f1 dc e3 08 	addcs	r8,r8,r12
80004a92:	f4 06 09 43 	lsl	r3,r10,r6
80004a96:	f0 0b 01 0b 	sub	r11,r8,r11
80004a9a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80004a9e:	f8 06 16 10 	lsr	r6,r12,0x10
80004aa2:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80004aa6:	f6 06 0d 00 	divu	r0,r11,r6
80004aaa:	e6 0b 16 10 	lsr	r11,r3,0x10
80004aae:	00 9a       	mov	r10,r0
80004ab0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004ab4:	e0 0e 02 48 	mul	r8,r0,lr
80004ab8:	10 3b       	cp.w	r11,r8
80004aba:	c0 a2       	brcc	80004ace <__avr32_udiv64+0x15a>
80004abc:	20 1a       	sub	r10,1
80004abe:	18 0b       	add	r11,r12
80004ac0:	18 3b       	cp.w	r11,r12
80004ac2:	c0 63       	brcs	80004ace <__avr32_udiv64+0x15a>
80004ac4:	10 3b       	cp.w	r11,r8
80004ac6:	f7 ba 03 01 	sublo	r10,1
80004aca:	f7 dc e3 0b 	addcs	r11,r11,r12
80004ace:	f6 08 01 01 	sub	r1,r11,r8
80004ad2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80004ad6:	e2 06 0d 00 	divu	r0,r1,r6
80004ada:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80004ade:	00 98       	mov	r8,r0
80004ae0:	e0 0e 02 4b 	mul	r11,r0,lr
80004ae4:	16 33       	cp.w	r3,r11
80004ae6:	c0 82       	brcc	80004af6 <__avr32_udiv64+0x182>
80004ae8:	20 18       	sub	r8,1
80004aea:	18 03       	add	r3,r12
80004aec:	18 33       	cp.w	r3,r12
80004aee:	c0 43       	brcs	80004af6 <__avr32_udiv64+0x182>
80004af0:	16 33       	cp.w	r3,r11
80004af2:	f7 b8 03 01 	sublo	r8,1
80004af6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80004afa:	c6 98       	rjmp	80004bcc <__avr32_udiv64+0x258>
80004afc:	16 39       	cp.w	r9,r11
80004afe:	e0 8b 00 65 	brhi	80004bc8 <__avr32_udiv64+0x254>
80004b02:	f2 09 12 00 	clz	r9,r9
80004b06:	c0 b1       	brne	80004b1c <__avr32_udiv64+0x1a8>
80004b08:	10 3a       	cp.w	r10,r8
80004b0a:	5f 2a       	srhs	r10
80004b0c:	1c 3b       	cp.w	r11,lr
80004b0e:	5f b8       	srhi	r8
80004b10:	10 4a       	or	r10,r8
80004b12:	f2 0a 18 00 	cp.b	r10,r9
80004b16:	c5 90       	breq	80004bc8 <__avr32_udiv64+0x254>
80004b18:	30 18       	mov	r8,1
80004b1a:	c5 98       	rjmp	80004bcc <__avr32_udiv64+0x258>
80004b1c:	f0 09 09 46 	lsl	r6,r8,r9
80004b20:	f2 03 11 20 	rsub	r3,r9,32
80004b24:	fc 09 09 4e 	lsl	lr,lr,r9
80004b28:	f0 03 0a 48 	lsr	r8,r8,r3
80004b2c:	f6 09 09 4c 	lsl	r12,r11,r9
80004b30:	f4 03 0a 42 	lsr	r2,r10,r3
80004b34:	ef 46 ff f4 	st.w	r7[-12],r6
80004b38:	f6 03 0a 43 	lsr	r3,r11,r3
80004b3c:	18 42       	or	r2,r12
80004b3e:	f1 ee 10 0c 	or	r12,r8,lr
80004b42:	f8 01 16 10 	lsr	r1,r12,0x10
80004b46:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80004b4a:	e6 01 0d 04 	divu	r4,r3,r1
80004b4e:	e4 03 16 10 	lsr	r3,r2,0x10
80004b52:	08 9e       	mov	lr,r4
80004b54:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80004b58:	e8 06 02 48 	mul	r8,r4,r6
80004b5c:	10 33       	cp.w	r3,r8
80004b5e:	c0 a2       	brcc	80004b72 <__avr32_udiv64+0x1fe>
80004b60:	20 1e       	sub	lr,1
80004b62:	18 03       	add	r3,r12
80004b64:	18 33       	cp.w	r3,r12
80004b66:	c0 63       	brcs	80004b72 <__avr32_udiv64+0x1fe>
80004b68:	10 33       	cp.w	r3,r8
80004b6a:	f7 be 03 01 	sublo	lr,1
80004b6e:	e7 dc e3 03 	addcs	r3,r3,r12
80004b72:	10 13       	sub	r3,r8
80004b74:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80004b78:	e6 01 0d 00 	divu	r0,r3,r1
80004b7c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004b80:	00 98       	mov	r8,r0
80004b82:	e0 06 02 46 	mul	r6,r0,r6
80004b86:	0c 3b       	cp.w	r11,r6
80004b88:	c0 a2       	brcc	80004b9c <__avr32_udiv64+0x228>
80004b8a:	20 18       	sub	r8,1
80004b8c:	18 0b       	add	r11,r12
80004b8e:	18 3b       	cp.w	r11,r12
80004b90:	c0 63       	brcs	80004b9c <__avr32_udiv64+0x228>
80004b92:	0c 3b       	cp.w	r11,r6
80004b94:	f7 dc e3 0b 	addcs	r11,r11,r12
80004b98:	f7 b8 03 01 	sublo	r8,1
80004b9c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80004ba0:	ee f4 ff f4 	ld.w	r4,r7[-12]
80004ba4:	0c 1b       	sub	r11,r6
80004ba6:	f0 04 06 42 	mulu.d	r2,r8,r4
80004baa:	06 95       	mov	r5,r3
80004bac:	16 35       	cp.w	r5,r11
80004bae:	e0 8b 00 0a 	brhi	80004bc2 <__avr32_udiv64+0x24e>
80004bb2:	5f 0b       	sreq	r11
80004bb4:	f4 09 09 49 	lsl	r9,r10,r9
80004bb8:	12 32       	cp.w	r2,r9
80004bba:	5f b9       	srhi	r9
80004bbc:	f7 e9 00 09 	and	r9,r11,r9
80004bc0:	c0 60       	breq	80004bcc <__avr32_udiv64+0x258>
80004bc2:	20 18       	sub	r8,1
80004bc4:	30 09       	mov	r9,0
80004bc6:	c0 38       	rjmp	80004bcc <__avr32_udiv64+0x258>
80004bc8:	30 09       	mov	r9,0
80004bca:	12 98       	mov	r8,r9
80004bcc:	10 9a       	mov	r10,r8
80004bce:	12 93       	mov	r3,r9
80004bd0:	10 92       	mov	r2,r8
80004bd2:	12 9b       	mov	r11,r9
80004bd4:	2f dd       	sub	sp,-12
80004bd6:	d8 32       	popm	r0-r7,pc

80004bd8 <memcpy>:
80004bd8:	58 8a       	cp.w	r10,8
80004bda:	c2 f5       	brlt	80004c38 <memcpy+0x60>
80004bdc:	f9 eb 10 09 	or	r9,r12,r11
80004be0:	e2 19 00 03 	andl	r9,0x3,COH
80004be4:	e0 81 00 97 	brne	80004d12 <memcpy+0x13a>
80004be8:	e0 4a 00 20 	cp.w	r10,32
80004bec:	c3 b4       	brge	80004c62 <memcpy+0x8a>
80004bee:	f4 08 14 02 	asr	r8,r10,0x2
80004bf2:	f0 09 11 08 	rsub	r9,r8,8
80004bf6:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004bfa:	76 69       	ld.w	r9,r11[0x18]
80004bfc:	99 69       	st.w	r12[0x18],r9
80004bfe:	76 59       	ld.w	r9,r11[0x14]
80004c00:	99 59       	st.w	r12[0x14],r9
80004c02:	76 49       	ld.w	r9,r11[0x10]
80004c04:	99 49       	st.w	r12[0x10],r9
80004c06:	76 39       	ld.w	r9,r11[0xc]
80004c08:	99 39       	st.w	r12[0xc],r9
80004c0a:	76 29       	ld.w	r9,r11[0x8]
80004c0c:	99 29       	st.w	r12[0x8],r9
80004c0e:	76 19       	ld.w	r9,r11[0x4]
80004c10:	99 19       	st.w	r12[0x4],r9
80004c12:	76 09       	ld.w	r9,r11[0x0]
80004c14:	99 09       	st.w	r12[0x0],r9
80004c16:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004c1a:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004c1e:	e0 1a 00 03 	andl	r10,0x3
80004c22:	f4 0a 11 04 	rsub	r10,r10,4
80004c26:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004c2a:	17 a9       	ld.ub	r9,r11[0x2]
80004c2c:	b0 a9       	st.b	r8[0x2],r9
80004c2e:	17 99       	ld.ub	r9,r11[0x1]
80004c30:	b0 99       	st.b	r8[0x1],r9
80004c32:	17 89       	ld.ub	r9,r11[0x0]
80004c34:	b0 89       	st.b	r8[0x0],r9
80004c36:	5e fc       	retal	r12
80004c38:	f4 0a 11 09 	rsub	r10,r10,9
80004c3c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004c40:	17 f9       	ld.ub	r9,r11[0x7]
80004c42:	b8 f9       	st.b	r12[0x7],r9
80004c44:	17 e9       	ld.ub	r9,r11[0x6]
80004c46:	b8 e9       	st.b	r12[0x6],r9
80004c48:	17 d9       	ld.ub	r9,r11[0x5]
80004c4a:	b8 d9       	st.b	r12[0x5],r9
80004c4c:	17 c9       	ld.ub	r9,r11[0x4]
80004c4e:	b8 c9       	st.b	r12[0x4],r9
80004c50:	17 b9       	ld.ub	r9,r11[0x3]
80004c52:	b8 b9       	st.b	r12[0x3],r9
80004c54:	17 a9       	ld.ub	r9,r11[0x2]
80004c56:	b8 a9       	st.b	r12[0x2],r9
80004c58:	17 99       	ld.ub	r9,r11[0x1]
80004c5a:	b8 99       	st.b	r12[0x1],r9
80004c5c:	17 89       	ld.ub	r9,r11[0x0]
80004c5e:	b8 89       	st.b	r12[0x0],r9
80004c60:	5e fc       	retal	r12
80004c62:	eb cd 40 c0 	pushm	r6-r7,lr
80004c66:	18 99       	mov	r9,r12
80004c68:	22 0a       	sub	r10,32
80004c6a:	b7 07       	ld.d	r6,r11++
80004c6c:	b3 26       	st.d	r9++,r6
80004c6e:	b7 07       	ld.d	r6,r11++
80004c70:	b3 26       	st.d	r9++,r6
80004c72:	b7 07       	ld.d	r6,r11++
80004c74:	b3 26       	st.d	r9++,r6
80004c76:	b7 07       	ld.d	r6,r11++
80004c78:	b3 26       	st.d	r9++,r6
80004c7a:	22 0a       	sub	r10,32
80004c7c:	cf 74       	brge	80004c6a <memcpy+0x92>
80004c7e:	2f 0a       	sub	r10,-16
80004c80:	c0 65       	brlt	80004c8c <memcpy+0xb4>
80004c82:	b7 07       	ld.d	r6,r11++
80004c84:	b3 26       	st.d	r9++,r6
80004c86:	b7 07       	ld.d	r6,r11++
80004c88:	b3 26       	st.d	r9++,r6
80004c8a:	21 0a       	sub	r10,16
80004c8c:	5c 3a       	neg	r10
80004c8e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004c92:	d7 03       	nop
80004c94:	d7 03       	nop
80004c96:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004c9a:	f3 66 00 0e 	st.b	r9[14],r6
80004c9e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004ca2:	f3 66 00 0d 	st.b	r9[13],r6
80004ca6:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004caa:	f3 66 00 0c 	st.b	r9[12],r6
80004cae:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004cb2:	f3 66 00 0b 	st.b	r9[11],r6
80004cb6:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004cba:	f3 66 00 0a 	st.b	r9[10],r6
80004cbe:	f7 36 00 09 	ld.ub	r6,r11[9]
80004cc2:	f3 66 00 09 	st.b	r9[9],r6
80004cc6:	f7 36 00 08 	ld.ub	r6,r11[8]
80004cca:	f3 66 00 08 	st.b	r9[8],r6
80004cce:	f7 36 00 07 	ld.ub	r6,r11[7]
80004cd2:	f3 66 00 07 	st.b	r9[7],r6
80004cd6:	f7 36 00 06 	ld.ub	r6,r11[6]
80004cda:	f3 66 00 06 	st.b	r9[6],r6
80004cde:	f7 36 00 05 	ld.ub	r6,r11[5]
80004ce2:	f3 66 00 05 	st.b	r9[5],r6
80004ce6:	f7 36 00 04 	ld.ub	r6,r11[4]
80004cea:	f3 66 00 04 	st.b	r9[4],r6
80004cee:	f7 36 00 03 	ld.ub	r6,r11[3]
80004cf2:	f3 66 00 03 	st.b	r9[3],r6
80004cf6:	f7 36 00 02 	ld.ub	r6,r11[2]
80004cfa:	f3 66 00 02 	st.b	r9[2],r6
80004cfe:	f7 36 00 01 	ld.ub	r6,r11[1]
80004d02:	f3 66 00 01 	st.b	r9[1],r6
80004d06:	f7 36 00 00 	ld.ub	r6,r11[0]
80004d0a:	f3 66 00 00 	st.b	r9[0],r6
80004d0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004d12:	20 1a       	sub	r10,1
80004d14:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80004d18:	f8 0a 0b 09 	st.b	r12[r10],r9
80004d1c:	cf b1       	brne	80004d12 <memcpy+0x13a>
80004d1e:	5e fc       	retal	r12

Disassembly of section .exception:

80004e00 <_evba>:
80004e00:	c0 08       	rjmp	80004e00 <_evba>
	...

80004e04 <_handle_TLB_Multiple_Hit>:
80004e04:	c0 08       	rjmp	80004e04 <_handle_TLB_Multiple_Hit>
	...

80004e08 <_handle_Bus_Error_Data_Fetch>:
80004e08:	c0 08       	rjmp	80004e08 <_handle_Bus_Error_Data_Fetch>
	...

80004e0c <_handle_Bus_Error_Instruction_Fetch>:
80004e0c:	c0 08       	rjmp	80004e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80004e10 <_handle_NMI>:
80004e10:	c0 08       	rjmp	80004e10 <_handle_NMI>
	...

80004e14 <_handle_Instruction_Address>:
80004e14:	c0 08       	rjmp	80004e14 <_handle_Instruction_Address>
	...

80004e18 <_handle_ITLB_Protection>:
80004e18:	c0 08       	rjmp	80004e18 <_handle_ITLB_Protection>
	...

80004e1c <_handle_Breakpoint>:
80004e1c:	c0 08       	rjmp	80004e1c <_handle_Breakpoint>
	...

80004e20 <_handle_Illegal_Opcode>:
80004e20:	c0 08       	rjmp	80004e20 <_handle_Illegal_Opcode>
	...

80004e24 <_handle_Unimplemented_Instruction>:
80004e24:	c0 08       	rjmp	80004e24 <_handle_Unimplemented_Instruction>
	...

80004e28 <_handle_Privilege_Violation>:
80004e28:	c0 08       	rjmp	80004e28 <_handle_Privilege_Violation>
	...

80004e2c <_handle_Floating_Point>:
80004e2c:	c0 08       	rjmp	80004e2c <_handle_Floating_Point>
	...

80004e30 <_handle_Coprocessor_Absent>:
80004e30:	c0 08       	rjmp	80004e30 <_handle_Coprocessor_Absent>
	...

80004e34 <_handle_Data_Address_Read>:
80004e34:	c0 08       	rjmp	80004e34 <_handle_Data_Address_Read>
	...

80004e38 <_handle_Data_Address_Write>:
80004e38:	c0 08       	rjmp	80004e38 <_handle_Data_Address_Write>
	...

80004e3c <_handle_DTLB_Protection_Read>:
80004e3c:	c0 08       	rjmp	80004e3c <_handle_DTLB_Protection_Read>
	...

80004e40 <_handle_DTLB_Protection_Write>:
80004e40:	c0 08       	rjmp	80004e40 <_handle_DTLB_Protection_Write>
	...

80004e44 <_handle_DTLB_Modified>:
80004e44:	c0 08       	rjmp	80004e44 <_handle_DTLB_Modified>
	...

80004e50 <_handle_ITLB_Miss>:
80004e50:	c0 08       	rjmp	80004e50 <_handle_ITLB_Miss>
	...

80004e60 <_handle_DTLB_Miss_Read>:
80004e60:	c0 08       	rjmp	80004e60 <_handle_DTLB_Miss_Read>
	...

80004e70 <_handle_DTLB_Miss_Write>:
80004e70:	c0 08       	rjmp	80004e70 <_handle_DTLB_Miss_Write>
	...

80004f00 <_handle_Supervisor_Call>:
80004f00:	c0 08       	rjmp	80004f00 <_handle_Supervisor_Call>
80004f02:	d7 03       	nop

80004f04 <_int0>:
80004f04:	30 0c       	mov	r12,0
80004f06:	fe b0 f4 6d 	rcall	800037e0 <_get_interrupt_handler>
80004f0a:	58 0c       	cp.w	r12,0
80004f0c:	f8 0f 17 10 	movne	pc,r12
80004f10:	d6 03       	rete

80004f12 <_int1>:
80004f12:	30 1c       	mov	r12,1
80004f14:	fe b0 f4 66 	rcall	800037e0 <_get_interrupt_handler>
80004f18:	58 0c       	cp.w	r12,0
80004f1a:	f8 0f 17 10 	movne	pc,r12
80004f1e:	d6 03       	rete

80004f20 <_int2>:
80004f20:	30 2c       	mov	r12,2
80004f22:	fe b0 f4 5f 	rcall	800037e0 <_get_interrupt_handler>
80004f26:	58 0c       	cp.w	r12,0
80004f28:	f8 0f 17 10 	movne	pc,r12
80004f2c:	d6 03       	rete

80004f2e <_int3>:
80004f2e:	30 3c       	mov	r12,3
80004f30:	fe b0 f4 58 	rcall	800037e0 <_get_interrupt_handler>
80004f34:	58 0c       	cp.w	r12,0
80004f36:	f8 0f 17 10 	movne	pc,r12
80004f3a:	d6 03       	rete
80004f3c:	d7 03       	nop
80004f3e:	d7 03       	nop
80004f40:	d7 03       	nop
80004f42:	d7 03       	nop
80004f44:	d7 03       	nop
80004f46:	d7 03       	nop
80004f48:	d7 03       	nop
80004f4a:	d7 03       	nop
80004f4c:	d7 03       	nop
80004f4e:	d7 03       	nop
80004f50:	d7 03       	nop
80004f52:	d7 03       	nop
80004f54:	d7 03       	nop
80004f56:	d7 03       	nop
80004f58:	d7 03       	nop
80004f5a:	d7 03       	nop
80004f5c:	d7 03       	nop
80004f5e:	d7 03       	nop
80004f60:	d7 03       	nop
80004f62:	d7 03       	nop
80004f64:	d7 03       	nop
80004f66:	d7 03       	nop
80004f68:	d7 03       	nop
80004f6a:	d7 03       	nop
80004f6c:	d7 03       	nop
80004f6e:	d7 03       	nop
80004f70:	d7 03       	nop
80004f72:	d7 03       	nop
80004f74:	d7 03       	nop
80004f76:	d7 03       	nop
80004f78:	d7 03       	nop
80004f7a:	d7 03       	nop
80004f7c:	d7 03       	nop
80004f7e:	d7 03       	nop
80004f80:	d7 03       	nop
80004f82:	d7 03       	nop
80004f84:	d7 03       	nop
80004f86:	d7 03       	nop
80004f88:	d7 03       	nop
80004f8a:	d7 03       	nop
80004f8c:	d7 03       	nop
80004f8e:	d7 03       	nop
80004f90:	d7 03       	nop
80004f92:	d7 03       	nop
80004f94:	d7 03       	nop
80004f96:	d7 03       	nop
80004f98:	d7 03       	nop
80004f9a:	d7 03       	nop
80004f9c:	d7 03       	nop
80004f9e:	d7 03       	nop
80004fa0:	d7 03       	nop
80004fa2:	d7 03       	nop
80004fa4:	d7 03       	nop
80004fa6:	d7 03       	nop
80004fa8:	d7 03       	nop
80004faa:	d7 03       	nop
80004fac:	d7 03       	nop
80004fae:	d7 03       	nop
80004fb0:	d7 03       	nop
80004fb2:	d7 03       	nop
80004fb4:	d7 03       	nop
80004fb6:	d7 03       	nop
80004fb8:	d7 03       	nop
80004fba:	d7 03       	nop
80004fbc:	d7 03       	nop
80004fbe:	d7 03       	nop
80004fc0:	d7 03       	nop
80004fc2:	d7 03       	nop
80004fc4:	d7 03       	nop
80004fc6:	d7 03       	nop
80004fc8:	d7 03       	nop
80004fca:	d7 03       	nop
80004fcc:	d7 03       	nop
80004fce:	d7 03       	nop
80004fd0:	d7 03       	nop
80004fd2:	d7 03       	nop
80004fd4:	d7 03       	nop
80004fd6:	d7 03       	nop
80004fd8:	d7 03       	nop
80004fda:	d7 03       	nop
80004fdc:	d7 03       	nop
80004fde:	d7 03       	nop
80004fe0:	d7 03       	nop
80004fe2:	d7 03       	nop
80004fe4:	d7 03       	nop
80004fe6:	d7 03       	nop
80004fe8:	d7 03       	nop
80004fea:	d7 03       	nop
80004fec:	d7 03       	nop
80004fee:	d7 03       	nop
80004ff0:	d7 03       	nop
80004ff2:	d7 03       	nop
80004ff4:	d7 03       	nop
80004ff6:	d7 03       	nop
80004ff8:	d7 03       	nop
80004ffa:	d7 03       	nop
80004ffc:	d7 03       	nop
80004ffe:	d7 03       	nop
