
TFTBerni.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002688  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004800  80004800  00004c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000009d0  80004a00  80004a00  00004e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000020  00000008  800053d0  00005808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000748  00000028  00000028  00000000  2**2
                  ALLOC
  8 .heap         0000e890  00000770  00000770  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000008d0  00000000  00000000  00005858  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001720  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000eae1  00000000  00000000  00007848  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fb1  00000000  00000000  00016329  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006fda  00000000  00000000  000182da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000016b0  00000000  00000000  0001f2b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000304b  00000000  00000000  00020964  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00004ada  00000000  00000000  000239af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00b310b0  00000000  00000000  00028489  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000aa8  00000000  00000000  00b59540  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c3 24 	sub	pc,pc,-15580

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e3 28 	sub	pc,pc,-7384

Disassembly of section .text:

80002008 <et024006_SetLimits>:
80002008:	eb cd 40 80 	pushm	r7,lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000200c:	fc 1e c0 00 	movh	lr,0xc000
80002010:	30 28       	mov	r8,2
80002012:	bc 08       	st.h	lr[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002014:	ef dc c1 08 	bfextu	r7,r12,0x8,0x8
80002018:	fc 18 c0 20 	movh	r8,0xc020
8000201c:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000201e:	30 37       	mov	r7,3
80002020:	bc 07       	st.h	lr[0x0],r7
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002022:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002024:	30 4c       	mov	r12,4
80002026:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002028:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000202c:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000202e:	30 5c       	mov	r12,5
80002030:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002032:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002034:	30 6a       	mov	r10,6
80002036:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002038:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
8000203c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000203e:	30 7a       	mov	r10,7
80002040:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002042:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002044:	30 8a       	mov	r10,8
80002046:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002048:	f5 d9 c1 08 	bfextu	r10,r9,0x8,0x8
8000204c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000204e:	30 9a       	mov	r10,9
80002050:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002052:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80002054:	e3 cd 80 80 	ldm	sp++,r7,pc

80002058 <et024006_SetQuickLimits>:

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002058:	fc 19 c0 00 	movh	r9,0xc000
8000205c:	30 28       	mov	r8,2
8000205e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002060:	f5 dc c1 08 	bfextu	r10,r12,0x8,0x8
80002064:	fc 18 c0 20 	movh	r8,0xc020
80002068:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000206a:	30 3a       	mov	r10,3
8000206c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000206e:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002070:	30 6a       	mov	r10,6
80002072:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002074:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
80002078:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000207a:	30 7a       	mov	r10,7
8000207c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000207e:	b0 0b       	st.h	r8[0x0],r11
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
}
80002080:	5e fc       	retal	r12
80002082:	d7 03       	nop

80002084 <et024006_DrawQuickPixel>:
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y & 0xff) );
}


void et024006_DrawQuickPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
80002084:	eb cd 40 80 	pushm	r7,lr
80002088:	14 97       	mov	r7,r10
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetQuickLimits( x, y );
8000208a:	5c 7b       	castu.h	r11
8000208c:	5c 7c       	castu.h	r12
8000208e:	f0 1f 00 06 	mcall	800020a4 <et024006_DrawQuickPixel+0x20>
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002092:	32 29       	mov	r9,34
80002094:	fc 18 c0 00 	movh	r8,0xc000
80002098:	b0 09       	st.h	r8[0x0],r9
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  *ET024006_PARAM_ADDR = color;
8000209a:	fc 18 c0 20 	movh	r8,0xc020
8000209e:	b0 07       	st.h	r8[0x0],r7
#endif

}
800020a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	20 58       	sub	r8,5

800020a8 <et024006_PrintString>:
void et024006_PrintString(char *lcd_string, const unsigned char *font_style,
                          uint16_t x,
                          uint16_t y,
                          uint16_t fcolor,
                          int bcolor)
{
800020a8:	d4 31       	pushm	r0-r7,lr
800020aa:	20 dd       	sub	sp,52
800020ac:	18 97       	mov	r7,r12
800020ae:	50 6b       	stdsp	sp[0x18],r11
800020b0:	50 8a       	stdsp	sp[0x20],r10
800020b2:	50 29       	stdsp	sp[0x8],r9
800020b4:	10 94       	mov	r4,r8
800020b6:	41 63       	lddsp	r3,sp[0x58]
  unsigned char mask = 0, xfont, yfont, font_size;
  const unsigned char *data;
  uint16_t saved_x = x;

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
800020b8:	19 89       	ld.ub	r9,r12[0x0]
800020ba:	30 08       	mov	r8,0
800020bc:	f0 09 18 00 	cp.b	r9,r8
800020c0:	e0 80 01 0c 	breq	800022d8 <et024006_PrintString+0x230>
    return;

  data = font_style;  // point to the start of the font table
  xfont = *data;  // get font x width
800020c4:	16 98       	mov	r8,r11
800020c6:	11 3a       	ld.ub	r10,r8++
800020c8:	50 4a       	stdsp	sp[0x10],r10
  data++;
  yfont = *data;  // get font y length
800020ca:	11 89       	ld.ub	r9,r8[0x0]
800020cc:	50 39       	stdsp	sp[0xc],r9
  data++;
  font_size = *data;  // get data bytes per font
800020ce:	11 98       	ld.ub	r8,r8[0x1]
800020d0:	50 58       	stdsp	sp[0x14],r8

  // If transparent mode
  if(bcolor == -1)
800020d2:	5b f3       	cp.w	r3,-1
800020d4:	e0 81 00 8d 	brne	800021ee <et024006_PrintString+0x146>
  {
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
800020d8:	e0 69 00 ef 	mov	r9,239
800020dc:	e0 6a 01 3f 	mov	r10,319
800020e0:	30 0b       	mov	r11,0
800020e2:	16 9c       	mov	r12,r11
800020e4:	f0 1f 00 7e 	mcall	800022dc <et024006_PrintString+0x234>
        data =  (font_style + font_size) +  // header offset
          (font_size * (int)(*lcd_string - 32)); // character select
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;
800020e8:	40 58       	lddsp	r8,sp[0x14]
800020ea:	50 c8       	stdsp	sp[0x30],r8
800020ec:	f0 08 00 18 	add	r8,r8,r8<<0x1
800020f0:	a5 78       	lsl	r8,0x5
800020f2:	40 69       	lddsp	r9,sp[0x18]
800020f4:	10 09       	add	r9,r8
800020f6:	50 b9       	stdsp	sp[0x2c],r9
800020f8:	ee c8 ff ff 	sub	r8,r7,-1
800020fc:	50 98       	stdsp	sp[0x24],r8
800020fe:	40 8a       	lddsp	r10,sp[0x20]
80002100:	5c 8a       	casts.h	r10
80002102:	50 aa       	stdsp	sp[0x28],r10
      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
        {
          if (*data & mask) // if pixel data then put dot
80002104:	30 03       	mov	r3,0
          {
            et024006_DrawQuickPixel( col, row, fcolor );
80002106:	08 90       	mov	r0,r4
80002108:	5c 70       	castu.h	r0
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );

    do
    {
      if(*lcd_string =='\n') {
8000210a:	40 99       	lddsp	r9,sp[0x24]
8000210c:	f3 38 ff ff 	ld.ub	r8,r9[-1]
80002110:	30 aa       	mov	r10,10
80002112:	f4 08 18 00 	cp.b	r8,r10
80002116:	c0 b1       	brne	8000212c <et024006_PrintString+0x84>
        x = saved_x;
        y += yfont;
80002118:	40 28       	lddsp	r8,sp[0x8]
8000211a:	40 39       	lddsp	r9,sp[0xc]
8000211c:	12 08       	add	r8,r9
8000211e:	5c 88       	casts.h	r8
80002120:	50 28       	stdsp	sp[0x8],r8
80002122:	40 98       	lddsp	r8,sp[0x24]
80002124:	40 8a       	lddsp	r10,sp[0x20]
80002126:	5c 8a       	casts.h	r10
80002128:	50 aa       	stdsp	sp[0x28],r10
        lcd_string++;  // next character in string
        continue;
8000212a:	c5 a8       	rjmp	800021de <et024006_PrintString+0x136>
      } else if(*lcd_string =='\t') {
8000212c:	30 99       	mov	r9,9
8000212e:	f2 08 18 00 	cp.b	r8,r9
80002132:	c0 81       	brne	80002142 <et024006_PrintString+0x9a>
        x += xfont;
80002134:	40 a8       	lddsp	r8,sp[0x28]
80002136:	40 49       	lddsp	r9,sp[0x10]
80002138:	12 08       	add	r8,r9
8000213a:	5c 88       	casts.h	r8
8000213c:	50 a8       	stdsp	sp[0x28],r8
8000213e:	40 98       	lddsp	r8,sp[0x24]
        lcd_string++;  // next character in string
        continue;
80002140:	c4 f8       	rjmp	800021de <et024006_PrintString+0x136>
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
80002142:	f0 ca 00 20 	sub	r10,r8,32
80002146:	35 f9       	mov	r9,95
80002148:	f2 0a 18 00 	cp.b	r10,r9
8000214c:	e0 88 00 04 	brls	80002154 <et024006_PrintString+0xac>
80002150:	40 b5       	lddsp	r5,sp[0x2c]
80002152:	c0 a8       	rjmp	80002166 <et024006_PrintString+0xbe>
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
80002154:	22 08       	sub	r8,32
80002156:	40 ca       	lddsp	r10,sp[0x30]
80002158:	f0 0a 02 45 	mul	r5,r8,r10
8000215c:	40 59       	lddsp	r9,sp[0x14]
8000215e:	12 05       	add	r5,r9
80002160:	40 68       	lddsp	r8,sp[0x18]
80002162:	f0 05 00 05 	add	r5,r8,r5
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
80002166:	40 22       	lddsp	r2,sp[0x8]
80002168:	5c 72       	castu.h	r2
8000216a:	40 3a       	lddsp	r10,sp[0xc]
8000216c:	e4 0a 00 0a 	add	r10,r2,r10
80002170:	50 1a       	stdsp	sp[0x4],r10
80002172:	04 3a       	cp.w	r10,r2
80002174:	e0 8a 00 2f 	brle	800021d2 <et024006_PrintString+0x12a>
80002178:	40 21       	lddsp	r1,sp[0x8]
8000217a:	5c 81       	casts.h	r1
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
8000217c:	40 a9       	lddsp	r9,sp[0x28]
8000217e:	5c 79       	castu.h	r9
80002180:	50 09       	stdsp	sp[0x0],r9
80002182:	12 94       	mov	r4,r9
80002184:	40 48       	lddsp	r8,sp[0x10]
80002186:	10 04       	add	r4,r8
80002188:	40 aa       	lddsp	r10,sp[0x28]
8000218a:	5c 8a       	casts.h	r10
8000218c:	50 7a       	stdsp	sp[0x1c],r10
8000218e:	c1 b8       	rjmp	800021c4 <et024006_PrintString+0x11c>
        {
          if (*data & mask) // if pixel data then put dot
          {
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
80002190:	a1 96       	lsr	r6,0x1
      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
        {
          if (*data & mask) // if pixel data then put dot
80002192:	0b 88       	ld.ub	r8,r5[0x0]
80002194:	ed e8 00 08 	and	r8,r6,r8
80002198:	e6 08 18 00 	cp.b	r8,r3
8000219c:	c0 50       	breq	800021a6 <et024006_PrintString+0xfe>
          {
            et024006_DrawQuickPixel( col, row, fcolor );
8000219e:	00 9a       	mov	r10,r0
800021a0:	04 9b       	mov	r11,r2
800021a2:	f0 1f 00 50 	mcall	800022e0 <et024006_PrintString+0x238>
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
800021a6:	2f f7       	sub	r7,-1
800021a8:	5c 87       	casts.h	r7
800021aa:	0e 9c       	mov	r12,r7
800021ac:	5c 7c       	castu.h	r12
800021ae:	08 3c       	cp.w	r12,r4
800021b0:	cf 05       	brlt	80002190 <et024006_PrintString+0xe8>
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
800021b2:	2f f1       	sub	r1,-1
800021b4:	5c 81       	casts.h	r1
800021b6:	e5 d1 c0 10 	bfextu	r2,r1,0x0,0x10
800021ba:	40 19       	lddsp	r9,sp[0x4]
800021bc:	04 39       	cp.w	r9,r2
800021be:	e0 8a 00 0a 	brle	800021d2 <et024006_PrintString+0x12a>
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
        }
        // Next row data
        data++;
800021c2:	2f f5       	sub	r5,-1
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
800021c4:	40 0c       	lddsp	r12,sp[0x0]
800021c6:	08 3c       	cp.w	r12,r4
800021c8:	cf 54       	brge	800021b2 <et024006_PrintString+0x10a>
800021ca:	40 77       	lddsp	r7,sp[0x1c]
800021cc:	e0 66 00 80 	mov	r6,128
800021d0:	ce 1b       	rjmp	80002192 <et024006_PrintString+0xea>
        }
        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
800021d2:	40 a8       	lddsp	r8,sp[0x28]
800021d4:	40 4a       	lddsp	r10,sp[0x10]
800021d6:	14 08       	add	r8,r10
800021d8:	5c 88       	casts.h	r8
800021da:	50 a8       	stdsp	sp[0x28],r8
800021dc:	40 98       	lddsp	r8,sp[0x24]
800021de:	40 99       	lddsp	r9,sp[0x24]
800021e0:	2f f9       	sub	r9,-1
800021e2:	50 99       	stdsp	sp[0x24],r9
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800021e4:	11 88       	ld.ub	r8,r8[0x0]
800021e6:	e6 08 18 00 	cp.b	r8,r3
800021ea:	c9 01       	brne	8000210a <et024006_PrintString+0x62>
800021ec:	c7 68       	rjmp	800022d8 <et024006_PrintString+0x230>
800021ee:	f8 c8 ff ff 	sub	r8,r12,-1
800021f2:	50 08       	stdsp	sp[0x0],r8
800021f4:	40 8c       	lddsp	r12,sp[0x20]
800021f6:	5c 8c       	casts.h	r12
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
800021f8:	30 06       	mov	r6,0
          {
            *ET024006_PARAM_ADDR = fcolor;
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
800021fa:	5c 83       	casts.h	r3
800021fc:	fc 15 c0 20 	movh	r5,0xc020
  }
  else
  {
    do
    {
      if(*lcd_string =='\n') {
80002200:	40 0a       	lddsp	r10,sp[0x0]
80002202:	f5 31 ff ff 	ld.ub	r1,r10[-1]
80002206:	30 a8       	mov	r8,10
80002208:	f0 01 18 00 	cp.b	r1,r8
8000220c:	c0 b1       	brne	80002222 <et024006_PrintString+0x17a>
        x = saved_x;
        y += yfont;
8000220e:	40 28       	lddsp	r8,sp[0x8]
80002210:	40 39       	lddsp	r9,sp[0xc]
80002212:	12 08       	add	r8,r9
80002214:	5c 88       	casts.h	r8
80002216:	50 28       	stdsp	sp[0x8],r8
80002218:	14 98       	mov	r8,r10
8000221a:	40 8a       	lddsp	r10,sp[0x20]
8000221c:	5c 8a       	casts.h	r10
8000221e:	50 1a       	stdsp	sp[0x4],r10
        lcd_string++;  // next character in string
        continue;
80002220:	c5 28       	rjmp	800022c4 <et024006_PrintString+0x21c>
      } else if(*lcd_string =='\t') {
80002222:	30 98       	mov	r8,9
80002224:	f0 01 18 00 	cp.b	r1,r8
80002228:	c0 71       	brne	80002236 <et024006_PrintString+0x18e>
        x += xfont;
8000222a:	40 49       	lddsp	r9,sp[0x10]
8000222c:	12 0c       	add	r12,r9
8000222e:	5c 8c       	casts.h	r12
80002230:	50 1c       	stdsp	sp[0x4],r12
80002232:	40 08       	lddsp	r8,sp[0x0]
        lcd_string++;  // next character in string
        continue;
80002234:	c4 88       	rjmp	800022c4 <et024006_PrintString+0x21c>
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
        (font_size * (int)(*lcd_string - 32)); // character select

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
80002236:	40 32       	lddsp	r2,sp[0xc]
80002238:	40 47       	lddsp	r7,sp[0x10]
8000223a:	f8 07 00 08 	add	r8,r12,r7
8000223e:	5c 88       	casts.h	r8
80002240:	50 18       	stdsp	sp[0x4],r8
80002242:	04 99       	mov	r9,r2
80002244:	20 19       	sub	r9,1
80002246:	40 28       	lddsp	r8,sp[0x8]
80002248:	10 09       	add	r9,r8
8000224a:	40 1a       	lddsp	r10,sp[0x4]
8000224c:	20 1a       	sub	r10,1
8000224e:	5c 79       	castu.h	r9
80002250:	5c 7a       	castu.h	r10
80002252:	10 9b       	mov	r11,r8
80002254:	5c 7b       	castu.h	r11
80002256:	5c 7c       	castu.h	r12
80002258:	f0 1f 00 21 	mcall	800022dc <et024006_PrintString+0x234>
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000225c:	32 29       	mov	r9,34
8000225e:	fc 18 c0 00 	movh	r8,0xc000
80002262:	b0 09       	st.h	r8[0x0],r9

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
80002264:	40 3a       	lddsp	r10,sp[0xc]
80002266:	58 0a       	cp.w	r10,0
80002268:	c2 d0       	breq	800022c2 <et024006_PrintString+0x21a>
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
8000226a:	e2 ce 00 20 	sub	lr,r1,32
8000226e:	40 59       	lddsp	r9,sp[0x14]
80002270:	f2 0e 02 4e 	mul	lr,r9,lr
80002274:	12 0e       	add	lr,r9
80002276:	40 68       	lddsp	r8,sp[0x18]
80002278:	f0 0e 00 0e 	add	lr,r8,lr
8000227c:	30 0c       	mov	r12,0
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
8000227e:	e0 60 00 80 	mov	r0,128
80002282:	18 91       	mov	r1,r12
80002284:	c1 98       	rjmp	800022b6 <et024006_PrintString+0x20e>
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
          }
          mask >>= 1;
80002286:	a1 99       	lsr	r9,0x1
      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
        {
          if (*data & mask) // if pixel data then put dot
80002288:	f3 eb 00 0a 	and	r10,r9,r11
          {
            *ET024006_PARAM_ADDR = fcolor;
8000228c:	ec 0a 18 00 	cp.b	r10,r6
80002290:	e8 0a 17 10 	movne	r10,r4
80002294:	eb fa 1c 00 	st.hne	r5[0x0],r10
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
80002298:	eb f3 0c 00 	st.heq	r5[0x0],r3
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
8000229c:	2f f8       	sub	r8,-1
8000229e:	5c 88       	casts.h	r8
800022a0:	f0 07 19 00 	cp.h	r7,r8
800022a4:	fe 9b ff f1 	brhi	80002286 <et024006_PrintString+0x1de>

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
800022a8:	2f fc       	sub	r12,-1
800022aa:	5c 8c       	casts.h	r12
800022ac:	f8 02 19 00 	cp.h	r2,r12
800022b0:	e0 88 00 09 	brls	800022c2 <et024006_PrintString+0x21a>
          }
          mask >>= 1;
        }

        // Next row data
        data++;
800022b4:	2f fe       	sub	lr,-1
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
800022b6:	58 07       	cp.w	r7,0
800022b8:	cf 80       	breq	800022a8 <et024006_PrintString+0x200>
        {
          if (*data & mask) // if pixel data then put dot
800022ba:	1d 8b       	ld.ub	r11,lr[0x0]
800022bc:	00 99       	mov	r9,r0
800022be:	02 98       	mov	r8,r1
800022c0:	ce 4b       	rjmp	80002288 <et024006_PrintString+0x1e0>
800022c2:	40 08       	lddsp	r8,sp[0x0]
800022c4:	40 09       	lddsp	r9,sp[0x0]
800022c6:	2f f9       	sub	r9,-1
800022c8:	50 09       	stdsp	sp[0x0],r9
      }
      // move to next character start pixel
      x += xfont;
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800022ca:	11 88       	ld.ub	r8,r8[0x0]
800022cc:	ec 08 18 00 	cp.b	r8,r6
800022d0:	c0 40       	breq	800022d8 <et024006_PrintString+0x230>
800022d2:	40 1c       	lddsp	r12,sp[0x4]
800022d4:	5c 8c       	casts.h	r12
800022d6:	c9 5b       	rjmp	80002200 <et024006_PrintString+0x158>
  }
}
800022d8:	2f 3d       	sub	sp,-52
800022da:	d8 32       	popm	r0-r7,pc
800022dc:	80 00       	ld.sh	r0,r0[0x0]
800022de:	20 08       	sub	r8,0
800022e0:	80 00       	ld.sh	r0,r0[0x0]
800022e2:	20 84       	sub	r4,8

800022e4 <et024006_DuplicatePixel>:
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800022e4:	32 29       	mov	r9,34
800022e6:	fc 18 c0 00 	movh	r8,0xc000
800022ea:	b0 09       	st.h	r8[0x0],r9
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
800022ec:	58 7b       	cp.w	r11,7
800022ee:	e0 88 00 13 	brls	80002314 <et024006_DuplicatePixel+0x30>
800022f2:	16 99       	mov	r9,r11
    *ET024006_PARAM_ADDR = color;
800022f4:	fc 18 c0 20 	movh	r8,0xc020
800022f8:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800022fa:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800022fc:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
800022fe:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002300:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002302:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002304:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002306:	b0 0c       	st.h	r8[0x0],r12
    count-=8;
80002308:	20 89       	sub	r9,8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
8000230a:	58 79       	cp.w	r9,7
8000230c:	fe 9b ff f6 	brhi	800022f8 <et024006_DuplicatePixel+0x14>



/* --- Pixel block operations --- */

void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
80002310:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80002314:	58 0b       	cp.w	r11,0
80002316:	5e 0c       	reteq	r12
    *ET024006_PARAM_ADDR = color;
80002318:	fc 18 c0 20 	movh	r8,0xc020
8000231c:	b0 0c       	st.h	r8[0x0],r12
    --count;
8000231e:	20 1b       	sub	r11,1
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80002320:	cf e1       	brne	8000231c <et024006_DuplicatePixel+0x38>
80002322:	5e fc       	retal	r12

80002324 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80002324:	eb cd 40 e0 	pushm	r5-r7,lr
80002328:	14 97       	mov	r7,r10
8000232a:	12 96       	mov	r6,r9
8000232c:	10 95       	mov	r5,r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
8000232e:	f6 c9 00 01 	sub	r9,r11,1
80002332:	0c 09       	add	r9,r6
80002334:	f8 ca 00 01 	sub	r10,r12,1
80002338:	0e 0a       	add	r10,r7
8000233a:	5c 79       	castu.h	r9
8000233c:	5c 7a       	castu.h	r10
8000233e:	5c 7b       	castu.h	r11
80002340:	5c 7c       	castu.h	r12
80002342:	f0 1f 00 07 	mcall	8000235c <et024006_DrawFilledRect+0x38>
  uint32_t count = (uint32_t) width * height;
  et024006_DuplicatePixel( color, count );
80002346:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
8000234a:	5c 77       	castu.h	r7
8000234c:	af 3b       	mul	r11,r7
8000234e:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
80002352:	f0 1f 00 04 	mcall	80002360 <et024006_DrawFilledRect+0x3c>
}
80002356:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000235a:	00 00       	add	r0,r0
8000235c:	80 00       	ld.sh	r0,r0[0x0]
8000235e:	20 08       	sub	r8,0
80002360:	80 00       	ld.sh	r0,r0[0x0]
80002362:	22 e4       	sub	r4,46

80002364 <et024006_AdjustGamma>:

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002364:	fc 19 c0 00 	movh	r9,0xc000
80002368:	34 6a       	mov	r10,70
8000236a:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000236c:	fc 18 c0 20 	movh	r8,0xc020
80002370:	e0 6b 00 94 	mov	r11,148
80002374:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002376:	34 7b       	mov	r11,71
80002378:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000237a:	34 1b       	mov	r11,65
8000237c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000237e:	34 8b       	mov	r11,72
80002380:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002382:	30 0b       	mov	r11,0
80002384:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002386:	34 9b       	mov	r11,73
80002388:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000238a:	33 3b       	mov	r11,51
8000238c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000238e:	34 ab       	mov	r11,74
80002390:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002392:	32 5b       	mov	r11,37
80002394:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002396:	34 bb       	mov	r11,75
80002398:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000239a:	34 5b       	mov	r11,69
8000239c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000239e:	34 cb       	mov	r11,76
800023a0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023a2:	34 4b       	mov	r11,68
800023a4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023a6:	34 db       	mov	r11,77
800023a8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023aa:	37 7b       	mov	r11,119
800023ac:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023ae:	34 eb       	mov	r11,78
800023b0:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023b2:	31 2b       	mov	r11,18
800023b4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023b6:	34 fb       	mov	r11,79
800023b8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023ba:	e0 6b 00 cc 	mov	r11,204
800023be:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023c0:	35 0b       	mov	r11,80
800023c2:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023c4:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023c6:	35 1a       	mov	r10,81
800023c8:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023ca:	e0 69 00 82 	mov	r9,130
800023ce:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
800023d0:	5e fc       	retal	r12
800023d2:	d7 03       	nop

800023d4 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
800023d4:	eb cd 40 c0 	pushm	r6-r7,lr
  tft_data.cpu_hz = cpu_hz;
800023d8:	fe f7 04 80 	ld.w	r7,pc[1152]
800023dc:	8f 0c       	st.w	r7[0x0],r12
  tft_data.hsb_hz = hsb_hz;
800023de:	8f 1b       	st.w	r7[0x4],r11

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
800023e0:	16 9c       	mov	r12,r11
800023e2:	f0 1f 01 1f 	mcall	8000285c <et024006_Init+0x488>
static void et024006_SetupInterface( void )
{

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
800023e6:	35 5c       	mov	r12,85
800023e8:	f0 1f 01 1e 	mcall	80002860 <et024006_Init+0x48c>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
800023ec:	30 2b       	mov	r11,2
800023ee:	33 2c       	mov	r12,50
800023f0:	f0 1f 01 1d 	mcall	80002864 <et024006_Init+0x490>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
800023f4:	35 2c       	mov	r12,82
800023f6:	f0 1f 01 1d 	mcall	80002868 <et024006_Init+0x494>
/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
800023fa:	35 2c       	mov	r12,82
800023fc:	f0 1f 01 1c 	mcall	8000286c <et024006_Init+0x498>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002400:	6e 07       	ld.w	r7,r7[0x0]
80002402:	33 28       	mov	r8,50
80002404:	ee 08 06 46 	mulu.d	r6,r7,r8
80002408:	ee 78 42 40 	mov	r8,1000000
8000240c:	30 09       	mov	r9,0
8000240e:	ee 7a 42 3f 	mov	r10,999999
80002412:	30 0b       	mov	r11,0
80002414:	ec 0a 00 0a 	add	r10,r6,r10
80002418:	ee 0b 00 4b 	adc	r11,r7,r11
8000241c:	f0 1f 01 15 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002420:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002424:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002428:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000242c:	14 38       	cp.w	r8,r10
8000242e:	e0 88 00 09 	brls	80002440 <et024006_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002432:	12 38       	cp.w	r8,r9
80002434:	fe 98 ff fa 	brls	80002428 <et024006_Init+0x54>
80002438:	12 3a       	cp.w	r10,r9
8000243a:	e0 83 00 a2 	brlo	8000257e <et024006_Init+0x1aa>
8000243e:	cf 5b       	rjmp	80002428 <et024006_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002440:	12 38       	cp.w	r8,r9
80002442:	e0 8b 00 9e 	brhi	8000257e <et024006_Init+0x1aa>
80002446:	12 3a       	cp.w	r10,r9
80002448:	e0 83 00 9b 	brlo	8000257e <et024006_Init+0x1aa>
8000244c:	ce eb       	rjmp	80002428 <et024006_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000244e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002452:	14 38       	cp.w	r8,r10
80002454:	e0 88 00 09 	brls	80002466 <et024006_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002458:	12 38       	cp.w	r8,r9
8000245a:	fe 98 ff fa 	brls	8000244e <et024006_Init+0x7a>
8000245e:	12 3a       	cp.w	r10,r9
80002460:	e0 83 00 a9 	brlo	800025b2 <et024006_Init+0x1de>
80002464:	cf 5b       	rjmp	8000244e <et024006_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002466:	12 38       	cp.w	r8,r9
80002468:	e0 8b 00 a5 	brhi	800025b2 <et024006_Init+0x1de>
8000246c:	12 3a       	cp.w	r10,r9
8000246e:	e0 83 00 a2 	brlo	800025b2 <et024006_Init+0x1de>
80002472:	ce eb       	rjmp	8000244e <et024006_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002474:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002478:	14 38       	cp.w	r8,r10
8000247a:	e0 88 00 09 	brls	8000248c <et024006_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000247e:	12 38       	cp.w	r8,r9
80002480:	fe 98 ff fa 	brls	80002474 <et024006_Init+0xa0>
80002484:	12 3a       	cp.w	r10,r9
80002486:	e0 83 01 1e 	brlo	800026c2 <et024006_Init+0x2ee>
8000248a:	cf 5b       	rjmp	80002474 <et024006_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000248c:	12 38       	cp.w	r8,r9
8000248e:	e0 8b 01 1a 	brhi	800026c2 <et024006_Init+0x2ee>
80002492:	12 3a       	cp.w	r10,r9
80002494:	e0 83 01 17 	brlo	800026c2 <et024006_Init+0x2ee>
80002498:	ce eb       	rjmp	80002474 <et024006_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000249a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000249e:	14 38       	cp.w	r8,r10
800024a0:	e0 88 00 09 	brls	800024b2 <et024006_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800024a4:	12 38       	cp.w	r8,r9
800024a6:	fe 98 ff fa 	brls	8000249a <et024006_Init+0xc6>
800024aa:	12 3a       	cp.w	r10,r9
800024ac:	e0 83 01 29 	brlo	800026fe <et024006_Init+0x32a>
800024b0:	cf 5b       	rjmp	8000249a <et024006_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024b2:	12 38       	cp.w	r8,r9
800024b4:	e0 8b 01 25 	brhi	800026fe <et024006_Init+0x32a>
800024b8:	12 3a       	cp.w	r10,r9
800024ba:	e0 83 01 22 	brlo	800026fe <et024006_Init+0x32a>
800024be:	ce eb       	rjmp	8000249a <et024006_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800024c0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800024c4:	14 38       	cp.w	r8,r10
800024c6:	e0 88 00 09 	brls	800024d8 <et024006_Init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800024ca:	12 38       	cp.w	r8,r9
800024cc:	fe 98 ff fa 	brls	800024c0 <et024006_Init+0xec>
800024d0:	12 3a       	cp.w	r10,r9
800024d2:	e0 83 01 35 	brlo	8000273c <et024006_Init+0x368>
800024d6:	cf 5b       	rjmp	800024c0 <et024006_Init+0xec>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024d8:	12 38       	cp.w	r8,r9
800024da:	e0 8b 01 31 	brhi	8000273c <et024006_Init+0x368>
800024de:	12 3a       	cp.w	r10,r9
800024e0:	e0 83 01 2e 	brlo	8000273c <et024006_Init+0x368>
800024e4:	ce eb       	rjmp	800024c0 <et024006_Init+0xec>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800024e6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800024ea:	14 38       	cp.w	r8,r10
800024ec:	e0 88 00 09 	brls	800024fe <et024006_Init+0x12a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800024f0:	12 38       	cp.w	r8,r9
800024f2:	fe 98 ff fa 	brls	800024e6 <et024006_Init+0x112>
800024f6:	12 3a       	cp.w	r10,r9
800024f8:	e0 83 01 40 	brlo	80002778 <et024006_Init+0x3a4>
800024fc:	cf 5b       	rjmp	800024e6 <et024006_Init+0x112>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024fe:	12 38       	cp.w	r8,r9
80002500:	e0 8b 01 3c 	brhi	80002778 <et024006_Init+0x3a4>
80002504:	12 3a       	cp.w	r10,r9
80002506:	e0 83 01 39 	brlo	80002778 <et024006_Init+0x3a4>
8000250a:	ce eb       	rjmp	800024e6 <et024006_Init+0x112>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000250c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002510:	14 38       	cp.w	r8,r10
80002512:	e0 88 00 09 	brls	80002524 <et024006_Init+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002516:	12 38       	cp.w	r8,r9
80002518:	fe 98 ff fa 	brls	8000250c <et024006_Init+0x138>
8000251c:	12 3a       	cp.w	r10,r9
8000251e:	e0 83 01 4b 	brlo	800027b4 <et024006_Init+0x3e0>
80002522:	cf 5b       	rjmp	8000250c <et024006_Init+0x138>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002524:	12 38       	cp.w	r8,r9
80002526:	e0 8b 01 47 	brhi	800027b4 <et024006_Init+0x3e0>
8000252a:	12 3a       	cp.w	r10,r9
8000252c:	e0 83 01 44 	brlo	800027b4 <et024006_Init+0x3e0>
80002530:	ce eb       	rjmp	8000250c <et024006_Init+0x138>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002532:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002536:	14 38       	cp.w	r8,r10
80002538:	e0 88 00 09 	brls	8000254a <et024006_Init+0x176>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000253c:	12 38       	cp.w	r8,r9
8000253e:	fe 98 ff fa 	brls	80002532 <et024006_Init+0x15e>
80002542:	12 3a       	cp.w	r10,r9
80002544:	e0 83 01 56 	brlo	800027f0 <et024006_Init+0x41c>
80002548:	cf 5b       	rjmp	80002532 <et024006_Init+0x15e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000254a:	12 38       	cp.w	r8,r9
8000254c:	e0 8b 01 52 	brhi	800027f0 <et024006_Init+0x41c>
80002550:	12 3a       	cp.w	r10,r9
80002552:	e0 83 01 4f 	brlo	800027f0 <et024006_Init+0x41c>
80002556:	ce eb       	rjmp	80002532 <et024006_Init+0x15e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002558:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000255c:	14 38       	cp.w	r8,r10
8000255e:	e0 88 00 09 	brls	80002570 <et024006_Init+0x19c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002562:	12 38       	cp.w	r8,r9
80002564:	fe 98 ff fa 	brls	80002558 <et024006_Init+0x184>
80002568:	12 3a       	cp.w	r10,r9
8000256a:	e0 83 01 64 	brlo	80002832 <et024006_Init+0x45e>
8000256e:	cf 5b       	rjmp	80002558 <et024006_Init+0x184>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002570:	12 38       	cp.w	r8,r9
80002572:	e0 8b 01 60 	brhi	80002832 <et024006_Init+0x45e>
80002576:	12 3a       	cp.w	r10,r9
80002578:	e0 83 01 5d 	brlo	80002832 <et024006_Init+0x45e>
8000257c:	ce eb       	rjmp	80002558 <et024006_Init+0x184>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
8000257e:	35 2c       	mov	r12,82
80002580:	f0 1f 00 ba 	mcall	80002868 <et024006_Init+0x494>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002584:	fe f8 02 d4 	ld.w	r8,pc[724]
80002588:	70 07       	ld.w	r7,r8[0x0]
8000258a:	30 58       	mov	r8,5
8000258c:	ee 08 06 46 	mulu.d	r6,r7,r8
80002590:	e0 68 03 e8 	mov	r8,1000
80002594:	30 09       	mov	r9,0
80002596:	e0 6a 03 e7 	mov	r10,999
8000259a:	30 0b       	mov	r11,0
8000259c:	ec 0a 00 0a 	add	r10,r6,r10
800025a0:	ee 0b 00 4b 	adc	r11,r7,r11
800025a4:	f0 1f 00 b3 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800025a8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025ac:	f0 0a 00 0a 	add	r10,r8,r10
800025b0:	c4 fb       	rjmp	8000244e <et024006_Init+0x7a>
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
#endif
  et024006_SetupInterface();
  et024006_ResetDisplay();
  et024006_AdjustGamma();
800025b2:	f0 1f 00 b1 	mcall	80002874 <et024006_Init+0x4a0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025b6:	fc 19 c0 00 	movh	r9,0xc000
800025ba:	30 1a       	mov	r10,1
800025bc:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025be:	fc 18 c0 20 	movh	r8,0xc020
800025c2:	30 6b       	mov	r11,6
800025c4:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025c6:	33 ab       	mov	r11,58
800025c8:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025ca:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025cc:	33 bb       	mov	r11,59
800025ce:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025d0:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025d2:	33 ca       	mov	r10,60
800025d4:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025d6:	e0 6a 00 f0 	mov	r10,240
800025da:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025dc:	33 db       	mov	r11,61
800025de:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025e0:	30 07       	mov	r7,0
800025e2:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025e4:	33 eb       	mov	r11,62
800025e6:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025e8:	33 8b       	mov	r11,56
800025ea:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025ec:	34 0c       	mov	r12,64
800025ee:	b2 0c       	st.h	r9[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025f0:	30 fe       	mov	lr,15
800025f2:	b0 0e       	st.h	r8[0x0],lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025f4:	34 1e       	mov	lr,65
800025f6:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025f8:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025fa:	32 7a       	mov	r10,39
800025fc:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025fe:	30 2a       	mov	r10,2
80002600:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002602:	32 8e       	mov	lr,40
80002604:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002606:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002608:	32 9e       	mov	lr,41
8000260a:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000260c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000260e:	32 ae       	mov	lr,42
80002610:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002612:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002614:	32 ce       	mov	lr,44
80002616:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002618:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000261a:	32 de       	mov	lr,45
8000261c:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000261e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002620:	31 9a       	mov	r10,25
80002622:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002624:	34 9a       	mov	r10,73
80002626:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002628:	e0 6a 00 93 	mov	r10,147
8000262c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000262e:	30 8a       	mov	r10,8
80002630:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002632:	31 6a       	mov	r10,22
80002634:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002636:	36 8a       	mov	r10,104
80002638:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000263a:	32 3a       	mov	r10,35
8000263c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000263e:	e0 6a 00 95 	mov	r10,149
80002642:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002644:	32 4e       	mov	lr,36
80002646:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002648:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000264a:	32 5a       	mov	r10,37
8000264c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000264e:	e0 6a 00 ff 	mov	r10,255
80002652:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002654:	e0 6a 00 90 	mov	r10,144
80002658:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000265a:	37 fa       	mov	r10,127
8000265c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000265e:	33 5a       	mov	r10,53
80002660:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002662:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002664:	33 6a       	mov	r10,54
80002666:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002668:	37 8a       	mov	r10,120
8000266a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000266c:	31 da       	mov	r10,29
8000266e:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002670:	30 7a       	mov	r10,7
80002672:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002674:	31 ea       	mov	r10,30
80002676:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002678:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000267a:	31 fa       	mov	r10,31
8000267c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000267e:	30 4a       	mov	r10,4
80002680:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002682:	32 0a       	mov	r10,32
80002684:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002686:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002688:	34 4a       	mov	r10,68
8000268a:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000268c:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000268e:	34 5a       	mov	r10,69
80002690:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002692:	31 29       	mov	r9,18
80002694:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002696:	4f 18       	lddpc	r8,80002858 <et024006_Init+0x484>
80002698:	70 07       	ld.w	r7,r8[0x0]
8000269a:	30 a8       	mov	r8,10
8000269c:	ee 08 06 46 	mulu.d	r6,r7,r8
800026a0:	e0 68 03 e8 	mov	r8,1000
800026a4:	30 09       	mov	r9,0
800026a6:	e0 6a 03 e7 	mov	r10,999
800026aa:	30 0b       	mov	r11,0
800026ac:	ec 0a 00 0a 	add	r10,r6,r10
800026b0:	ee 0b 00 4b 	adc	r11,r7,r11
800026b4:	f0 1f 00 6f 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026b8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026bc:	f0 0a 00 0a 	add	r10,r8,r10
800026c0:	cd aa       	rjmp	80002474 <et024006_Init+0xa0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800026c2:	31 c9       	mov	r9,28
800026c4:	fc 18 c0 00 	movh	r8,0xc000
800026c8:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800026ca:	30 49       	mov	r9,4
800026cc:	fc 18 c0 20 	movh	r8,0xc020
800026d0:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800026d2:	4e 28       	lddpc	r8,80002858 <et024006_Init+0x484>
800026d4:	70 07       	ld.w	r7,r8[0x0]
800026d6:	31 48       	mov	r8,20
800026d8:	ee 08 06 46 	mulu.d	r6,r7,r8
800026dc:	e0 68 03 e8 	mov	r8,1000
800026e0:	30 09       	mov	r9,0
800026e2:	e0 6a 03 e7 	mov	r10,999
800026e6:	30 0b       	mov	r11,0
800026e8:	ec 0a 00 0a 	add	r10,r6,r10
800026ec:	ee 0b 00 4b 	adc	r11,r7,r11
800026f0:	f0 1f 00 60 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026f4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026f8:	f0 0a 00 0a 	add	r10,r8,r10
800026fc:	cc fa       	rjmp	8000249a <et024006_Init+0xc6>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800026fe:	34 39       	mov	r9,67
80002700:	fc 18 c0 00 	movh	r8,0xc000
80002704:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002706:	e0 69 00 80 	mov	r9,128
8000270a:	fc 18 c0 20 	movh	r8,0xc020
8000270e:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002710:	4d 28       	lddpc	r8,80002858 <et024006_Init+0x484>
80002712:	70 07       	ld.w	r7,r8[0x0]
80002714:	30 58       	mov	r8,5
80002716:	ee 08 06 46 	mulu.d	r6,r7,r8
8000271a:	e0 68 03 e8 	mov	r8,1000
8000271e:	30 09       	mov	r9,0
80002720:	e0 6a 03 e7 	mov	r10,999
80002724:	30 0b       	mov	r11,0
80002726:	ec 0a 00 0a 	add	r10,r6,r10
8000272a:	ee 0b 00 4b 	adc	r11,r7,r11
8000272e:	f0 1f 00 51 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002732:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002736:	f0 0a 00 0a 	add	r10,r8,r10
8000273a:	cc 3a       	rjmp	800024c0 <et024006_Init+0xec>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000273c:	31 b9       	mov	r9,27
8000273e:	fc 18 c0 00 	movh	r8,0xc000
80002742:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002744:	30 89       	mov	r9,8
80002746:	fc 18 c0 20 	movh	r8,0xc020
8000274a:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000274c:	4c 38       	lddpc	r8,80002858 <et024006_Init+0x484>
8000274e:	70 07       	ld.w	r7,r8[0x0]
80002750:	32 88       	mov	r8,40
80002752:	ee 08 06 46 	mulu.d	r6,r7,r8
80002756:	e0 68 03 e8 	mov	r8,1000
8000275a:	30 09       	mov	r9,0
8000275c:	e0 6a 03 e7 	mov	r10,999
80002760:	30 0b       	mov	r11,0
80002762:	ec 0a 00 0a 	add	r10,r6,r10
80002766:	ee 0b 00 4b 	adc	r11,r7,r11
8000276a:	f0 1f 00 42 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000276e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002772:	f0 0a 00 0a 	add	r10,r8,r10
80002776:	cb 8a       	rjmp	800024e6 <et024006_Init+0x112>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002778:	31 b9       	mov	r9,27
8000277a:	fc 18 c0 00 	movh	r8,0xc000
8000277e:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002780:	31 09       	mov	r9,16
80002782:	fc 18 c0 20 	movh	r8,0xc020
80002786:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002788:	4b 48       	lddpc	r8,80002858 <et024006_Init+0x484>
8000278a:	70 07       	ld.w	r7,r8[0x0]
8000278c:	32 88       	mov	r8,40
8000278e:	ee 08 06 46 	mulu.d	r6,r7,r8
80002792:	e0 68 03 e8 	mov	r8,1000
80002796:	30 09       	mov	r9,0
80002798:	e0 6a 03 e7 	mov	r10,999
8000279c:	30 0b       	mov	r11,0
8000279e:	ec 0a 00 0a 	add	r10,r6,r10
800027a2:	ee 0b 00 4b 	adc	r11,r7,r11
800027a6:	f0 1f 00 33 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800027aa:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800027ae:	f0 0a 00 0a 	add	r10,r8,r10
800027b2:	ca da       	rjmp	8000250c <et024006_Init+0x138>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027b4:	32 69       	mov	r9,38
800027b6:	fc 18 c0 00 	movh	r8,0xc000
800027ba:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027bc:	30 49       	mov	r9,4
800027be:	fc 18 c0 20 	movh	r8,0xc020
800027c2:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800027c4:	4a 58       	lddpc	r8,80002858 <et024006_Init+0x484>
800027c6:	70 07       	ld.w	r7,r8[0x0]
800027c8:	32 88       	mov	r8,40
800027ca:	ee 08 06 46 	mulu.d	r6,r7,r8
800027ce:	e0 68 03 e8 	mov	r8,1000
800027d2:	30 09       	mov	r9,0
800027d4:	e0 6a 03 e7 	mov	r10,999
800027d8:	30 0b       	mov	r11,0
800027da:	ec 0a 00 0a 	add	r10,r6,r10
800027de:	ee 0b 00 4b 	adc	r11,r7,r11
800027e2:	f0 1f 00 24 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800027e6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800027ea:	f0 0a 00 0a 	add	r10,r8,r10
800027ee:	ca 2a       	rjmp	80002532 <et024006_Init+0x15e>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800027f0:	fc 19 c0 00 	movh	r9,0xc000
800027f4:	32 6a       	mov	r10,38
800027f6:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800027f8:	fc 18 c0 20 	movh	r8,0xc020
800027fc:	32 4b       	mov	r11,36
800027fe:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002800:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002802:	32 c9       	mov	r9,44
80002804:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002806:	49 58       	lddpc	r8,80002858 <et024006_Init+0x484>
80002808:	70 07       	ld.w	r7,r8[0x0]
8000280a:	32 88       	mov	r8,40
8000280c:	ee 08 06 46 	mulu.d	r6,r7,r8
80002810:	e0 68 03 e8 	mov	r8,1000
80002814:	30 09       	mov	r9,0
80002816:	e0 6a 03 e7 	mov	r10,999
8000281a:	30 0b       	mov	r11,0
8000281c:	ec 0a 00 0a 	add	r10,r6,r10
80002820:	ee 0b 00 4b 	adc	r11,r7,r11
80002824:	f0 1f 00 13 	mcall	80002870 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002828:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000282c:	f0 0a 00 0a 	add	r10,r8,r10
80002830:	c9 4a       	rjmp	80002558 <et024006_Init+0x184>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002832:	fc 19 c0 00 	movh	r9,0xc000
80002836:	32 68       	mov	r8,38
80002838:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000283a:	fc 18 c0 20 	movh	r8,0xc020
8000283e:	33 ca       	mov	r10,60
80002840:	b0 0a       	st.h	r8[0x0],r10
}

__always_inline static uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002842:	37 0a       	mov	r10,112
80002844:	b2 0a       	st.h	r9[0x0],r10
  return *ET024006_PARAM_ADDR;
80002846:	90 0b       	ld.sh	r11,r8[0x0]
80002848:	5c 5b       	castu.b	r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000284a:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000284c:	16 99       	mov	r9,r11
8000284e:	a3 b9       	sbr	r9,0x3
80002850:	b0 09       	st.h	r8[0x0],r9
  et024006_GeneralSettings();
  et024006_InterfaceSettings();
  et024006_PowerSettings();
  et024006_PowerUp();
  et024006_PowerOn();
}
80002852:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002856:	00 00       	add	r0,r0
80002858:	00 00       	add	r0,r0
8000285a:	00 28       	rsub	r8,r0
8000285c:	80 00       	ld.sh	r0,r0[0x0]
8000285e:	32 00       	mov	r0,32
80002860:	80 00       	ld.sh	r0,r0[0x0]
80002862:	33 a0       	mov	r0,58
80002864:	80 00       	ld.sh	r0,r0[0x0]
80002866:	33 1c       	mov	r12,49
80002868:	80 00       	ld.sh	r0,r0[0x0]
8000286a:	33 ce       	mov	lr,60
8000286c:	80 00       	ld.sh	r0,r0[0x0]
8000286e:	33 ea       	mov	r10,62
80002870:	80 00       	ld.sh	r0,r0[0x0]
80002872:	42 e4       	lddsp	r4,sp[0xb8]
80002874:	80 00       	ld.sh	r0,r0[0x0]
80002876:	23 64       	sub	r4,54

80002878 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002878:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
8000287a:	4c 18       	lddpc	r8,8000297c <sd_mmc_spi_get_capacity+0x104>
8000287c:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000287e:	4c 18       	lddpc	r8,80002980 <sd_mmc_spi_get_capacity+0x108>
80002880:	11 8a       	ld.ub	r10,r8[0x0]
80002882:	30 38       	mov	r8,3
80002884:	f0 0a 18 00 	cp.b	r10,r8
80002888:	c2 71       	brne	800028d6 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
8000288a:	4b d8       	lddpc	r8,8000297c <sd_mmc_spi_get_capacity+0x104>
8000288c:	f1 3a 00 08 	ld.ub	r10,r8[8]
80002890:	f1 39 00 09 	ld.ub	r9,r8[9]
80002894:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002898:	11 fa       	ld.ub	r10,r8[0x7]
8000289a:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000289e:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
800028a2:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
800028a4:	f4 0b 16 0d 	lsr	r11,r10,0xd
800028a8:	16 99       	mov	r9,r11
800028aa:	f4 08 15 13 	lsl	r8,r10,0x13
800028ae:	4b 6a       	lddpc	r10,80002984 <sd_mmc_spi_get_capacity+0x10c>
800028b0:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
800028b4:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800028b8:	4b 48       	lddpc	r8,80002988 <sd_mmc_spi_get_capacity+0x110>
800028ba:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
800028bc:	f4 ea 00 00 	ld.d	r10,r10[0]
800028c0:	90 09       	ld.sh	r9,r8[0x0]
800028c2:	f4 08 16 09 	lsr	r8,r10,0x9
800028c6:	f1 eb 11 78 	or	r8,r8,r11<<0x17
800028ca:	20 18       	sub	r8,1
800028cc:	b7 79       	lsl	r9,0x17
800028ce:	12 08       	add	r8,r9
800028d0:	4a f9       	lddpc	r9,8000298c <sd_mmc_spi_get_capacity+0x114>
800028d2:	93 08       	st.w	r9[0x0],r8
800028d4:	c4 28       	rjmp	80002958 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
800028d6:	4a a8       	lddpc	r8,8000297c <sd_mmc_spi_get_capacity+0x104>
800028d8:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
800028dc:	f1 39 00 08 	ld.ub	r9,r8[8]
800028e0:	a7 89       	lsr	r9,0x6
800028e2:	11 fe       	ld.ub	lr,r8[0x7]
800028e4:	f2 0e 00 29 	add	r9,r9,lr<<0x2
800028e8:	11 ee       	ld.ub	lr,r8[0x6]
800028ea:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
800028ee:	ab 6e       	lsl	lr,0xa
800028f0:	1c 09       	add	r9,lr
800028f2:	2f f9       	sub	r9,-1
800028f4:	f1 38 00 09 	ld.ub	r8,r8[9]
800028f8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800028fc:	f8 0e 16 07 	lsr	lr,r12,0x7
80002900:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002904:	2f e8       	sub	r8,-2
80002906:	f2 08 09 49 	lsl	r9,r9,r8
8000290a:	20 19       	sub	r9,1
8000290c:	4a 08       	lddpc	r8,8000298c <sd_mmc_spi_get_capacity+0x114>
8000290e:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80002910:	70 0e       	ld.w	lr,r8[0x0]
80002912:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
80002916:	2f fe       	sub	lr,-1
80002918:	fc 0b 09 48 	lsl	r8,lr,r11
8000291c:	30 09       	mov	r9,0
8000291e:	49 ae       	lddpc	lr,80002984 <sd_mmc_spi_get_capacity+0x10c>
80002920:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
80002924:	49 98       	lddpc	r8,80002988 <sd_mmc_spi_get_capacity+0x110>
80002926:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
80002928:	30 98       	mov	r8,9
8000292a:	f0 0b 18 00 	cp.b	r11,r8
8000292e:	e0 88 00 08 	brls	8000293e <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
80002932:	49 78       	lddpc	r8,8000298c <sd_mmc_spi_get_capacity+0x114>
80002934:	70 09       	ld.w	r9,r8[0x0]
80002936:	20 9b       	sub	r11,9
80002938:	f2 0b 09 4b 	lsl	r11,r9,r11
8000293c:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
8000293e:	58 0a       	cp.w	r10,0
80002940:	c0 c1       	brne	80002958 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80002942:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
80002946:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8000294a:	48 d9       	lddpc	r9,8000297c <sd_mmc_spi_get_capacity+0x104>
8000294c:	f3 39 00 0b 	ld.ub	r9,r9[11]
80002950:	a3 7c       	lsl	r12,0x3
80002952:	f9 e9 12 59 	or	r9,r12,r9>>0x5
80002956:	c0 c8       	rjmp	8000296e <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
80002958:	48 9a       	lddpc	r10,8000297c <sd_mmc_spi_get_capacity+0x104>
8000295a:	f5 39 00 0a 	ld.ub	r9,r10[10]
8000295e:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
80002962:	f5 38 00 0b 	ld.ub	r8,r10[11]
80002966:	a7 98       	lsr	r8,0x7
80002968:	f0 09 00 18 	add	r8,r8,r9<<0x1
8000296c:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
8000296e:	2f f9       	sub	r9,-1
80002970:	2f f8       	sub	r8,-1
80002972:	b1 39       	mul	r9,r8
80002974:	48 78       	lddpc	r8,80002990 <sd_mmc_spi_get_capacity+0x118>
80002976:	b0 09       	st.h	r8[0x0],r9
}
80002978:	d8 02       	popm	pc
8000297a:	00 00       	add	r0,r0
8000297c:	00 00       	add	r0,r0
8000297e:	03 64       	ld.uh	r4,--r1
80002980:	00 00       	add	r0,r0
80002982:	03 62       	ld.uh	r2,--r1
80002984:	00 00       	add	r0,r0
80002986:	03 50       	ld.sh	r0,--r1
80002988:	00 00       	add	r0,r0
8000298a:	03 58       	ld.sh	r8,--r1
8000298c:	00 00       	add	r0,r0
8000298e:	03 5c       	ld.sh	r12,--r1
80002990:	00 00       	add	r0,r0
80002992:	03 5a       	ld.sh	r10,--r1

80002994 <sd_mmc_spi_read_close_PDCA>:
//! Stop PDCA transfer
//! @brief This function closes a PDCA read transfer
//! page programming.
//!
void sd_mmc_spi_read_close_PDCA (void)
{
80002994:	d4 01       	pushm	lr

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80002996:	e0 6b 00 ff 	mov	r11,255
8000299a:	fe 7c 24 00 	mov	r12,-56320
8000299e:	f0 1f 00 0e 	mcall	800029d4 <sd_mmc_spi_read_close_PDCA+0x40>
  spi_write(SD_MMC_SPI,0xFF);
800029a2:	e0 6b 00 ff 	mov	r11,255
800029a6:	fe 7c 24 00 	mov	r12,-56320
800029aa:	f0 1f 00 0b 	mcall	800029d4 <sd_mmc_spi_read_close_PDCA+0x40>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800029ae:	e0 6b 00 ff 	mov	r11,255
800029b2:	fe 7c 24 00 	mov	r12,-56320
800029b6:	f0 1f 00 08 	mcall	800029d4 <sd_mmc_spi_read_close_PDCA+0x40>
  spi_write(SD_MMC_SPI,0xFF);
800029ba:	e0 6b 00 ff 	mov	r11,255
800029be:	fe 7c 24 00 	mov	r12,-56320
800029c2:	f0 1f 00 05 	mcall	800029d4 <sd_mmc_spi_read_close_PDCA+0x40>

  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800029c6:	30 1b       	mov	r11,1
800029c8:	fe 7c 24 00 	mov	r12,-56320
800029cc:	f0 1f 00 03 	mcall	800029d8 <sd_mmc_spi_read_close_PDCA+0x44>

}
800029d0:	d8 02       	popm	pc
800029d2:	00 00       	add	r0,r0
800029d4:	80 00       	ld.sh	r0,r0[0x0]
800029d6:	39 d6       	mov	r6,-99
800029d8:	80 00       	ld.sh	r0,r0[0x0]
800029da:	38 f2       	mov	r2,-113

800029dc <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
800029dc:	d4 01       	pushm	lr
800029de:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800029e0:	18 9b       	mov	r11,r12
800029e2:	fe 7c 24 00 	mov	r12,-56320
800029e6:	f0 1f 00 09 	mcall	80002a08 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800029ea:	fa cb ff fe 	sub	r11,sp,-2
800029ee:	fe 7c 24 00 	mov	r12,-56320
800029f2:	f0 1f 00 07 	mcall	80002a0c <sd_mmc_spi_send_and_read+0x30>
800029f6:	58 1c       	cp.w	r12,1
800029f8:	c0 41       	brne	80002a00 <sd_mmc_spi_send_and_read+0x24>
800029fa:	e0 6c 00 ff 	mov	r12,255
800029fe:	c0 28       	rjmp	80002a02 <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002a00:	1b bc       	ld.ub	r12,sp[0x3]
}
80002a02:	2f fd       	sub	sp,-4
80002a04:	d8 02       	popm	pc
80002a06:	00 00       	add	r0,r0
80002a08:	80 00       	ld.sh	r0,r0[0x0]
80002a0a:	39 d6       	mov	r6,-99
80002a0c:	80 00       	ld.sh	r0,r0[0x0]
80002a0e:	39 f2       	mov	r2,-97

80002a10 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002a10:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002a12:	30 1b       	mov	r11,1
80002a14:	fe 7c 24 00 	mov	r12,-56320
80002a18:	f0 1f 00 10 	mcall	80002a58 <sd_mmc_spi_wait_not_busy+0x48>
80002a1c:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002a1e:	e0 65 00 ff 	mov	r5,255
80002a22:	48 f4       	lddpc	r4,80002a5c <sd_mmc_spi_wait_not_busy+0x4c>
80002a24:	3f f6       	mov	r6,-1
80002a26:	c0 b8       	rjmp	80002a3c <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002a28:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002a2a:	e2 57 0d 40 	cp.w	r7,200000
80002a2e:	c0 71       	brne	80002a3c <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002a30:	30 1b       	mov	r11,1
80002a32:	fe 7c 24 00 	mov	r12,-56320
80002a36:	f0 1f 00 0b 	mcall	80002a60 <sd_mmc_spi_wait_not_busy+0x50>
80002a3a:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002a3c:	0a 9c       	mov	r12,r5
80002a3e:	f0 1f 00 0a 	mcall	80002a64 <sd_mmc_spi_wait_not_busy+0x54>
80002a42:	a8 8c       	st.b	r4[0x0],r12
80002a44:	ec 0c 18 00 	cp.b	r12,r6
80002a48:	cf 01       	brne	80002a28 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002a4a:	30 1b       	mov	r11,1
80002a4c:	fe 7c 24 00 	mov	r12,-56320
80002a50:	f0 1f 00 04 	mcall	80002a60 <sd_mmc_spi_wait_not_busy+0x50>
80002a54:	da 2a       	popm	r4-r7,pc,r12=1
80002a56:	00 00       	add	r0,r0
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	38 a6       	mov	r6,-118
80002a5c:	00 00       	add	r0,r0
80002a5e:	03 74       	ld.ub	r4,--r1
80002a60:	80 00       	ld.sh	r0,r0[0x0]
80002a62:	38 f2       	mov	r2,-113
80002a64:	80 00       	ld.sh	r0,r0[0x0]
80002a66:	29 dc       	sub	r12,-99

80002a68 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
80002a68:	eb cd 40 f8 	pushm	r3-r7,lr
80002a6c:	18 96       	mov	r6,r12
80002a6e:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80002a70:	e0 6b 00 ff 	mov	r11,255
80002a74:	fe 7c 24 00 	mov	r12,-56320
80002a78:	f0 1f 00 2b 	mcall	80002b24 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002a7c:	0c 9b       	mov	r11,r6
80002a7e:	a7 ab       	sbr	r11,0x6
80002a80:	5c 5b       	castu.b	r11
80002a82:	fe 7c 24 00 	mov	r12,-56320
80002a86:	f0 1f 00 28 	mcall	80002b24 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
80002a8a:	ee 0b 16 18 	lsr	r11,r7,0x18
80002a8e:	fe 7c 24 00 	mov	r12,-56320
80002a92:	f0 1f 00 25 	mcall	80002b24 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
80002a96:	ee 0b 16 10 	lsr	r11,r7,0x10
80002a9a:	fe 7c 24 00 	mov	r12,-56320
80002a9e:	f0 1f 00 22 	mcall	80002b24 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002aa2:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
80002aa6:	fe 7c 24 00 	mov	r12,-56320
80002aaa:	f0 1f 00 1f 	mcall	80002b24 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002aae:	0e 9b       	mov	r11,r7
80002ab0:	5c 7b       	castu.h	r11
80002ab2:	fe 7c 24 00 	mov	r12,-56320
80002ab6:	f0 1f 00 1c 	mcall	80002b24 <sd_mmc_spi_command+0xbc>
  switch(command)
80002aba:	30 08       	mov	r8,0
80002abc:	f0 06 18 00 	cp.b	r6,r8
80002ac0:	c0 60       	breq	80002acc <sd_mmc_spi_command+0x64>
80002ac2:	30 88       	mov	r8,8
80002ac4:	f0 06 18 00 	cp.b	r6,r8
80002ac8:	c1 01       	brne	80002ae8 <sd_mmc_spi_command+0x80>
80002aca:	c0 88       	rjmp	80002ada <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002acc:	e0 6b 00 95 	mov	r11,149
80002ad0:	fe 7c 24 00 	mov	r12,-56320
80002ad4:	f0 1f 00 14 	mcall	80002b24 <sd_mmc_spi_command+0xbc>
         break;
80002ad8:	c0 e8       	rjmp	80002af4 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
80002ada:	e0 6b 00 87 	mov	r11,135
80002ade:	fe 7c 24 00 	mov	r12,-56320
80002ae2:	f0 1f 00 11 	mcall	80002b24 <sd_mmc_spi_command+0xbc>
         break;
80002ae6:	c0 78       	rjmp	80002af4 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
80002ae8:	e0 6b 00 ff 	mov	r11,255
80002aec:	fe 7c 24 00 	mov	r12,-56320
80002af0:	f0 1f 00 0d 	mcall	80002b24 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002af4:	3f f9       	mov	r9,-1
80002af6:	48 d8       	lddpc	r8,80002b28 <sd_mmc_spi_command+0xc0>
80002af8:	b0 89       	st.b	r8[0x0],r9
80002afa:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002afc:	e0 64 00 ff 	mov	r4,255
80002b00:	10 93       	mov	r3,r8
80002b02:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002b04:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002b06:	c0 68       	rjmp	80002b12 <sd_mmc_spi_command+0xaa>
  {
    retry++;
80002b08:	2f f7       	sub	r7,-1
80002b0a:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002b0c:	ea 07 18 00 	cp.b	r7,r5
80002b10:	c0 80       	breq	80002b20 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002b12:	08 9c       	mov	r12,r4
80002b14:	f0 1f 00 06 	mcall	80002b2c <sd_mmc_spi_command+0xc4>
80002b18:	a6 8c       	st.b	r3[0x0],r12
80002b1a:	ec 0c 18 00 	cp.b	r12,r6
80002b1e:	cf 50       	breq	80002b08 <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80002b20:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002b24:	80 00       	ld.sh	r0,r0[0x0]
80002b26:	39 d6       	mov	r6,-99
80002b28:	00 00       	add	r0,r0
80002b2a:	03 74       	ld.ub	r4,--r1
80002b2c:	80 00       	ld.sh	r0,r0[0x0]
80002b2e:	29 dc       	sub	r12,-99

80002b30 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
80002b30:	eb cd 40 c0 	pushm	r6-r7,lr
80002b34:	18 97       	mov	r7,r12
80002b36:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002b38:	30 1b       	mov	r11,1
80002b3a:	fe 7c 24 00 	mov	r12,-56320
80002b3e:	f0 1f 00 09 	mcall	80002b60 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
80002b42:	0c 9b       	mov	r11,r6
80002b44:	0e 9c       	mov	r12,r7
80002b46:	f0 1f 00 08 	mcall	80002b64 <sd_mmc_spi_send_command+0x34>
80002b4a:	48 87       	lddpc	r7,80002b68 <sd_mmc_spi_send_command+0x38>
80002b4c:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002b4e:	30 1b       	mov	r11,1
80002b50:	fe 7c 24 00 	mov	r12,-56320
80002b54:	f0 1f 00 06 	mcall	80002b6c <sd_mmc_spi_send_command+0x3c>
  return r1;
}
80002b58:	0f 8c       	ld.ub	r12,r7[0x0]
80002b5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b5e:	00 00       	add	r0,r0
80002b60:	80 00       	ld.sh	r0,r0[0x0]
80002b62:	38 a6       	mov	r6,-118
80002b64:	80 00       	ld.sh	r0,r0[0x0]
80002b66:	2a 68       	sub	r8,-90
80002b68:	00 00       	add	r0,r0
80002b6a:	03 74       	ld.ub	r4,--r1
80002b6c:	80 00       	ld.sh	r0,r0[0x0]
80002b6e:	38 f2       	mov	r2,-113

80002b70 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
80002b70:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
80002b74:	49 a8       	lddpc	r8,80002bdc <sd_mmc_spi_check_presence+0x6c>
80002b76:	11 89       	ld.ub	r9,r8[0x0]
80002b78:	30 08       	mov	r8,0
80002b7a:	f0 09 18 00 	cp.b	r9,r8
80002b7e:	c1 f1       	brne	80002bbc <sd_mmc_spi_check_presence+0x4c>
80002b80:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002b82:	0e 94       	mov	r4,r7
80002b84:	49 73       	lddpc	r3,80002be0 <sd_mmc_spi_check_presence+0x70>
80002b86:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b88:	e0 62 00 ff 	mov	r2,255
80002b8c:	fe 71 24 00 	mov	r1,-56320
      retry++;
      if (retry > 10)
80002b90:	30 b5       	mov	r5,11
80002b92:	c0 c8       	rjmp	80002baa <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b94:	04 9b       	mov	r11,r2
80002b96:	02 9c       	mov	r12,r1
80002b98:	f0 1f 00 13 	mcall	80002be4 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002b9c:	2f f7       	sub	r7,-1
80002b9e:	5c 87       	casts.h	r7
      if (retry > 10)
80002ba0:	ea 07 19 00 	cp.h	r7,r5
80002ba4:	c0 31       	brne	80002baa <sd_mmc_spi_check_presence+0x3a>
80002ba6:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002baa:	08 9b       	mov	r11,r4
80002bac:	08 9c       	mov	r12,r4
80002bae:	f0 1f 00 0f 	mcall	80002be8 <sd_mmc_spi_check_presence+0x78>
80002bb2:	a6 8c       	st.b	r3[0x0],r12
80002bb4:	ec 0c 18 00 	cp.b	r12,r6
80002bb8:	ce e1       	brne	80002b94 <sd_mmc_spi_check_presence+0x24>
80002bba:	c0 e8       	rjmp	80002bd6 <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002bbc:	30 0b       	mov	r11,0
80002bbe:	33 bc       	mov	r12,59
80002bc0:	f0 1f 00 0a 	mcall	80002be8 <sd_mmc_spi_check_presence+0x78>
80002bc4:	48 78       	lddpc	r8,80002be0 <sd_mmc_spi_check_presence+0x70>
80002bc6:	b0 8c       	st.b	r8[0x0],r12
80002bc8:	58 0c       	cp.w	r12,0
80002bca:	c0 60       	breq	80002bd6 <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002bcc:	30 09       	mov	r9,0
80002bce:	48 48       	lddpc	r8,80002bdc <sd_mmc_spi_check_presence+0x6c>
80002bd0:	b0 89       	st.b	r8[0x0],r9
80002bd2:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
80002bd6:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
80002bda:	00 00       	add	r0,r0
80002bdc:	00 00       	add	r0,r0
80002bde:	00 4c       	or	r12,r0
80002be0:	00 00       	add	r0,r0
80002be2:	03 74       	ld.ub	r4,--r1
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	39 d6       	mov	r6,-99
80002be8:	80 00       	ld.sh	r0,r0[0x0]
80002bea:	2b 30       	sub	r0,-77

80002bec <sd_mmc_spi_read_open_PDCA>:
//!
//! @return bit
//!   The open succeeded      -> true
//!/
bool sd_mmc_spi_read_open_PDCA (uint32_t pos)
{
80002bec:	d4 21       	pushm	r4-r7,lr
  uint16_t read_time_out;

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = (uint64_t)pos << 9;                    // gl_ptr_mem = pos * 512
80002bee:	4a e8       	lddpc	r8,80002ca4 <sd_mmc_spi_read_open_PDCA+0xb8>
80002bf0:	f8 09 16 17 	lsr	r9,r12,0x17
80002bf4:	91 09       	st.w	r8[0x0],r9
80002bf6:	a9 7c       	lsl	r12,0x9
80002bf8:	91 1c       	st.w	r8[0x4],r12

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002bfa:	f0 1f 00 2c 	mcall	80002ca8 <sd_mmc_spi_read_open_PDCA+0xbc>
80002bfe:	c5 20       	breq	80002ca2 <sd_mmc_spi_read_open_PDCA+0xb6>
    return false;


  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);          // select SD_MMC_SPI
80002c00:	30 1b       	mov	r11,1
80002c02:	fe 7c 24 00 	mov	r12,-56320
80002c06:	f0 1f 00 2a 	mcall	80002cac <sd_mmc_spi_read_open_PDCA+0xc0>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002c0a:	4a a8       	lddpc	r8,80002cb0 <sd_mmc_spi_read_open_PDCA+0xc4>
80002c0c:	11 89       	ld.ub	r9,r8[0x0]
80002c0e:	30 38       	mov	r8,3
80002c10:	f0 09 18 00 	cp.b	r9,r8
80002c14:	c0 d1       	brne	80002c2e <sd_mmc_spi_read_open_PDCA+0x42>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002c16:	4a 48       	lddpc	r8,80002ca4 <sd_mmc_spi_read_open_PDCA+0xb8>
80002c18:	70 0b       	ld.w	r11,r8[0x0]
80002c1a:	70 18       	ld.w	r8,r8[0x4]
80002c1c:	a9 98       	lsr	r8,0x9
80002c1e:	f1 eb 11 7b 	or	r11,r8,r11<<0x17
80002c22:	31 1c       	mov	r12,17
80002c24:	f0 1f 00 24 	mcall	80002cb4 <sd_mmc_spi_read_open_PDCA+0xc8>
80002c28:	4a 48       	lddpc	r8,80002cb8 <sd_mmc_spi_read_open_PDCA+0xcc>
80002c2a:	b0 8c       	st.b	r8[0x0],r12
80002c2c:	c0 88       	rjmp	80002c3c <sd_mmc_spi_read_open_PDCA+0x50>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002c2e:	49 e8       	lddpc	r8,80002ca4 <sd_mmc_spi_read_open_PDCA+0xb8>
80002c30:	70 1b       	ld.w	r11,r8[0x4]
80002c32:	31 1c       	mov	r12,17
80002c34:	f0 1f 00 20 	mcall	80002cb4 <sd_mmc_spi_read_open_PDCA+0xc8>
80002c38:	4a 08       	lddpc	r8,80002cb8 <sd_mmc_spi_read_open_PDCA+0xcc>
80002c3a:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002c3c:	49 f8       	lddpc	r8,80002cb8 <sd_mmc_spi_read_open_PDCA+0xcc>
80002c3e:	11 89       	ld.ub	r9,r8[0x0]
80002c40:	30 08       	mov	r8,0
80002c42:	f0 09 18 00 	cp.b	r9,r8
80002c46:	c1 00       	breq	80002c66 <sd_mmc_spi_read_open_PDCA+0x7a>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002c48:	30 1b       	mov	r11,1
80002c4a:	fe 7c 24 00 	mov	r12,-56320
80002c4e:	f0 1f 00 1c 	mcall	80002cbc <sd_mmc_spi_read_open_PDCA+0xd0>
80002c52:	d8 2a       	popm	r4-r7,pc,r12=0

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002c54:	20 17       	sub	r7,1
80002c56:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002c58:	c0 d1       	brne	80002c72 <sd_mmc_spi_read_open_PDCA+0x86>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002c5a:	30 1b       	mov	r11,1
80002c5c:	fe 7c 24 00 	mov	r12,-56320
80002c60:	f0 1f 00 17 	mcall	80002cbc <sd_mmc_spi_read_open_PDCA+0xd0>
80002c64:	d8 2a       	popm	r4-r7,pc,r12=0
       return false;
80002c66:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002c6a:	e0 65 00 ff 	mov	r5,255
80002c6e:	49 34       	lddpc	r4,80002cb8 <sd_mmc_spi_read_open_PDCA+0xcc>
80002c70:	3f f6       	mov	r6,-1
80002c72:	0a 9c       	mov	r12,r5
80002c74:	f0 1f 00 13 	mcall	80002cc0 <sd_mmc_spi_read_open_PDCA+0xd4>
80002c78:	a8 8c       	st.b	r4[0x0],r12
80002c7a:	ec 0c 18 00 	cp.b	r12,r6
80002c7e:	ce b0       	breq	80002c54 <sd_mmc_spi_read_open_PDCA+0x68>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80002c80:	3f e8       	mov	r8,-2
80002c82:	f0 0c 18 00 	cp.b	r12,r8
80002c86:	c0 21       	brne	80002c8a <sd_mmc_spi_read_open_PDCA+0x9e>
80002c88:	da 2a       	popm	r4-r7,pc,r12=1
  {
    spi_write(SD_MMC_SPI,0xFF);
80002c8a:	e0 6b 00 ff 	mov	r11,255
80002c8e:	fe 7c 24 00 	mov	r12,-56320
80002c92:	f0 1f 00 0d 	mcall	80002cc4 <sd_mmc_spi_read_open_PDCA+0xd8>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002c96:	30 1b       	mov	r11,1
80002c98:	fe 7c 24 00 	mov	r12,-56320
80002c9c:	f0 1f 00 08 	mcall	80002cbc <sd_mmc_spi_read_open_PDCA+0xd0>
80002ca0:	30 0c       	mov	r12,0
    return false;
  }
  return true;   // Read done.
}
80002ca2:	d8 22       	popm	r4-r7,pc
80002ca4:	00 00       	add	r0,r0
80002ca6:	00 30       	cp.w	r0,r0
80002ca8:	80 00       	ld.sh	r0,r0[0x0]
80002caa:	2a 10       	sub	r0,-95
80002cac:	80 00       	ld.sh	r0,r0[0x0]
80002cae:	38 a6       	mov	r6,-118
80002cb0:	00 00       	add	r0,r0
80002cb2:	03 62       	ld.uh	r2,--r1
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	2a 68       	sub	r8,-90
80002cb8:	00 00       	add	r0,r0
80002cba:	03 74       	ld.ub	r4,--r1
80002cbc:	80 00       	ld.sh	r0,r0[0x0]
80002cbe:	38 f2       	mov	r2,-113
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	29 dc       	sub	r12,-99
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	39 d6       	mov	r6,-99

80002cc8 <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
80002cc8:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002ccc:	f0 1f 00 1c 	mcall	80002d3c <sd_mmc_spi_check_hc+0x74>
80002cd0:	c0 31       	brne	80002cd6 <sd_mmc_spi_check_hc+0xe>
80002cd2:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002cd6:	30 1b       	mov	r11,1
80002cd8:	fe 7c 24 00 	mov	r12,-56320
80002cdc:	f0 1f 00 19 	mcall	80002d40 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80002ce0:	30 0b       	mov	r11,0
80002ce2:	33 ac       	mov	r12,58
80002ce4:	f0 1f 00 18 	mcall	80002d44 <sd_mmc_spi_check_hc+0x7c>
80002ce8:	49 88       	lddpc	r8,80002d48 <sd_mmc_spi_check_hc+0x80>
80002cea:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
80002cec:	58 0c       	cp.w	r12,0
80002cee:	c0 80       	breq	80002cfe <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002cf0:	30 1b       	mov	r11,1
80002cf2:	fe 7c 24 00 	mov	r12,-56320
80002cf6:	f0 1f 00 16 	mcall	80002d4c <sd_mmc_spi_check_hc+0x84>
80002cfa:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
80002cfe:	e0 6c 00 ff 	mov	r12,255
80002d02:	f0 1f 00 14 	mcall	80002d50 <sd_mmc_spi_check_hc+0x88>
80002d06:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002d08:	e0 6c 00 ff 	mov	r12,255
80002d0c:	f0 1f 00 11 	mcall	80002d50 <sd_mmc_spi_check_hc+0x88>
80002d10:	48 e7       	lddpc	r7,80002d48 <sd_mmc_spi_check_hc+0x80>
80002d12:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002d14:	e0 6c 00 ff 	mov	r12,255
80002d18:	f0 1f 00 0e 	mcall	80002d50 <sd_mmc_spi_check_hc+0x88>
80002d1c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002d1e:	e0 6c 00 ff 	mov	r12,255
80002d22:	f0 1f 00 0c 	mcall	80002d50 <sd_mmc_spi_check_hc+0x88>
80002d26:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002d28:	30 1b       	mov	r11,1
80002d2a:	fe 7c 24 00 	mov	r12,-56320
80002d2e:	f0 1f 00 08 	mcall	80002d4c <sd_mmc_spi_check_hc+0x84>
80002d32:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
80002d36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d3a:	00 00       	add	r0,r0
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	2a 10       	sub	r0,-95
80002d40:	80 00       	ld.sh	r0,r0[0x0]
80002d42:	38 a6       	mov	r6,-118
80002d44:	80 00       	ld.sh	r0,r0[0x0]
80002d46:	2a 68       	sub	r8,-90
80002d48:	00 00       	add	r0,r0
80002d4a:	03 74       	ld.ub	r4,--r1
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	38 f2       	mov	r2,-113
80002d50:	80 00       	ld.sh	r0,r0[0x0]
80002d52:	29 dc       	sub	r12,-99

80002d54 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002d54:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002d58:	f0 1f 00 27 	mcall	80002df4 <sd_mmc_spi_get_if+0xa0>
80002d5c:	c0 31       	brne	80002d62 <sd_mmc_spi_get_if+0xe>
80002d5e:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002d62:	30 1b       	mov	r11,1
80002d64:	fe 7c 24 00 	mov	r12,-56320
80002d68:	f0 1f 00 24 	mcall	80002df8 <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002d6c:	e0 6b 01 aa 	mov	r11,426
80002d70:	30 8c       	mov	r12,8
80002d72:	f0 1f 00 23 	mcall	80002dfc <sd_mmc_spi_get_if+0xa8>
80002d76:	4a 38       	lddpc	r8,80002e00 <sd_mmc_spi_get_if+0xac>
80002d78:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
80002d7a:	e2 1c 00 04 	andl	r12,0x4,COH
80002d7e:	c0 80       	breq	80002d8e <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002d80:	30 1b       	mov	r11,1
80002d82:	fe 7c 24 00 	mov	r12,-56320
80002d86:	f0 1f 00 20 	mcall	80002e04 <sd_mmc_spi_get_if+0xb0>
80002d8a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002d8e:	e0 6c 00 ff 	mov	r12,255
80002d92:	f0 1f 00 1e 	mcall	80002e08 <sd_mmc_spi_get_if+0xb4>
80002d96:	49 b7       	lddpc	r7,80002e00 <sd_mmc_spi_get_if+0xac>
80002d98:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002d9a:	e0 6c 00 ff 	mov	r12,255
80002d9e:	f0 1f 00 1b 	mcall	80002e08 <sd_mmc_spi_get_if+0xb4>
80002da2:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002da4:	e0 6c 00 ff 	mov	r12,255
80002da8:	f0 1f 00 18 	mcall	80002e08 <sd_mmc_spi_get_if+0xb4>
80002dac:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
80002dae:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002db2:	c0 81       	brne	80002dc2 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002db4:	30 1b       	mov	r11,1
80002db6:	fe 7c 24 00 	mov	r12,-56320
80002dba:	f0 1f 00 13 	mcall	80002e04 <sd_mmc_spi_get_if+0xb0>
80002dbe:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002dc2:	e0 6c 00 ff 	mov	r12,255
80002dc6:	f0 1f 00 11 	mcall	80002e08 <sd_mmc_spi_get_if+0xb4>
80002dca:	48 e8       	lddpc	r8,80002e00 <sd_mmc_spi_get_if+0xac>
80002dcc:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
80002dce:	3a a8       	mov	r8,-86
80002dd0:	f0 0c 18 00 	cp.b	r12,r8
80002dd4:	c0 80       	breq	80002de4 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002dd6:	30 1b       	mov	r11,1
80002dd8:	fe 7c 24 00 	mov	r12,-56320
80002ddc:	f0 1f 00 0a 	mcall	80002e04 <sd_mmc_spi_get_if+0xb0>
80002de0:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002de4:	30 1b       	mov	r11,1
80002de6:	fe 7c 24 00 	mov	r12,-56320
80002dea:	f0 1f 00 07 	mcall	80002e04 <sd_mmc_spi_get_if+0xb0>
80002dee:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80002df2:	00 00       	add	r0,r0
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2a 10       	sub	r0,-95
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	38 a6       	mov	r6,-118
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	2a 68       	sub	r8,-90
80002e00:	00 00       	add	r0,r0
80002e02:	03 74       	ld.ub	r4,--r1
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	38 f2       	mov	r2,-113
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	29 dc       	sub	r12,-99

80002e0c <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002e0c:	eb cd 40 fc 	pushm	r2-r7,lr
80002e10:	20 1d       	sub	sp,4
80002e12:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002e14:	f0 1f 00 32 	mcall	80002edc <sd_mmc_spi_get_csd+0xd0>
80002e18:	c5 f0       	breq	80002ed6 <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002e1a:	30 1b       	mov	r11,1
80002e1c:	fe 7c 24 00 	mov	r12,-56320
80002e20:	f0 1f 00 30 	mcall	80002ee0 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002e24:	30 0b       	mov	r11,0
80002e26:	30 9c       	mov	r12,9
80002e28:	f0 1f 00 2f 	mcall	80002ee4 <sd_mmc_spi_get_csd+0xd8>
80002e2c:	4a f8       	lddpc	r8,80002ee8 <sd_mmc_spi_get_csd+0xdc>
80002e2e:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002e30:	58 0c       	cp.w	r12,0
80002e32:	c0 81       	brne	80002e42 <sd_mmc_spi_get_csd+0x36>
80002e34:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002e36:	e0 64 00 ff 	mov	r4,255
80002e3a:	10 93       	mov	r3,r8
80002e3c:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002e3e:	30 95       	mov	r5,9
80002e40:	c1 78       	rjmp	80002e6e <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002e42:	30 1b       	mov	r11,1
80002e44:	fe 7c 24 00 	mov	r12,-56320
80002e48:	f0 1f 00 29 	mcall	80002eec <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002e4c:	30 09       	mov	r9,0
80002e4e:	4a 98       	lddpc	r8,80002ef0 <sd_mmc_spi_get_csd+0xe4>
80002e50:	b0 89       	st.b	r8[0x0],r9
80002e52:	30 0c       	mov	r12,0
    return false;
80002e54:	c4 18       	rjmp	80002ed6 <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
80002e56:	ea 07 18 00 	cp.b	r7,r5
80002e5a:	c0 81       	brne	80002e6a <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002e5c:	30 1b       	mov	r11,1
80002e5e:	fe 7c 24 00 	mov	r12,-56320
80002e62:	f0 1f 00 23 	mcall	80002eec <sd_mmc_spi_get_csd+0xe0>
80002e66:	30 0c       	mov	r12,0
      return false;
80002e68:	c3 78       	rjmp	80002ed6 <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
80002e6a:	2f f7       	sub	r7,-1
80002e6c:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002e6e:	08 9c       	mov	r12,r4
80002e70:	f0 1f 00 21 	mcall	80002ef4 <sd_mmc_spi_get_csd+0xe8>
80002e74:	a6 8c       	st.b	r3[0x0],r12
80002e76:	ec 0c 18 00 	cp.b	r12,r6
80002e7a:	ce e1       	brne	80002e56 <sd_mmc_spi_get_csd+0x4a>
80002e7c:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002e7e:	e0 65 00 ff 	mov	r5,255
80002e82:	fe 76 24 00 	mov	r6,-56320
   spi_read(SD_MMC_SPI,&data_read);
80002e86:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80002e8a:	0a 9b       	mov	r11,r5
80002e8c:	0c 9c       	mov	r12,r6
80002e8e:	f0 1f 00 1b 	mcall	80002ef8 <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
80002e92:	08 9b       	mov	r11,r4
80002e94:	0c 9c       	mov	r12,r6
80002e96:	f0 1f 00 1a 	mcall	80002efc <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
80002e9a:	9a 18       	ld.sh	r8,sp[0x2]
80002e9c:	e4 07 0b 08 	st.b	r2[r7],r8
80002ea0:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
80002ea2:	59 07       	cp.w	r7,16
80002ea4:	cf 31       	brne	80002e8a <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80002ea6:	e0 6b 00 ff 	mov	r11,255
80002eaa:	fe 7c 24 00 	mov	r12,-56320
80002eae:	f0 1f 00 13 	mcall	80002ef8 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
80002eb2:	e0 6b 00 ff 	mov	r11,255
80002eb6:	fe 7c 24 00 	mov	r12,-56320
80002eba:	f0 1f 00 10 	mcall	80002ef8 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002ebe:	e0 6b 00 ff 	mov	r11,255
80002ec2:	fe 7c 24 00 	mov	r12,-56320
80002ec6:	f0 1f 00 0d 	mcall	80002ef8 <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002eca:	30 1b       	mov	r11,1
80002ecc:	fe 7c 24 00 	mov	r12,-56320
80002ed0:	f0 1f 00 07 	mcall	80002eec <sd_mmc_spi_get_csd+0xe0>
80002ed4:	30 1c       	mov	r12,1
  return true;
}
80002ed6:	2f fd       	sub	sp,-4
80002ed8:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002edc:	80 00       	ld.sh	r0,r0[0x0]
80002ede:	2a 10       	sub	r0,-95
80002ee0:	80 00       	ld.sh	r0,r0[0x0]
80002ee2:	38 a6       	mov	r6,-118
80002ee4:	80 00       	ld.sh	r0,r0[0x0]
80002ee6:	2a 68       	sub	r8,-90
80002ee8:	00 00       	add	r0,r0
80002eea:	03 74       	ld.ub	r4,--r1
80002eec:	80 00       	ld.sh	r0,r0[0x0]
80002eee:	38 f2       	mov	r2,-113
80002ef0:	00 00       	add	r0,r0
80002ef2:	00 4c       	or	r12,r0
80002ef4:	80 00       	ld.sh	r0,r0[0x0]
80002ef6:	29 dc       	sub	r12,-99
80002ef8:	80 00       	ld.sh	r0,r0[0x0]
80002efa:	39 d6       	mov	r6,-99
80002efc:	80 00       	ld.sh	r0,r0[0x0]
80002efe:	39 f2       	mov	r2,-97

80002f00 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002f00:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002f02:	fe fb 02 66 	ld.w	r11,pc[614]
80002f06:	e6 68 1a 80 	mov	r8,400000
80002f0a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002f0c:	fe f8 02 60 	ld.w	r8,pc[608]
80002f10:	70 0a       	ld.w	r10,r8[0x0]
80002f12:	fe 7c 24 00 	mov	r12,-56320
80002f16:	f0 1f 00 97 	mcall	80003170 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002f1a:	30 1b       	mov	r11,1
80002f1c:	fe 7c 24 00 	mov	r12,-56320
80002f20:	f0 1f 00 95 	mcall	80003174 <sd_mmc_spi_internal_init+0x274>
80002f24:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
80002f26:	e0 66 00 ff 	mov	r6,255
80002f2a:	fe 75 24 00 	mov	r5,-56320
80002f2e:	0c 9b       	mov	r11,r6
80002f30:	0a 9c       	mov	r12,r5
80002f32:	f0 1f 00 92 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
80002f36:	2f f7       	sub	r7,-1
80002f38:	58 a7       	cp.w	r7,10
80002f3a:	cf a1       	brne	80002f2e <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002f3c:	30 1b       	mov	r11,1
80002f3e:	fe 7c 24 00 	mov	r12,-56320
80002f42:	f0 1f 00 8f 	mcall	8000317c <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80002f46:	30 08       	mov	r8,0
80002f48:	fe f9 02 38 	ld.w	r9,pc[568]
80002f4c:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002f4e:	fe f9 02 36 	ld.w	r9,pc[566]
80002f52:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002f54:	30 0b       	mov	r11,0
80002f56:	16 9c       	mov	r12,r11
80002f58:	f0 1f 00 8c 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
80002f5c:	fe f8 02 30 	ld.w	r8,pc[560]
80002f60:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002f62:	e0 6b 00 ff 	mov	r11,255
80002f66:	fe 7c 24 00 	mov	r12,-56320
80002f6a:	f0 1f 00 84 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
80002f6e:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
80002f70:	fe f6 02 1c 	ld.w	r6,pc[540]
80002f74:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002f76:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002f78:	e0 62 00 ff 	mov	r2,255
80002f7c:	fe 71 24 00 	mov	r1,-56320
    // do retry counter
    retry++;
    if(retry > 100)
80002f80:	36 54       	mov	r4,101
80002f82:	c1 08       	rjmp	80002fa2 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002f84:	06 9b       	mov	r11,r3
80002f86:	06 9c       	mov	r12,r3
80002f88:	f0 1f 00 80 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
80002f8c:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002f8e:	04 9b       	mov	r11,r2
80002f90:	02 9c       	mov	r12,r1
80002f92:	f0 1f 00 7a 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
80002f96:	2f f7       	sub	r7,-1
80002f98:	5c 87       	casts.h	r7
    if(retry > 100)
80002f9a:	e8 07 19 00 	cp.h	r7,r4
80002f9e:	e0 80 00 e4 	breq	80003166 <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
80002fa2:	0d 88       	ld.ub	r8,r6[0x0]
80002fa4:	ea 08 18 00 	cp.b	r8,r5
80002fa8:	ce e1       	brne	80002f84 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
80002faa:	f0 1f 00 7a 	mcall	80003190 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
80002fae:	5b fc       	cp.w	r12,-1
80002fb0:	e0 80 00 db 	breq	80003166 <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
80002fb4:	58 1c       	cp.w	r12,1
80002fb6:	c0 51       	brne	80002fc0 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
80002fb8:	30 29       	mov	r9,2
80002fba:	4f 38       	lddpc	r8,80003184 <sd_mmc_spi_internal_init+0x284>
80002fbc:	b0 89       	st.b	r8[0x0],r9
80002fbe:	c4 c8       	rjmp	80003056 <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002fc0:	30 0b       	mov	r11,0
80002fc2:	33 7c       	mov	r12,55
80002fc4:	f0 1f 00 71 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
80002fc8:	4f 17       	lddpc	r7,8000318c <sd_mmc_spi_internal_init+0x28c>
80002fca:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002fcc:	e0 6b 00 ff 	mov	r11,255
80002fd0:	fe 7c 24 00 	mov	r12,-56320
80002fd4:	f0 1f 00 69 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002fd8:	30 0b       	mov	r11,0
80002fda:	32 9c       	mov	r12,41
80002fdc:	f0 1f 00 6b 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
80002fe0:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002fe2:	e0 6b 00 ff 	mov	r11,255
80002fe6:	fe 7c 24 00 	mov	r12,-56320
80002fea:	f0 1f 00 64 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002fee:	0f 88       	ld.ub	r8,r7[0x0]
80002ff0:	e2 18 00 fe 	andl	r8,0xfe,COH
80002ff4:	c0 51       	brne	80002ffe <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80002ff6:	30 19       	mov	r9,1
80002ff8:	4e 38       	lddpc	r8,80003184 <sd_mmc_spi_internal_init+0x284>
80002ffa:	b0 89       	st.b	r8[0x0],r9
80002ffc:	c2 d8       	rjmp	80003056 <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002ffe:	30 09       	mov	r9,0
80003000:	4e 18       	lddpc	r8,80003184 <sd_mmc_spi_internal_init+0x284>
80003002:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80003004:	30 0b       	mov	r11,0
80003006:	16 9c       	mov	r12,r11
80003008:	f0 1f 00 60 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
8000300c:	4e 08       	lddpc	r8,8000318c <sd_mmc_spi_internal_init+0x28c>
8000300e:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003010:	e0 6b 00 ff 	mov	r11,255
80003014:	fe 7c 24 00 	mov	r12,-56320
80003018:	f0 1f 00 58 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
8000301c:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
8000301e:	4d c6       	lddpc	r6,8000318c <sd_mmc_spi_internal_init+0x28c>
80003020:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80003022:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003024:	e0 62 00 ff 	mov	r2,255
80003028:	fe 71 24 00 	mov	r1,-56320
        // do retry counter
        retry++;
        if(retry > 100)
8000302c:	36 54       	mov	r4,101
8000302e:	c1 08       	rjmp	8000304e <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80003030:	06 9b       	mov	r11,r3
80003032:	06 9c       	mov	r12,r3
80003034:	f0 1f 00 55 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
80003038:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000303a:	04 9b       	mov	r11,r2
8000303c:	02 9c       	mov	r12,r1
8000303e:	f0 1f 00 4f 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80003042:	2f f7       	sub	r7,-1
80003044:	5c 87       	casts.h	r7
        if(retry > 100)
80003046:	e8 07 19 00 	cp.h	r7,r4
8000304a:	e0 80 00 8e 	breq	80003166 <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
8000304e:	0d 88       	ld.ub	r8,r6[0x0]
80003050:	ea 08 18 00 	cp.b	r8,r5
80003054:	ce e1       	brne	80003030 <sd_mmc_spi_internal_init+0x130>
80003056:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80003058:	4c b4       	lddpc	r4,80003184 <sd_mmc_spi_internal_init+0x284>
8000305a:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
8000305c:	0e 93       	mov	r3,r7
8000305e:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80003060:	4c b6       	lddpc	r6,8000318c <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003062:	e0 62 00 ff 	mov	r2,255
80003066:	fe 71 24 00 	mov	r1,-56320

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000306a:	09 88       	ld.ub	r8,r4[0x0]
8000306c:	ea 08 18 00 	cp.b	r8,r5
80003070:	c1 10       	breq	80003092 <sd_mmc_spi_internal_init+0x192>
80003072:	c0 63       	brcs	8000307e <sd_mmc_spi_internal_init+0x17e>
80003074:	30 29       	mov	r9,2
80003076:	f2 08 18 00 	cp.b	r8,r9
8000307a:	c2 81       	brne	800030ca <sd_mmc_spi_internal_init+0x1ca>
8000307c:	c1 98       	rjmp	800030ae <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
8000307e:	06 9b       	mov	r11,r3
80003080:	30 1c       	mov	r12,1
80003082:	f0 1f 00 42 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
80003086:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003088:	04 9b       	mov	r11,r2
8000308a:	02 9c       	mov	r12,r1
8000308c:	f0 1f 00 3b 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
      break;
80003090:	c1 d8       	rjmp	800030ca <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80003092:	06 9b       	mov	r11,r3
80003094:	00 9c       	mov	r12,r0
80003096:	f0 1f 00 3d 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000309a:	06 9b       	mov	r11,r3
8000309c:	32 9c       	mov	r12,41
8000309e:	f0 1f 00 3b 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
800030a2:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800030a4:	04 9b       	mov	r11,r2
800030a6:	02 9c       	mov	r12,r1
800030a8:	f0 1f 00 34 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
      break;
800030ac:	c0 f8       	rjmp	800030ca <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800030ae:	06 9b       	mov	r11,r3
800030b0:	00 9c       	mov	r12,r0
800030b2:	f0 1f 00 36 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800030b6:	fc 1b 40 00 	movh	r11,0x4000
800030ba:	32 9c       	mov	r12,41
800030bc:	f0 1f 00 33 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
800030c0:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800030c2:	04 9b       	mov	r11,r2
800030c4:	02 9c       	mov	r12,r1
800030c6:	f0 1f 00 2d 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
800030ca:	2f f7       	sub	r7,-1
800030cc:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
800030ce:	fe 78 c3 50 	mov	r8,-15536
800030d2:	f0 07 19 00 	cp.h	r7,r8
800030d6:	c4 80       	breq	80003166 <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
800030d8:	0d 89       	ld.ub	r9,r6[0x0]
800030da:	30 08       	mov	r8,0
800030dc:	f0 09 18 00 	cp.b	r9,r8
800030e0:	cc 51       	brne	8000306a <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
800030e2:	4a 98       	lddpc	r8,80003184 <sd_mmc_spi_internal_init+0x284>
800030e4:	11 89       	ld.ub	r9,r8[0x0]
800030e6:	30 28       	mov	r8,2
800030e8:	f0 09 18 00 	cp.b	r9,r8
800030ec:	c0 a1       	brne	80003100 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
800030ee:	f0 1f 00 2a 	mcall	80003194 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
800030f2:	5b fc       	cp.w	r12,-1
800030f4:	c3 90       	breq	80003166 <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
800030f6:	58 1c       	cp.w	r12,1
800030f8:	c0 41       	brne	80003100 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
800030fa:	30 39       	mov	r9,3
800030fc:	4a 28       	lddpc	r8,80003184 <sd_mmc_spi_internal_init+0x284>
800030fe:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80003100:	30 0b       	mov	r11,0
80003102:	33 bc       	mov	r12,59
80003104:	f0 1f 00 21 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
80003108:	4a 17       	lddpc	r7,8000318c <sd_mmc_spi_internal_init+0x28c>
8000310a:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000310c:	e0 6b 00 ff 	mov	r11,255
80003110:	fe 7c 24 00 	mov	r12,-56320
80003114:	f0 1f 00 19 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80003118:	e0 6b 02 00 	mov	r11,512
8000311c:	31 0c       	mov	r12,16
8000311e:	f0 1f 00 1b 	mcall	80003188 <sd_mmc_spi_internal_init+0x288>
80003122:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003124:	e0 6b 00 ff 	mov	r11,255
80003128:	fe 7c 24 00 	mov	r12,-56320
8000312c:	f0 1f 00 13 	mcall	80003178 <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80003130:	0f 89       	ld.ub	r9,r7[0x0]
80003132:	30 08       	mov	r8,0
80003134:	f0 09 18 00 	cp.b	r9,r8
80003138:	c1 71       	brne	80003166 <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
8000313a:	49 8c       	lddpc	r12,80003198 <sd_mmc_spi_internal_init+0x298>
8000313c:	f0 1f 00 18 	mcall	8000319c <sd_mmc_spi_internal_init+0x29c>
80003140:	c1 30       	breq	80003166 <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80003142:	f0 1f 00 18 	mcall	800031a0 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80003146:	30 19       	mov	r9,1
80003148:	48 e8       	lddpc	r8,80003180 <sd_mmc_spi_internal_init+0x280>
8000314a:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
8000314c:	48 7b       	lddpc	r11,80003168 <sd_mmc_spi_internal_init+0x268>
8000314e:	e0 68 1b 00 	mov	r8,6912
80003152:	ea 18 00 b7 	orh	r8,0xb7
80003156:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80003158:	48 58       	lddpc	r8,8000316c <sd_mmc_spi_internal_init+0x26c>
8000315a:	70 0a       	ld.w	r10,r8[0x0]
8000315c:	fe 7c 24 00 	mov	r12,-56320
80003160:	f0 1f 00 04 	mcall	80003170 <sd_mmc_spi_internal_init+0x270>
80003164:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80003166:	d8 3a       	popm	r0-r7,pc,r12=0
80003168:	00 00       	add	r0,r0
8000316a:	00 38       	cp.w	r8,r0
8000316c:	00 00       	add	r0,r0
8000316e:	00 48       	or	r8,r0
80003170:	80 00       	ld.sh	r0,r0[0x0]
80003172:	39 18       	mov	r8,-111
80003174:	80 00       	ld.sh	r0,r0[0x0]
80003176:	38 a6       	mov	r6,-118
80003178:	80 00       	ld.sh	r0,r0[0x0]
8000317a:	39 d6       	mov	r6,-99
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	38 f2       	mov	r2,-113
80003180:	00 00       	add	r0,r0
80003182:	00 4c       	or	r12,r0
80003184:	00 00       	add	r0,r0
80003186:	03 62       	ld.uh	r2,--r1
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	2b 30       	sub	r0,-77
8000318c:	00 00       	add	r0,r0
8000318e:	03 74       	ld.ub	r4,--r1
80003190:	80 00       	ld.sh	r0,r0[0x0]
80003192:	2d 54       	sub	r4,-43
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	2c c8       	sub	r8,-52
80003198:	00 00       	add	r0,r0
8000319a:	03 64       	ld.uh	r4,--r1
8000319c:	80 00       	ld.sh	r0,r0[0x0]
8000319e:	2e 0c       	sub	r12,-32
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	28 78       	sub	r8,-121

800031a4 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
800031a4:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
800031a6:	f0 1f 00 07 	mcall	800031c0 <sd_mmc_spi_mem_check+0x1c>
800031aa:	c0 a0       	breq	800031be <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
800031ac:	48 68       	lddpc	r8,800031c4 <sd_mmc_spi_mem_check+0x20>
800031ae:	11 89       	ld.ub	r9,r8[0x0]
800031b0:	30 08       	mov	r8,0
800031b2:	f0 09 18 00 	cp.b	r9,r8
800031b6:	c0 20       	breq	800031ba <sd_mmc_spi_mem_check+0x16>
800031b8:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
800031ba:	f0 1f 00 04 	mcall	800031c8 <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
800031be:	d8 02       	popm	pc
800031c0:	80 00       	ld.sh	r0,r0[0x0]
800031c2:	2b 70       	sub	r0,-73
800031c4:	00 00       	add	r0,r0
800031c6:	00 4c       	or	r12,r0
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	2f 00       	sub	r0,-16

800031cc <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
800031cc:	eb cd 40 10 	pushm	r4,lr
800031d0:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
800031d4:	48 88       	lddpc	r8,800031f4 <sd_mmc_spi_init+0x28>
800031d6:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
800031d8:	48 88       	lddpc	r8,800031f8 <sd_mmc_spi_init+0x2c>
800031da:	e8 ea 00 00 	ld.d	r10,r4[0]
800031de:	f0 eb 00 00 	st.d	r8[0],r10
800031e2:	e8 ea 00 08 	ld.d	r10,r4[8]
800031e6:	f0 eb 00 08 	st.d	r8[8],r10

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
800031ea:	f0 1f 00 05 	mcall	800031fc <sd_mmc_spi_init+0x30>
}
800031ee:	e3 cd 80 10 	ldm	sp++,r4,pc
800031f2:	00 00       	add	r0,r0
800031f4:	00 00       	add	r0,r0
800031f6:	00 48       	or	r8,r0
800031f8:	00 00       	add	r0,r0
800031fa:	00 38       	cp.w	r8,r0
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	2f 00       	sub	r0,-16

80003200 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80003200:	eb cd 40 fc 	pushm	r2-r7,lr
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80003204:	ee 78 42 3f 	mov	r8,999999
80003208:	f8 08 00 09 	add	r9,r12,r8
8000320c:	e0 68 de 83 	mov	r8,56963
80003210:	ea 18 43 1b 	orh	r8,0x431b
80003214:	f2 08 06 48 	mulu.d	r8,r9,r8
80003218:	f2 08 16 12 	lsr	r8,r9,0x12
//! Whether to use the NCS0 pin
#ifdef SMC_USE_NCS0
  #include SMC_COMPONENT_CS0

  // Setup SMC for NCS0
  SMC_CS_SETUP(0)
8000321c:	f0 08 00 25 	add	r5,r8,r8<<0x2
80003220:	a3 65       	lsl	r5,0x2
80003222:	ea c5 fc 19 	sub	r5,r5,-999
80003226:	e0 69 4d d3 	mov	r9,19923
8000322a:	ea 19 10 62 	orh	r9,0x1062
8000322e:	ea 09 06 44 	mulu.d	r4,r5,r9
80003232:	a7 85       	lsr	r5,0x6
80003234:	f0 0a 15 04 	lsl	r10,r8,0x4
80003238:	f4 08 01 07 	sub	r7,r10,r8
8000323c:	a1 77       	lsl	r7,0x1
8000323e:	ee c7 fc 19 	sub	r7,r7,-999
80003242:	ee 09 06 46 	mulu.d	r6,r7,r9
80003246:	0e 94       	mov	r4,r7
80003248:	a7 84       	lsr	r4,0x6
8000324a:	f4 08 01 07 	sub	r7,r10,r8
8000324e:	a3 67       	lsl	r7,0x2
80003250:	ee c7 fc 19 	sub	r7,r7,-999
80003254:	ee 09 06 46 	mulu.d	r6,r7,r9
80003258:	a7 87       	lsr	r7,0x6
8000325a:	f0 03 10 5a 	mul	r3,r8,90
8000325e:	e6 c3 fc 19 	sub	r3,r3,-999
80003262:	e6 09 06 42 	mulu.d	r2,r3,r9
80003266:	e6 0c 16 06 	lsr	r12,r3,0x6
8000326a:	e0 63 00 d2 	mov	r3,210
8000326e:	f0 03 02 43 	mul	r3,r8,r3
80003272:	e6 c3 fc 19 	sub	r3,r3,-999
80003276:	e6 09 06 42 	mulu.d	r2,r3,r9
8000327a:	e6 06 16 06 	lsr	r6,r3,0x6
8000327e:	f4 08 01 0b 	sub	r11,r10,r8
80003282:	a5 6b       	lsl	r11,0x4
80003284:	f6 cb fc 19 	sub	r11,r11,-999
80003288:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000328c:	f6 0e 16 06 	lsr	lr,r11,0x6
80003290:	f0 03 10 64 	mul	r3,r8,100
80003294:	e6 c3 fc 19 	sub	r3,r3,-999
80003298:	e6 09 06 42 	mulu.d	r2,r3,r9
8000329c:	a7 83       	lsr	r3,0x6
8000329e:	e0 6a 01 0e 	mov	r10,270
800032a2:	b5 38       	mul	r8,r10
800032a4:	f0 c8 fc 19 	sub	r8,r8,-999
800032a8:	f0 09 06 48 	mulu.d	r8,r8,r9
800032ac:	a7 89       	lsr	r9,0x6
800032ae:	ec 04 00 0a 	add	r10,r6,r4
800032b2:	1c 3a       	cp.w	r10,lr
800032b4:	f4 0e 17 20 	movhs	lr,r10
800032b8:	ee 05 00 0b 	add	r11,r7,r5
800032bc:	18 3b       	cp.w	r11,r12
800032be:	f6 0c 17 20 	movhs	r12,r11
800032c2:	06 3b       	cp.w	r11,r3
800032c4:	e6 0b 17 30 	movlo	r11,r3
800032c8:	12 3a       	cp.w	r10,r9
800032ca:	f4 09 17 20 	movhs	r9,r10
800032ce:	eb e4 11 05 	or	r5,r5,r4<<0x10
800032d2:	fe 6a 1c 00 	mov	r10,-123904
800032d6:	95 05       	st.w	r10[0x0],r5
800032d8:	ef e6 11 07 	or	r7,r7,r6<<0x10
800032dc:	ef ec 10 87 	or	r7,r7,r12<<0x8
800032e0:	ef ee 11 87 	or	r7,r7,lr<<0x18
800032e4:	95 17       	st.w	r10[0x4],r7
800032e6:	1c 39       	cp.w	r9,lr
800032e8:	f2 0e 17 20 	movhs	lr,r9
800032ec:	18 3b       	cp.w	r11,r12
800032ee:	f8 0b 17 30 	movlo	r11,r12
800032f2:	f7 ee 11 0b 	or	r11,r11,lr<<0x10
800032f6:	95 2b       	st.w	r10[0x8],r11
800032f8:	e0 68 10 03 	mov	r8,4099
800032fc:	95 38       	st.w	r10[0xc],r8
800032fe:	30 19       	mov	r9,1
80003300:	48 48       	lddpc	r8,80003310 <smc_init+0x110>
80003302:	b0 89       	st.b	r8[0x0],r9
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
80003304:	31 4b       	mov	r11,20
80003306:	48 4c       	lddpc	r12,80003314 <smc_init+0x114>
80003308:	f0 1f 00 04 	mcall	80003318 <smc_init+0x118>
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
}
8000330c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003310:	00 00       	add	r0,r0
80003312:	00 50       	eor	r0,r0
80003314:	80 00       	ld.sh	r0,r0[0x0]
80003316:	4d 08       	lddpc	r8,80003454 <gpio_get_pin_interrupt_flag+0x8>
80003318:	80 00       	ld.sh	r0,r0[0x0]
8000331a:	33 70       	mov	r0,55

8000331c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000331c:	f8 08 16 05 	lsr	r8,r12,0x5
80003320:	a9 68       	lsl	r8,0x8
80003322:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80003326:	58 1b       	cp.w	r11,1
80003328:	c0 d0       	breq	80003342 <gpio_enable_module_pin+0x26>
8000332a:	c0 63       	brcs	80003336 <gpio_enable_module_pin+0x1a>
8000332c:	58 2b       	cp.w	r11,2
8000332e:	c1 00       	breq	8000334e <gpio_enable_module_pin+0x32>
80003330:	58 3b       	cp.w	r11,3
80003332:	c1 40       	breq	8000335a <gpio_enable_module_pin+0x3e>
80003334:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003336:	30 19       	mov	r9,1
80003338:	f2 0c 09 49 	lsl	r9,r9,r12
8000333c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000333e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003340:	c1 28       	rjmp	80003364 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003342:	30 19       	mov	r9,1
80003344:	f2 0c 09 49 	lsl	r9,r9,r12
80003348:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000334a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000334c:	c0 c8       	rjmp	80003364 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000334e:	30 19       	mov	r9,1
80003350:	f2 0c 09 49 	lsl	r9,r9,r12
80003354:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003356:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003358:	c0 68       	rjmp	80003364 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000335a:	30 19       	mov	r9,1
8000335c:	f2 0c 09 49 	lsl	r9,r9,r12
80003360:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003362:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003364:	30 19       	mov	r9,1
80003366:	f2 0c 09 4c 	lsl	r12,r9,r12
8000336a:	91 2c       	st.w	r8[0x8],r12
8000336c:	5e fd       	retal	0
8000336e:	d7 03       	nop

80003370 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80003370:	d4 21       	pushm	r4-r7,lr
80003372:	18 97       	mov	r7,r12
80003374:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003376:	58 0b       	cp.w	r11,0
80003378:	c0 31       	brne	8000337e <gpio_enable_module+0xe>
8000337a:	30 05       	mov	r5,0
8000337c:	c0 d8       	rjmp	80003396 <gpio_enable_module+0x26>
8000337e:	30 06       	mov	r6,0
80003380:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003382:	6e 1b       	ld.w	r11,r7[0x4]
80003384:	6e 0c       	ld.w	r12,r7[0x0]
80003386:	f0 1f 00 06 	mcall	8000339c <gpio_enable_module+0x2c>
8000338a:	18 45       	or	r5,r12
		gpiomap++;
8000338c:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000338e:	2f f6       	sub	r6,-1
80003390:	0c 34       	cp.w	r4,r6
80003392:	fe 9b ff f8 	brhi	80003382 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80003396:	0a 9c       	mov	r12,r5
80003398:	d8 22       	popm	r4-r7,pc
8000339a:	00 00       	add	r0,r0
8000339c:	80 00       	ld.sh	r0,r0[0x0]
8000339e:	33 1c       	mov	r12,49

800033a0 <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800033a0:	f8 08 16 05 	lsr	r8,r12,0x5
800033a4:	a9 68       	lsl	r8,0x8
800033a6:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
800033aa:	30 19       	mov	r9,1
800033ac:	f2 0c 09 4c 	lsl	r12,r9,r12
800033b0:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
800033b4:	91 1c       	st.w	r8[0x4],r12
}
800033b6:	5e fc       	retal	r12

800033b8 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800033b8:	f8 08 16 05 	lsr	r8,r12,0x5
800033bc:	a9 68       	lsl	r8,0x8
800033be:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->puers = 1 << (pin & 0x1F);
800033c2:	30 19       	mov	r9,1
800033c4:	f2 0c 09 4c 	lsl	r12,r9,r12
800033c8:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
800033cc:	5e fc       	retal	r12

800033ce <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800033ce:	f8 08 16 05 	lsr	r8,r12,0x5
800033d2:	a9 68       	lsl	r8,0x8
800033d4:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800033d8:	30 19       	mov	r9,1
800033da:	f2 0c 09 4c 	lsl	r12,r9,r12
800033de:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800033e2:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800033e6:	91 1c       	st.w	r8[0x4],r12
}
800033e8:	5e fc       	retal	r12

800033ea <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800033ea:	f8 08 16 05 	lsr	r8,r12,0x5
800033ee:	a9 68       	lsl	r8,0x8
800033f0:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800033f4:	30 19       	mov	r9,1
800033f6:	f2 0c 09 4c 	lsl	r12,r9,r12
800033fa:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800033fe:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003402:	91 1c       	st.w	r8[0x4],r12
}
80003404:	5e fc       	retal	r12

80003406 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003406:	f8 08 16 05 	lsr	r8,r12,0x5
8000340a:	a9 68       	lsl	r8,0x8
8000340c:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80003410:	30 19       	mov	r9,1
80003412:	f2 0c 09 4c 	lsl	r12,r9,r12
80003416:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
8000341a:	12 3b       	cp.w	r11,r9
8000341c:	c0 a0       	breq	80003430 <gpio_enable_pin_interrupt+0x2a>
8000341e:	c0 43       	brcs	80003426 <gpio_enable_pin_interrupt+0x20>
80003420:	58 2b       	cp.w	r11,2
80003422:	c1 11       	brne	80003444 <gpio_enable_pin_interrupt+0x3e>
80003424:	c0 b8       	rjmp	8000343a <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80003426:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
8000342a:	f1 4c 00 b8 	st.w	r8[184],r12
8000342e:	c0 c8       	rjmp	80003446 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80003430:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80003434:	f1 4c 00 b8 	st.w	r8[184],r12
80003438:	c0 78       	rjmp	80003446 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000343a:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
8000343e:	f1 4c 00 b4 	st.w	r8[180],r12
80003442:	c0 28       	rjmp	80003446 <gpio_enable_pin_interrupt+0x40>
80003444:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80003446:	f1 4c 00 94 	st.w	r8[148],r12
8000344a:	5e fd       	retal	0

8000344c <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000344c:	f8 08 16 05 	lsr	r8,r12,0x5
80003450:	a9 68       	lsl	r8,0x8
80003452:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80003456:	f0 f8 00 d0 	ld.w	r8,r8[208]
8000345a:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000345e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003462:	5e fc       	retal	r12

80003464 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003464:	f8 08 16 05 	lsr	r8,r12,0x5
80003468:	a9 68       	lsl	r8,0x8
8000346a:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000346e:	30 19       	mov	r9,1
80003470:	f2 0c 09 4c 	lsl	r12,r9,r12
80003474:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80003478:	5e fc       	retal	r12

8000347a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000347a:	c0 08       	rjmp	8000347a <_unhandled_interrupt>

8000347c <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000347c:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003480:	49 99       	lddpc	r9,800034e4 <INTC_register_interrupt+0x68>
80003482:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003486:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000348a:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000348c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003490:	58 0a       	cp.w	r10,0
80003492:	c0 91       	brne	800034a4 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003494:	49 59       	lddpc	r9,800034e8 <INTC_register_interrupt+0x6c>
80003496:	49 6a       	lddpc	r10,800034ec <INTC_register_interrupt+0x70>
80003498:	12 1a       	sub	r10,r9
8000349a:	fe 79 08 00 	mov	r9,-63488
8000349e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800034a2:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800034a4:	58 1a       	cp.w	r10,1
800034a6:	c0 a1       	brne	800034ba <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800034a8:	49 09       	lddpc	r9,800034e8 <INTC_register_interrupt+0x6c>
800034aa:	49 2a       	lddpc	r10,800034f0 <INTC_register_interrupt+0x74>
800034ac:	12 1a       	sub	r10,r9
800034ae:	bf aa       	sbr	r10,0x1e
800034b0:	fe 79 08 00 	mov	r9,-63488
800034b4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800034b8:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800034ba:	58 2a       	cp.w	r10,2
800034bc:	c0 a1       	brne	800034d0 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800034be:	48 b9       	lddpc	r9,800034e8 <INTC_register_interrupt+0x6c>
800034c0:	48 da       	lddpc	r10,800034f4 <INTC_register_interrupt+0x78>
800034c2:	12 1a       	sub	r10,r9
800034c4:	bf ba       	sbr	r10,0x1f
800034c6:	fe 79 08 00 	mov	r9,-63488
800034ca:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800034ce:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800034d0:	48 69       	lddpc	r9,800034e8 <INTC_register_interrupt+0x6c>
800034d2:	48 aa       	lddpc	r10,800034f8 <INTC_register_interrupt+0x7c>
800034d4:	12 1a       	sub	r10,r9
800034d6:	ea 1a c0 00 	orh	r10,0xc000
800034da:	fe 79 08 00 	mov	r9,-63488
800034de:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800034e2:	5e fc       	retal	r12
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	4d a8       	lddpc	r8,8000364c <pdca_load_channel+0x30>
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	48 00       	lddpc	r0,800034e8 <INTC_register_interrupt+0x6c>
800034ec:	80 00       	ld.sh	r0,r0[0x0]
800034ee:	49 04       	lddpc	r4,8000352c <INTC_init_interrupts+0x30>
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	49 12       	lddpc	r2,80003534 <INTC_init_interrupts+0x38>
800034f4:	80 00       	ld.sh	r0,r0[0x0]
800034f6:	49 20       	lddpc	r0,8000353c <INTC_init_interrupts+0x40>
800034f8:	80 00       	ld.sh	r0,r0[0x0]
800034fa:	49 2e       	lddpc	lr,80003540 <INTC_init_interrupts+0x44>

800034fc <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800034fc:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800034fe:	49 18       	lddpc	r8,80003540 <INTC_init_interrupts+0x44>
80003500:	e3 b8 00 01 	mtsr	0x4,r8
80003504:	49 0e       	lddpc	lr,80003544 <INTC_init_interrupts+0x48>
80003506:	30 07       	mov	r7,0
80003508:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000350a:	49 0c       	lddpc	r12,80003548 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000350c:	49 05       	lddpc	r5,8000354c <INTC_init_interrupts+0x50>
8000350e:	10 15       	sub	r5,r8
80003510:	fe 76 08 00 	mov	r6,-63488
80003514:	c1 08       	rjmp	80003534 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003516:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003518:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000351a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000351c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80003520:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003522:	10 3a       	cp.w	r10,r8
80003524:	fe 9b ff fc 	brhi	8000351c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003528:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000352c:	2f f7       	sub	r7,-1
8000352e:	2f 8e       	sub	lr,-8
80003530:	59 47       	cp.w	r7,20
80003532:	c0 50       	breq	8000353c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003534:	7c 08       	ld.w	r8,lr[0x0]
80003536:	58 08       	cp.w	r8,0
80003538:	ce f1       	brne	80003516 <INTC_init_interrupts+0x1a>
8000353a:	cf 7b       	rjmp	80003528 <INTC_init_interrupts+0x2c>
8000353c:	d8 22       	popm	r4-r7,pc
8000353e:	00 00       	add	r0,r0
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	48 00       	lddpc	r0,80003540 <INTC_init_interrupts+0x44>
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	4d a8       	lddpc	r8,800036ac <pdca_init_channel+0x58>
80003548:	80 00       	ld.sh	r0,r0[0x0]
8000354a:	34 7a       	mov	r10,71
8000354c:	80 00       	ld.sh	r0,r0[0x0]
8000354e:	49 04       	lddpc	r4,8000358c <pdca_get_handler+0x4>

80003550 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003550:	fe 78 08 00 	mov	r8,-63488
80003554:	e0 69 00 83 	mov	r9,131
80003558:	f2 0c 01 0c 	sub	r12,r9,r12
8000355c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003560:	f2 ca ff c0 	sub	r10,r9,-64
80003564:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003568:	58 08       	cp.w	r8,0
8000356a:	c0 21       	brne	8000356e <_get_interrupt_handler+0x1e>
8000356c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
8000356e:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003572:	48 5a       	lddpc	r10,80003584 <_get_interrupt_handler+0x34>
80003574:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003578:	f0 08 11 1f 	rsub	r8,r8,31
8000357c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000357e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003582:	5e fc       	retal	r12
80003584:	80 00       	ld.sh	r0,r0[0x0]
80003586:	4d a8       	lddpc	r8,800036ec <pm_enable_osc0_crystal+0x2c>

80003588 <pdca_get_handler>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80003588:	30 e8       	mov	r8,14
8000358a:	f0 0c 18 00 	cp.b	r12,r8
8000358e:	e0 88 00 03 	brls	80003594 <pdca_get_handler+0xc>
80003592:	5e fe       	retal	-1

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80003594:	a7 6c       	lsl	r12,0x6
80003596:	e0 3c 00 00 	sub	r12,65536
	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
	}

	return pdca_channel;
}
8000359a:	5e fc       	retal	r12

8000359c <pdca_disable>:

	return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
}

void pdca_disable(uint8_t pdca_ch_number)
{
8000359c:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
8000359e:	f0 1f 00 03 	mcall	800035a8 <pdca_disable+0xc>
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
800035a2:	30 28       	mov	r8,2
800035a4:	99 58       	st.w	r12[0x14],r8
}
800035a6:	d8 02       	popm	pc
800035a8:	80 00       	ld.sh	r0,r0[0x0]
800035aa:	35 88       	mov	r8,88

800035ac <pdca_enable>:

void pdca_enable(uint8_t pdca_ch_number)
{
800035ac:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800035ae:	f0 1f 00 03 	mcall	800035b8 <pdca_enable+0xc>
			pdca_ch_number);

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
800035b2:	30 18       	mov	r8,1
800035b4:	99 58       	st.w	r12[0x14],r8
}
800035b6:	d8 02       	popm	pc
800035b8:	80 00       	ld.sh	r0,r0[0x0]
800035ba:	35 88       	mov	r8,88

800035bc <pdca_enable_interrupt_transfer_complete>:

	cpu_irq_restore(flags);
}

void pdca_enable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
800035bc:	d4 01       	pushm	lr
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800035be:	f0 1f 00 03 	mcall	800035c8 <pdca_enable_interrupt_transfer_complete+0xc>
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
800035c2:	30 28       	mov	r8,2
800035c4:	99 88       	st.w	r12[0x20],r8
}
800035c6:	d8 02       	popm	pc
800035c8:	80 00       	ld.sh	r0,r0[0x0]
800035ca:	35 88       	mov	r8,88

800035cc <pdca_disable_interrupt_reload_counter_zero>:

void pdca_disable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
800035cc:	d4 01       	pushm	lr
800035ce:	20 1d       	sub	sp,4
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800035d0:	f0 1f 00 08 	mcall	800035f0 <pdca_disable_interrupt_reload_counter_zero+0x24>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035d4:	e1 b8 00 00 	mfsr	r8,0x0
800035d8:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800035da:	d3 03       	ssrf	0x10

	return flags;
800035dc:	40 08       	lddsp	r8,sp[0x0]
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
800035de:	30 19       	mov	r9,1
800035e0:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
800035e2:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800035e4:	e6 18 00 01 	andh	r8,0x1,COH
800035e8:	c0 21       	brne	800035ec <pdca_disable_interrupt_reload_counter_zero+0x20>
      cpu_irq_enable();
800035ea:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800035ec:	2f fd       	sub	sp,-4
800035ee:	d8 02       	popm	pc
800035f0:	80 00       	ld.sh	r0,r0[0x0]
800035f2:	35 88       	mov	r8,88

800035f4 <pdca_disable_interrupt_transfer_complete>:

	pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}

void pdca_disable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
800035f4:	d4 01       	pushm	lr
800035f6:	20 1d       	sub	sp,4
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800035f8:	f0 1f 00 08 	mcall	80003618 <pdca_disable_interrupt_transfer_complete+0x24>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035fc:	e1 b8 00 00 	mfsr	r8,0x0
80003600:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003602:	d3 03       	ssrf	0x10

	return flags;
80003604:	40 08       	lddsp	r8,sp[0x0]
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80003606:	30 29       	mov	r9,2
80003608:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
8000360a:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000360c:	e6 18 00 01 	andh	r8,0x1,COH
80003610:	c0 21       	brne	80003614 <pdca_disable_interrupt_transfer_complete+0x20>
      cpu_irq_enable();
80003612:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80003614:	2f fd       	sub	sp,-4
80003616:	d8 02       	popm	pc
80003618:	80 00       	ld.sh	r0,r0[0x0]
8000361a:	35 88       	mov	r8,88

8000361c <pdca_load_channel>:
	return pdca_channel->tcr;
}

void pdca_load_channel(uint8_t pdca_ch_number, volatile void *addr,
		uint32_t size)
{
8000361c:	eb cd 40 c0 	pushm	r6-r7,lr
80003620:	20 1d       	sub	sp,4
80003622:	16 96       	mov	r6,r11
80003624:	14 97       	mov	r7,r10
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80003626:	f0 1f 00 0b 	mcall	80003650 <pdca_load_channel+0x34>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000362a:	e1 b8 00 00 	mfsr	r8,0x0
8000362e:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003630:	d3 03       	ssrf	0x10

	return flags;
80003632:	40 08       	lddsp	r8,sp[0x0]
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)addr;
80003634:	99 06       	st.w	r12[0x0],r6
	pdca_channel->tcr = size;
80003636:	99 27       	st.w	r12[0x8],r7
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80003638:	e0 69 01 00 	mov	r9,256
8000363c:	99 59       	st.w	r12[0x14],r9
	pdca_channel->isr;
8000363e:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003640:	e6 18 00 01 	andh	r8,0x1,COH
80003644:	c0 21       	brne	80003648 <pdca_load_channel+0x2c>
      cpu_irq_enable();
80003646:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80003648:	2f fd       	sub	sp,-4
8000364a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000364e:	00 00       	add	r0,r0
80003650:	80 00       	ld.sh	r0,r0[0x0]
80003652:	35 88       	mov	r8,88

80003654 <pdca_init_channel>:
	return pdca_channel;
}

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
80003654:	eb cd 40 e0 	pushm	r5-r7,lr
80003658:	20 1d       	sub	sp,4
8000365a:	18 95       	mov	r5,r12
8000365c:	16 96       	mov	r6,r11
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
8000365e:	f0 1f 00 13 	mcall	800036a8 <pdca_init_channel+0x54>
80003662:	18 97       	mov	r7,r12
			pdca_ch_number);

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
80003664:	0a 9c       	mov	r12,r5
80003666:	f0 1f 00 12 	mcall	800036ac <pdca_init_channel+0x58>
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
8000366a:	0a 9c       	mov	r12,r5
8000366c:	f0 1f 00 11 	mcall	800036b0 <pdca_init_channel+0x5c>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003670:	e1 b8 00 00 	mfsr	r8,0x0
80003674:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003676:	d3 03       	ssrf	0x10

	return flags;
80003678:	40 08       	lddsp	r8,sp[0x0]
	
	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)opt->addr;
8000367a:	6c 09       	ld.w	r9,r6[0x0]
8000367c:	8f 09       	st.w	r7[0x0],r9
	pdca_channel->tcr = opt->size;
8000367e:	6c 19       	ld.w	r9,r6[0x4]
80003680:	8f 29       	st.w	r7[0x8],r9
	pdca_channel->psr = opt->pid;
80003682:	6c 49       	ld.w	r9,r6[0x10]
80003684:	8f 19       	st.w	r7[0x4],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
80003686:	6c 29       	ld.w	r9,r6[0x8]
80003688:	8f 39       	st.w	r7[0xc],r9
	pdca_channel->tcrr = opt->r_size;
8000368a:	6c 39       	ld.w	r9,r6[0xc]
8000368c:	8f 49       	st.w	r7[0x10],r9
	pdca_channel->mr =
8000368e:	6c 59       	ld.w	r9,r6[0x14]
80003690:	8f 69       	st.w	r7[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80003692:	e0 69 01 00 	mov	r9,256
80003696:	8f 59       	st.w	r7[0x14],r9
	pdca_channel->isr;
80003698:	6e b9       	ld.w	r9,r7[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000369a:	e6 18 00 01 	andh	r8,0x1,COH
8000369e:	c0 21       	brne	800036a2 <pdca_init_channel+0x4e>
      cpu_irq_enable();
800036a0:	d5 03       	csrf	0x10
	
	cpu_irq_restore(flags);

	return PDCA_SUCCESS;
}
800036a2:	2f fd       	sub	sp,-4
800036a4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800036a8:	80 00       	ld.sh	r0,r0[0x0]
800036aa:	35 88       	mov	r8,88
800036ac:	80 00       	ld.sh	r0,r0[0x0]
800036ae:	35 f4       	mov	r4,95
800036b0:	80 00       	ld.sh	r0,r0[0x0]
800036b2:	35 cc       	mov	r12,92

800036b4 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800036b4:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800036b6:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800036ba:	99 a8       	st.w	r12[0x28],r8
}
800036bc:	5e fc       	retal	r12
800036be:	d7 03       	nop

800036c0 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800036c0:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800036c2:	ec 5b bb 9f 	cp.w	r11,899999
800036c6:	e0 8b 00 04 	brhi	800036ce <pm_enable_osc0_crystal+0xe>
800036ca:	30 4b       	mov	r11,4
800036cc:	c1 38       	rjmp	800036f2 <pm_enable_osc0_crystal+0x32>
800036ce:	e0 68 c6 bf 	mov	r8,50879
800036d2:	ea 18 00 2d 	orh	r8,0x2d
800036d6:	10 3b       	cp.w	r11,r8
800036d8:	e0 8b 00 04 	brhi	800036e0 <pm_enable_osc0_crystal+0x20>
800036dc:	30 5b       	mov	r11,5
800036de:	c0 a8       	rjmp	800036f2 <pm_enable_osc0_crystal+0x32>
800036e0:	e0 68 12 00 	mov	r8,4608
800036e4:	ea 18 00 7a 	orh	r8,0x7a
800036e8:	10 3b       	cp.w	r11,r8
800036ea:	f9 bb 03 06 	movlo	r11,6
800036ee:	f9 bb 02 07 	movhs	r11,7
800036f2:	f0 1f 00 02 	mcall	800036f8 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800036f6:	d8 02       	popm	pc
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	36 b4       	mov	r4,107

800036fc <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800036fc:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800036fe:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003702:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80003704:	78 08       	ld.w	r8,r12[0x0]
80003706:	a3 a8       	sbr	r8,0x2
80003708:	99 08       	st.w	r12[0x0],r8
}
8000370a:	5e fc       	retal	r12

8000370c <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000370c:	79 58       	ld.w	r8,r12[0x54]
8000370e:	e2 18 00 80 	andl	r8,0x80,COH
80003712:	cf d0       	breq	8000370c <pm_wait_for_clk0_ready>
}
80003714:	5e fc       	retal	r12
80003716:	d7 03       	nop

80003718 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80003718:	eb cd 40 80 	pushm	r7,lr
8000371c:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
8000371e:	f0 1f 00 04 	mcall	8000372c <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80003722:	0e 9c       	mov	r12,r7
80003724:	f0 1f 00 03 	mcall	80003730 <pm_enable_clk0+0x18>
}
80003728:	e3 cd 80 80 	ldm	sp++,r7,pc
8000372c:	80 00       	ld.sh	r0,r0[0x0]
8000372e:	36 fc       	mov	r12,111
80003730:	80 00       	ld.sh	r0,r0[0x0]
80003732:	37 0c       	mov	r12,112

80003734 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003734:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003736:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000373a:	99 08       	st.w	r12[0x0],r8
}
8000373c:	5e fc       	retal	r12
8000373e:	d7 03       	nop

80003740 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80003740:	eb cd 40 c0 	pushm	r6-r7,lr
80003744:	18 97       	mov	r7,r12
80003746:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80003748:	f0 1f 00 06 	mcall	80003760 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
8000374c:	0c 9b       	mov	r11,r6
8000374e:	0e 9c       	mov	r12,r7
80003750:	f0 1f 00 05 	mcall	80003764 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80003754:	30 1b       	mov	r11,1
80003756:	0e 9c       	mov	r12,r7
80003758:	f0 1f 00 04 	mcall	80003768 <pm_switch_to_osc0+0x28>
}
8000375c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003760:	80 00       	ld.sh	r0,r0[0x0]
80003762:	36 c0       	mov	r0,108
80003764:	80 00       	ld.sh	r0,r0[0x0]
80003766:	37 18       	mov	r8,113
80003768:	80 00       	ld.sh	r0,r0[0x0]
8000376a:	37 34       	mov	r4,115

8000376c <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
8000376c:	58 0b       	cp.w	r11,0
8000376e:	c1 90       	breq	800037a0 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003770:	58 6c       	cp.w	r12,6
80003772:	e0 8b 00 17 	brhi	800037a0 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003776:	76 0a       	ld.w	r10,r11[0x0]
80003778:	fe 78 30 00 	mov	r8,-53248
8000377c:	f8 c9 ff f0 	sub	r9,r12,-16
80003780:	a5 79       	lsl	r9,0x5
80003782:	f0 09 00 09 	add	r9,r8,r9
80003786:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003788:	76 19       	ld.w	r9,r11[0x4]
8000378a:	a5 7c       	lsl	r12,0x5
8000378c:	f0 0c 00 0c 	add	r12,r8,r12
80003790:	f8 c8 fd fc 	sub	r8,r12,-516
80003794:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003796:	76 28       	ld.w	r8,r11[0x8]
80003798:	f8 cc fd f8 	sub	r12,r12,-520
8000379c:	99 08       	st.w	r12[0x0],r8
8000379e:	5e fd       	retal	0

  return PWM_SUCCESS;
800037a0:	5e ff       	retal	1

800037a2 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800037a2:	18 98       	mov	r8,r12
800037a4:	e0 18 ff 80 	andl	r8,0xff80
800037a8:	c0 20       	breq	800037ac <pwm_start_channels+0xa>
800037aa:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
800037ac:	fe 78 30 00 	mov	r8,-53248
800037b0:	91 1c       	st.w	r8[0x4],r12
800037b2:	5e fd       	retal	0

800037b4 <pwm_async_update_channel>:

int pwm_async_update_channel(unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
800037b4:	58 6c       	cp.w	r12,6
800037b6:	e0 88 00 03 	brls	800037bc <pwm_async_update_channel+0x8>
800037ba:	5e ff       	retal	1
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
800037bc:	76 0a       	ld.w	r10,r11[0x0]
800037be:	fe 78 30 00 	mov	r8,-53248
800037c2:	f8 c9 ff f0 	sub	r9,r12,-16
800037c6:	a5 79       	lsl	r9,0x5
800037c8:	f0 09 00 09 	add	r9,r8,r9
800037cc:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
800037ce:	76 49       	ld.w	r9,r11[0x10]
800037d0:	a5 7c       	lsl	r12,0x5
800037d2:	18 08       	add	r8,r12
800037d4:	f0 c8 fd f0 	sub	r8,r8,-528
800037d8:	91 09       	st.w	r8[0x0],r9
800037da:	5e fd       	retal	0

800037dc <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800037dc:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
800037e0:	58 0c       	cp.w	r12,0
800037e2:	c0 21       	brne	800037e6 <pwm_init+0xa>
800037e4:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
800037e6:	e6 18 00 01 	andh	r8,0x1,COH
800037ea:	c0 91       	brne	800037fc <pwm_init+0x20>
800037ec:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800037ee:	fe 78 30 00 	mov	r8,-53248
800037f2:	37 f9       	mov	r9,127
800037f4:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800037f6:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800037f8:	d5 03       	csrf	0x10
800037fa:	c0 68       	rjmp	80003806 <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800037fc:	fe 78 30 00 	mov	r8,-53248
80003800:	37 f9       	mov	r9,127
80003802:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003804:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003806:	78 08       	ld.w	r8,r12[0x0]
80003808:	78 39       	ld.w	r9,r12[0xc]
8000380a:	a9 69       	lsl	r9,0x8
8000380c:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003810:	78 18       	ld.w	r8,r12[0x4]
80003812:	10 49       	or	r9,r8
80003814:	78 28       	ld.w	r8,r12[0x8]
80003816:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000381a:	fe 78 30 00 	mov	r8,-53248
8000381e:	91 09       	st.w	r8[0x0],r9
80003820:	5e fd       	retal	0

80003822 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003822:	f8 c8 00 01 	sub	r8,r12,1
80003826:	f0 0b 00 0b 	add	r11,r8,r11
8000382a:	f6 0c 0d 0a 	divu	r10,r11,r12
8000382e:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80003830:	f4 c8 00 01 	sub	r8,r10,1
80003834:	e0 48 00 fe 	cp.w	r8,254
80003838:	e0 88 00 03 	brls	8000383e <getBaudDiv+0x1c>
8000383c:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
8000383e:	5c 8c       	casts.h	r12
}
80003840:	5e fc       	retal	r12

80003842 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003842:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003846:	30 18       	mov	r8,1
80003848:	f0 09 18 00 	cp.b	r9,r8
8000384c:	e0 88 00 04 	brls	80003854 <spi_initMaster+0x12>
80003850:	30 2c       	mov	r12,2
80003852:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003854:	e0 68 00 80 	mov	r8,128
80003858:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
8000385a:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
8000385c:	30 19       	mov	r9,1
8000385e:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80003862:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003866:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
8000386a:	30 09       	mov	r9,0
8000386c:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003870:	30 fa       	mov	r10,15
80003872:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003876:	99 18       	st.w	r12[0x4],r8
80003878:	5e f9       	retal	r9

8000387a <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
8000387a:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000387c:	30 18       	mov	r8,1
8000387e:	f0 0b 18 00 	cp.b	r11,r8
80003882:	5f be       	srhi	lr
80003884:	f0 0a 18 00 	cp.b	r10,r8
80003888:	5f b8       	srhi	r8
8000388a:	fd e8 10 08 	or	r8,lr,r8
8000388e:	c0 30       	breq	80003894 <spi_selectionMode+0x1a>
80003890:	30 2c       	mov	r12,2
80003892:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003894:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003896:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8000389a:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000389e:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800038a2:	99 18       	st.w	r12[0x4],r8
800038a4:	d8 0a       	popm	pc,r12=0

800038a6 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800038a6:	78 18       	ld.w	r8,r12[0x4]
800038a8:	ea 18 00 0f 	orh	r8,0xf
800038ac:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800038ae:	78 18       	ld.w	r8,r12[0x4]
800038b0:	e2 18 00 04 	andl	r8,0x4,COH
800038b4:	c0 f0       	breq	800038d2 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800038b6:	30 e8       	mov	r8,14
800038b8:	f0 0b 18 00 	cp.b	r11,r8
800038bc:	e0 8b 00 19 	brhi	800038ee <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800038c0:	78 18       	ld.w	r8,r12[0x4]
800038c2:	b1 6b       	lsl	r11,0x10
800038c4:	ea 1b ff f0 	orh	r11,0xfff0
800038c8:	e8 1b ff ff 	orl	r11,0xffff
800038cc:	10 6b       	and	r11,r8
800038ce:	99 1b       	st.w	r12[0x4],r11
800038d0:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800038d2:	30 38       	mov	r8,3
800038d4:	f0 0b 18 00 	cp.b	r11,r8
800038d8:	e0 8b 00 0b 	brhi	800038ee <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800038dc:	78 18       	ld.w	r8,r12[0x4]
800038de:	2f 0b       	sub	r11,-16
800038e0:	30 19       	mov	r9,1
800038e2:	f2 0b 09 4b 	lsl	r11,r9,r11
800038e6:	5c db       	com	r11
800038e8:	10 6b       	and	r11,r8
800038ea:	99 1b       	st.w	r12[0x4],r11
800038ec:	5e fd       	retal	0
800038ee:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800038f0:	5e fc       	retal	r12

800038f2 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800038f2:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800038f6:	c0 58       	rjmp	80003900 <spi_unselectChip+0xe>
		if (!timeout--) {
800038f8:	58 08       	cp.w	r8,0
800038fa:	c0 21       	brne	800038fe <spi_unselectChip+0xc>
800038fc:	5e ff       	retal	1
800038fe:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003900:	78 49       	ld.w	r9,r12[0x10]
80003902:	e2 19 02 00 	andl	r9,0x200,COH
80003906:	cf 90       	breq	800038f8 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003908:	78 18       	ld.w	r8,r12[0x4]
8000390a:	ea 18 00 0f 	orh	r8,0xf
8000390e:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003910:	fc 18 01 00 	movh	r8,0x100
80003914:	99 08       	st.w	r12[0x0],r8
80003916:	5e fd       	retal	0

80003918 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003918:	eb cd 40 f8 	pushm	r3-r7,lr
8000391c:	18 95       	mov	r5,r12
8000391e:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003920:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003924:	30 38       	mov	r8,3
80003926:	f0 06 18 00 	cp.b	r6,r8
8000392a:	e0 8b 00 4d 	brhi	800039c4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
8000392e:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003932:	30 18       	mov	r8,1
80003934:	f0 04 18 00 	cp.b	r4,r8
80003938:	e0 8b 00 46 	brhi	800039c4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
8000393c:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003940:	30 78       	mov	r8,7
80003942:	f0 03 18 00 	cp.b	r3,r8
80003946:	e0 88 00 3f 	brls	800039c4 <spi_setupChipReg+0xac>
8000394a:	31 08       	mov	r8,16
8000394c:	f0 03 18 00 	cp.b	r3,r8
80003950:	e0 8b 00 3a 	brhi	800039c4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003954:	14 9b       	mov	r11,r10
80003956:	6e 1c       	ld.w	r12,r7[0x4]
80003958:	f0 1f 00 1d 	mcall	800039cc <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
8000395c:	c3 45       	brlt	800039c4 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000395e:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003960:	ec 09 16 01 	lsr	r9,r6,0x1
80003964:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003968:	ec 16 00 01 	eorl	r6,0x1
8000396c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003970:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003974:	20 83       	sub	r3,8
80003976:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000397a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000397e:	ef 39 00 09 	ld.ub	r9,r7[9]
80003982:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003986:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000398a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
8000398e:	0f 89       	ld.ub	r9,r7[0x0]
80003990:	30 1a       	mov	r10,1
80003992:	f4 09 18 00 	cp.b	r9,r10
80003996:	c0 e0       	breq	800039b2 <spi_setupChipReg+0x9a>
80003998:	c0 a3       	brcs	800039ac <spi_setupChipReg+0x94>
8000399a:	30 2a       	mov	r10,2
8000399c:	f4 09 18 00 	cp.b	r9,r10
800039a0:	c0 c0       	breq	800039b8 <spi_setupChipReg+0xa0>
800039a2:	30 3a       	mov	r10,3
800039a4:	f4 09 18 00 	cp.b	r9,r10
800039a8:	c0 e1       	brne	800039c4 <spi_setupChipReg+0xac>
800039aa:	c0 a8       	rjmp	800039be <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800039ac:	8b c8       	st.w	r5[0x30],r8
800039ae:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800039b2:	8b d8       	st.w	r5[0x34],r8
800039b4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800039b8:	8b e8       	st.w	r5[0x38],r8
800039ba:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800039be:	8b f8       	st.w	r5[0x3c],r8
800039c0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
800039c4:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800039c6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800039ca:	00 00       	add	r0,r0
800039cc:	80 00       	ld.sh	r0,r0[0x0]
800039ce:	38 22       	mov	r2,-126

800039d0 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800039d0:	30 18       	mov	r8,1
800039d2:	99 08       	st.w	r12[0x0],r8
}
800039d4:	5e fc       	retal	r12

800039d6 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800039d6:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800039da:	c0 58       	rjmp	800039e4 <spi_write+0xe>
		if (!timeout--) {
800039dc:	58 08       	cp.w	r8,0
800039de:	c0 21       	brne	800039e2 <spi_write+0xc>
800039e0:	5e ff       	retal	1
800039e2:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800039e4:	78 49       	ld.w	r9,r12[0x10]
800039e6:	e2 19 00 02 	andl	r9,0x2,COH
800039ea:	cf 90       	breq	800039dc <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800039ec:	5c 7b       	castu.h	r11
800039ee:	99 3b       	st.w	r12[0xc],r11
800039f0:	5e fd       	retal	0

800039f2 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800039f2:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800039f6:	c0 58       	rjmp	80003a00 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800039f8:	58 08       	cp.w	r8,0
800039fa:	c0 21       	brne	800039fe <spi_read+0xc>
800039fc:	5e ff       	retal	1
800039fe:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003a00:	78 49       	ld.w	r9,r12[0x10]
80003a02:	e2 19 02 01 	andl	r9,0x201,COH
80003a06:	e0 49 02 01 	cp.w	r9,513
80003a0a:	cf 71       	brne	800039f8 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003a0c:	78 28       	ld.w	r8,r12[0x8]
80003a0e:	b6 08       	st.h	r11[0x0],r8
80003a10:	5e fd       	retal	0

80003a12 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003a12:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003a14:	f6 08 15 04 	lsl	r8,r11,0x4
80003a18:	14 38       	cp.w	r8,r10
80003a1a:	f9 b8 08 10 	movls	r8,16
80003a1e:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003a22:	f0 0b 02 4b 	mul	r11,r8,r11
80003a26:	f6 09 16 01 	lsr	r9,r11,0x1
80003a2a:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003a2e:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003a32:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003a36:	f2 cb 00 01 	sub	r11,r9,1
80003a3a:	e0 4b ff fe 	cp.w	r11,65534
80003a3e:	e0 88 00 03 	brls	80003a44 <usart_set_async_baudrate+0x32>
80003a42:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003a44:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003a46:	e8 6e 00 00 	mov	lr,524288
80003a4a:	59 08       	cp.w	r8,16
80003a4c:	fc 08 17 10 	movne	r8,lr
80003a50:	f9 b8 00 00 	moveq	r8,0
80003a54:	e4 1b ff f7 	andh	r11,0xfff7
80003a58:	e0 1b fe cf 	andl	r11,0xfecf
80003a5c:	16 48       	or	r8,r11
80003a5e:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003a60:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003a64:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80003a68:	99 89       	st.w	r12[0x20],r9
80003a6a:	d8 0a       	popm	pc,r12=0

80003a6c <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003a6c:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80003a6e:	e2 18 00 02 	andl	r8,0x2,COH
80003a72:	c0 31       	brne	80003a78 <usart_write_char+0xc>
80003a74:	30 2c       	mov	r12,2
80003a76:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003a78:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80003a7c:	99 7b       	st.w	r12[0x1c],r11
80003a7e:	5e fd       	retal	0

80003a80 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003a80:	eb cd 40 e0 	pushm	r5-r7,lr
80003a84:	18 96       	mov	r6,r12
80003a86:	16 95       	mov	r5,r11
80003a88:	e0 67 27 0f 	mov	r7,9999
80003a8c:	c0 68       	rjmp	80003a98 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80003a8e:	58 07       	cp.w	r7,0
80003a90:	c0 31       	brne	80003a96 <usart_putchar+0x16>
80003a92:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003a96:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003a98:	0a 9b       	mov	r11,r5
80003a9a:	0c 9c       	mov	r12,r6
80003a9c:	f0 1f 00 03 	mcall	80003aa8 <usart_putchar+0x28>
80003aa0:	cf 71       	brne	80003a8e <usart_putchar+0xe>

  return USART_SUCCESS;
}
80003aa2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003aa6:	00 00       	add	r0,r0
80003aa8:	80 00       	ld.sh	r0,r0[0x0]
80003aaa:	3a 6c       	mov	r12,-90

80003aac <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003aac:	eb cd 40 c0 	pushm	r6-r7,lr
80003ab0:	18 96       	mov	r6,r12
80003ab2:	16 97       	mov	r7,r11
  while (*string != '\0')
80003ab4:	17 8b       	ld.ub	r11,r11[0x0]
80003ab6:	58 0b       	cp.w	r11,0
80003ab8:	c0 80       	breq	80003ac8 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80003aba:	2f f7       	sub	r7,-1
80003abc:	0c 9c       	mov	r12,r6
80003abe:	f0 1f 00 04 	mcall	80003acc <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003ac2:	0f 8b       	ld.ub	r11,r7[0x0]
80003ac4:	58 0b       	cp.w	r11,0
80003ac6:	cf a1       	brne	80003aba <usart_write_line+0xe>
80003ac8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003acc:	80 00       	ld.sh	r0,r0[0x0]
80003ace:	3a 80       	mov	r0,-88

80003ad0 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003ad0:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003ad4:	e6 18 00 01 	andh	r8,0x1,COH
80003ad8:	c0 71       	brne	80003ae6 <usart_reset+0x16>
80003ada:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003adc:	3f f8       	mov	r8,-1
80003ade:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003ae0:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003ae2:	d5 03       	csrf	0x10
80003ae4:	c0 48       	rjmp	80003aec <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80003ae6:	3f f8       	mov	r8,-1
80003ae8:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003aea:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003aec:	30 08       	mov	r8,0
80003aee:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003af0:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003af2:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003af4:	ea 68 61 0c 	mov	r8,680204
80003af8:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003afa:	5e fc       	retal	r12

80003afc <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003afc:	eb cd 40 e0 	pushm	r5-r7,lr
80003b00:	18 96       	mov	r6,r12
80003b02:	16 97       	mov	r7,r11
80003b04:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003b06:	f0 1f 00 2f 	mcall	80003bc0 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80003b0a:	58 07       	cp.w	r7,0
80003b0c:	c5 80       	breq	80003bbc <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80003b0e:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003b10:	30 49       	mov	r9,4
80003b12:	f2 08 18 00 	cp.b	r8,r9
80003b16:	e0 88 00 53 	brls	80003bbc <usart_init_rs232+0xc0>
80003b1a:	30 99       	mov	r9,9
80003b1c:	f2 08 18 00 	cp.b	r8,r9
80003b20:	e0 8b 00 4e 	brhi	80003bbc <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003b24:	0f d9       	ld.ub	r9,r7[0x5]
80003b26:	30 78       	mov	r8,7
80003b28:	f0 09 18 00 	cp.b	r9,r8
80003b2c:	e0 8b 00 48 	brhi	80003bbc <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003b30:	8e 39       	ld.sh	r9,r7[0x6]
80003b32:	e0 68 01 01 	mov	r8,257
80003b36:	f0 09 19 00 	cp.h	r9,r8
80003b3a:	e0 8b 00 41 	brhi	80003bbc <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80003b3e:	ef 39 00 08 	ld.ub	r9,r7[8]
80003b42:	30 38       	mov	r8,3
80003b44:	f0 09 18 00 	cp.b	r9,r8
80003b48:	e0 8b 00 3a 	brhi	80003bbc <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003b4c:	0a 9a       	mov	r10,r5
80003b4e:	6e 0b       	ld.w	r11,r7[0x0]
80003b50:	0c 9c       	mov	r12,r6
80003b52:	f0 1f 00 1d 	mcall	80003bc4 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003b56:	58 1c       	cp.w	r12,1
80003b58:	c3 20       	breq	80003bbc <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80003b5a:	0f c8       	ld.ub	r8,r7[0x4]
80003b5c:	30 99       	mov	r9,9
80003b5e:	f2 08 18 00 	cp.b	r8,r9
80003b62:	c0 51       	brne	80003b6c <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003b64:	6c 18       	ld.w	r8,r6[0x4]
80003b66:	b1 b8       	sbr	r8,0x11
80003b68:	8d 18       	st.w	r6[0x4],r8
80003b6a:	c0 68       	rjmp	80003b76 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003b6c:	6c 19       	ld.w	r9,r6[0x4]
80003b6e:	20 58       	sub	r8,5
80003b70:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003b74:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003b76:	6c 19       	ld.w	r9,r6[0x4]
80003b78:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003b7c:	0f d8       	ld.ub	r8,r7[0x5]
80003b7e:	a9 78       	lsl	r8,0x9
80003b80:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003b84:	12 48       	or	r8,r9
80003b86:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003b88:	8e 38       	ld.sh	r8,r7[0x6]
80003b8a:	30 29       	mov	r9,2
80003b8c:	f2 08 19 00 	cp.h	r8,r9
80003b90:	e0 88 00 09 	brls	80003ba2 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003b94:	6c 18       	ld.w	r8,r6[0x4]
80003b96:	ad b8       	sbr	r8,0xd
80003b98:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80003b9a:	8e b8       	ld.uh	r8,r7[0x6]
80003b9c:	20 28       	sub	r8,2
80003b9e:	8d a8       	st.w	r6[0x28],r8
80003ba0:	c0 68       	rjmp	80003bac <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003ba2:	6c 19       	ld.w	r9,r6[0x4]
80003ba4:	5c 78       	castu.h	r8
80003ba6:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80003baa:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003bac:	6c 18       	ld.w	r8,r6[0x4]
80003bae:	e0 18 ff f0 	andl	r8,0xfff0
80003bb2:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003bb4:	35 08       	mov	r8,80
80003bb6:	8d 08       	st.w	r6[0x0],r8
80003bb8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003bbc:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003bc0:	80 00       	ld.sh	r0,r0[0x0]
80003bc2:	3a d0       	mov	r0,-83
80003bc4:	80 00       	ld.sh	r0,r0[0x0]
80003bc6:	3a 12       	mov	r2,-95

80003bc8 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80003bc8:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80003bca:	f0 1f 00 02 	mcall	80003bd0 <print+0x8>
}
80003bce:	d8 02       	popm	pc
80003bd0:	80 00       	ld.sh	r0,r0[0x0]
80003bd2:	3a ac       	mov	r12,-86

80003bd4 <print_char_hex>:
  print(usart, tmp + i);
}


void print_char_hex(volatile avr32_usart_t *usart, unsigned char n)
{
80003bd4:	d4 01       	pushm	lr
80003bd6:	20 1d       	sub	sp,4
  char tmp[3];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[2] = '\0';
80003bd8:	30 08       	mov	r8,0
80003bda:	ba a8       	st.b	sp[0x2],r8
  for (i = 1; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80003bdc:	48 88       	lddpc	r8,80003bfc <print_char_hex+0x28>
80003bde:	f3 db c0 04 	bfextu	r9,r11,0x0,0x4
80003be2:	f0 09 07 09 	ld.ub	r9,r8[r9]
80003be6:	ba 99       	st.b	sp[0x1],r9
80003be8:	f7 db c0 84 	bfextu	r11,r11,0x4,0x4
80003bec:	f0 0b 07 08 	ld.ub	r8,r8[r11]
80003bf0:	ba 88       	st.b	sp[0x0],r8
    n >>= 4;
  }

  // Transmit the resulting string with the given USART.
  print(usart, tmp);
80003bf2:	1a 9b       	mov	r11,sp
80003bf4:	f0 1f 00 03 	mcall	80003c00 <print_char_hex+0x2c>
}
80003bf8:	2f fd       	sub	sp,-4
80003bfa:	d8 02       	popm	pc
80003bfc:	80 00       	ld.sh	r0,r0[0x0]
80003bfe:	4e 58       	lddpc	r8,80003d90 <leds+0x54>
80003c00:	80 00       	ld.sh	r0,r0[0x0]
80003c02:	3b c8       	mov	r8,-68

80003c04 <print_dbg_char_hex>:
  print_ulong(DBG_USART, n);
}


void print_dbg_char_hex(unsigned char n)
{
80003c04:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_char_hex(DBG_USART, n);
80003c06:	18 9b       	mov	r11,r12
80003c08:	fe 7c 14 00 	mov	r12,-60416
80003c0c:	f0 1f 00 02 	mcall	80003c14 <print_dbg_char_hex+0x10>
}
80003c10:	d8 02       	popm	pc
80003c12:	00 00       	add	r0,r0
80003c14:	80 00       	ld.sh	r0,r0[0x0]
80003c16:	3b d4       	mov	r4,-67

80003c18 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80003c18:	eb cd 40 e0 	pushm	r5-r7,lr
80003c1c:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80003c1e:	30 08       	mov	r8,0
80003c20:	fb 68 00 0a 	st.b	sp[10],r8
80003c24:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
80003c26:	1a 95       	mov	r5,sp
80003c28:	e0 6e cc cd 	mov	lr,52429
80003c2c:	ea 1e cc cc 	orh	lr,0xcccc
80003c30:	20 19       	sub	r9,1
80003c32:	f6 0e 06 46 	mulu.d	r6,r11,lr
80003c36:	0e 98       	mov	r8,r7
80003c38:	a3 98       	lsr	r8,0x3
80003c3a:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80003c3e:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
80003c42:	2d 0b       	sub	r11,-48
80003c44:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
80003c48:	10 9b       	mov	r11,r8
  } while (n);
80003c4a:	58 08       	cp.w	r8,0
80003c4c:	cf 21       	brne	80003c30 <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
80003c4e:	1a 9b       	mov	r11,sp
80003c50:	12 0b       	add	r11,r9
80003c52:	f0 1f 00 03 	mcall	80003c5c <print_ulong+0x44>
}
80003c56:	2f dd       	sub	sp,-12
80003c58:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003c5c:	80 00       	ld.sh	r0,r0[0x0]
80003c5e:	3b c8       	mov	r8,-68

80003c60 <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
80003c60:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80003c62:	18 9b       	mov	r11,r12
80003c64:	fe 7c 14 00 	mov	r12,-60416
80003c68:	f0 1f 00 02 	mcall	80003c70 <print_dbg_ulong+0x10>
}
80003c6c:	d8 02       	popm	pc
80003c6e:	00 00       	add	r0,r0
80003c70:	80 00       	ld.sh	r0,r0[0x0]
80003c72:	3c 18       	mov	r8,-63

80003c74 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80003c74:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
80003c76:	18 9b       	mov	r11,r12
80003c78:	fe 7c 14 00 	mov	r12,-60416
80003c7c:	f0 1f 00 02 	mcall	80003c84 <print_dbg+0x10>
}
80003c80:	d8 02       	popm	pc
80003c82:	00 00       	add	r0,r0
80003c84:	80 00       	ld.sh	r0,r0[0x0]
80003c86:	3b c8       	mov	r8,-68

80003c88 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80003c88:	eb cd 40 80 	pushm	r7,lr
80003c8c:	20 3d       	sub	sp,12
80003c8e:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80003c90:	50 0c       	stdsp	sp[0x0],r12
80003c92:	30 88       	mov	r8,8
80003c94:	ba c8       	st.b	sp[0x4],r8
80003c96:	30 48       	mov	r8,4
80003c98:	ba d8       	st.b	sp[0x5],r8
80003c9a:	30 08       	mov	r8,0
80003c9c:	ba 38       	st.h	sp[0x6],r8
80003c9e:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80003ca2:	30 2b       	mov	r11,2
80003ca4:	48 6c       	lddpc	r12,80003cbc <init_dbg_rs232_ex+0x34>
80003ca6:	f0 1f 00 07 	mcall	80003cc0 <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80003caa:	0e 9a       	mov	r10,r7
80003cac:	1a 9b       	mov	r11,sp
80003cae:	fe 7c 14 00 	mov	r12,-60416
80003cb2:	f0 1f 00 05 	mcall	80003cc4 <init_dbg_rs232_ex+0x3c>
}
80003cb6:	2f dd       	sub	sp,-12
80003cb8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cbc:	80 00       	ld.sh	r0,r0[0x0]
80003cbe:	4e 48       	lddpc	r8,80003e4c <local_pdca_init+0x38>
80003cc0:	80 00       	ld.sh	r0,r0[0x0]
80003cc2:	33 70       	mov	r0,55
80003cc4:	80 00       	ld.sh	r0,r0[0x0]
80003cc6:	3a fc       	mov	r12,-81

80003cc8 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80003cc8:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80003cca:	18 9b       	mov	r11,r12
80003ccc:	e0 6c e1 00 	mov	r12,57600
80003cd0:	f0 1f 00 02 	mcall	80003cd8 <init_dbg_rs232+0x10>
}
80003cd4:	d8 02       	popm	pc
80003cd6:	00 00       	add	r0,r0
80003cd8:	80 00       	ld.sh	r0,r0[0x0]
80003cda:	3c 88       	mov	r8,-56

80003cdc <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003cdc:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003ce0:	fe c0 f4 e0 	sub	r0,pc,-2848

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003ce4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003ce8:	d5 53       	csrf	0x15
  cp      r0, r1
80003cea:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003cec:	32 81       	mov	r1,40
  lda.w   r2, _data_lma
80003cee:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80003cf0:	c0 72       	brcc	80003cfe <idata_load_loop_end>
  st.d    r0++, r4
80003cf2:	fe c2 e9 22 	sub	r2,pc,-5854

80003cf6 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80003cf6:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003cf8:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80003cfa:	02 30       	cp.w	r0,r1
  cp      r0, r1
80003cfc:	cf d3       	brcs	80003cf6 <idata_load_loop>

80003cfe <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80003cfe:	32 80       	mov	r0,40
  mov     r2, 0
80003d00:	e0 61 07 70 	mov	r1,1904
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003d04:	02 30       	cp.w	r0,r1
  cp      r0, r1
80003d06:	c0 62       	brcc	80003d12 <udata_clear_loop_end>
  brlo    udata_clear_loop
80003d08:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003d0a:	30 03       	mov	r3,0

80003d0c <udata_clear_loop>:
80003d0c:	a1 22       	st.d	r0++,r2
80003d0e:	02 30       	cp.w	r0,r1
80003d10:	cf e3       	brcs	80003d0c <udata_clear_loop>

80003d12 <udata_clear_loop_end>:
80003d12:	fe cf fd 02 	sub	pc,pc,-766
80003d16:	d7 03       	nop

80003d18 <wait>:

void CLR_disp(void){
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
}//CLR_disp

void wait(){
80003d18:	20 1d       	sub	sp,4
	volatile int i;
	for(i = 0 ; i < 5000; i++);
80003d1a:	30 08       	mov	r8,0
80003d1c:	50 08       	stdsp	sp[0x0],r8
80003d1e:	40 08       	lddsp	r8,sp[0x0]
80003d20:	e0 48 13 87 	cp.w	r8,4999
80003d24:	e0 89 00 0a 	brgt	80003d38 <wait+0x20>
80003d28:	40 08       	lddsp	r8,sp[0x0]
80003d2a:	2f f8       	sub	r8,-1
80003d2c:	50 08       	stdsp	sp[0x0],r8
80003d2e:	40 08       	lddsp	r8,sp[0x0]
80003d30:	e0 48 13 87 	cp.w	r8,4999
80003d34:	fe 9a ff fa 	brle	80003d28 <wait+0x10>
}//Wait
80003d38:	2f fd       	sub	sp,-4
80003d3a:	5e fc       	retal	r12

80003d3c <leds>:
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
	}//For
	Enable_global_interrupt();
}//init_button_interrupt

void leds(uint8_t value){
80003d3c:	eb cd 40 80 	pushm	r7,lr
80003d40:	18 97       	mov	r7,r12
	if ((value & 0b1000)>>3)gpio_clr_gpio_pin(LED0); else gpio_set_gpio_pin(LED0);
80003d42:	f1 dc c0 61 	bfextu	r8,r12,0x3,0x1
80003d46:	c0 50       	breq	80003d50 <leds+0x14>
80003d48:	33 bc       	mov	r12,59
80003d4a:	f0 1f 00 14 	mcall	80003d98 <leds+0x5c>
80003d4e:	c0 48       	rjmp	80003d56 <leds+0x1a>
80003d50:	33 bc       	mov	r12,59
80003d52:	f0 1f 00 13 	mcall	80003d9c <leds+0x60>
	if ((value & 0b0100)>>2)gpio_clr_gpio_pin(LED1); else gpio_set_gpio_pin(LED1);
80003d56:	f1 d7 c0 41 	bfextu	r8,r7,0x2,0x1
80003d5a:	c0 50       	breq	80003d64 <leds+0x28>
80003d5c:	33 cc       	mov	r12,60
80003d5e:	f0 1f 00 0f 	mcall	80003d98 <leds+0x5c>
80003d62:	c0 48       	rjmp	80003d6a <leds+0x2e>
80003d64:	33 cc       	mov	r12,60
80003d66:	f0 1f 00 0e 	mcall	80003d9c <leds+0x60>
	if ((value & 0b0010)>>1)gpio_clr_gpio_pin(LED2); else gpio_set_gpio_pin(LED2);
80003d6a:	f1 d7 c0 21 	bfextu	r8,r7,0x1,0x1
80003d6e:	c0 50       	breq	80003d78 <leds+0x3c>
80003d70:	30 5c       	mov	r12,5
80003d72:	f0 1f 00 0a 	mcall	80003d98 <leds+0x5c>
80003d76:	c0 48       	rjmp	80003d7e <leds+0x42>
80003d78:	30 5c       	mov	r12,5
80003d7a:	f0 1f 00 09 	mcall	80003d9c <leds+0x60>
	if (value & 0b0001)gpio_clr_gpio_pin(LED3); else gpio_set_gpio_pin(LED3);
80003d7e:	ef d7 c0 01 	bfextu	r7,r7,0x0,0x1
80003d82:	c0 60       	breq	80003d8e <leds+0x52>
80003d84:	30 6c       	mov	r12,6
80003d86:	f0 1f 00 05 	mcall	80003d98 <leds+0x5c>
80003d8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d8e:	30 6c       	mov	r12,6
80003d90:	f0 1f 00 03 	mcall	80003d9c <leds+0x60>
80003d94:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d98:	80 00       	ld.sh	r0,r0[0x0]
80003d9a:	33 ea       	mov	r10,62
80003d9c:	80 00       	ld.sh	r0,r0[0x0]
80003d9e:	33 ce       	mov	lr,60

80003da0 <init_button_interrupt>:
	pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
	INTC_register_interrupt(&pdca_int_handler, AVR32_PDCA_IRQ_0, AVR32_INTC_INT1);  // pdca_channel_spi1_RX = 0

} //local_pdca_init

void init_button_interrupt(void){//inicializar interrupciones de botones
80003da0:	d4 21       	pushm	r4-r7,lr
80003da2:	20 3d       	sub	sp,12
	Disable_global_interrupt();
80003da4:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80003da6:	f0 1f 00 14 	mcall	80003df4 <init_button_interrupt+0x54>
	INTC_register_interrupt(&btn_interrupt_routine, 70, 3);
80003daa:	49 47       	lddpc	r7,80003df8 <init_button_interrupt+0x58>
80003dac:	30 3a       	mov	r10,3
80003dae:	34 6b       	mov	r11,70
80003db0:	0e 9c       	mov	r12,r7
80003db2:	f0 1f 00 13 	mcall	80003dfc <init_button_interrupt+0x5c>
	INTC_register_interrupt(&btn_interrupt_routine, 71, 3);
80003db6:	30 3a       	mov	r10,3
80003db8:	34 7b       	mov	r11,71
80003dba:	0e 9c       	mov	r12,r7
80003dbc:	f0 1f 00 10 	mcall	80003dfc <init_button_interrupt+0x5c>
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
80003dc0:	fa c6 ff fe 	sub	r6,sp,-2
80003dc4:	30 aa       	mov	r10,10
80003dc6:	48 fb       	lddpc	r11,80003e00 <init_button_interrupt+0x60>
80003dc8:	0c 9c       	mov	r12,r6
80003dca:	f0 1f 00 0f 	mcall	80003e04 <init_button_interrupt+0x64>
	pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
	INTC_register_interrupt(&pdca_int_handler, AVR32_PDCA_IRQ_0, AVR32_INTC_INT1);  // pdca_channel_spi1_RX = 0

} //local_pdca_init

void init_button_interrupt(void){//inicializar interrupciones de botones
80003dce:	fa c5 ff f4 	sub	r5,sp,-12
	INTC_register_interrupt(&btn_interrupt_routine, 71, 3);
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
		gpio_enable_gpio_pin(button_ref[i]);
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
80003dd2:	30 24       	mov	r4,2
	INTC_init_interrupts();
	INTC_register_interrupt(&btn_interrupt_routine, 70, 3);
	INTC_register_interrupt(&btn_interrupt_routine, 71, 3);
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
		gpio_enable_gpio_pin(button_ref[i]);
80003dd4:	0d 27       	ld.uh	r7,r6++
80003dd6:	0e 9c       	mov	r12,r7
80003dd8:	f0 1f 00 0c 	mcall	80003e08 <init_button_interrupt+0x68>
		gpio_enable_pin_pull_up(button_ref[i]);
80003ddc:	0e 9c       	mov	r12,r7
80003dde:	f0 1f 00 0c 	mcall	80003e0c <init_button_interrupt+0x6c>
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
80003de2:	08 9b       	mov	r11,r4
80003de4:	0e 9c       	mov	r12,r7
80003de6:	f0 1f 00 0b 	mcall	80003e10 <init_button_interrupt+0x70>
	Disable_global_interrupt();
	INTC_init_interrupts();
	INTC_register_interrupt(&btn_interrupt_routine, 70, 3);
	INTC_register_interrupt(&btn_interrupt_routine, 71, 3);
	uint16_t button_ref [] = {BTN_UP,BTN_DOWN,BTN_RIGHT,BTN_LEFT,BTN_CENTER};
	for(uint8_t i=0; i<5; i++){
80003dea:	0a 36       	cp.w	r6,r5
80003dec:	cf 41       	brne	80003dd4 <init_button_interrupt+0x34>
		gpio_enable_gpio_pin(button_ref[i]);
		gpio_enable_pin_pull_up(button_ref[i]);
		gpio_enable_pin_interrupt(button_ref[i],GPIO_FALLING_EDGE);
	}//For
	Enable_global_interrupt();
80003dee:	d5 03       	csrf	0x10
}//init_button_interrupt
80003df0:	2f dd       	sub	sp,-12
80003df2:	d8 22       	popm	r4-r7,pc
80003df4:	80 00       	ld.sh	r0,r0[0x0]
80003df6:	34 fc       	mov	r12,79
80003df8:	80 00       	ld.sh	r0,r0[0x0]
80003dfa:	3e e4       	mov	r4,-18
80003dfc:	80 00       	ld.sh	r0,r0[0x0]
80003dfe:	34 7c       	mov	r12,71
80003e00:	80 00       	ld.sh	r0,r0[0x0]
80003e02:	52 6c       	stdsp	sp[0x98],r12
80003e04:	80 00       	ld.sh	r0,r0[0x0]
80003e06:	45 48       	lddsp	r8,sp[0x150]
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	33 a0       	mov	r0,58
80003e0c:	80 00       	ld.sh	r0,r0[0x0]
80003e0e:	33 b8       	mov	r8,59
80003e10:	80 00       	ld.sh	r0,r0[0x0]
80003e12:	34 06       	mov	r6,64

80003e14 <local_pdca_init>:
	spi_enable(SD_MMC_SPI);
	sd_mmc_spi_init(spiOptions, PBA_HZ);

}//sd_mmc_resources_init

void local_pdca_init(void){
80003e14:	eb cd 40 b0 	pushm	r4-r5,r7,lr
80003e18:	20 cd       	sub	sp,48
		.size = 512,                              // transfer counter: here the size of the string
		.r_addr = NULL,                           // next memory address after 1st transfer complete
		.r_size = 0,                              // next transfer counter not used here
		.pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - data are on reception from SPI1 RX line
		.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
	};//pdca_options_SPI_RX
80003e1a:	49 78       	lddpc	r8,80003e74 <local_pdca_init+0x60>
80003e1c:	fa c7 ff e8 	sub	r7,sp,-24
80003e20:	f0 ea 00 00 	ld.d	r10,r8[0]
80003e24:	ee eb 00 00 	st.d	r7[0],r10
80003e28:	f0 ea 00 08 	ld.d	r10,r8[8]
80003e2c:	ee eb 00 08 	st.d	r7[8],r10
80003e30:	f0 e8 00 10 	ld.d	r8,r8[16]
80003e34:	ee e9 00 10 	st.d	r7[16],r8
		.size = 512,                              // transfer counter: here the size of the string
		.r_addr = NULL,                           // next memory address after 1st transfer complete
		.r_size = 0,                              // next transfer counter not used here
		.pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
		.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
	};//pdca_options_SPI_TX
80003e38:	49 08       	lddpc	r8,80003e78 <local_pdca_init+0x64>
80003e3a:	1a 9b       	mov	r11,sp
80003e3c:	f0 e4 00 00 	ld.d	r4,r8[0]
80003e40:	fa e5 00 00 	st.d	sp[0],r4
80003e44:	f0 e4 00 08 	ld.d	r4,r8[8]
80003e48:	fa e5 00 08 	st.d	sp[8],r4
80003e4c:	f0 e8 00 10 	ld.d	r8,r8[16]
80003e50:	fa e9 00 10 	st.d	sp[16],r8

	pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80003e54:	30 1c       	mov	r12,1
80003e56:	f0 1f 00 0a 	mcall	80003e7c <local_pdca_init+0x68>
	pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
80003e5a:	0e 9b       	mov	r11,r7
80003e5c:	30 0c       	mov	r12,0
80003e5e:	f0 1f 00 08 	mcall	80003e7c <local_pdca_init+0x68>
	INTC_register_interrupt(&pdca_int_handler, AVR32_PDCA_IRQ_0, AVR32_INTC_INT1);  // pdca_channel_spi1_RX = 0
80003e62:	30 1a       	mov	r10,1
80003e64:	36 0b       	mov	r11,96
80003e66:	48 7c       	lddpc	r12,80003e80 <local_pdca_init+0x6c>
80003e68:	f0 1f 00 07 	mcall	80003e84 <local_pdca_init+0x70>

} //local_pdca_init
80003e6c:	2f 4d       	sub	sp,-48
80003e6e:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc
80003e72:	00 00       	add	r0,r0
80003e74:	80 00       	ld.sh	r0,r0[0x0]
80003e76:	53 b8       	stdsp	sp[0xec],r8
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	52 98       	stdsp	sp[0xa4],r8
80003e7c:	80 00       	ld.sh	r0,r0[0x0]
80003e7e:	36 54       	mov	r4,101
80003e80:	80 00       	ld.sh	r0,r0[0x0]
80003e82:	3e 88       	mov	r8,-24
80003e84:	80 00       	ld.sh	r0,r0[0x0]
80003e86:	34 7c       	mov	r12,71

80003e88 <pdca_int_handler>:
void wait(){
	volatile int i;
	for(i = 0 ; i < 5000; i++);
}//Wait

static void pdca_int_handler(void){
80003e88:	d4 01       	pushm	lr
	Disable_global_interrupt();
80003e8a:	d3 03       	ssrf	0x10
	pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
80003e8c:	30 0c       	mov	r12,0
80003e8e:	f0 1f 00 0a 	mcall	80003eb4 <pdca_int_handler+0x2c>
	sd_mmc_spi_read_close_PDCA();
80003e92:	f0 1f 00 0a 	mcall	80003eb8 <pdca_int_handler+0x30>
	wait();
80003e96:	f0 1f 00 0a 	mcall	80003ebc <pdca_int_handler+0x34>
	pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
80003e9a:	30 1c       	mov	r12,1
80003e9c:	f0 1f 00 09 	mcall	80003ec0 <pdca_int_handler+0x38>
	pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);
80003ea0:	30 0c       	mov	r12,0
80003ea2:	f0 1f 00 08 	mcall	80003ec0 <pdca_int_handler+0x38>
	Enable_global_interrupt();
80003ea6:	d5 03       	csrf	0x10
	end_of_transfer = true;
80003ea8:	30 19       	mov	r9,1
80003eaa:	48 78       	lddpc	r8,80003ec4 <pdca_int_handler+0x3c>
80003eac:	b0 89       	st.b	r8[0x0],r9
}//pdca_int_handler
80003eae:	d4 02       	popm	lr
80003eb0:	d6 03       	rete
80003eb2:	00 00       	add	r0,r0
80003eb4:	80 00       	ld.sh	r0,r0[0x0]
80003eb6:	35 f4       	mov	r4,95
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	29 94       	sub	r4,-103
80003ebc:	80 00       	ld.sh	r0,r0[0x0]
80003ebe:	3d 18       	mov	r8,-47
80003ec0:	80 00       	ld.sh	r0,r0[0x0]
80003ec2:	35 9c       	mov	r12,89
80003ec4:	00 00       	add	r0,r0
80003ec6:	03 78       	ld.ub	r8,--r1

80003ec8 <CLR_disp>:
  pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
  pwm_channel_init(6, &pwm_channel6);
  pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
}//tft_bl_init

void CLR_disp(void){
80003ec8:	d4 01       	pushm	lr
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80003eca:	30 08       	mov	r8,0
80003ecc:	e0 69 00 f0 	mov	r9,240
80003ed0:	e0 6a 01 40 	mov	r10,320
80003ed4:	10 9b       	mov	r11,r8
80003ed6:	10 9c       	mov	r12,r8
80003ed8:	f0 1f 00 02 	mcall	80003ee0 <CLR_disp+0x18>
}//CLR_disp
80003edc:	d8 02       	popm	pc
80003ede:	00 00       	add	r0,r0
80003ee0:	80 00       	ld.sh	r0,r0[0x0]
80003ee2:	23 24       	sub	r4,50

80003ee4 <btn_interrupt_routine>:
	if ((value & 0b0100)>>2)gpio_clr_gpio_pin(LED1); else gpio_set_gpio_pin(LED1);
	if ((value & 0b0010)>>1)gpio_clr_gpio_pin(LED2); else gpio_set_gpio_pin(LED2);
	if (value & 0b0001)gpio_clr_gpio_pin(LED3); else gpio_set_gpio_pin(LED3);
}//Fin Fn

void btn_interrupt_routine (void){
80003ee4:	d4 01       	pushm	lr
	CLR_disp();
80003ee6:	f0 1f 00 3f 	mcall	80003fe0 <btn_interrupt_routine+0xfc>
	if (gpio_get_pin_interrupt_flag(BTN_UP)) {
80003eea:	33 6c       	mov	r12,54
80003eec:	f0 1f 00 3e 	mcall	80003fe4 <btn_interrupt_routine+0x100>
80003ef0:	c1 40       	breq	80003f18 <btn_interrupt_routine+0x34>
		btn_pressed=UP;
80003ef2:	30 18       	mov	r8,1
80003ef4:	4b d9       	lddpc	r9,80003fe8 <btn_interrupt_routine+0x104>
80003ef6:	93 08       	st.w	r9[0x0],r8
		state=1;
80003ef8:	4b d9       	lddpc	r9,80003fec <btn_interrupt_routine+0x108>
80003efa:	93 08       	st.w	r9[0x0],r8
		et024006_PrintString("Estado 1", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80003efc:	3f f8       	mov	r8,-1
80003efe:	1a d8       	st.w	--sp,r8
80003f00:	e0 68 ff ff 	mov	r8,65535
80003f04:	31 e9       	mov	r9,30
80003f06:	12 9a       	mov	r10,r9
80003f08:	4b ab       	lddpc	r11,80003ff0 <btn_interrupt_routine+0x10c>
80003f0a:	4b bc       	lddpc	r12,80003ff4 <btn_interrupt_routine+0x110>
80003f0c:	f0 1f 00 3b 	mcall	80003ff8 <btn_interrupt_routine+0x114>
		gpio_clear_pin_interrupt_flag(BTN_UP);
80003f10:	33 6c       	mov	r12,54
80003f12:	f0 1f 00 3b 	mcall	80003ffc <btn_interrupt_routine+0x118>
80003f16:	2f fd       	sub	sp,-4
	}
	if (gpio_get_pin_interrupt_flag(BTN_DOWN)){
80003f18:	33 7c       	mov	r12,55
80003f1a:	f0 1f 00 33 	mcall	80003fe4 <btn_interrupt_routine+0x100>
80003f1e:	c1 40       	breq	80003f46 <btn_interrupt_routine+0x62>
		btn_pressed=DOWN;
80003f20:	30 28       	mov	r8,2
80003f22:	4b 29       	lddpc	r9,80003fe8 <btn_interrupt_routine+0x104>
80003f24:	93 08       	st.w	r9[0x0],r8
		state=2;
80003f26:	4b 29       	lddpc	r9,80003fec <btn_interrupt_routine+0x108>
80003f28:	93 08       	st.w	r9[0x0],r8
		et024006_PrintString("Estado 2", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80003f2a:	3f f8       	mov	r8,-1
80003f2c:	1a d8       	st.w	--sp,r8
80003f2e:	e0 68 ff ff 	mov	r8,65535
80003f32:	31 e9       	mov	r9,30
80003f34:	12 9a       	mov	r10,r9
80003f36:	4a fb       	lddpc	r11,80003ff0 <btn_interrupt_routine+0x10c>
80003f38:	4b 2c       	lddpc	r12,80004000 <btn_interrupt_routine+0x11c>
80003f3a:	f0 1f 00 30 	mcall	80003ff8 <btn_interrupt_routine+0x114>
		gpio_clear_pin_interrupt_flag(BTN_DOWN);
80003f3e:	33 7c       	mov	r12,55
80003f40:	f0 1f 00 2f 	mcall	80003ffc <btn_interrupt_routine+0x118>
80003f44:	2f fd       	sub	sp,-4
	}
	if (gpio_get_pin_interrupt_flag(BTN_RIGHT)){
80003f46:	33 8c       	mov	r12,56
80003f48:	f0 1f 00 27 	mcall	80003fe4 <btn_interrupt_routine+0x100>
80003f4c:	c1 50       	breq	80003f76 <btn_interrupt_routine+0x92>
		btn_pressed=RIGHT;
80003f4e:	30 49       	mov	r9,4
80003f50:	4a 68       	lddpc	r8,80003fe8 <btn_interrupt_routine+0x104>
80003f52:	91 09       	st.w	r8[0x0],r9
		state=3;
80003f54:	30 39       	mov	r9,3
80003f56:	4a 68       	lddpc	r8,80003fec <btn_interrupt_routine+0x108>
80003f58:	91 09       	st.w	r8[0x0],r9
		et024006_PrintString("Estado 3", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80003f5a:	3f f8       	mov	r8,-1
80003f5c:	1a d8       	st.w	--sp,r8
80003f5e:	e0 68 ff ff 	mov	r8,65535
80003f62:	31 e9       	mov	r9,30
80003f64:	12 9a       	mov	r10,r9
80003f66:	4a 3b       	lddpc	r11,80003ff0 <btn_interrupt_routine+0x10c>
80003f68:	4a 7c       	lddpc	r12,80004004 <btn_interrupt_routine+0x120>
80003f6a:	f0 1f 00 24 	mcall	80003ff8 <btn_interrupt_routine+0x114>
		gpio_clear_pin_interrupt_flag(BTN_RIGHT);
80003f6e:	33 8c       	mov	r12,56
80003f70:	f0 1f 00 23 	mcall	80003ffc <btn_interrupt_routine+0x118>
80003f74:	2f fd       	sub	sp,-4
	}
	if (gpio_get_pin_interrupt_flag(BTN_LEFT)){
80003f76:	33 9c       	mov	r12,57
80003f78:	f0 1f 00 1b 	mcall	80003fe4 <btn_interrupt_routine+0x100>
80003f7c:	c1 50       	breq	80003fa6 <btn_interrupt_routine+0xc2>
		btn_pressed=LEFT;
80003f7e:	30 39       	mov	r9,3
80003f80:	49 a8       	lddpc	r8,80003fe8 <btn_interrupt_routine+0x104>
80003f82:	91 09       	st.w	r8[0x0],r9
		state=4;
80003f84:	30 49       	mov	r9,4
80003f86:	49 a8       	lddpc	r8,80003fec <btn_interrupt_routine+0x108>
80003f88:	91 09       	st.w	r8[0x0],r9
		et024006_PrintString("Estado 4", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80003f8a:	3f f8       	mov	r8,-1
80003f8c:	1a d8       	st.w	--sp,r8
80003f8e:	e0 68 ff ff 	mov	r8,65535
80003f92:	31 e9       	mov	r9,30
80003f94:	12 9a       	mov	r10,r9
80003f96:	49 7b       	lddpc	r11,80003ff0 <btn_interrupt_routine+0x10c>
80003f98:	49 cc       	lddpc	r12,80004008 <btn_interrupt_routine+0x124>
80003f9a:	f0 1f 00 18 	mcall	80003ff8 <btn_interrupt_routine+0x114>
		gpio_clear_pin_interrupt_flag(BTN_LEFT);
80003f9e:	33 9c       	mov	r12,57
80003fa0:	f0 1f 00 17 	mcall	80003ffc <btn_interrupt_routine+0x118>
80003fa4:	2f fd       	sub	sp,-4
	}
	if (gpio_get_pin_interrupt_flag(BTN_CENTER)){
80003fa6:	33 ac       	mov	r12,58
80003fa8:	f0 1f 00 0f 	mcall	80003fe4 <btn_interrupt_routine+0x100>
80003fac:	c1 40       	breq	80003fd4 <btn_interrupt_routine+0xf0>
		gpio_clear_pin_interrupt_flag(BTN_CENTER);
80003fae:	33 ac       	mov	r12,58
80003fb0:	f0 1f 00 13 	mcall	80003ffc <btn_interrupt_routine+0x118>
		btn_pressed=CENTER;
80003fb4:	30 58       	mov	r8,5
80003fb6:	48 d9       	lddpc	r9,80003fe8 <btn_interrupt_routine+0x104>
80003fb8:	93 08       	st.w	r9[0x0],r8
		state=5;
80003fba:	48 d9       	lddpc	r9,80003fec <btn_interrupt_routine+0x108>
80003fbc:	93 08       	st.w	r9[0x0],r8
		et024006_PrintString("Estado 5", (const unsigned char *)&FONT8x8, 30, 30, WHITE, -1);
80003fbe:	3f f8       	mov	r8,-1
80003fc0:	1a d8       	st.w	--sp,r8
80003fc2:	e0 68 ff ff 	mov	r8,65535
80003fc6:	31 e9       	mov	r9,30
80003fc8:	12 9a       	mov	r10,r9
80003fca:	48 ab       	lddpc	r11,80003ff0 <btn_interrupt_routine+0x10c>
80003fcc:	49 0c       	lddpc	r12,8000400c <btn_interrupt_routine+0x128>
80003fce:	f0 1f 00 0b 	mcall	80003ff8 <btn_interrupt_routine+0x114>
80003fd2:	2f fd       	sub	sp,-4
	}
	gpio_get_pin_interrupt_flag(BTN_CENTER);
80003fd4:	33 ac       	mov	r12,58
80003fd6:	f0 1f 00 04 	mcall	80003fe4 <btn_interrupt_routine+0x100>
} //Fin Botones
80003fda:	d4 02       	popm	lr
80003fdc:	d6 03       	rete
80003fde:	00 00       	add	r0,r0
80003fe0:	80 00       	ld.sh	r0,r0[0x0]
80003fe2:	3e c8       	mov	r8,-20
80003fe4:	80 00       	ld.sh	r0,r0[0x0]
80003fe6:	34 4c       	mov	r12,68
80003fe8:	00 00       	add	r0,r0
80003fea:	01 44       	ld.w	r4,--r0
80003fec:	00 00       	add	r0,r0
80003fee:	01 48       	ld.w	r8,--r0
80003ff0:	80 00       	ld.sh	r0,r0[0x0]
80003ff2:	4a 00       	lddpc	r0,80004070 <main+0x60>
80003ff4:	80 00       	ld.sh	r0,r0[0x0]
80003ff6:	52 b0       	stdsp	sp[0xac],r0
80003ff8:	80 00       	ld.sh	r0,r0[0x0]
80003ffa:	20 a8       	sub	r8,10
80003ffc:	80 00       	ld.sh	r0,r0[0x0]
80003ffe:	34 64       	mov	r4,70
80004000:	80 00       	ld.sh	r0,r0[0x0]
80004002:	52 bc       	stdsp	sp[0xac],r12
80004004:	80 00       	ld.sh	r0,r0[0x0]
80004006:	52 c8       	stdsp	sp[0xb0],r8
80004008:	80 00       	ld.sh	r0,r0[0x0]
8000400a:	52 d4       	stdsp	sp[0xb4],r4
8000400c:	80 00       	ld.sh	r0,r0[0x0]
8000400e:	52 e0       	stdsp	sp[0xb8],r0

80004010 <main>:
static void sd_mmc_resources_init(void);
void local_pdca_init(void);
void leds(uint8_t value);
void init_button_interrupt(void);

int main(void){
80004010:	d4 31       	pushm	r0-r7,lr
80004012:	20 4d       	sub	sp,16

	int i, j; //j for sectors, i for bytes

	//PM
	pm_switch_to_osc0(&AVR32_PM, PBA_HZ, 3);
80004014:	30 3a       	mov	r10,3
80004016:	e0 6b 1b 00 	mov	r11,6912
8000401a:	ea 1b 00 b7 	orh	r11,0xb7
8000401e:	fe 7c 0c 00 	mov	r12,-62464
80004022:	f0 1f 00 86 	mcall	80004238 <main+0x228>

	//Button interrupt
	init_button_interrupt();
80004026:	f0 1f 00 86 	mcall	8000423c <main+0x22c>

	//SDCARD
	init_dbg_rs232(PBA_HZ);
8000402a:	e0 6c 1b 00 	mov	r12,6912
8000402e:	ea 1c 00 b7 	orh	r12,0xb7
80004032:	f0 1f 00 84 	mcall	80004240 <main+0x230>
	print_dbg("\r\nInit SD/MMC Driver");
80004036:	fe fc 02 0e 	ld.w	r12,pc[526]
8000403a:	f0 1f 00 84 	mcall	80004248 <main+0x238>
	print_dbg("\r\nInsert SD/MMC...");
8000403e:	fe fc 02 0e 	ld.w	r12,pc[526]
80004042:	f0 1f 00 82 	mcall	80004248 <main+0x238>
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};//SPI Options
80004046:	fe f8 02 0a 	ld.w	r8,pc[522]
8000404a:	1a 97       	mov	r7,sp
8000404c:	f0 ea 00 00 	ld.d	r10,r8[0]
80004050:	fa eb 00 00 	st.d	sp[0],r10
80004054:	f0 e8 00 08 	ld.d	r8,r8[8]
80004058:	fa e9 00 08 	st.d	sp[8],r8

	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000405c:	30 4b       	mov	r11,4
8000405e:	4f ec       	lddpc	r12,80004254 <main+0x244>
80004060:	f0 1f 00 7e 	mcall	80004258 <main+0x248>
	sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
	spi_initMaster(SD_MMC_SPI, &spiOptions);
80004064:	1a 9b       	mov	r11,sp
80004066:	fe 7c 24 00 	mov	r12,-56320
8000406a:	f0 1f 00 7d 	mcall	8000425c <main+0x24c>
	spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
8000406e:	30 09       	mov	r9,0
80004070:	12 9a       	mov	r10,r9
80004072:	12 9b       	mov	r11,r9
80004074:	fe 7c 24 00 	mov	r12,-56320
80004078:	f0 1f 00 7a 	mcall	80004260 <main+0x250>
	spi_enable(SD_MMC_SPI);
8000407c:	fe 7c 24 00 	mov	r12,-56320
80004080:	f0 1f 00 79 	mcall	80004264 <main+0x254>
	sd_mmc_spi_init(spiOptions, PBA_HZ);
80004084:	20 4d       	sub	sp,16
80004086:	ee e8 00 00 	ld.d	r8,r7[0]
8000408a:	fa e9 00 00 	st.d	sp[0],r8
8000408e:	ee e8 00 08 	ld.d	r8,r7[8]
80004092:	fa e9 00 08 	st.d	sp[8],r8
80004096:	e0 6c 1b 00 	mov	r12,6912
8000409a:	ea 1c 00 b7 	orh	r12,0xb7
8000409e:	f0 1f 00 73 	mcall	80004268 <main+0x258>
800040a2:	2f cd       	sub	sp,-16
	//SDCARD
	init_dbg_rs232(PBA_HZ);
	print_dbg("\r\nInit SD/MMC Driver");
	print_dbg("\r\nInsert SD/MMC...");
	sd_mmc_resources_init();
	while (!sd_mmc_spi_mem_check());
800040a4:	f0 1f 00 72 	mcall	8000426c <main+0x25c>
800040a8:	cf e0       	breq	800040a4 <main+0x94>
	print_dbg("\r\nCard detected!");
800040aa:	4f 2c       	lddpc	r12,80004270 <main+0x260>
800040ac:	f0 1f 00 67 	mcall	80004248 <main+0x238>
	sd_mmc_spi_get_capacity();
800040b0:	f0 1f 00 71 	mcall	80004274 <main+0x264>
	print_dbg("Capacity = ");
800040b4:	4f 1c       	lddpc	r12,80004278 <main+0x268>
800040b6:	f0 1f 00 65 	mcall	80004248 <main+0x238>
	print_dbg_ulong(capacity >> 20);
800040ba:	4f 18       	lddpc	r8,8000427c <main+0x26c>
800040bc:	f0 e8 00 00 	ld.d	r8,r8[0]
800040c0:	f0 0c 16 14 	lsr	r12,r8,0x14
800040c4:	f9 e9 10 cc 	or	r12,r12,r9<<0xc
800040c8:	f0 1f 00 6e 	mcall	80004280 <main+0x270>
	print_dbg(" MBytes");
800040cc:	4e ec       	lddpc	r12,80004284 <main+0x274>
800040ce:	f0 1f 00 5f 	mcall	80004248 <main+0x238>

	Enable_global_interrupt();
800040d2:	d5 03       	csrf	0x10
	local_pdca_init();
800040d4:	f0 1f 00 6d 	mcall	80004288 <main+0x278>
800040d8:	30 16       	mov	r6,1

	for(j = 1; j <= 3; j++){ //3 Sectores

		pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_RX, &ram_buffer,512);
800040da:	4e d4       	lddpc	r4,8000428c <main+0x27c>
800040dc:	e0 63 02 00 	mov	r3,512
800040e0:	30 05       	mov	r5,0
		pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_TX,(void *)&dummy_data,512); //send dummy
800040e2:	0c 92       	mov	r2,r6
		end_of_transfer = false;
800040e4:	4e b1       	lddpc	r1,80004290 <main+0x280>
800040e6:	30 00       	mov	r0,0
	Enable_global_interrupt();
	local_pdca_init();

	for(j = 1; j <= 3; j++){ //3 Sectores

		pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_RX, &ram_buffer,512);
800040e8:	06 9a       	mov	r10,r3
800040ea:	08 9b       	mov	r11,r4
800040ec:	0a 9c       	mov	r12,r5
800040ee:	f0 1f 00 6a 	mcall	80004294 <main+0x284>
		pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_TX,(void *)&dummy_data,512); //send dummy
800040f2:	06 9a       	mov	r10,r3
800040f4:	4e 9b       	lddpc	r11,80004298 <main+0x288>
800040f6:	04 9c       	mov	r12,r2
800040f8:	f0 1f 00 67 	mcall	80004294 <main+0x284>
		end_of_transfer = false;
800040fc:	a2 80       	st.b	r1[0x0],r0

		if(sd_mmc_spi_read_open_PDCA (j)){
800040fe:	0c 9c       	mov	r12,r6
80004100:	f0 1f 00 67 	mcall	8000429c <main+0x28c>
80004104:	c2 60       	breq	80004150 <main+0x140>

			print_dbg("\r\nFirst 512 Bytes of Transfer number ");
80004106:	4e 7c       	lddpc	r12,800042a0 <main+0x290>
80004108:	f0 1f 00 50 	mcall	80004248 <main+0x238>
			print_dbg_ulong(j);
8000410c:	0c 9c       	mov	r12,r6
8000410e:	f0 1f 00 5d 	mcall	80004280 <main+0x270>
			print_dbg(" :\r\n");
80004112:	4e 5c       	lddpc	r12,800042a4 <main+0x294>
80004114:	f0 1f 00 4d 	mcall	80004248 <main+0x238>

			spi_write(SD_MMC_SPI,0xFF); // Write a first dummy data to synchronize transfer
80004118:	e0 6b 00 ff 	mov	r11,255
8000411c:	fe 7c 24 00 	mov	r12,-56320
80004120:	f0 1f 00 62 	mcall	800042a8 <main+0x298>
			pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
80004124:	0a 9c       	mov	r12,r5
80004126:	f0 1f 00 62 	mcall	800042ac <main+0x29c>
			pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
8000412a:	0a 9c       	mov	r12,r5
8000412c:	f0 1f 00 61 	mcall	800042b0 <main+0x2a0>
			pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
80004130:	04 9c       	mov	r12,r2
80004132:	f0 1f 00 60 	mcall	800042b0 <main+0x2a0>
			while(!end_of_transfer);
80004136:	03 88       	ld.ub	r8,r1[0x0]
80004138:	58 08       	cp.w	r8,0
8000413a:	cf e0       	breq	80004136 <main+0x126>
8000413c:	0a 97       	mov	r7,r5
8000413e:	ee 04 00 08 	add	r8,r7,r4

			for( i = 0; i < 20; i++){ //20 primeros bytes
				print_dbg_char_hex( (U8)(*(ram_buffer + i)));
80004142:	11 8c       	ld.ub	r12,r8[0x0]
80004144:	f0 1f 00 5c 	mcall	800042b4 <main+0x2a4>
			pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
			pdca_enable(AVR32_PDCA_CHANNEL_SPI_RX);
			pdca_enable(AVR32_PDCA_CHANNEL_SPI_TX);
			while(!end_of_transfer);

			for( i = 0; i < 20; i++){ //20 primeros bytes
80004148:	2f f7       	sub	r7,-1
8000414a:	59 47       	cp.w	r7,20
8000414c:	cf 91       	brne	8000413e <main+0x12e>
8000414e:	c0 48       	rjmp	80004156 <main+0x146>
				print_dbg_char_hex( (U8)(*(ram_buffer + i)));
			}//For
		}else{
			print_dbg("\r\n! Unable to open memory \r\n");
80004150:	4d ac       	lddpc	r12,800042b8 <main+0x2a8>
80004152:	f0 1f 00 3e 	mcall	80004248 <main+0x238>
	print_dbg(" MBytes");

	Enable_global_interrupt();
	local_pdca_init();

	for(j = 1; j <= 3; j++){ //3 Sectores
80004156:	2f f6       	sub	r6,-1
80004158:	58 46       	cp.w	r6,4
8000415a:	cc 71       	brne	800040e8 <main+0xd8>
		}else{
			print_dbg("\r\n! Unable to open memory \r\n");
		}//IF
	}//For

	print_dbg("\r\nEnd of the example.\r\n");
8000415c:	4d 8c       	lddpc	r12,800042bc <main+0x2ac>
8000415e:	f0 1f 00 3b 	mcall	80004248 <main+0x238>

	//TFT
	et024006_Init( FOSC0, FOSC0 );
80004162:	e0 6b 1b 00 	mov	r11,6912
80004166:	ea 1b 00 b7 	orh	r11,0xb7
8000416a:	16 9c       	mov	r12,r11
8000416c:	f0 1f 00 55 	mcall	800042c0 <main+0x2b0>
		}//Switch
	}//While
}//Main

static void tft_bl_init(void){
  pwm_opt_t opt = {.diva = 0,.divb = 0,.prea = 0,.preb = 0};
80004170:	30 08       	mov	r8,0
80004172:	50 08       	stdsp	sp[0x0],r8
80004174:	50 18       	stdsp	sp[0x4],r8
80004176:	50 28       	stdsp	sp[0x8],r8
80004178:	50 38       	stdsp	sp[0xc],r8
  pwm_init(&opt);
8000417a:	1a 9c       	mov	r12,sp
8000417c:	f0 1f 00 52 	mcall	800042c4 <main+0x2b4>
  pwm_channel6.CMR.calg = PWM_MODE_LEFT_ALIGNED;
80004180:	4d 2b       	lddpc	r11,800042c8 <main+0x2b8>
80004182:	76 08       	ld.w	r8,r11[0x0]
  pwm_channel6.CMR.cpol = PWM_POLARITY_HIGH; //PWM_POLARITY_LOW;//PWM_POLARITY_HIGH;
  pwm_channel6.CMR.cpd = PWM_UPDATE_DUTY;
80004184:	e0 18 f8 ff 	andl	r8,0xf8ff
  pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
80004188:	a9 b8       	sbr	r8,0x9
8000418a:	30 19       	mov	r9,1
8000418c:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80004190:	97 08       	st.w	r11[0x0],r8
  pwm_channel_init(6, &pwm_channel6);
80004192:	30 6c       	mov	r12,6
80004194:	f0 1f 00 4e 	mcall	800042cc <main+0x2bc>
  pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
80004198:	34 0c       	mov	r12,64
8000419a:	f0 1f 00 4e 	mcall	800042d0 <main+0x2c0>
	print_dbg("\r\nEnd of the example.\r\n");

	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	CLR_disp();
8000419e:	f0 1f 00 4e 	mcall	800042d4 <main+0x2c4>

	while(pwm_channel6.cdty < pwm_channel6.cprd){
800041a2:	4c a7       	lddpc	r7,800042c8 <main+0x2b8>
		pwm_channel6.cdty++;
		pwm_channel6.cupd = pwm_channel6.cdty;
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
800041a4:	30 66       	mov	r6,6
	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	CLR_disp();

	while(pwm_channel6.cdty < pwm_channel6.cprd){
800041a6:	c1 c8       	rjmp	800041de <main+0x1ce>
		pwm_channel6.cdty++;
800041a8:	2f f8       	sub	r8,-1
800041aa:	8f 18       	st.w	r7[0x4],r8
		pwm_channel6.cupd = pwm_channel6.cdty;
800041ac:	8f 48       	st.w	r7[0x10],r8
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
800041ae:	0e 9b       	mov	r11,r7
800041b0:	0c 9c       	mov	r12,r6
800041b2:	f0 1f 00 4a 	mcall	800042d8 <main+0x2c8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800041b6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800041ba:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800041be:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800041c2:	14 38       	cp.w	r8,r10
800041c4:	e0 88 00 08 	brls	800041d4 <main+0x1c4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800041c8:	12 38       	cp.w	r8,r9
800041ca:	fe 98 ff fa 	brls	800041be <main+0x1ae>
800041ce:	12 3a       	cp.w	r10,r9
800041d0:	c0 73       	brcs	800041de <main+0x1ce>
800041d2:	cf 6b       	rjmp	800041be <main+0x1ae>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800041d4:	12 38       	cp.w	r8,r9
800041d6:	e0 8b 00 04 	brhi	800041de <main+0x1ce>
800041da:	12 3a       	cp.w	r10,r9
800041dc:	cf 12       	brcc	800041be <main+0x1ae>
	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	CLR_disp();

	while(pwm_channel6.cdty < pwm_channel6.cprd){
800041de:	6e 18       	ld.w	r8,r7[0x4]
800041e0:	6e 29       	ld.w	r9,r7[0x8]
800041e2:	12 38       	cp.w	r8,r9
800041e4:	ce 23       	brcs	800041a8 <main+0x198>
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
		delay_ms(1);
	}//PWM
	
	while (1){
		switch (state){
800041e6:	4b e7       	lddpc	r7,800042dc <main+0x2cc>
			break;
			case 2://Desplegar mensaje de memoria en display
				leds(2);
			break;
			case 3://Guardar mensaje en la SD
				leds(3);
800041e8:	30 36       	mov	r6,3
			break;
			case 4://Leer ultimo mensaje guardado de la SD y su sector y mostrarlo
				leds(4);
800041ea:	30 45       	mov	r5,4
			break;
			case 5://Mostrar todos los mensajes guardados
				leds(5);
800041ec:	30 54       	mov	r4,5
					if(end_of_transfer){
						leds(0b1000);
						delay_ms(100);
					}//If
				}//IF */
				leds(1);
800041ee:	30 13       	mov	r3,1
			break;
			case 2://Desplegar mensaje de memoria en display
				leds(2);
800041f0:	30 22       	mov	r2,2
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
		delay_ms(1);
	}//PWM
	
	while (1){
		switch (state){
800041f2:	6e 08       	ld.w	r8,r7[0x0]
800041f4:	58 38       	cp.w	r8,3
800041f6:	c1 50       	breq	80004220 <main+0x210>
800041f8:	e0 89 00 07 	brgt	80004206 <main+0x1f6>
800041fc:	58 18       	cp.w	r8,1
800041fe:	c0 90       	breq	80004210 <main+0x200>
80004200:	58 28       	cp.w	r8,2
80004202:	cf 81       	brne	800041f2 <main+0x1e2>
80004204:	c0 a8       	rjmp	80004218 <main+0x208>
80004206:	58 48       	cp.w	r8,4
80004208:	c1 00       	breq	80004228 <main+0x218>
8000420a:	58 58       	cp.w	r8,5
8000420c:	cf 31       	brne	800041f2 <main+0x1e2>
8000420e:	c1 18       	rjmp	80004230 <main+0x220>
					if(end_of_transfer){
						leds(0b1000);
						delay_ms(100);
					}//If
				}//IF */
				leds(1);
80004210:	06 9c       	mov	r12,r3
80004212:	f0 1f 00 34 	mcall	800042e0 <main+0x2d0>
			break;
80004216:	ce eb       	rjmp	800041f2 <main+0x1e2>
			case 2://Desplegar mensaje de memoria en display
				leds(2);
80004218:	04 9c       	mov	r12,r2
8000421a:	f0 1f 00 32 	mcall	800042e0 <main+0x2d0>
			break;
8000421e:	ce ab       	rjmp	800041f2 <main+0x1e2>
			case 3://Guardar mensaje en la SD
				leds(3);
80004220:	0c 9c       	mov	r12,r6
80004222:	f0 1f 00 30 	mcall	800042e0 <main+0x2d0>
			break;
80004226:	ce 6b       	rjmp	800041f2 <main+0x1e2>
			case 4://Leer ultimo mensaje guardado de la SD y su sector y mostrarlo
				leds(4);
80004228:	0a 9c       	mov	r12,r5
8000422a:	f0 1f 00 2e 	mcall	800042e0 <main+0x2d0>
			break;
8000422e:	ce 2b       	rjmp	800041f2 <main+0x1e2>
			case 5://Mostrar todos los mensajes guardados
				leds(5);
80004230:	08 9c       	mov	r12,r4
80004232:	f0 1f 00 2c 	mcall	800042e0 <main+0x2d0>
80004236:	cd eb       	rjmp	800041f2 <main+0x1e2>
80004238:	80 00       	ld.sh	r0,r0[0x0]
8000423a:	37 40       	mov	r0,116
8000423c:	80 00       	ld.sh	r0,r0[0x0]
8000423e:	3d a0       	mov	r0,-38
80004240:	80 00       	ld.sh	r0,r0[0x0]
80004242:	3c c8       	mov	r8,-52
80004244:	80 00       	ld.sh	r0,r0[0x0]
80004246:	52 ec       	stdsp	sp[0xb8],r12
80004248:	80 00       	ld.sh	r0,r0[0x0]
8000424a:	3c 74       	mov	r4,-57
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	53 04       	stdsp	sp[0xc0],r4
80004250:	80 00       	ld.sh	r0,r0[0x0]
80004252:	53 a8       	stdsp	sp[0xe8],r8
80004254:	80 00       	ld.sh	r0,r0[0x0]
80004256:	52 78       	stdsp	sp[0x9c],r8
80004258:	80 00       	ld.sh	r0,r0[0x0]
8000425a:	33 70       	mov	r0,55
8000425c:	80 00       	ld.sh	r0,r0[0x0]
8000425e:	38 42       	mov	r2,-124
80004260:	80 00       	ld.sh	r0,r0[0x0]
80004262:	38 7a       	mov	r10,-121
80004264:	80 00       	ld.sh	r0,r0[0x0]
80004266:	39 d0       	mov	r0,-99
80004268:	80 00       	ld.sh	r0,r0[0x0]
8000426a:	31 cc       	mov	r12,28
8000426c:	80 00       	ld.sh	r0,r0[0x0]
8000426e:	31 a4       	mov	r4,26
80004270:	80 00       	ld.sh	r0,r0[0x0]
80004272:	53 18       	stdsp	sp[0xc4],r8
80004274:	80 00       	ld.sh	r0,r0[0x0]
80004276:	28 78       	sub	r8,-121
80004278:	80 00       	ld.sh	r0,r0[0x0]
8000427a:	53 2c       	stdsp	sp[0xc8],r12
8000427c:	00 00       	add	r0,r0
8000427e:	03 50       	ld.sh	r0,--r1
80004280:	80 00       	ld.sh	r0,r0[0x0]
80004282:	3c 60       	mov	r0,-58
80004284:	80 00       	ld.sh	r0,r0[0x0]
80004286:	53 38       	stdsp	sp[0xcc],r8
80004288:	80 00       	ld.sh	r0,r0[0x0]
8000428a:	3e 14       	mov	r4,-31
8000428c:	00 00       	add	r0,r0
8000428e:	03 84       	ld.ub	r4,r1[0x0]
80004290:	00 00       	add	r0,r0
80004292:	03 78       	ld.ub	r8,--r1
80004294:	80 00       	ld.sh	r0,r0[0x0]
80004296:	36 1c       	mov	r12,97
80004298:	80 00       	ld.sh	r0,r0[0x0]
8000429a:	4e 68       	lddpc	r8,80004430 <__avr32_udiv64+0x14c>
8000429c:	80 00       	ld.sh	r0,r0[0x0]
8000429e:	2b ec       	sub	r12,-66
800042a0:	80 00       	ld.sh	r0,r0[0x0]
800042a2:	53 40       	stdsp	sp[0xd0],r0
800042a4:	80 00       	ld.sh	r0,r0[0x0]
800042a6:	53 68       	stdsp	sp[0xd8],r8
800042a8:	80 00       	ld.sh	r0,r0[0x0]
800042aa:	39 d6       	mov	r6,-99
800042ac:	80 00       	ld.sh	r0,r0[0x0]
800042ae:	35 bc       	mov	r12,91
800042b0:	80 00       	ld.sh	r0,r0[0x0]
800042b2:	35 ac       	mov	r12,90
800042b4:	80 00       	ld.sh	r0,r0[0x0]
800042b6:	3c 04       	mov	r4,-64
800042b8:	80 00       	ld.sh	r0,r0[0x0]
800042ba:	53 70       	stdsp	sp[0xdc],r0
800042bc:	80 00       	ld.sh	r0,r0[0x0]
800042be:	53 90       	stdsp	sp[0xe4],r0
800042c0:	80 00       	ld.sh	r0,r0[0x0]
800042c2:	23 d4       	sub	r4,61
800042c4:	80 00       	ld.sh	r0,r0[0x0]
800042c6:	37 dc       	mov	r12,125
800042c8:	00 00       	add	r0,r0
800042ca:	00 08       	add	r8,r0
800042cc:	80 00       	ld.sh	r0,r0[0x0]
800042ce:	37 6c       	mov	r12,118
800042d0:	80 00       	ld.sh	r0,r0[0x0]
800042d2:	37 a2       	mov	r2,122
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	3e c8       	mov	r8,-20
800042d8:	80 00       	ld.sh	r0,r0[0x0]
800042da:	37 b4       	mov	r4,123
800042dc:	00 00       	add	r0,r0
800042de:	01 48       	ld.w	r8,--r0
800042e0:	80 00       	ld.sh	r0,r0[0x0]
800042e2:	3d 3c       	mov	r12,-45

800042e4 <__avr32_udiv64>:
800042e4:	d4 31       	pushm	r0-r7,lr
800042e6:	1a 97       	mov	r7,sp
800042e8:	20 3d       	sub	sp,12
800042ea:	10 9c       	mov	r12,r8
800042ec:	12 9e       	mov	lr,r9
800042ee:	14 93       	mov	r3,r10
800042f0:	58 09       	cp.w	r9,0
800042f2:	e0 81 00 bd 	brne	8000446c <__avr32_udiv64+0x188>
800042f6:	16 38       	cp.w	r8,r11
800042f8:	e0 88 00 40 	brls	80004378 <__avr32_udiv64+0x94>
800042fc:	f0 08 12 00 	clz	r8,r8
80004300:	c0 d0       	breq	8000431a <__avr32_udiv64+0x36>
80004302:	f6 08 09 4b 	lsl	r11,r11,r8
80004306:	f0 09 11 20 	rsub	r9,r8,32
8000430a:	f8 08 09 4c 	lsl	r12,r12,r8
8000430e:	f4 09 0a 49 	lsr	r9,r10,r9
80004312:	f4 08 09 43 	lsl	r3,r10,r8
80004316:	f3 eb 10 0b 	or	r11,r9,r11
8000431a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000431e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80004322:	f6 0e 0d 00 	divu	r0,r11,lr
80004326:	e6 0b 16 10 	lsr	r11,r3,0x10
8000432a:	00 99       	mov	r9,r0
8000432c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004330:	e0 0a 02 48 	mul	r8,r0,r10
80004334:	10 3b       	cp.w	r11,r8
80004336:	c0 a2       	brcc	8000434a <__avr32_udiv64+0x66>
80004338:	20 19       	sub	r9,1
8000433a:	18 0b       	add	r11,r12
8000433c:	18 3b       	cp.w	r11,r12
8000433e:	c0 63       	brcs	8000434a <__avr32_udiv64+0x66>
80004340:	10 3b       	cp.w	r11,r8
80004342:	f7 b9 03 01 	sublo	r9,1
80004346:	f7 dc e3 0b 	addcs	r11,r11,r12
8000434a:	f6 08 01 01 	sub	r1,r11,r8
8000434e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80004352:	e2 0e 0d 00 	divu	r0,r1,lr
80004356:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000435a:	00 98       	mov	r8,r0
8000435c:	e0 0a 02 4a 	mul	r10,r0,r10
80004360:	14 33       	cp.w	r3,r10
80004362:	c0 82       	brcc	80004372 <__avr32_udiv64+0x8e>
80004364:	20 18       	sub	r8,1
80004366:	18 03       	add	r3,r12
80004368:	18 33       	cp.w	r3,r12
8000436a:	c0 43       	brcs	80004372 <__avr32_udiv64+0x8e>
8000436c:	14 33       	cp.w	r3,r10
8000436e:	f7 b8 03 01 	sublo	r8,1
80004372:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80004376:	cd f8       	rjmp	80004534 <__avr32_udiv64+0x250>
80004378:	58 08       	cp.w	r8,0
8000437a:	c0 51       	brne	80004384 <__avr32_udiv64+0xa0>
8000437c:	30 19       	mov	r9,1
8000437e:	f2 08 0d 08 	divu	r8,r9,r8
80004382:	10 9c       	mov	r12,r8
80004384:	f8 06 12 00 	clz	r6,r12
80004388:	c0 41       	brne	80004390 <__avr32_udiv64+0xac>
8000438a:	18 1b       	sub	r11,r12
8000438c:	30 19       	mov	r9,1
8000438e:	c4 08       	rjmp	8000440e <__avr32_udiv64+0x12a>
80004390:	ec 01 11 20 	rsub	r1,r6,32
80004394:	f4 01 0a 49 	lsr	r9,r10,r1
80004398:	f8 06 09 4c 	lsl	r12,r12,r6
8000439c:	f6 06 09 48 	lsl	r8,r11,r6
800043a0:	f6 01 0a 41 	lsr	r1,r11,r1
800043a4:	f3 e8 10 08 	or	r8,r9,r8
800043a8:	f8 03 16 10 	lsr	r3,r12,0x10
800043ac:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800043b0:	e2 03 0d 00 	divu	r0,r1,r3
800043b4:	f0 0b 16 10 	lsr	r11,r8,0x10
800043b8:	00 9e       	mov	lr,r0
800043ba:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800043be:	e0 05 02 49 	mul	r9,r0,r5
800043c2:	12 3b       	cp.w	r11,r9
800043c4:	c0 a2       	brcc	800043d8 <__avr32_udiv64+0xf4>
800043c6:	20 1e       	sub	lr,1
800043c8:	18 0b       	add	r11,r12
800043ca:	18 3b       	cp.w	r11,r12
800043cc:	c0 63       	brcs	800043d8 <__avr32_udiv64+0xf4>
800043ce:	12 3b       	cp.w	r11,r9
800043d0:	f7 be 03 01 	sublo	lr,1
800043d4:	f7 dc e3 0b 	addcs	r11,r11,r12
800043d8:	12 1b       	sub	r11,r9
800043da:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800043de:	f6 03 0d 02 	divu	r2,r11,r3
800043e2:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800043e6:	04 99       	mov	r9,r2
800043e8:	e4 05 02 4b 	mul	r11,r2,r5
800043ec:	16 38       	cp.w	r8,r11
800043ee:	c0 a2       	brcc	80004402 <__avr32_udiv64+0x11e>
800043f0:	20 19       	sub	r9,1
800043f2:	18 08       	add	r8,r12
800043f4:	18 38       	cp.w	r8,r12
800043f6:	c0 63       	brcs	80004402 <__avr32_udiv64+0x11e>
800043f8:	16 38       	cp.w	r8,r11
800043fa:	f7 b9 03 01 	sublo	r9,1
800043fe:	f1 dc e3 08 	addcs	r8,r8,r12
80004402:	f4 06 09 43 	lsl	r3,r10,r6
80004406:	f0 0b 01 0b 	sub	r11,r8,r11
8000440a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000440e:	f8 06 16 10 	lsr	r6,r12,0x10
80004412:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80004416:	f6 06 0d 00 	divu	r0,r11,r6
8000441a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000441e:	00 9a       	mov	r10,r0
80004420:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004424:	e0 0e 02 48 	mul	r8,r0,lr
80004428:	10 3b       	cp.w	r11,r8
8000442a:	c0 a2       	brcc	8000443e <__avr32_udiv64+0x15a>
8000442c:	20 1a       	sub	r10,1
8000442e:	18 0b       	add	r11,r12
80004430:	18 3b       	cp.w	r11,r12
80004432:	c0 63       	brcs	8000443e <__avr32_udiv64+0x15a>
80004434:	10 3b       	cp.w	r11,r8
80004436:	f7 ba 03 01 	sublo	r10,1
8000443a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000443e:	f6 08 01 01 	sub	r1,r11,r8
80004442:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80004446:	e2 06 0d 00 	divu	r0,r1,r6
8000444a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000444e:	00 98       	mov	r8,r0
80004450:	e0 0e 02 4b 	mul	r11,r0,lr
80004454:	16 33       	cp.w	r3,r11
80004456:	c0 82       	brcc	80004466 <__avr32_udiv64+0x182>
80004458:	20 18       	sub	r8,1
8000445a:	18 03       	add	r3,r12
8000445c:	18 33       	cp.w	r3,r12
8000445e:	c0 43       	brcs	80004466 <__avr32_udiv64+0x182>
80004460:	16 33       	cp.w	r3,r11
80004462:	f7 b8 03 01 	sublo	r8,1
80004466:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000446a:	c6 98       	rjmp	8000453c <__avr32_udiv64+0x258>
8000446c:	16 39       	cp.w	r9,r11
8000446e:	e0 8b 00 65 	brhi	80004538 <__avr32_udiv64+0x254>
80004472:	f2 09 12 00 	clz	r9,r9
80004476:	c0 b1       	brne	8000448c <__avr32_udiv64+0x1a8>
80004478:	10 3a       	cp.w	r10,r8
8000447a:	5f 2a       	srhs	r10
8000447c:	1c 3b       	cp.w	r11,lr
8000447e:	5f b8       	srhi	r8
80004480:	10 4a       	or	r10,r8
80004482:	f2 0a 18 00 	cp.b	r10,r9
80004486:	c5 90       	breq	80004538 <__avr32_udiv64+0x254>
80004488:	30 18       	mov	r8,1
8000448a:	c5 98       	rjmp	8000453c <__avr32_udiv64+0x258>
8000448c:	f0 09 09 46 	lsl	r6,r8,r9
80004490:	f2 03 11 20 	rsub	r3,r9,32
80004494:	fc 09 09 4e 	lsl	lr,lr,r9
80004498:	f0 03 0a 48 	lsr	r8,r8,r3
8000449c:	f6 09 09 4c 	lsl	r12,r11,r9
800044a0:	f4 03 0a 42 	lsr	r2,r10,r3
800044a4:	ef 46 ff f4 	st.w	r7[-12],r6
800044a8:	f6 03 0a 43 	lsr	r3,r11,r3
800044ac:	18 42       	or	r2,r12
800044ae:	f1 ee 10 0c 	or	r12,r8,lr
800044b2:	f8 01 16 10 	lsr	r1,r12,0x10
800044b6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800044ba:	e6 01 0d 04 	divu	r4,r3,r1
800044be:	e4 03 16 10 	lsr	r3,r2,0x10
800044c2:	08 9e       	mov	lr,r4
800044c4:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800044c8:	e8 06 02 48 	mul	r8,r4,r6
800044cc:	10 33       	cp.w	r3,r8
800044ce:	c0 a2       	brcc	800044e2 <__avr32_udiv64+0x1fe>
800044d0:	20 1e       	sub	lr,1
800044d2:	18 03       	add	r3,r12
800044d4:	18 33       	cp.w	r3,r12
800044d6:	c0 63       	brcs	800044e2 <__avr32_udiv64+0x1fe>
800044d8:	10 33       	cp.w	r3,r8
800044da:	f7 be 03 01 	sublo	lr,1
800044de:	e7 dc e3 03 	addcs	r3,r3,r12
800044e2:	10 13       	sub	r3,r8
800044e4:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800044e8:	e6 01 0d 00 	divu	r0,r3,r1
800044ec:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800044f0:	00 98       	mov	r8,r0
800044f2:	e0 06 02 46 	mul	r6,r0,r6
800044f6:	0c 3b       	cp.w	r11,r6
800044f8:	c0 a2       	brcc	8000450c <__avr32_udiv64+0x228>
800044fa:	20 18       	sub	r8,1
800044fc:	18 0b       	add	r11,r12
800044fe:	18 3b       	cp.w	r11,r12
80004500:	c0 63       	brcs	8000450c <__avr32_udiv64+0x228>
80004502:	0c 3b       	cp.w	r11,r6
80004504:	f7 dc e3 0b 	addcs	r11,r11,r12
80004508:	f7 b8 03 01 	sublo	r8,1
8000450c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80004510:	ee f4 ff f4 	ld.w	r4,r7[-12]
80004514:	0c 1b       	sub	r11,r6
80004516:	f0 04 06 42 	mulu.d	r2,r8,r4
8000451a:	06 95       	mov	r5,r3
8000451c:	16 35       	cp.w	r5,r11
8000451e:	e0 8b 00 0a 	brhi	80004532 <__avr32_udiv64+0x24e>
80004522:	5f 0b       	sreq	r11
80004524:	f4 09 09 49 	lsl	r9,r10,r9
80004528:	12 32       	cp.w	r2,r9
8000452a:	5f b9       	srhi	r9
8000452c:	f7 e9 00 09 	and	r9,r11,r9
80004530:	c0 60       	breq	8000453c <__avr32_udiv64+0x258>
80004532:	20 18       	sub	r8,1
80004534:	30 09       	mov	r9,0
80004536:	c0 38       	rjmp	8000453c <__avr32_udiv64+0x258>
80004538:	30 09       	mov	r9,0
8000453a:	12 98       	mov	r8,r9
8000453c:	10 9a       	mov	r10,r8
8000453e:	12 93       	mov	r3,r9
80004540:	10 92       	mov	r2,r8
80004542:	12 9b       	mov	r11,r9
80004544:	2f dd       	sub	sp,-12
80004546:	d8 32       	popm	r0-r7,pc

80004548 <memcpy>:
80004548:	58 8a       	cp.w	r10,8
8000454a:	c2 f5       	brlt	800045a8 <memcpy+0x60>
8000454c:	f9 eb 10 09 	or	r9,r12,r11
80004550:	e2 19 00 03 	andl	r9,0x3,COH
80004554:	e0 81 00 97 	brne	80004682 <memcpy+0x13a>
80004558:	e0 4a 00 20 	cp.w	r10,32
8000455c:	c3 b4       	brge	800045d2 <memcpy+0x8a>
8000455e:	f4 08 14 02 	asr	r8,r10,0x2
80004562:	f0 09 11 08 	rsub	r9,r8,8
80004566:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000456a:	76 69       	ld.w	r9,r11[0x18]
8000456c:	99 69       	st.w	r12[0x18],r9
8000456e:	76 59       	ld.w	r9,r11[0x14]
80004570:	99 59       	st.w	r12[0x14],r9
80004572:	76 49       	ld.w	r9,r11[0x10]
80004574:	99 49       	st.w	r12[0x10],r9
80004576:	76 39       	ld.w	r9,r11[0xc]
80004578:	99 39       	st.w	r12[0xc],r9
8000457a:	76 29       	ld.w	r9,r11[0x8]
8000457c:	99 29       	st.w	r12[0x8],r9
8000457e:	76 19       	ld.w	r9,r11[0x4]
80004580:	99 19       	st.w	r12[0x4],r9
80004582:	76 09       	ld.w	r9,r11[0x0]
80004584:	99 09       	st.w	r12[0x0],r9
80004586:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000458a:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000458e:	e0 1a 00 03 	andl	r10,0x3
80004592:	f4 0a 11 04 	rsub	r10,r10,4
80004596:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000459a:	17 a9       	ld.ub	r9,r11[0x2]
8000459c:	b0 a9       	st.b	r8[0x2],r9
8000459e:	17 99       	ld.ub	r9,r11[0x1]
800045a0:	b0 99       	st.b	r8[0x1],r9
800045a2:	17 89       	ld.ub	r9,r11[0x0]
800045a4:	b0 89       	st.b	r8[0x0],r9
800045a6:	5e fc       	retal	r12
800045a8:	f4 0a 11 09 	rsub	r10,r10,9
800045ac:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800045b0:	17 f9       	ld.ub	r9,r11[0x7]
800045b2:	b8 f9       	st.b	r12[0x7],r9
800045b4:	17 e9       	ld.ub	r9,r11[0x6]
800045b6:	b8 e9       	st.b	r12[0x6],r9
800045b8:	17 d9       	ld.ub	r9,r11[0x5]
800045ba:	b8 d9       	st.b	r12[0x5],r9
800045bc:	17 c9       	ld.ub	r9,r11[0x4]
800045be:	b8 c9       	st.b	r12[0x4],r9
800045c0:	17 b9       	ld.ub	r9,r11[0x3]
800045c2:	b8 b9       	st.b	r12[0x3],r9
800045c4:	17 a9       	ld.ub	r9,r11[0x2]
800045c6:	b8 a9       	st.b	r12[0x2],r9
800045c8:	17 99       	ld.ub	r9,r11[0x1]
800045ca:	b8 99       	st.b	r12[0x1],r9
800045cc:	17 89       	ld.ub	r9,r11[0x0]
800045ce:	b8 89       	st.b	r12[0x0],r9
800045d0:	5e fc       	retal	r12
800045d2:	eb cd 40 c0 	pushm	r6-r7,lr
800045d6:	18 99       	mov	r9,r12
800045d8:	22 0a       	sub	r10,32
800045da:	b7 07       	ld.d	r6,r11++
800045dc:	b3 26       	st.d	r9++,r6
800045de:	b7 07       	ld.d	r6,r11++
800045e0:	b3 26       	st.d	r9++,r6
800045e2:	b7 07       	ld.d	r6,r11++
800045e4:	b3 26       	st.d	r9++,r6
800045e6:	b7 07       	ld.d	r6,r11++
800045e8:	b3 26       	st.d	r9++,r6
800045ea:	22 0a       	sub	r10,32
800045ec:	cf 74       	brge	800045da <memcpy+0x92>
800045ee:	2f 0a       	sub	r10,-16
800045f0:	c0 65       	brlt	800045fc <memcpy+0xb4>
800045f2:	b7 07       	ld.d	r6,r11++
800045f4:	b3 26       	st.d	r9++,r6
800045f6:	b7 07       	ld.d	r6,r11++
800045f8:	b3 26       	st.d	r9++,r6
800045fa:	21 0a       	sub	r10,16
800045fc:	5c 3a       	neg	r10
800045fe:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004602:	d7 03       	nop
80004604:	d7 03       	nop
80004606:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000460a:	f3 66 00 0e 	st.b	r9[14],r6
8000460e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004612:	f3 66 00 0d 	st.b	r9[13],r6
80004616:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000461a:	f3 66 00 0c 	st.b	r9[12],r6
8000461e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004622:	f3 66 00 0b 	st.b	r9[11],r6
80004626:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000462a:	f3 66 00 0a 	st.b	r9[10],r6
8000462e:	f7 36 00 09 	ld.ub	r6,r11[9]
80004632:	f3 66 00 09 	st.b	r9[9],r6
80004636:	f7 36 00 08 	ld.ub	r6,r11[8]
8000463a:	f3 66 00 08 	st.b	r9[8],r6
8000463e:	f7 36 00 07 	ld.ub	r6,r11[7]
80004642:	f3 66 00 07 	st.b	r9[7],r6
80004646:	f7 36 00 06 	ld.ub	r6,r11[6]
8000464a:	f3 66 00 06 	st.b	r9[6],r6
8000464e:	f7 36 00 05 	ld.ub	r6,r11[5]
80004652:	f3 66 00 05 	st.b	r9[5],r6
80004656:	f7 36 00 04 	ld.ub	r6,r11[4]
8000465a:	f3 66 00 04 	st.b	r9[4],r6
8000465e:	f7 36 00 03 	ld.ub	r6,r11[3]
80004662:	f3 66 00 03 	st.b	r9[3],r6
80004666:	f7 36 00 02 	ld.ub	r6,r11[2]
8000466a:	f3 66 00 02 	st.b	r9[2],r6
8000466e:	f7 36 00 01 	ld.ub	r6,r11[1]
80004672:	f3 66 00 01 	st.b	r9[1],r6
80004676:	f7 36 00 00 	ld.ub	r6,r11[0]
8000467a:	f3 66 00 00 	st.b	r9[0],r6
8000467e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004682:	20 1a       	sub	r10,1
80004684:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80004688:	f8 0a 0b 09 	st.b	r12[r10],r9
8000468c:	cf b1       	brne	80004682 <memcpy+0x13a>
8000468e:	5e fc       	retal	r12

Disassembly of section .exception:

80004800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80004800:	c0 08       	rjmp	80004800 <_evba>
	...

80004804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80004804:	c0 08       	rjmp	80004804 <_handle_TLB_Multiple_Hit>
	...

80004808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80004808:	c0 08       	rjmp	80004808 <_handle_Bus_Error_Data_Fetch>
	...

8000480c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000480c:	c0 08       	rjmp	8000480c <_handle_Bus_Error_Instruction_Fetch>
	...

80004810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80004810:	c0 08       	rjmp	80004810 <_handle_NMI>
	...

80004814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80004814:	c0 08       	rjmp	80004814 <_handle_Instruction_Address>
	...

80004818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80004818:	c0 08       	rjmp	80004818 <_handle_ITLB_Protection>
	...

8000481c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000481c:	c0 08       	rjmp	8000481c <_handle_Breakpoint>
	...

80004820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80004820:	c0 08       	rjmp	80004820 <_handle_Illegal_Opcode>
	...

80004824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80004824:	c0 08       	rjmp	80004824 <_handle_Unimplemented_Instruction>
	...

80004828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80004828:	c0 08       	rjmp	80004828 <_handle_Privilege_Violation>
	...

8000482c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000482c:	c0 08       	rjmp	8000482c <_handle_Floating_Point>
	...

80004830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80004830:	c0 08       	rjmp	80004830 <_handle_Coprocessor_Absent>
	...

80004834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80004834:	c0 08       	rjmp	80004834 <_handle_Data_Address_Read>
	...

80004838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80004838:	c0 08       	rjmp	80004838 <_handle_Data_Address_Write>
	...

8000483c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000483c:	c0 08       	rjmp	8000483c <_handle_DTLB_Protection_Read>
	...

80004840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80004840:	c0 08       	rjmp	80004840 <_handle_DTLB_Protection_Write>
	...

80004844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80004844:	c0 08       	rjmp	80004844 <_handle_DTLB_Modified>
	...

80004850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80004850:	c0 08       	rjmp	80004850 <_handle_ITLB_Miss>
	...

80004860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80004860:	c0 08       	rjmp	80004860 <_handle_DTLB_Miss_Read>
	...

80004870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80004870:	c0 08       	rjmp	80004870 <_handle_DTLB_Miss_Write>
	...

80004900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80004900:	c0 08       	rjmp	80004900 <_handle_Supervisor_Call>
80004902:	d7 03       	nop

80004904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004904:	30 0c       	mov	r12,0
80004906:	fe b0 f6 25 	rcall	80003550 <_get_interrupt_handler>
8000490a:	58 0c       	cp.w	r12,0
8000490c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80004910:	d6 03       	rete

80004912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004912:	30 1c       	mov	r12,1
80004914:	fe b0 f6 1e 	rcall	80003550 <_get_interrupt_handler>
80004918:	58 0c       	cp.w	r12,0
8000491a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000491e:	d6 03       	rete

80004920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80004920:	30 2c       	mov	r12,2
80004922:	fe b0 f6 17 	rcall	80003550 <_get_interrupt_handler>
80004926:	58 0c       	cp.w	r12,0
80004928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000492c:	d6 03       	rete

8000492e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000492e:	30 3c       	mov	r12,3
80004930:	fe b0 f6 10 	rcall	80003550 <_get_interrupt_handler>
80004934:	58 0c       	cp.w	r12,0
80004936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000493a:	d6 03       	rete
8000493c:	d7 03       	nop
8000493e:	d7 03       	nop
80004940:	d7 03       	nop
80004942:	d7 03       	nop
80004944:	d7 03       	nop
80004946:	d7 03       	nop
80004948:	d7 03       	nop
8000494a:	d7 03       	nop
8000494c:	d7 03       	nop
8000494e:	d7 03       	nop
80004950:	d7 03       	nop
80004952:	d7 03       	nop
80004954:	d7 03       	nop
80004956:	d7 03       	nop
80004958:	d7 03       	nop
8000495a:	d7 03       	nop
8000495c:	d7 03       	nop
8000495e:	d7 03       	nop
80004960:	d7 03       	nop
80004962:	d7 03       	nop
80004964:	d7 03       	nop
80004966:	d7 03       	nop
80004968:	d7 03       	nop
8000496a:	d7 03       	nop
8000496c:	d7 03       	nop
8000496e:	d7 03       	nop
80004970:	d7 03       	nop
80004972:	d7 03       	nop
80004974:	d7 03       	nop
80004976:	d7 03       	nop
80004978:	d7 03       	nop
8000497a:	d7 03       	nop
8000497c:	d7 03       	nop
8000497e:	d7 03       	nop
80004980:	d7 03       	nop
80004982:	d7 03       	nop
80004984:	d7 03       	nop
80004986:	d7 03       	nop
80004988:	d7 03       	nop
8000498a:	d7 03       	nop
8000498c:	d7 03       	nop
8000498e:	d7 03       	nop
80004990:	d7 03       	nop
80004992:	d7 03       	nop
80004994:	d7 03       	nop
80004996:	d7 03       	nop
80004998:	d7 03       	nop
8000499a:	d7 03       	nop
8000499c:	d7 03       	nop
8000499e:	d7 03       	nop
800049a0:	d7 03       	nop
800049a2:	d7 03       	nop
800049a4:	d7 03       	nop
800049a6:	d7 03       	nop
800049a8:	d7 03       	nop
800049aa:	d7 03       	nop
800049ac:	d7 03       	nop
800049ae:	d7 03       	nop
800049b0:	d7 03       	nop
800049b2:	d7 03       	nop
800049b4:	d7 03       	nop
800049b6:	d7 03       	nop
800049b8:	d7 03       	nop
800049ba:	d7 03       	nop
800049bc:	d7 03       	nop
800049be:	d7 03       	nop
800049c0:	d7 03       	nop
800049c2:	d7 03       	nop
800049c4:	d7 03       	nop
800049c6:	d7 03       	nop
800049c8:	d7 03       	nop
800049ca:	d7 03       	nop
800049cc:	d7 03       	nop
800049ce:	d7 03       	nop
800049d0:	d7 03       	nop
800049d2:	d7 03       	nop
800049d4:	d7 03       	nop
800049d6:	d7 03       	nop
800049d8:	d7 03       	nop
800049da:	d7 03       	nop
800049dc:	d7 03       	nop
800049de:	d7 03       	nop
800049e0:	d7 03       	nop
800049e2:	d7 03       	nop
800049e4:	d7 03       	nop
800049e6:	d7 03       	nop
800049e8:	d7 03       	nop
800049ea:	d7 03       	nop
800049ec:	d7 03       	nop
800049ee:	d7 03       	nop
800049f0:	d7 03       	nop
800049f2:	d7 03       	nop
800049f4:	d7 03       	nop
800049f6:	d7 03       	nop
800049f8:	d7 03       	nop
800049fa:	d7 03       	nop
800049fc:	d7 03       	nop
800049fe:	d7 03       	nop
