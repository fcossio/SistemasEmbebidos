
ExamenPractico3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000c20  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002e00  80002e00  00003200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001f8  80003000  80003000  00003400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000020  00000008  800031f8  00003808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f8  00000028  00000028  00000000  2**2
                  ALLOC
  8 .heap         0000eee0  00000120  00000120  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000538  00000000  00000000  00003858  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00000c3f  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000744a  00000000  00000000  000049cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001282  00000000  00000000  0000be19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000492f  00000000  00000000  0000d09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000b54  00000000  00000000  000119cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001b68  00000000  00000000  00012520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000294f  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00775f40  00000000  00000000  000169d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000730  00000000  00000000  0078c918  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d7 68 	sub	pc,pc,-10392

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f7 6c 	sub	pc,pc,-2196

Disassembly of section .text:

80002008 <et024006_SetLimits>:
80002008:	eb cd 40 80 	pushm	r7,lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000200c:	fc 1e c0 00 	movh	lr,0xc000
80002010:	30 28       	mov	r8,2
80002012:	bc 08       	st.h	lr[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002014:	ef dc c1 08 	bfextu	r7,r12,0x8,0x8
80002018:	fc 18 c0 20 	movh	r8,0xc020
8000201c:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000201e:	30 37       	mov	r7,3
80002020:	bc 07       	st.h	lr[0x0],r7
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002022:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002024:	30 4c       	mov	r12,4
80002026:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002028:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000202c:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000202e:	30 5c       	mov	r12,5
80002030:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002032:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002034:	30 6a       	mov	r10,6
80002036:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002038:	f5 db c1 08 	bfextu	r10,r11,0x8,0x8
8000203c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000203e:	30 7a       	mov	r10,7
80002040:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002042:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002044:	30 8a       	mov	r10,8
80002046:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002048:	f5 d9 c1 08 	bfextu	r10,r9,0x8,0x8
8000204c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000204e:	30 9a       	mov	r10,9
80002050:	bc 0a       	st.h	lr[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002052:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80002054:	e3 cd 80 80 	ldm	sp++,r7,pc

80002058 <et024006_DuplicatePixel>:
  return *ET024006_PARAM_ADDR;
}

__always_inline static void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002058:	32 29       	mov	r9,34
8000205a:	fc 18 c0 00 	movh	r8,0xc000
8000205e:	b0 09       	st.h	r8[0x0],r9
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80002060:	58 7b       	cp.w	r11,7
80002062:	e0 88 00 13 	brls	80002088 <et024006_DuplicatePixel+0x30>
80002066:	16 99       	mov	r9,r11
    *ET024006_PARAM_ADDR = color;
80002068:	fc 18 c0 20 	movh	r8,0xc020
8000206c:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
8000206e:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002070:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002072:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002074:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002076:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
80002078:	b0 0c       	st.h	r8[0x0],r12
    *ET024006_PARAM_ADDR = color;
8000207a:	b0 0c       	st.h	r8[0x0],r12
    count-=8;
8000207c:	20 89       	sub	r9,8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
8000207e:	58 79       	cp.w	r9,7
80002080:	fe 9b ff f6 	brhi	8000206c <et024006_DuplicatePixel+0x14>



/* --- Pixel block operations --- */

void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
80002084:	f7 db c0 03 	bfextu	r11,r11,0x0,0x3
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80002088:	58 0b       	cp.w	r11,0
8000208a:	5e 0c       	reteq	r12
    *ET024006_PARAM_ADDR = color;
8000208c:	fc 18 c0 20 	movh	r8,0xc020
80002090:	b0 0c       	st.h	r8[0x0],r12
    --count;
80002092:	20 1b       	sub	r11,1
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80002094:	cf e1       	brne	80002090 <et024006_DuplicatePixel+0x38>
80002096:	5e fc       	retal	r12

80002098 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
80002098:	eb cd 40 e0 	pushm	r5-r7,lr
8000209c:	14 97       	mov	r7,r10
8000209e:	12 96       	mov	r6,r9
800020a0:	10 95       	mov	r5,r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
800020a2:	f6 c9 00 01 	sub	r9,r11,1
800020a6:	0c 09       	add	r9,r6
800020a8:	f8 ca 00 01 	sub	r10,r12,1
800020ac:	0e 0a       	add	r10,r7
800020ae:	5c 79       	castu.h	r9
800020b0:	5c 7a       	castu.h	r10
800020b2:	5c 7b       	castu.h	r11
800020b4:	5c 7c       	castu.h	r12
800020b6:	f0 1f 00 07 	mcall	800020d0 <et024006_DrawFilledRect+0x38>
  uint32_t count = (uint32_t) width * height;
  et024006_DuplicatePixel( color, count );
800020ba:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
800020be:	5c 77       	castu.h	r7
800020c0:	af 3b       	mul	r11,r7
800020c2:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
800020c6:	f0 1f 00 04 	mcall	800020d4 <et024006_DrawFilledRect+0x3c>
}
800020ca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800020ce:	00 00       	add	r0,r0
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	20 08       	sub	r8,0
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	20 58       	sub	r8,5

800020d8 <et024006_AdjustGamma>:

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800020d8:	fc 19 c0 00 	movh	r9,0xc000
800020dc:	34 6a       	mov	r10,70
800020de:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800020e0:	fc 18 c0 20 	movh	r8,0xc020
800020e4:	e0 6b 00 94 	mov	r11,148
800020e8:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800020ea:	34 7b       	mov	r11,71
800020ec:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800020ee:	34 1b       	mov	r11,65
800020f0:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800020f2:	34 8b       	mov	r11,72
800020f4:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800020f6:	30 0b       	mov	r11,0
800020f8:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800020fa:	34 9b       	mov	r11,73
800020fc:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
800020fe:	33 3b       	mov	r11,51
80002100:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002102:	34 ab       	mov	r11,74
80002104:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002106:	32 5b       	mov	r11,37
80002108:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000210a:	34 bb       	mov	r11,75
8000210c:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000210e:	34 5b       	mov	r11,69
80002110:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002112:	34 cb       	mov	r11,76
80002114:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002116:	34 4b       	mov	r11,68
80002118:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000211a:	34 db       	mov	r11,77
8000211c:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000211e:	37 7b       	mov	r11,119
80002120:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002122:	34 eb       	mov	r11,78
80002124:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002126:	31 2b       	mov	r11,18
80002128:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000212a:	34 fb       	mov	r11,79
8000212c:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000212e:	e0 6b 00 cc 	mov	r11,204
80002132:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002134:	35 0b       	mov	r11,80
80002136:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002138:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000213a:	35 1a       	mov	r10,81
8000213c:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000213e:	e0 69 00 82 	mov	r9,130
80002142:	b0 09       	st.h	r8[0x0],r9
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
80002144:	5e fc       	retal	r12
80002146:	d7 03       	nop

80002148 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
80002148:	eb cd 40 c0 	pushm	r6-r7,lr
  tft_data.cpu_hz = cpu_hz;
8000214c:	fe f7 04 80 	ld.w	r7,pc[1152]
80002150:	8f 0c       	st.w	r7[0x0],r12
  tft_data.hsb_hz = hsb_hz;
80002152:	8f 1b       	st.w	r7[0x4],r11

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
80002154:	16 9c       	mov	r12,r11
80002156:	f0 1f 01 1f 	mcall	800025d0 <et024006_Init+0x488>
static void et024006_SetupInterface( void )
{

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
8000215a:	35 5c       	mov	r12,85
8000215c:	f0 1f 01 1e 	mcall	800025d4 <et024006_Init+0x48c>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
80002160:	30 2b       	mov	r11,2
80002162:	33 2c       	mov	r12,50
80002164:	f0 1f 01 1d 	mcall	800025d8 <et024006_Init+0x490>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80002168:	35 2c       	mov	r12,82
8000216a:	f0 1f 01 1d 	mcall	800025dc <et024006_Init+0x494>
/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
8000216e:	35 2c       	mov	r12,82
80002170:	f0 1f 01 1c 	mcall	800025e0 <et024006_Init+0x498>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002174:	6e 07       	ld.w	r7,r7[0x0]
80002176:	33 28       	mov	r8,50
80002178:	ee 08 06 46 	mulu.d	r6,r7,r8
8000217c:	ee 78 42 40 	mov	r8,1000000
80002180:	30 09       	mov	r9,0
80002182:	ee 7a 42 3f 	mov	r10,999999
80002186:	30 0b       	mov	r11,0
80002188:	ec 0a 00 0a 	add	r10,r6,r10
8000218c:	ee 0b 00 4b 	adc	r11,r7,r11
80002190:	f0 1f 01 15 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002194:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002198:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000219c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800021a0:	14 38       	cp.w	r8,r10
800021a2:	e0 88 00 09 	brls	800021b4 <et024006_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800021a6:	12 38       	cp.w	r8,r9
800021a8:	fe 98 ff fa 	brls	8000219c <et024006_Init+0x54>
800021ac:	12 3a       	cp.w	r10,r9
800021ae:	e0 83 00 a2 	brlo	800022f2 <et024006_Init+0x1aa>
800021b2:	cf 5b       	rjmp	8000219c <et024006_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800021b4:	12 38       	cp.w	r8,r9
800021b6:	e0 8b 00 9e 	brhi	800022f2 <et024006_Init+0x1aa>
800021ba:	12 3a       	cp.w	r10,r9
800021bc:	e0 83 00 9b 	brlo	800022f2 <et024006_Init+0x1aa>
800021c0:	ce eb       	rjmp	8000219c <et024006_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800021c2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800021c6:	14 38       	cp.w	r8,r10
800021c8:	e0 88 00 09 	brls	800021da <et024006_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800021cc:	12 38       	cp.w	r8,r9
800021ce:	fe 98 ff fa 	brls	800021c2 <et024006_Init+0x7a>
800021d2:	12 3a       	cp.w	r10,r9
800021d4:	e0 83 00 a9 	brlo	80002326 <et024006_Init+0x1de>
800021d8:	cf 5b       	rjmp	800021c2 <et024006_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800021da:	12 38       	cp.w	r8,r9
800021dc:	e0 8b 00 a5 	brhi	80002326 <et024006_Init+0x1de>
800021e0:	12 3a       	cp.w	r10,r9
800021e2:	e0 83 00 a2 	brlo	80002326 <et024006_Init+0x1de>
800021e6:	ce eb       	rjmp	800021c2 <et024006_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800021e8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800021ec:	14 38       	cp.w	r8,r10
800021ee:	e0 88 00 09 	brls	80002200 <et024006_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800021f2:	12 38       	cp.w	r8,r9
800021f4:	fe 98 ff fa 	brls	800021e8 <et024006_Init+0xa0>
800021f8:	12 3a       	cp.w	r10,r9
800021fa:	e0 83 01 1e 	brlo	80002436 <et024006_Init+0x2ee>
800021fe:	cf 5b       	rjmp	800021e8 <et024006_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002200:	12 38       	cp.w	r8,r9
80002202:	e0 8b 01 1a 	brhi	80002436 <et024006_Init+0x2ee>
80002206:	12 3a       	cp.w	r10,r9
80002208:	e0 83 01 17 	brlo	80002436 <et024006_Init+0x2ee>
8000220c:	ce eb       	rjmp	800021e8 <et024006_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000220e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002212:	14 38       	cp.w	r8,r10
80002214:	e0 88 00 09 	brls	80002226 <et024006_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002218:	12 38       	cp.w	r8,r9
8000221a:	fe 98 ff fa 	brls	8000220e <et024006_Init+0xc6>
8000221e:	12 3a       	cp.w	r10,r9
80002220:	e0 83 01 29 	brlo	80002472 <et024006_Init+0x32a>
80002224:	cf 5b       	rjmp	8000220e <et024006_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002226:	12 38       	cp.w	r8,r9
80002228:	e0 8b 01 25 	brhi	80002472 <et024006_Init+0x32a>
8000222c:	12 3a       	cp.w	r10,r9
8000222e:	e0 83 01 22 	brlo	80002472 <et024006_Init+0x32a>
80002232:	ce eb       	rjmp	8000220e <et024006_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002234:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002238:	14 38       	cp.w	r8,r10
8000223a:	e0 88 00 09 	brls	8000224c <et024006_Init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000223e:	12 38       	cp.w	r8,r9
80002240:	fe 98 ff fa 	brls	80002234 <et024006_Init+0xec>
80002244:	12 3a       	cp.w	r10,r9
80002246:	e0 83 01 35 	brlo	800024b0 <et024006_Init+0x368>
8000224a:	cf 5b       	rjmp	80002234 <et024006_Init+0xec>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000224c:	12 38       	cp.w	r8,r9
8000224e:	e0 8b 01 31 	brhi	800024b0 <et024006_Init+0x368>
80002252:	12 3a       	cp.w	r10,r9
80002254:	e0 83 01 2e 	brlo	800024b0 <et024006_Init+0x368>
80002258:	ce eb       	rjmp	80002234 <et024006_Init+0xec>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000225a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000225e:	14 38       	cp.w	r8,r10
80002260:	e0 88 00 09 	brls	80002272 <et024006_Init+0x12a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002264:	12 38       	cp.w	r8,r9
80002266:	fe 98 ff fa 	brls	8000225a <et024006_Init+0x112>
8000226a:	12 3a       	cp.w	r10,r9
8000226c:	e0 83 01 40 	brlo	800024ec <et024006_Init+0x3a4>
80002270:	cf 5b       	rjmp	8000225a <et024006_Init+0x112>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002272:	12 38       	cp.w	r8,r9
80002274:	e0 8b 01 3c 	brhi	800024ec <et024006_Init+0x3a4>
80002278:	12 3a       	cp.w	r10,r9
8000227a:	e0 83 01 39 	brlo	800024ec <et024006_Init+0x3a4>
8000227e:	ce eb       	rjmp	8000225a <et024006_Init+0x112>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002280:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002284:	14 38       	cp.w	r8,r10
80002286:	e0 88 00 09 	brls	80002298 <et024006_Init+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000228a:	12 38       	cp.w	r8,r9
8000228c:	fe 98 ff fa 	brls	80002280 <et024006_Init+0x138>
80002290:	12 3a       	cp.w	r10,r9
80002292:	e0 83 01 4b 	brlo	80002528 <et024006_Init+0x3e0>
80002296:	cf 5b       	rjmp	80002280 <et024006_Init+0x138>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002298:	12 38       	cp.w	r8,r9
8000229a:	e0 8b 01 47 	brhi	80002528 <et024006_Init+0x3e0>
8000229e:	12 3a       	cp.w	r10,r9
800022a0:	e0 83 01 44 	brlo	80002528 <et024006_Init+0x3e0>
800022a4:	ce eb       	rjmp	80002280 <et024006_Init+0x138>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022a6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022aa:	14 38       	cp.w	r8,r10
800022ac:	e0 88 00 09 	brls	800022be <et024006_Init+0x176>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022b0:	12 38       	cp.w	r8,r9
800022b2:	fe 98 ff fa 	brls	800022a6 <et024006_Init+0x15e>
800022b6:	12 3a       	cp.w	r10,r9
800022b8:	e0 83 01 56 	brlo	80002564 <et024006_Init+0x41c>
800022bc:	cf 5b       	rjmp	800022a6 <et024006_Init+0x15e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022be:	12 38       	cp.w	r8,r9
800022c0:	e0 8b 01 52 	brhi	80002564 <et024006_Init+0x41c>
800022c4:	12 3a       	cp.w	r10,r9
800022c6:	e0 83 01 4f 	brlo	80002564 <et024006_Init+0x41c>
800022ca:	ce eb       	rjmp	800022a6 <et024006_Init+0x15e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022cc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022d0:	14 38       	cp.w	r8,r10
800022d2:	e0 88 00 09 	brls	800022e4 <et024006_Init+0x19c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022d6:	12 38       	cp.w	r8,r9
800022d8:	fe 98 ff fa 	brls	800022cc <et024006_Init+0x184>
800022dc:	12 3a       	cp.w	r10,r9
800022de:	e0 83 01 64 	brlo	800025a6 <et024006_Init+0x45e>
800022e2:	cf 5b       	rjmp	800022cc <et024006_Init+0x184>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022e4:	12 38       	cp.w	r8,r9
800022e6:	e0 8b 01 60 	brhi	800025a6 <et024006_Init+0x45e>
800022ea:	12 3a       	cp.w	r10,r9
800022ec:	e0 83 01 5d 	brlo	800025a6 <et024006_Init+0x45e>
800022f0:	ce eb       	rjmp	800022cc <et024006_Init+0x184>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
800022f2:	35 2c       	mov	r12,82
800022f4:	f0 1f 00 ba 	mcall	800025dc <et024006_Init+0x494>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800022f8:	fe f8 02 d4 	ld.w	r8,pc[724]
800022fc:	70 07       	ld.w	r7,r8[0x0]
800022fe:	30 58       	mov	r8,5
80002300:	ee 08 06 46 	mulu.d	r6,r7,r8
80002304:	e0 68 03 e8 	mov	r8,1000
80002308:	30 09       	mov	r9,0
8000230a:	e0 6a 03 e7 	mov	r10,999
8000230e:	30 0b       	mov	r11,0
80002310:	ec 0a 00 0a 	add	r10,r6,r10
80002314:	ee 0b 00 4b 	adc	r11,r7,r11
80002318:	f0 1f 00 b3 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000231c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002320:	f0 0a 00 0a 	add	r10,r8,r10
80002324:	c4 fb       	rjmp	800021c2 <et024006_Init+0x7a>
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
#endif
  et024006_SetupInterface();
  et024006_ResetDisplay();
  et024006_AdjustGamma();
80002326:	f0 1f 00 b1 	mcall	800025e8 <et024006_Init+0x4a0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000232a:	fc 19 c0 00 	movh	r9,0xc000
8000232e:	30 1a       	mov	r10,1
80002330:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002332:	fc 18 c0 20 	movh	r8,0xc020
80002336:	30 6b       	mov	r11,6
80002338:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000233a:	33 ab       	mov	r11,58
8000233c:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000233e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002340:	33 bb       	mov	r11,59
80002342:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002344:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002346:	33 ca       	mov	r10,60
80002348:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000234a:	e0 6a 00 f0 	mov	r10,240
8000234e:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002350:	33 db       	mov	r11,61
80002352:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002354:	30 07       	mov	r7,0
80002356:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002358:	33 eb       	mov	r11,62
8000235a:	b2 0b       	st.h	r9[0x0],r11
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000235c:	33 8b       	mov	r11,56
8000235e:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002360:	34 0c       	mov	r12,64
80002362:	b2 0c       	st.h	r9[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002364:	30 fe       	mov	lr,15
80002366:	b0 0e       	st.h	r8[0x0],lr

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002368:	34 1e       	mov	lr,65
8000236a:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000236c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000236e:	32 7a       	mov	r10,39
80002370:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002372:	30 2a       	mov	r10,2
80002374:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002376:	32 8e       	mov	lr,40
80002378:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000237a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000237c:	32 9e       	mov	lr,41
8000237e:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002380:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002382:	32 ae       	mov	lr,42
80002384:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002386:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002388:	32 ce       	mov	lr,44
8000238a:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000238c:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000238e:	32 de       	mov	lr,45
80002390:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002392:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002394:	31 9a       	mov	r10,25
80002396:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002398:	34 9a       	mov	r10,73
8000239a:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000239c:	e0 6a 00 93 	mov	r10,147
800023a0:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023a2:	30 8a       	mov	r10,8
800023a4:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023a6:	31 6a       	mov	r10,22
800023a8:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023aa:	36 8a       	mov	r10,104
800023ac:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023ae:	32 3a       	mov	r10,35
800023b0:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023b2:	e0 6a 00 95 	mov	r10,149
800023b6:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023b8:	32 4e       	mov	lr,36
800023ba:	b2 0e       	st.h	r9[0x0],lr
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023bc:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023be:	32 5a       	mov	r10,37
800023c0:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023c2:	e0 6a 00 ff 	mov	r10,255
800023c6:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023c8:	e0 6a 00 90 	mov	r10,144
800023cc:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023ce:	37 fa       	mov	r10,127
800023d0:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023d2:	33 5a       	mov	r10,53
800023d4:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023d6:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023d8:	33 6a       	mov	r10,54
800023da:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023dc:	37 8a       	mov	r10,120
800023de:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023e0:	31 da       	mov	r10,29
800023e2:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023e4:	30 7a       	mov	r10,7
800023e6:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023e8:	31 ea       	mov	r10,30
800023ea:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023ec:	b0 07       	st.h	r8[0x0],r7

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023ee:	31 fa       	mov	r10,31
800023f0:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023f2:	30 4a       	mov	r10,4
800023f4:	b0 0a       	st.h	r8[0x0],r10

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023f6:	32 0a       	mov	r10,32
800023f8:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800023fa:	b0 0c       	st.h	r8[0x0],r12

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800023fc:	34 4a       	mov	r10,68
800023fe:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002400:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002402:	34 5a       	mov	r10,69
80002404:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002406:	31 29       	mov	r9,18
80002408:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000240a:	4f 18       	lddpc	r8,800025cc <et024006_Init+0x484>
8000240c:	70 07       	ld.w	r7,r8[0x0]
8000240e:	30 a8       	mov	r8,10
80002410:	ee 08 06 46 	mulu.d	r6,r7,r8
80002414:	e0 68 03 e8 	mov	r8,1000
80002418:	30 09       	mov	r9,0
8000241a:	e0 6a 03 e7 	mov	r10,999
8000241e:	30 0b       	mov	r11,0
80002420:	ec 0a 00 0a 	add	r10,r6,r10
80002424:	ee 0b 00 4b 	adc	r11,r7,r11
80002428:	f0 1f 00 6f 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000242c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002430:	f0 0a 00 0a 	add	r10,r8,r10
80002434:	cd aa       	rjmp	800021e8 <et024006_Init+0xa0>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002436:	31 c9       	mov	r9,28
80002438:	fc 18 c0 00 	movh	r8,0xc000
8000243c:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000243e:	30 49       	mov	r9,4
80002440:	fc 18 c0 20 	movh	r8,0xc020
80002444:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002446:	4e 28       	lddpc	r8,800025cc <et024006_Init+0x484>
80002448:	70 07       	ld.w	r7,r8[0x0]
8000244a:	31 48       	mov	r8,20
8000244c:	ee 08 06 46 	mulu.d	r6,r7,r8
80002450:	e0 68 03 e8 	mov	r8,1000
80002454:	30 09       	mov	r9,0
80002456:	e0 6a 03 e7 	mov	r10,999
8000245a:	30 0b       	mov	r11,0
8000245c:	ec 0a 00 0a 	add	r10,r6,r10
80002460:	ee 0b 00 4b 	adc	r11,r7,r11
80002464:	f0 1f 00 60 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002468:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000246c:	f0 0a 00 0a 	add	r10,r8,r10
80002470:	cc fa       	rjmp	8000220e <et024006_Init+0xc6>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002472:	34 39       	mov	r9,67
80002474:	fc 18 c0 00 	movh	r8,0xc000
80002478:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000247a:	e0 69 00 80 	mov	r9,128
8000247e:	fc 18 c0 20 	movh	r8,0xc020
80002482:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002484:	4d 28       	lddpc	r8,800025cc <et024006_Init+0x484>
80002486:	70 07       	ld.w	r7,r8[0x0]
80002488:	30 58       	mov	r8,5
8000248a:	ee 08 06 46 	mulu.d	r6,r7,r8
8000248e:	e0 68 03 e8 	mov	r8,1000
80002492:	30 09       	mov	r9,0
80002494:	e0 6a 03 e7 	mov	r10,999
80002498:	30 0b       	mov	r11,0
8000249a:	ec 0a 00 0a 	add	r10,r6,r10
8000249e:	ee 0b 00 4b 	adc	r11,r7,r11
800024a2:	f0 1f 00 51 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024a6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024aa:	f0 0a 00 0a 	add	r10,r8,r10
800024ae:	cc 3a       	rjmp	80002234 <et024006_Init+0xec>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024b0:	31 b9       	mov	r9,27
800024b2:	fc 18 c0 00 	movh	r8,0xc000
800024b6:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024b8:	30 89       	mov	r9,8
800024ba:	fc 18 c0 20 	movh	r8,0xc020
800024be:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800024c0:	4c 38       	lddpc	r8,800025cc <et024006_Init+0x484>
800024c2:	70 07       	ld.w	r7,r8[0x0]
800024c4:	32 88       	mov	r8,40
800024c6:	ee 08 06 46 	mulu.d	r6,r7,r8
800024ca:	e0 68 03 e8 	mov	r8,1000
800024ce:	30 09       	mov	r9,0
800024d0:	e0 6a 03 e7 	mov	r10,999
800024d4:	30 0b       	mov	r11,0
800024d6:	ec 0a 00 0a 	add	r10,r6,r10
800024da:	ee 0b 00 4b 	adc	r11,r7,r11
800024de:	f0 1f 00 42 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024e2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024e6:	f0 0a 00 0a 	add	r10,r8,r10
800024ea:	cb 8a       	rjmp	8000225a <et024006_Init+0x112>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800024ec:	31 b9       	mov	r9,27
800024ee:	fc 18 c0 00 	movh	r8,0xc000
800024f2:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
800024f4:	31 09       	mov	r9,16
800024f6:	fc 18 c0 20 	movh	r8,0xc020
800024fa:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800024fc:	4b 48       	lddpc	r8,800025cc <et024006_Init+0x484>
800024fe:	70 07       	ld.w	r7,r8[0x0]
80002500:	32 88       	mov	r8,40
80002502:	ee 08 06 46 	mulu.d	r6,r7,r8
80002506:	e0 68 03 e8 	mov	r8,1000
8000250a:	30 09       	mov	r9,0
8000250c:	e0 6a 03 e7 	mov	r10,999
80002510:	30 0b       	mov	r11,0
80002512:	ec 0a 00 0a 	add	r10,r6,r10
80002516:	ee 0b 00 4b 	adc	r11,r7,r11
8000251a:	f0 1f 00 33 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000251e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002522:	f0 0a 00 0a 	add	r10,r8,r10
80002526:	ca da       	rjmp	80002280 <et024006_Init+0x138>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002528:	32 69       	mov	r9,38
8000252a:	fc 18 c0 00 	movh	r8,0xc000
8000252e:	b0 09       	st.h	r8[0x0],r9
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002530:	30 49       	mov	r9,4
80002532:	fc 18 c0 20 	movh	r8,0xc020
80002536:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002538:	4a 58       	lddpc	r8,800025cc <et024006_Init+0x484>
8000253a:	70 07       	ld.w	r7,r8[0x0]
8000253c:	32 88       	mov	r8,40
8000253e:	ee 08 06 46 	mulu.d	r6,r7,r8
80002542:	e0 68 03 e8 	mov	r8,1000
80002546:	30 09       	mov	r9,0
80002548:	e0 6a 03 e7 	mov	r10,999
8000254c:	30 0b       	mov	r11,0
8000254e:	ec 0a 00 0a 	add	r10,r6,r10
80002552:	ee 0b 00 4b 	adc	r11,r7,r11
80002556:	f0 1f 00 24 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000255a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000255e:	f0 0a 00 0a 	add	r10,r8,r10
80002562:	ca 2a       	rjmp	800022a6 <et024006_Init+0x15e>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002564:	fc 19 c0 00 	movh	r9,0xc000
80002568:	32 6a       	mov	r10,38
8000256a:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
8000256c:	fc 18 c0 20 	movh	r8,0xc020
80002570:	32 4b       	mov	r11,36
80002572:	b0 0b       	st.h	r8[0x0],r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80002574:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
80002576:	32 c9       	mov	r9,44
80002578:	b0 09       	st.h	r8[0x0],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000257a:	49 58       	lddpc	r8,800025cc <et024006_Init+0x484>
8000257c:	70 07       	ld.w	r7,r8[0x0]
8000257e:	32 88       	mov	r8,40
80002580:	ee 08 06 46 	mulu.d	r6,r7,r8
80002584:	e0 68 03 e8 	mov	r8,1000
80002588:	30 09       	mov	r9,0
8000258a:	e0 6a 03 e7 	mov	r10,999
8000258e:	30 0b       	mov	r11,0
80002590:	ec 0a 00 0a 	add	r10,r6,r10
80002594:	ee 0b 00 4b 	adc	r11,r7,r11
80002598:	f0 1f 00 13 	mcall	800025e4 <et024006_Init+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000259c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025a0:	f0 0a 00 0a 	add	r10,r8,r10
800025a4:	c9 4a       	rjmp	800022cc <et024006_Init+0x184>

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025a6:	fc 19 c0 00 	movh	r9,0xc000
800025aa:	32 68       	mov	r8,38
800025ac:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025ae:	fc 18 c0 20 	movh	r8,0xc020
800025b2:	33 ca       	mov	r10,60
800025b4:	b0 0a       	st.h	r8[0x0],r10
}

__always_inline static uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025b6:	37 0a       	mov	r10,112
800025b8:	b2 0a       	st.h	r9[0x0],r10
  return *ET024006_PARAM_ADDR;
800025ba:	90 0b       	ld.sh	r11,r8[0x0]
800025bc:	5c 5b       	castu.b	r11

/* --- Register manipulation functions --- */
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
__always_inline static void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800025be:	b2 0a       	st.h	r9[0x0],r10
  *ET024006_PARAM_ADDR = (uint16_t) value;
800025c0:	16 99       	mov	r9,r11
800025c2:	a3 b9       	sbr	r9,0x3
800025c4:	b0 09       	st.h	r8[0x0],r9
  et024006_GeneralSettings();
  et024006_InterfaceSettings();
  et024006_PowerSettings();
  et024006_PowerUp();
  et024006_PowerOn();
}
800025c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800025ca:	00 00       	add	r0,r0
800025cc:	00 00       	add	r0,r0
800025ce:	00 28       	rsub	r8,r0
800025d0:	80 00       	ld.sh	r0,r0[0x0]
800025d2:	25 ec       	sub	r12,94
800025d4:	80 00       	ld.sh	r0,r0[0x0]
800025d6:	28 10       	sub	r0,-127
800025d8:	80 00       	ld.sh	r0,r0[0x0]
800025da:	27 8c       	sub	r12,120
800025dc:	80 00       	ld.sh	r0,r0[0x0]
800025de:	28 28       	sub	r8,-126
800025e0:	80 00       	ld.sh	r0,r0[0x0]
800025e2:	28 44       	sub	r4,-124
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	29 c4       	sub	r4,-100
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	20 d8       	sub	r8,13

800025ec <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
800025ec:	d4 01       	pushm	lr
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
800025ee:	32 bb       	mov	r11,43
800025f0:	48 2c       	lddpc	r12,800025f8 <smc_init+0xc>
800025f2:	f0 1f 00 03 	mcall	800025fc <smc_init+0x10>
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
}
800025f6:	d8 02       	popm	pc
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	30 00       	mov	r0,0
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	27 e0       	sub	r0,126

80002600 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002600:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002602:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002606:	99 a8       	st.w	r12[0x28],r8
}
80002608:	5e fc       	retal	r12
8000260a:	d7 03       	nop

8000260c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000260c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000260e:	ec 5b bb 9f 	cp.w	r11,899999
80002612:	e0 8b 00 04 	brhi	8000261a <pm_enable_osc0_crystal+0xe>
80002616:	30 4b       	mov	r11,4
80002618:	c1 38       	rjmp	8000263e <pm_enable_osc0_crystal+0x32>
8000261a:	e0 68 c6 bf 	mov	r8,50879
8000261e:	ea 18 00 2d 	orh	r8,0x2d
80002622:	10 3b       	cp.w	r11,r8
80002624:	e0 8b 00 04 	brhi	8000262c <pm_enable_osc0_crystal+0x20>
80002628:	30 5b       	mov	r11,5
8000262a:	c0 a8       	rjmp	8000263e <pm_enable_osc0_crystal+0x32>
8000262c:	e0 68 12 00 	mov	r8,4608
80002630:	ea 18 00 7a 	orh	r8,0x7a
80002634:	10 3b       	cp.w	r11,r8
80002636:	f9 bb 03 06 	movlo	r11,6
8000263a:	f9 bb 02 07 	movhs	r11,7
8000263e:	f0 1f 00 02 	mcall	80002644 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002642:	d8 02       	popm	pc
80002644:	80 00       	ld.sh	r0,r0[0x0]
80002646:	26 00       	sub	r0,96

80002648 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002648:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000264a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000264e:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002650:	78 08       	ld.w	r8,r12[0x0]
80002652:	a3 a8       	sbr	r8,0x2
80002654:	99 08       	st.w	r12[0x0],r8
}
80002656:	5e fc       	retal	r12

80002658 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002658:	79 58       	ld.w	r8,r12[0x54]
8000265a:	e2 18 00 80 	andl	r8,0x80,COH
8000265e:	cf d0       	breq	80002658 <pm_wait_for_clk0_ready>
}
80002660:	5e fc       	retal	r12
80002662:	d7 03       	nop

80002664 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002664:	eb cd 40 80 	pushm	r7,lr
80002668:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
8000266a:	f0 1f 00 04 	mcall	80002678 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
8000266e:	0e 9c       	mov	r12,r7
80002670:	f0 1f 00 03 	mcall	8000267c <pm_enable_clk0+0x18>
}
80002674:	e3 cd 80 80 	ldm	sp++,r7,pc
80002678:	80 00       	ld.sh	r0,r0[0x0]
8000267a:	26 48       	sub	r8,100
8000267c:	80 00       	ld.sh	r0,r0[0x0]
8000267e:	26 58       	sub	r8,101

80002680 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002680:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002682:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002686:	99 08       	st.w	r12[0x0],r8
}
80002688:	5e fc       	retal	r12
8000268a:	d7 03       	nop

8000268c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
8000268c:	eb cd 40 c0 	pushm	r6-r7,lr
80002690:	18 97       	mov	r7,r12
80002692:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002694:	f0 1f 00 06 	mcall	800026ac <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002698:	0c 9b       	mov	r11,r6
8000269a:	0e 9c       	mov	r12,r7
8000269c:	f0 1f 00 05 	mcall	800026b0 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800026a0:	30 1b       	mov	r11,1
800026a2:	0e 9c       	mov	r12,r7
800026a4:	f0 1f 00 04 	mcall	800026b4 <pm_switch_to_osc0+0x28>
}
800026a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800026ac:	80 00       	ld.sh	r0,r0[0x0]
800026ae:	26 0c       	sub	r12,96
800026b0:	80 00       	ld.sh	r0,r0[0x0]
800026b2:	26 64       	sub	r4,102
800026b4:	80 00       	ld.sh	r0,r0[0x0]
800026b6:	26 80       	sub	r0,104

800026b8 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
800026b8:	58 0b       	cp.w	r11,0
800026ba:	c1 90       	breq	800026ec <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800026bc:	58 6c       	cp.w	r12,6
800026be:	e0 8b 00 17 	brhi	800026ec <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800026c2:	76 0a       	ld.w	r10,r11[0x0]
800026c4:	fe 78 30 00 	mov	r8,-53248
800026c8:	f8 c9 ff f0 	sub	r9,r12,-16
800026cc:	a5 79       	lsl	r9,0x5
800026ce:	f0 09 00 09 	add	r9,r8,r9
800026d2:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800026d4:	76 19       	ld.w	r9,r11[0x4]
800026d6:	a5 7c       	lsl	r12,0x5
800026d8:	f0 0c 00 0c 	add	r12,r8,r12
800026dc:	f8 c8 fd fc 	sub	r8,r12,-516
800026e0:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800026e2:	76 28       	ld.w	r8,r11[0x8]
800026e4:	f8 cc fd f8 	sub	r12,r12,-520
800026e8:	99 08       	st.w	r12[0x0],r8
800026ea:	5e fd       	retal	0

  return PWM_SUCCESS;
800026ec:	5e ff       	retal	1

800026ee <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800026ee:	18 98       	mov	r8,r12
800026f0:	e0 18 ff 80 	andl	r8,0xff80
800026f4:	c0 20       	breq	800026f8 <pwm_start_channels+0xa>
800026f6:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
800026f8:	fe 78 30 00 	mov	r8,-53248
800026fc:	91 1c       	st.w	r8[0x4],r12
800026fe:	5e fd       	retal	0

80002700 <pwm_async_update_channel>:

int pwm_async_update_channel(unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
80002700:	58 6c       	cp.w	r12,6
80002702:	e0 88 00 03 	brls	80002708 <pwm_async_update_channel+0x8>
80002706:	5e ff       	retal	1
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
80002708:	76 0a       	ld.w	r10,r11[0x0]
8000270a:	fe 78 30 00 	mov	r8,-53248
8000270e:	f8 c9 ff f0 	sub	r9,r12,-16
80002712:	a5 79       	lsl	r9,0x5
80002714:	f0 09 00 09 	add	r9,r8,r9
80002718:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
8000271a:	76 49       	ld.w	r9,r11[0x10]
8000271c:	a5 7c       	lsl	r12,0x5
8000271e:	18 08       	add	r8,r12
80002720:	f0 c8 fd f0 	sub	r8,r8,-528
80002724:	91 09       	st.w	r8[0x0],r9
80002726:	5e fd       	retal	0

80002728 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002728:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
8000272c:	58 0c       	cp.w	r12,0
8000272e:	c0 21       	brne	80002732 <pwm_init+0xa>
80002730:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002732:	e6 18 00 01 	andh	r8,0x1,COH
80002736:	c0 91       	brne	80002748 <pwm_init+0x20>
80002738:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000273a:	fe 78 30 00 	mov	r8,-53248
8000273e:	37 f9       	mov	r9,127
80002740:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002742:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002744:	d5 03       	csrf	0x10
80002746:	c0 68       	rjmp	80002752 <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002748:	fe 78 30 00 	mov	r8,-53248
8000274c:	37 f9       	mov	r9,127
8000274e:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002750:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80002752:	78 08       	ld.w	r8,r12[0x0]
80002754:	78 39       	ld.w	r9,r12[0xc]
80002756:	a9 69       	lsl	r9,0x8
80002758:	f3 e8 11 09 	or	r9,r9,r8<<0x10
8000275c:	78 18       	ld.w	r8,r12[0x4]
8000275e:	10 49       	or	r9,r8
80002760:	78 28       	ld.w	r8,r12[0x8]
80002762:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002766:	fe 78 30 00 	mov	r8,-53248
8000276a:	91 09       	st.w	r8[0x0],r9
8000276c:	5e fd       	retal	0
8000276e:	d7 03       	nop

80002770 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002770:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002772:	58 0c       	cp.w	r12,0
80002774:	c0 40       	breq	8000277c <pcl_switch_to_osc+0xc>
80002776:	fe 7c d8 f0 	mov	r12,-10000
8000277a:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
8000277c:	fe 7c 0c 00 	mov	r12,-62464
80002780:	f0 1f 00 02 	mcall	80002788 <pcl_switch_to_osc+0x18>
80002784:	d8 0a       	popm	pc,r12=0
80002786:	00 00       	add	r0,r0
80002788:	80 00       	ld.sh	r0,r0[0x0]
8000278a:	26 8c       	sub	r12,104

8000278c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000278c:	f8 08 16 05 	lsr	r8,r12,0x5
80002790:	a9 68       	lsl	r8,0x8
80002792:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002796:	58 1b       	cp.w	r11,1
80002798:	c0 d0       	breq	800027b2 <gpio_enable_module_pin+0x26>
8000279a:	c0 63       	brcs	800027a6 <gpio_enable_module_pin+0x1a>
8000279c:	58 2b       	cp.w	r11,2
8000279e:	c1 00       	breq	800027be <gpio_enable_module_pin+0x32>
800027a0:	58 3b       	cp.w	r11,3
800027a2:	c1 40       	breq	800027ca <gpio_enable_module_pin+0x3e>
800027a4:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800027a6:	30 19       	mov	r9,1
800027a8:	f2 0c 09 49 	lsl	r9,r9,r12
800027ac:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800027ae:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800027b0:	c1 28       	rjmp	800027d4 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800027b2:	30 19       	mov	r9,1
800027b4:	f2 0c 09 49 	lsl	r9,r9,r12
800027b8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800027ba:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800027bc:	c0 c8       	rjmp	800027d4 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800027be:	30 19       	mov	r9,1
800027c0:	f2 0c 09 49 	lsl	r9,r9,r12
800027c4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800027c6:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800027c8:	c0 68       	rjmp	800027d4 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800027ca:	30 19       	mov	r9,1
800027cc:	f2 0c 09 49 	lsl	r9,r9,r12
800027d0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800027d2:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800027d4:	30 19       	mov	r9,1
800027d6:	f2 0c 09 4c 	lsl	r12,r9,r12
800027da:	91 2c       	st.w	r8[0x8],r12
800027dc:	5e fd       	retal	0
800027de:	d7 03       	nop

800027e0 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800027e0:	d4 21       	pushm	r4-r7,lr
800027e2:	18 97       	mov	r7,r12
800027e4:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800027e6:	58 0b       	cp.w	r11,0
800027e8:	c0 31       	brne	800027ee <gpio_enable_module+0xe>
800027ea:	30 05       	mov	r5,0
800027ec:	c0 d8       	rjmp	80002806 <gpio_enable_module+0x26>
800027ee:	30 06       	mov	r6,0
800027f0:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800027f2:	6e 1b       	ld.w	r11,r7[0x4]
800027f4:	6e 0c       	ld.w	r12,r7[0x0]
800027f6:	f0 1f 00 06 	mcall	8000280c <gpio_enable_module+0x2c>
800027fa:	18 45       	or	r5,r12
		gpiomap++;
800027fc:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800027fe:	2f f6       	sub	r6,-1
80002800:	0c 34       	cp.w	r4,r6
80002802:	fe 9b ff f8 	brhi	800027f2 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002806:	0a 9c       	mov	r12,r5
80002808:	d8 22       	popm	r4-r7,pc
8000280a:	00 00       	add	r0,r0
8000280c:	80 00       	ld.sh	r0,r0[0x0]
8000280e:	27 8c       	sub	r12,120

80002810 <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002810:	f8 08 16 05 	lsr	r8,r12,0x5
80002814:	a9 68       	lsl	r8,0x8
80002816:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
8000281a:	30 19       	mov	r9,1
8000281c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002820:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
80002824:	91 1c       	st.w	r8[0x4],r12
}
80002826:	5e fc       	retal	r12

80002828 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002828:	f8 08 16 05 	lsr	r8,r12,0x5
8000282c:	a9 68       	lsl	r8,0x8
8000282e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002832:	30 19       	mov	r9,1
80002834:	f2 0c 09 4c 	lsl	r12,r9,r12
80002838:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000283c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002840:	91 1c       	st.w	r8[0x4],r12
}
80002842:	5e fc       	retal	r12

80002844 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002844:	f8 08 16 05 	lsr	r8,r12,0x5
80002848:	a9 68       	lsl	r8,0x8
8000284a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000284e:	30 19       	mov	r9,1
80002850:	f2 0c 09 4c 	lsl	r12,r9,r12
80002854:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002858:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000285c:	91 1c       	st.w	r8[0x4],r12
}
8000285e:	5e fc       	retal	r12

80002860 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002860:	fe 78 08 00 	mov	r8,-63488
80002864:	e0 69 00 83 	mov	r9,131
80002868:	f2 0c 01 0c 	sub	r12,r9,r12
8000286c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002870:	f2 ca ff c0 	sub	r10,r9,-64
80002874:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002878:	58 08       	cp.w	r8,0
8000287a:	c0 21       	brne	8000287e <_get_interrupt_handler+0x1e>
8000287c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
8000287e:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002882:	48 5a       	lddpc	r10,80002894 <_get_interrupt_handler+0x34>
80002884:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002888:	f0 08 11 1f 	rsub	r8,r8,31
8000288c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000288e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002892:	5e fc       	retal	r12
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	31 58       	mov	r8,21

80002898 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002898:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000289c:	fe c0 fa 9c 	sub	r0,pc,-1380

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800028a0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800028a4:	d5 53       	csrf	0x15
  cp      r0, r1
800028a6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800028a8:	32 81       	mov	r1,40
  lda.w   r2, _data_lma
800028aa:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800028ac:	c0 72       	brcc	800028ba <idata_load_loop_end>
  st.d    r0++, r4
800028ae:	fe c2 f6 b6 	sub	r2,pc,-2378

800028b2 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800028b2:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800028b4:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800028b6:	02 30       	cp.w	r0,r1
  cp      r0, r1
800028b8:	cf d3       	brcs	800028b2 <idata_load_loop>

800028ba <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800028ba:	32 80       	mov	r0,40
  mov     r2, 0
800028bc:	e0 61 01 20 	mov	r1,288
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800028c0:	02 30       	cp.w	r0,r1
  cp      r0, r1
800028c2:	c0 62       	brcc	800028ce <udata_clear_loop_end>
  brlo    udata_clear_loop
800028c4:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800028c6:	30 03       	mov	r3,0

800028c8 <udata_clear_loop>:
800028c8:	a1 22       	st.d	r0++,r2
800028ca:	02 30       	cp.w	r0,r1
800028cc:	cf e3       	brcs	800028c8 <udata_clear_loop>

800028ce <udata_clear_loop_end>:
800028ce:	fe cf ff fa 	sub	pc,pc,-6
800028d2:	d7 03       	nop

800028d4 <main>:
static void sd_mmc_resources_init(void);
void local_pdca_init(void);
void leds(uint8_t value);
void init_button_interrupt(void);
*/
int main(void){
800028d4:	eb cd 40 c0 	pushm	r6-r7,lr
800028d8:	20 4d       	sub	sp,16

	int i, j;  //j for sectors, i for bytes

	//PM
	//pm_switch_to_osc0(&AVR32_PM, PBA_HZ, 3);
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
800028da:	30 3a       	mov	r10,3
800028dc:	e0 6b 1b 00 	mov	r11,6912
800028e0:	ea 1b 00 b7 	orh	r11,0xb7
800028e4:	30 0c       	mov	r12,0
800028e6:	f0 1f 00 30 	mcall	800029a4 <main+0xd0>
	}//For

	print_dbg("\r\nEnd of the example.\r\n");
*/
	//TFT
	et024006_Init( FOSC0, FOSC0 );
800028ea:	e0 6b 1b 00 	mov	r11,6912
800028ee:	ea 1b 00 b7 	orh	r11,0xb7
800028f2:	16 9c       	mov	r12,r11
800028f4:	f0 1f 00 2d 	mcall	800029a8 <main+0xd4>

}//Main


static void tft_bl_init(void){
  pwm_opt_t opt = {.diva = 0,.divb = 0,.prea = 0,.preb = 0};
800028f8:	30 07       	mov	r7,0
800028fa:	50 07       	stdsp	sp[0x0],r7
800028fc:	50 17       	stdsp	sp[0x4],r7
800028fe:	50 27       	stdsp	sp[0x8],r7
80002900:	50 37       	stdsp	sp[0xc],r7
  pwm_init(&opt);
80002902:	1a 9c       	mov	r12,sp
80002904:	f0 1f 00 2a 	mcall	800029ac <main+0xd8>
  pwm_channel6.CMR.calg = PWM_MODE_LEFT_ALIGNED;
80002908:	4a ab       	lddpc	r11,800029b0 <main+0xdc>
8000290a:	76 08       	ld.w	r8,r11[0x0]
  pwm_channel6.CMR.cpol = PWM_POLARITY_HIGH; //PWM_POLARITY_LOW;//PWM_POLARITY_HIGH;
  pwm_channel6.CMR.cpd = PWM_UPDATE_DUTY;
8000290c:	e0 18 f8 ff 	andl	r8,0xf8ff
  pwm_channel6.CMR.cpre = AVR32_PWM_CMR_CPRE_MCK_DIV_2;
80002910:	a9 b8       	sbr	r8,0x9
80002912:	30 19       	mov	r9,1
80002914:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002918:	97 08       	st.w	r11[0x0],r8
  pwm_channel_init(6, &pwm_channel6);
8000291a:	30 6c       	mov	r12,6
8000291c:	f0 1f 00 26 	mcall	800029b4 <main+0xe0>
  pwm_start_channels(AVR32_PWM_ENA_CHID6_MASK);
80002920:	34 0c       	mov	r12,64
80002922:	f0 1f 00 26 	mcall	800029b8 <main+0xe4>
	print_dbg("\r\nEnd of the example.\r\n");
*/
	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
80002926:	0e 98       	mov	r8,r7
80002928:	e0 69 00 f0 	mov	r9,240
8000292c:	e0 6a 01 40 	mov	r10,320
80002930:	0e 9b       	mov	r11,r7
80002932:	0e 9c       	mov	r12,r7
80002934:	f0 1f 00 22 	mcall	800029bc <main+0xe8>

	while(pwm_channel6.cdty < pwm_channel6.cprd){
80002938:	49 e7       	lddpc	r7,800029b0 <main+0xdc>
		pwm_channel6.cdty++;
		pwm_channel6.cupd = pwm_channel6.cdty;
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
8000293a:	30 66       	mov	r6,6
	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );

	while(pwm_channel6.cdty < pwm_channel6.cprd){
8000293c:	c1 c8       	rjmp	80002974 <main+0xa0>
		pwm_channel6.cdty++;
8000293e:	2f f8       	sub	r8,-1
80002940:	8f 18       	st.w	r7[0x4],r8
		pwm_channel6.cupd = pwm_channel6.cdty;
80002942:	8f 48       	st.w	r7[0x10],r8
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
80002944:	0e 9b       	mov	r11,r7
80002946:	0c 9c       	mov	r12,r6
80002948:	f0 1f 00 1e 	mcall	800029c0 <main+0xec>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000294c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002950:	f0 ca fb 80 	sub	r10,r8,-1152
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002954:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002958:	14 38       	cp.w	r8,r10
8000295a:	e0 88 00 08 	brls	8000296a <main+0x96>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000295e:	12 38       	cp.w	r8,r9
80002960:	fe 98 ff fa 	brls	80002954 <main+0x80>
80002964:	12 3a       	cp.w	r10,r9
80002966:	c0 73       	brcs	80002974 <main+0xa0>
80002968:	cf 6b       	rjmp	80002954 <main+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000296a:	12 38       	cp.w	r8,r9
8000296c:	e0 8b 00 04 	brhi	80002974 <main+0xa0>
80002970:	12 3a       	cp.w	r10,r9
80002972:	cf 12       	brcc	80002954 <main+0x80>
	//TFT
	et024006_Init( FOSC0, FOSC0 );
	tft_bl_init();
	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );

	while(pwm_channel6.cdty < pwm_channel6.cprd){
80002974:	6e 18       	ld.w	r8,r7[0x4]
80002976:	6e 29       	ld.w	r9,r7[0x8]
80002978:	12 38       	cp.w	r8,r9
8000297a:	ce 23       	brcs	8000293e <main+0x6a>
		pwm_channel6.cupd = pwm_channel6.cdty;
		pwm_async_update_channel(AVR32_PWM_ENA_CHID6, &pwm_channel6);
		delay_ms(10);
	}//PWM

	et024006_DrawFilledRect(0 , 0, ET024006_WIDTH, ET024006_HEIGHT, BLACK );
8000297c:	30 08       	mov	r8,0
8000297e:	e0 69 00 f0 	mov	r9,240
80002982:	e0 6a 01 40 	mov	r10,320
80002986:	10 9b       	mov	r11,r8
80002988:	10 9c       	mov	r12,r8
8000298a:	f0 1f 00 0d 	mcall	800029bc <main+0xe8>
	//volatile const char message_read_from_usart[51];
	//uint8_t usart_dma_started = 0;

	et024006_DrawFilledRect(0 , 0, 32, 24, BLUE);
8000298e:	31 f8       	mov	r8,31
80002990:	31 89       	mov	r9,24
80002992:	32 0a       	mov	r10,32
80002994:	30 0b       	mov	r11,0
80002996:	16 9c       	mov	r12,r11
80002998:	f0 1f 00 09 	mcall	800029bc <main+0xe8>

		}
	}
	*/

}//Main
8000299c:	2f cd       	sub	sp,-16
8000299e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800029a2:	00 00       	add	r0,r0
800029a4:	80 00       	ld.sh	r0,r0[0x0]
800029a6:	27 70       	sub	r0,119
800029a8:	80 00       	ld.sh	r0,r0[0x0]
800029aa:	21 48       	sub	r8,20
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	27 28       	sub	r8,114
800029b0:	00 00       	add	r0,r0
800029b2:	00 08       	add	r8,r0
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	26 b8       	sub	r8,107
800029b8:	80 00       	ld.sh	r0,r0[0x0]
800029ba:	26 ee       	sub	lr,110
800029bc:	80 00       	ld.sh	r0,r0[0x0]
800029be:	20 98       	sub	r8,9
800029c0:	80 00       	ld.sh	r0,r0[0x0]
800029c2:	27 00       	sub	r0,112

800029c4 <__avr32_udiv64>:
800029c4:	d4 31       	pushm	r0-r7,lr
800029c6:	1a 97       	mov	r7,sp
800029c8:	20 3d       	sub	sp,12
800029ca:	10 9c       	mov	r12,r8
800029cc:	12 9e       	mov	lr,r9
800029ce:	14 93       	mov	r3,r10
800029d0:	58 09       	cp.w	r9,0
800029d2:	e0 81 00 bd 	brne	80002b4c <__avr32_udiv64+0x188>
800029d6:	16 38       	cp.w	r8,r11
800029d8:	e0 88 00 40 	brls	80002a58 <__avr32_udiv64+0x94>
800029dc:	f0 08 12 00 	clz	r8,r8
800029e0:	c0 d0       	breq	800029fa <__avr32_udiv64+0x36>
800029e2:	f6 08 09 4b 	lsl	r11,r11,r8
800029e6:	f0 09 11 20 	rsub	r9,r8,32
800029ea:	f8 08 09 4c 	lsl	r12,r12,r8
800029ee:	f4 09 0a 49 	lsr	r9,r10,r9
800029f2:	f4 08 09 43 	lsl	r3,r10,r8
800029f6:	f3 eb 10 0b 	or	r11,r9,r11
800029fa:	f8 0e 16 10 	lsr	lr,r12,0x10
800029fe:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80002a02:	f6 0e 0d 00 	divu	r0,r11,lr
80002a06:	e6 0b 16 10 	lsr	r11,r3,0x10
80002a0a:	00 99       	mov	r9,r0
80002a0c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002a10:	e0 0a 02 48 	mul	r8,r0,r10
80002a14:	10 3b       	cp.w	r11,r8
80002a16:	c0 a2       	brcc	80002a2a <__avr32_udiv64+0x66>
80002a18:	20 19       	sub	r9,1
80002a1a:	18 0b       	add	r11,r12
80002a1c:	18 3b       	cp.w	r11,r12
80002a1e:	c0 63       	brcs	80002a2a <__avr32_udiv64+0x66>
80002a20:	10 3b       	cp.w	r11,r8
80002a22:	f7 b9 03 01 	sublo	r9,1
80002a26:	f7 dc e3 0b 	addcs	r11,r11,r12
80002a2a:	f6 08 01 01 	sub	r1,r11,r8
80002a2e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80002a32:	e2 0e 0d 00 	divu	r0,r1,lr
80002a36:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80002a3a:	00 98       	mov	r8,r0
80002a3c:	e0 0a 02 4a 	mul	r10,r0,r10
80002a40:	14 33       	cp.w	r3,r10
80002a42:	c0 82       	brcc	80002a52 <__avr32_udiv64+0x8e>
80002a44:	20 18       	sub	r8,1
80002a46:	18 03       	add	r3,r12
80002a48:	18 33       	cp.w	r3,r12
80002a4a:	c0 43       	brcs	80002a52 <__avr32_udiv64+0x8e>
80002a4c:	14 33       	cp.w	r3,r10
80002a4e:	f7 b8 03 01 	sublo	r8,1
80002a52:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002a56:	cd f8       	rjmp	80002c14 <__avr32_udiv64+0x250>
80002a58:	58 08       	cp.w	r8,0
80002a5a:	c0 51       	brne	80002a64 <__avr32_udiv64+0xa0>
80002a5c:	30 19       	mov	r9,1
80002a5e:	f2 08 0d 08 	divu	r8,r9,r8
80002a62:	10 9c       	mov	r12,r8
80002a64:	f8 06 12 00 	clz	r6,r12
80002a68:	c0 41       	brne	80002a70 <__avr32_udiv64+0xac>
80002a6a:	18 1b       	sub	r11,r12
80002a6c:	30 19       	mov	r9,1
80002a6e:	c4 08       	rjmp	80002aee <__avr32_udiv64+0x12a>
80002a70:	ec 01 11 20 	rsub	r1,r6,32
80002a74:	f4 01 0a 49 	lsr	r9,r10,r1
80002a78:	f8 06 09 4c 	lsl	r12,r12,r6
80002a7c:	f6 06 09 48 	lsl	r8,r11,r6
80002a80:	f6 01 0a 41 	lsr	r1,r11,r1
80002a84:	f3 e8 10 08 	or	r8,r9,r8
80002a88:	f8 03 16 10 	lsr	r3,r12,0x10
80002a8c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80002a90:	e2 03 0d 00 	divu	r0,r1,r3
80002a94:	f0 0b 16 10 	lsr	r11,r8,0x10
80002a98:	00 9e       	mov	lr,r0
80002a9a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002a9e:	e0 05 02 49 	mul	r9,r0,r5
80002aa2:	12 3b       	cp.w	r11,r9
80002aa4:	c0 a2       	brcc	80002ab8 <__avr32_udiv64+0xf4>
80002aa6:	20 1e       	sub	lr,1
80002aa8:	18 0b       	add	r11,r12
80002aaa:	18 3b       	cp.w	r11,r12
80002aac:	c0 63       	brcs	80002ab8 <__avr32_udiv64+0xf4>
80002aae:	12 3b       	cp.w	r11,r9
80002ab0:	f7 be 03 01 	sublo	lr,1
80002ab4:	f7 dc e3 0b 	addcs	r11,r11,r12
80002ab8:	12 1b       	sub	r11,r9
80002aba:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80002abe:	f6 03 0d 02 	divu	r2,r11,r3
80002ac2:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80002ac6:	04 99       	mov	r9,r2
80002ac8:	e4 05 02 4b 	mul	r11,r2,r5
80002acc:	16 38       	cp.w	r8,r11
80002ace:	c0 a2       	brcc	80002ae2 <__avr32_udiv64+0x11e>
80002ad0:	20 19       	sub	r9,1
80002ad2:	18 08       	add	r8,r12
80002ad4:	18 38       	cp.w	r8,r12
80002ad6:	c0 63       	brcs	80002ae2 <__avr32_udiv64+0x11e>
80002ad8:	16 38       	cp.w	r8,r11
80002ada:	f7 b9 03 01 	sublo	r9,1
80002ade:	f1 dc e3 08 	addcs	r8,r8,r12
80002ae2:	f4 06 09 43 	lsl	r3,r10,r6
80002ae6:	f0 0b 01 0b 	sub	r11,r8,r11
80002aea:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80002aee:	f8 06 16 10 	lsr	r6,r12,0x10
80002af2:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80002af6:	f6 06 0d 00 	divu	r0,r11,r6
80002afa:	e6 0b 16 10 	lsr	r11,r3,0x10
80002afe:	00 9a       	mov	r10,r0
80002b00:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002b04:	e0 0e 02 48 	mul	r8,r0,lr
80002b08:	10 3b       	cp.w	r11,r8
80002b0a:	c0 a2       	brcc	80002b1e <__avr32_udiv64+0x15a>
80002b0c:	20 1a       	sub	r10,1
80002b0e:	18 0b       	add	r11,r12
80002b10:	18 3b       	cp.w	r11,r12
80002b12:	c0 63       	brcs	80002b1e <__avr32_udiv64+0x15a>
80002b14:	10 3b       	cp.w	r11,r8
80002b16:	f7 ba 03 01 	sublo	r10,1
80002b1a:	f7 dc e3 0b 	addcs	r11,r11,r12
80002b1e:	f6 08 01 01 	sub	r1,r11,r8
80002b22:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80002b26:	e2 06 0d 00 	divu	r0,r1,r6
80002b2a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80002b2e:	00 98       	mov	r8,r0
80002b30:	e0 0e 02 4b 	mul	r11,r0,lr
80002b34:	16 33       	cp.w	r3,r11
80002b36:	c0 82       	brcc	80002b46 <__avr32_udiv64+0x182>
80002b38:	20 18       	sub	r8,1
80002b3a:	18 03       	add	r3,r12
80002b3c:	18 33       	cp.w	r3,r12
80002b3e:	c0 43       	brcs	80002b46 <__avr32_udiv64+0x182>
80002b40:	16 33       	cp.w	r3,r11
80002b42:	f7 b8 03 01 	sublo	r8,1
80002b46:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80002b4a:	c6 98       	rjmp	80002c1c <__avr32_udiv64+0x258>
80002b4c:	16 39       	cp.w	r9,r11
80002b4e:	e0 8b 00 65 	brhi	80002c18 <__avr32_udiv64+0x254>
80002b52:	f2 09 12 00 	clz	r9,r9
80002b56:	c0 b1       	brne	80002b6c <__avr32_udiv64+0x1a8>
80002b58:	10 3a       	cp.w	r10,r8
80002b5a:	5f 2a       	srhs	r10
80002b5c:	1c 3b       	cp.w	r11,lr
80002b5e:	5f b8       	srhi	r8
80002b60:	10 4a       	or	r10,r8
80002b62:	f2 0a 18 00 	cp.b	r10,r9
80002b66:	c5 90       	breq	80002c18 <__avr32_udiv64+0x254>
80002b68:	30 18       	mov	r8,1
80002b6a:	c5 98       	rjmp	80002c1c <__avr32_udiv64+0x258>
80002b6c:	f0 09 09 46 	lsl	r6,r8,r9
80002b70:	f2 03 11 20 	rsub	r3,r9,32
80002b74:	fc 09 09 4e 	lsl	lr,lr,r9
80002b78:	f0 03 0a 48 	lsr	r8,r8,r3
80002b7c:	f6 09 09 4c 	lsl	r12,r11,r9
80002b80:	f4 03 0a 42 	lsr	r2,r10,r3
80002b84:	ef 46 ff f4 	st.w	r7[-12],r6
80002b88:	f6 03 0a 43 	lsr	r3,r11,r3
80002b8c:	18 42       	or	r2,r12
80002b8e:	f1 ee 10 0c 	or	r12,r8,lr
80002b92:	f8 01 16 10 	lsr	r1,r12,0x10
80002b96:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80002b9a:	e6 01 0d 04 	divu	r4,r3,r1
80002b9e:	e4 03 16 10 	lsr	r3,r2,0x10
80002ba2:	08 9e       	mov	lr,r4
80002ba4:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80002ba8:	e8 06 02 48 	mul	r8,r4,r6
80002bac:	10 33       	cp.w	r3,r8
80002bae:	c0 a2       	brcc	80002bc2 <__avr32_udiv64+0x1fe>
80002bb0:	20 1e       	sub	lr,1
80002bb2:	18 03       	add	r3,r12
80002bb4:	18 33       	cp.w	r3,r12
80002bb6:	c0 63       	brcs	80002bc2 <__avr32_udiv64+0x1fe>
80002bb8:	10 33       	cp.w	r3,r8
80002bba:	f7 be 03 01 	sublo	lr,1
80002bbe:	e7 dc e3 03 	addcs	r3,r3,r12
80002bc2:	10 13       	sub	r3,r8
80002bc4:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80002bc8:	e6 01 0d 00 	divu	r0,r3,r1
80002bcc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002bd0:	00 98       	mov	r8,r0
80002bd2:	e0 06 02 46 	mul	r6,r0,r6
80002bd6:	0c 3b       	cp.w	r11,r6
80002bd8:	c0 a2       	brcc	80002bec <__avr32_udiv64+0x228>
80002bda:	20 18       	sub	r8,1
80002bdc:	18 0b       	add	r11,r12
80002bde:	18 3b       	cp.w	r11,r12
80002be0:	c0 63       	brcs	80002bec <__avr32_udiv64+0x228>
80002be2:	0c 3b       	cp.w	r11,r6
80002be4:	f7 dc e3 0b 	addcs	r11,r11,r12
80002be8:	f7 b8 03 01 	sublo	r8,1
80002bec:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80002bf0:	ee f4 ff f4 	ld.w	r4,r7[-12]
80002bf4:	0c 1b       	sub	r11,r6
80002bf6:	f0 04 06 42 	mulu.d	r2,r8,r4
80002bfa:	06 95       	mov	r5,r3
80002bfc:	16 35       	cp.w	r5,r11
80002bfe:	e0 8b 00 0a 	brhi	80002c12 <__avr32_udiv64+0x24e>
80002c02:	5f 0b       	sreq	r11
80002c04:	f4 09 09 49 	lsl	r9,r10,r9
80002c08:	12 32       	cp.w	r2,r9
80002c0a:	5f b9       	srhi	r9
80002c0c:	f7 e9 00 09 	and	r9,r11,r9
80002c10:	c0 60       	breq	80002c1c <__avr32_udiv64+0x258>
80002c12:	20 18       	sub	r8,1
80002c14:	30 09       	mov	r9,0
80002c16:	c0 38       	rjmp	80002c1c <__avr32_udiv64+0x258>
80002c18:	30 09       	mov	r9,0
80002c1a:	12 98       	mov	r8,r9
80002c1c:	10 9a       	mov	r10,r8
80002c1e:	12 93       	mov	r3,r9
80002c20:	10 92       	mov	r2,r8
80002c22:	12 9b       	mov	r11,r9
80002c24:	2f dd       	sub	sp,-12
80002c26:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80002e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002e00:	c0 08       	rjmp	80002e00 <_evba>
	...

80002e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002e04:	c0 08       	rjmp	80002e04 <_handle_TLB_Multiple_Hit>
	...

80002e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002e08:	c0 08       	rjmp	80002e08 <_handle_Bus_Error_Data_Fetch>
	...

80002e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80002e0c:	c0 08       	rjmp	80002e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002e10:	c0 08       	rjmp	80002e10 <_handle_NMI>
	...

80002e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002e14:	c0 08       	rjmp	80002e14 <_handle_Instruction_Address>
	...

80002e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002e18:	c0 08       	rjmp	80002e18 <_handle_ITLB_Protection>
	...

80002e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80002e1c:	c0 08       	rjmp	80002e1c <_handle_Breakpoint>
	...

80002e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002e20:	c0 08       	rjmp	80002e20 <_handle_Illegal_Opcode>
	...

80002e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002e24:	c0 08       	rjmp	80002e24 <_handle_Unimplemented_Instruction>
	...

80002e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002e28:	c0 08       	rjmp	80002e28 <_handle_Privilege_Violation>
	...

80002e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80002e2c:	c0 08       	rjmp	80002e2c <_handle_Floating_Point>
	...

80002e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002e30:	c0 08       	rjmp	80002e30 <_handle_Coprocessor_Absent>
	...

80002e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002e34:	c0 08       	rjmp	80002e34 <_handle_Data_Address_Read>
	...

80002e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002e38:	c0 08       	rjmp	80002e38 <_handle_Data_Address_Write>
	...

80002e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80002e3c:	c0 08       	rjmp	80002e3c <_handle_DTLB_Protection_Read>
	...

80002e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002e40:	c0 08       	rjmp	80002e40 <_handle_DTLB_Protection_Write>
	...

80002e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002e44:	c0 08       	rjmp	80002e44 <_handle_DTLB_Modified>
	...

80002e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002e50:	c0 08       	rjmp	80002e50 <_handle_ITLB_Miss>
	...

80002e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002e60:	c0 08       	rjmp	80002e60 <_handle_DTLB_Miss_Read>
	...

80002e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002e70:	c0 08       	rjmp	80002e70 <_handle_DTLB_Miss_Write>
	...

80002f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002f00:	c0 08       	rjmp	80002f00 <_handle_Supervisor_Call>
80002f02:	d7 03       	nop

80002f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002f04:	30 0c       	mov	r12,0
80002f06:	fe b0 fc ad 	rcall	80002860 <_get_interrupt_handler>
80002f0a:	58 0c       	cp.w	r12,0
80002f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002f10:	d6 03       	rete

80002f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002f12:	30 1c       	mov	r12,1
80002f14:	fe b0 fc a6 	rcall	80002860 <_get_interrupt_handler>
80002f18:	58 0c       	cp.w	r12,0
80002f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002f1e:	d6 03       	rete

80002f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002f20:	30 2c       	mov	r12,2
80002f22:	fe b0 fc 9f 	rcall	80002860 <_get_interrupt_handler>
80002f26:	58 0c       	cp.w	r12,0
80002f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002f2c:	d6 03       	rete

80002f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002f2e:	30 3c       	mov	r12,3
80002f30:	fe b0 fc 98 	rcall	80002860 <_get_interrupt_handler>
80002f34:	58 0c       	cp.w	r12,0
80002f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002f3a:	d6 03       	rete
80002f3c:	d7 03       	nop
80002f3e:	d7 03       	nop
80002f40:	d7 03       	nop
80002f42:	d7 03       	nop
80002f44:	d7 03       	nop
80002f46:	d7 03       	nop
80002f48:	d7 03       	nop
80002f4a:	d7 03       	nop
80002f4c:	d7 03       	nop
80002f4e:	d7 03       	nop
80002f50:	d7 03       	nop
80002f52:	d7 03       	nop
80002f54:	d7 03       	nop
80002f56:	d7 03       	nop
80002f58:	d7 03       	nop
80002f5a:	d7 03       	nop
80002f5c:	d7 03       	nop
80002f5e:	d7 03       	nop
80002f60:	d7 03       	nop
80002f62:	d7 03       	nop
80002f64:	d7 03       	nop
80002f66:	d7 03       	nop
80002f68:	d7 03       	nop
80002f6a:	d7 03       	nop
80002f6c:	d7 03       	nop
80002f6e:	d7 03       	nop
80002f70:	d7 03       	nop
80002f72:	d7 03       	nop
80002f74:	d7 03       	nop
80002f76:	d7 03       	nop
80002f78:	d7 03       	nop
80002f7a:	d7 03       	nop
80002f7c:	d7 03       	nop
80002f7e:	d7 03       	nop
80002f80:	d7 03       	nop
80002f82:	d7 03       	nop
80002f84:	d7 03       	nop
80002f86:	d7 03       	nop
80002f88:	d7 03       	nop
80002f8a:	d7 03       	nop
80002f8c:	d7 03       	nop
80002f8e:	d7 03       	nop
80002f90:	d7 03       	nop
80002f92:	d7 03       	nop
80002f94:	d7 03       	nop
80002f96:	d7 03       	nop
80002f98:	d7 03       	nop
80002f9a:	d7 03       	nop
80002f9c:	d7 03       	nop
80002f9e:	d7 03       	nop
80002fa0:	d7 03       	nop
80002fa2:	d7 03       	nop
80002fa4:	d7 03       	nop
80002fa6:	d7 03       	nop
80002fa8:	d7 03       	nop
80002faa:	d7 03       	nop
80002fac:	d7 03       	nop
80002fae:	d7 03       	nop
80002fb0:	d7 03       	nop
80002fb2:	d7 03       	nop
80002fb4:	d7 03       	nop
80002fb6:	d7 03       	nop
80002fb8:	d7 03       	nop
80002fba:	d7 03       	nop
80002fbc:	d7 03       	nop
80002fbe:	d7 03       	nop
80002fc0:	d7 03       	nop
80002fc2:	d7 03       	nop
80002fc4:	d7 03       	nop
80002fc6:	d7 03       	nop
80002fc8:	d7 03       	nop
80002fca:	d7 03       	nop
80002fcc:	d7 03       	nop
80002fce:	d7 03       	nop
80002fd0:	d7 03       	nop
80002fd2:	d7 03       	nop
80002fd4:	d7 03       	nop
80002fd6:	d7 03       	nop
80002fd8:	d7 03       	nop
80002fda:	d7 03       	nop
80002fdc:	d7 03       	nop
80002fde:	d7 03       	nop
80002fe0:	d7 03       	nop
80002fe2:	d7 03       	nop
80002fe4:	d7 03       	nop
80002fe6:	d7 03       	nop
80002fe8:	d7 03       	nop
80002fea:	d7 03       	nop
80002fec:	d7 03       	nop
80002fee:	d7 03       	nop
80002ff0:	d7 03       	nop
80002ff2:	d7 03       	nop
80002ff4:	d7 03       	nop
80002ff6:	d7 03       	nop
80002ff8:	d7 03       	nop
80002ffa:	d7 03       	nop
80002ffc:	d7 03       	nop
80002ffe:	d7 03       	nop
